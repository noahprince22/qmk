   1               		.file	"action_macro.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.action_macro_play,"ax",@progbits
  11               	.global	action_macro_play
  13               	action_macro_play:
  14               	.LFB13:
  15               		.file 1 "./tmk_core/common/action_macro.c"
   1:./tmk_core/common/action_macro.c **** /*
   2:./tmk_core/common/action_macro.c **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/action_macro.c **** 
   4:./tmk_core/common/action_macro.c **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/action_macro.c **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/action_macro.c **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/action_macro.c **** (at your option) any later version.
   8:./tmk_core/common/action_macro.c **** 
   9:./tmk_core/common/action_macro.c **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/action_macro.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/action_macro.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/action_macro.c **** GNU General Public License for more details.
  13:./tmk_core/common/action_macro.c **** 
  14:./tmk_core/common/action_macro.c **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/action_macro.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/action_macro.c **** */
  17:./tmk_core/common/action_macro.c **** #include "action.h"
  18:./tmk_core/common/action_macro.c **** #include "action_util.h"
  19:./tmk_core/common/action_macro.c **** #include "action_macro.h"
  20:./tmk_core/common/action_macro.c **** #include "wait.h"
  21:./tmk_core/common/action_macro.c **** 
  22:./tmk_core/common/action_macro.c **** #ifdef DEBUG_ACTION
  23:./tmk_core/common/action_macro.c **** #include "debug.h"
  24:./tmk_core/common/action_macro.c **** #else
  25:./tmk_core/common/action_macro.c **** #include "nodebug.h"
  26:./tmk_core/common/action_macro.c **** #endif
  27:./tmk_core/common/action_macro.c **** 
  28:./tmk_core/common/action_macro.c **** 
  29:./tmk_core/common/action_macro.c **** #ifndef NO_ACTION_MACRO
  30:./tmk_core/common/action_macro.c **** 
  31:./tmk_core/common/action_macro.c **** #define MACRO_READ()  (macro = MACRO_GET(macro_p++))
  32:./tmk_core/common/action_macro.c **** /** \brief Action Macro Play
  33:./tmk_core/common/action_macro.c ****  *
  34:./tmk_core/common/action_macro.c ****  * FIXME: Needs doc
  35:./tmk_core/common/action_macro.c ****  */
  36:./tmk_core/common/action_macro.c **** void action_macro_play(const macro_t *macro_p)
  37:./tmk_core/common/action_macro.c **** {
  16               		.loc 1 37 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 EF92      		push r14
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 14, -2
  23 0002 FF92      		push r15
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 15, -3
  27 0004 0F93      		push r16
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 16, -4
  31 0006 1F93      		push r17
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 17, -5
  35 0008 CF93      		push r28
  36               	.LCFI4:
  37               		.cfi_def_cfa_offset 7
  38               		.cfi_offset 28, -6
  39 000a DF93      		push r29
  40               	.LCFI5:
  41               		.cfi_def_cfa_offset 8
  42               		.cfi_offset 29, -7
  43               	/* prologue: function */
  44               	/* frame size = 0 */
  45               	/* stack size = 6 */
  46               	.L__stack_usage = 6
  47 000c 9C01      		movw r18,r24
  48               	.LVL1:
  38:./tmk_core/common/action_macro.c ****     macro_t macro = END;
  39:./tmk_core/common/action_macro.c ****     uint8_t interval = 0;
  40:./tmk_core/common/action_macro.c **** 
  41:./tmk_core/common/action_macro.c ****     if (!macro_p) return;
  49               		.loc 1 41 0
  50 000e 0097      		sbiw r24,0
  51 0010 01F4      		brne .+2
  52 0012 00C0      		rjmp .L1
  53 0014 F12C      		mov r15,__zero_reg__
  42:./tmk_core/common/action_macro.c ****     while (true) {
  43:./tmk_core/common/action_macro.c ****         switch (MACRO_READ()) {
  44:./tmk_core/common/action_macro.c ****             case KEY_DOWN:
  45:./tmk_core/common/action_macro.c ****                 MACRO_READ();
  46:./tmk_core/common/action_macro.c ****                 dprintf("KEY_DOWN(%02X)\n", macro);
  47:./tmk_core/common/action_macro.c ****                 if (IS_MOD(macro)) {
  48:./tmk_core/common/action_macro.c ****                     add_macro_mods(MOD_BIT(macro));
  54               		.loc 1 48 0
  55 0016 EE24      		clr r14
  56 0018 E394      		inc r14
  57               	.LVL2:
  58               	.L17:
  59               	.LBB13:
  43:./tmk_core/common/action_macro.c ****         switch (MACRO_READ()) {
  60               		.loc 1 43 0
  61 001a E901      		movw r28,r18
  62 001c 2196      		adiw r28,1
  63               	.LVL3:
  64 001e F901      		movw r30,r18
  65               	/* #APP */
  66               	 ;  43 "./tmk_core/common/action_macro.c" 1
  67 0020 8491      		lpm r24, Z
  68               		
  69               	 ;  0 "" 2
  70               	.LVL4:
  71               	/* #NOAPP */
  72               	.LBE13:
  73 0022 8437      		cpi r24,lo8(116)
  74 0024 00F4      		brsh .L3
  75 0026 8430      		cpi r24,lo8(4)
  76 0028 00F0      		brlo .+2
  77 002a 00C0      		rjmp .L4
  78 002c 8130      		cpi r24,lo8(1)
  79 002e 01F0      		breq .L5
  80 0030 8230      		cpi r24,lo8(2)
  81 0032 01F0      		breq .L6
  82 0034 00C0      		rjmp .L1
  83               	.L3:
  84 0036 8537      		cpi r24,lo8(117)
  85 0038 01F4      		brne .+2
  86 003a 00C0      		rjmp .L7
  87 003c 00F0      		brlo .L8
  88 003e 9CE7      		ldi r25,lo8(124)
  89 0040 980F      		add r25,r24
  90 0042 9037      		cpi r25,lo8(112)
  91 0044 00F0      		brlo .+2
  92 0046 00C0      		rjmp .L1
  49:./tmk_core/common/action_macro.c ****                     send_keyboard_report();
  50:./tmk_core/common/action_macro.c ****                 } else {
  51:./tmk_core/common/action_macro.c ****                     register_code(macro);
  52:./tmk_core/common/action_macro.c ****                 }
  53:./tmk_core/common/action_macro.c ****                 break;
  54:./tmk_core/common/action_macro.c ****             case KEY_UP:
  55:./tmk_core/common/action_macro.c ****                 MACRO_READ();
  56:./tmk_core/common/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
  57:./tmk_core/common/action_macro.c ****                 if (IS_MOD(macro)) {
  58:./tmk_core/common/action_macro.c ****                     del_macro_mods(MOD_BIT(macro));
  59:./tmk_core/common/action_macro.c ****                     send_keyboard_report();
  60:./tmk_core/common/action_macro.c ****                 } else {
  61:./tmk_core/common/action_macro.c ****                     unregister_code(macro);
  62:./tmk_core/common/action_macro.c ****                 }
  63:./tmk_core/common/action_macro.c ****                 break;
  64:./tmk_core/common/action_macro.c ****             case WAIT:
  65:./tmk_core/common/action_macro.c ****                 MACRO_READ();
  66:./tmk_core/common/action_macro.c ****                 dprintf("WAIT(%u)\n", macro);
  67:./tmk_core/common/action_macro.c ****                 { uint8_t ms = macro; while (ms--) wait_ms(1); }
  68:./tmk_core/common/action_macro.c ****                 break;
  69:./tmk_core/common/action_macro.c ****             case INTERVAL:
  70:./tmk_core/common/action_macro.c ****                 interval = MACRO_READ();
  71:./tmk_core/common/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
  72:./tmk_core/common/action_macro.c ****                 break;
  73:./tmk_core/common/action_macro.c ****             case 0x04 ... 0x73:
  74:./tmk_core/common/action_macro.c ****                 dprintf("DOWN(%02X)\n", macro);
  75:./tmk_core/common/action_macro.c ****                 register_code(macro);
  76:./tmk_core/common/action_macro.c ****                 break;
  77:./tmk_core/common/action_macro.c ****             case 0x84 ... 0xF3:
  78:./tmk_core/common/action_macro.c ****                 dprintf("UP(%02X)\n", macro);
  79:./tmk_core/common/action_macro.c ****                 unregister_code(macro&0x7F);
  93               		.loc 1 79 0
  94 0048 8F77      		andi r24,lo8(127)
  95               	.LVL5:
  96 004a 0E94 0000 		call unregister_code
  97               	.LVL6:
  80:./tmk_core/common/action_macro.c ****                 break;
  98               		.loc 1 80 0
  99 004e 00C0      		rjmp .L11
 100               	.LVL7:
 101               	.L5:
 102               	.LBB14:
  45:./tmk_core/common/action_macro.c ****                 MACRO_READ();
 103               		.loc 1 45 0
 104 0050 8901      		movw r16,r18
 105 0052 0E5F      		subi r16,-2
 106 0054 1F4F      		sbci r17,-1
 107               	.LVL8:
 108 0056 FE01      		movw r30,r28
 109               	/* #APP */
 110               	 ;  45 "./tmk_core/common/action_macro.c" 1
 111 0058 8491      		lpm r24, Z
 112               		
 113               	 ;  0 "" 2
 114               	.LVL9:
 115               	/* #NOAPP */
 116               	.LBE14:
  47:./tmk_core/common/action_macro.c ****                 if (IS_MOD(macro)) {
 117               		.loc 1 47 0
 118 005a 90E2      		ldi r25,lo8(32)
 119 005c 980F      		add r25,r24
 120 005e 9830      		cpi r25,lo8(8)
 121 0060 00F4      		brsh .L10
  48:./tmk_core/common/action_macro.c ****                     add_macro_mods(MOD_BIT(macro));
 122               		.loc 1 48 0
 123 0062 8770      		andi r24,lo8(7)
 124               	.LVL10:
 125 0064 FE2D      		mov r31,r14
 126 0066 00C0      		rjmp 2f
 127               		1:
 128 0068 FF0F      		lsl r31
 129               		2:
 130 006a 8A95      		dec r24
 131 006c 02F4      		brpl 1b
 132 006e 8F2F      		mov r24,r31
 133 0070 0E94 0000 		call add_macro_mods
 134               	.LVL11:
 135 0074 00C0      		rjmp .L22
 136               	.LVL12:
 137               	.L10:
  51:./tmk_core/common/action_macro.c ****                     register_code(macro);
 138               		.loc 1 51 0
 139 0076 0E94 0000 		call register_code
 140               	.LVL13:
 141 007a 00C0      		rjmp .L23
 142               	.LVL14:
 143               	.L6:
 144               	.LBB15:
  55:./tmk_core/common/action_macro.c ****                 MACRO_READ();
 145               		.loc 1 55 0
 146 007c 8901      		movw r16,r18
 147 007e 0E5F      		subi r16,-2
 148 0080 1F4F      		sbci r17,-1
 149               	.LVL15:
 150 0082 FE01      		movw r30,r28
 151               	/* #APP */
 152               	 ;  55 "./tmk_core/common/action_macro.c" 1
 153 0084 8491      		lpm r24, Z
 154               		
 155               	 ;  0 "" 2
 156               	.LVL16:
 157               	/* #NOAPP */
 158               	.LBE15:
  57:./tmk_core/common/action_macro.c ****                 if (IS_MOD(macro)) {
 159               		.loc 1 57 0
 160 0086 90E2      		ldi r25,lo8(32)
 161 0088 980F      		add r25,r24
 162 008a 9830      		cpi r25,lo8(8)
 163 008c 00F4      		brsh .L12
  58:./tmk_core/common/action_macro.c ****                     del_macro_mods(MOD_BIT(macro));
 164               		.loc 1 58 0
 165 008e 8770      		andi r24,lo8(7)
 166               	.LVL17:
 167 0090 FE2D      		mov r31,r14
 168 0092 00C0      		rjmp 2f
 169               		1:
 170 0094 FF0F      		lsl r31
 171               		2:
 172 0096 8A95      		dec r24
 173 0098 02F4      		brpl 1b
 174 009a 8F2F      		mov r24,r31
 175 009c 0E94 0000 		call del_macro_mods
 176               	.LVL18:
 177               	.L22:
  59:./tmk_core/common/action_macro.c ****                     send_keyboard_report();
 178               		.loc 1 59 0
 179 00a0 0E94 0000 		call send_keyboard_report
 180               	.LVL19:
 181               	.L23:
 182               	.LBB16:
  55:./tmk_core/common/action_macro.c ****                 MACRO_READ();
 183               		.loc 1 55 0
 184 00a4 E801      		movw r28,r16
 185               	.LVL20:
 186               	.LBE16:
 187 00a6 00C0      		rjmp .L11
 188               	.LVL21:
 189               	.L12:
  61:./tmk_core/common/action_macro.c ****                     unregister_code(macro);
 190               		.loc 1 61 0
 191 00a8 0E94 0000 		call unregister_code
 192               	.LVL22:
 193 00ac 00C0      		rjmp .L23
 194               	.LVL23:
 195               	.L8:
 196               	.LBB17:
  65:./tmk_core/common/action_macro.c ****                 MACRO_READ();
 197               		.loc 1 65 0
 198 00ae 2E5F      		subi r18,-2
 199 00b0 3F4F      		sbci r19,-1
 200               	.LVL24:
 201 00b2 FE01      		movw r30,r28
 202               	.LVL25:
 203               	/* #APP */
 204               	 ;  65 "./tmk_core/common/action_macro.c" 1
 205 00b4 C491      		lpm r28, Z
 206               		
 207               	 ;  0 "" 2
 208               	.LVL26:
 209               	/* #NOAPP */
 210               	.L13:
 211               	.LBE17:
 212               	.LBB18:
  67:./tmk_core/common/action_macro.c ****                 { uint8_t ms = macro; while (ms--) wait_ms(1); }
 213               		.loc 1 67 0 discriminator 1
 214 00b6 CC23      		tst r28
 215 00b8 01F0      		breq .L25
 216               	.LVL27:
 217               	.LBB19:
 218               	.LBB20:
 219               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/lib/avr/include/util/delay.h **** 
 153:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/lib/avr/include/util/delay.h **** 
 156:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/lib/avr/include/util/delay.h **** 
 159:/usr/lib/avr/include/util/delay.h **** 	#else
 160:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 161:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/lib/avr/include/util/delay.h **** 	#endif
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 220               		.loc 2 164 0
 221 00ba 8FE9      		ldi r24,lo8(3999)
 222 00bc 9FE0      		ldi r25,hi8(3999)
 223 00be 0197      		1: sbiw r24,1
 224 00c0 01F4      		brne 1b
 225 00c2 00C0      		rjmp .
 226 00c4 0000      		nop
 227 00c6 C150      		subi r28,lo8(-(-1))
 228               	.LVL28:
 229 00c8 00C0      		rjmp .L13
 230               	.LVL29:
 231               	.L25:
 232               	.LBE20:
 233               	.LBE19:
 234               	.LBE18:
 235               	.LBB21:
  65:./tmk_core/common/action_macro.c ****                 MACRO_READ();
 236               		.loc 1 65 0
 237 00ca E901      		movw r28,r18
 238               	.LVL30:
 239 00cc 00C0      		rjmp .L11
 240               	.LVL31:
 241               	.L7:
 242               	.LBE21:
 243               	.LBB22:
  70:./tmk_core/common/action_macro.c ****                 interval = MACRO_READ();
 244               		.loc 1 70 0
 245 00ce FE01      		movw r30,r28
 246               	/* #APP */
 247               	 ;  70 "./tmk_core/common/action_macro.c" 1
 248 00d0 F490      		lpm r15, Z
 249               		
 250               	 ;  0 "" 2
 251               	.LVL32:
 252               	/* #NOAPP */
 253 00d2 E901      		movw r28,r18
 254               	.LVL33:
 255 00d4 2296      		adiw r28,2
 256               	.LVL34:
 257               	.LBE22:
  72:./tmk_core/common/action_macro.c ****                 break;
 258               		.loc 1 72 0
 259 00d6 00C0      		rjmp .L11
 260               	.LVL35:
 261               	.L4:
  75:./tmk_core/common/action_macro.c ****                 register_code(macro);
 262               		.loc 1 75 0
 263 00d8 0E94 0000 		call register_code
 264               	.LVL36:
 265               	.L11:
 266               	.LBB23:
  81:./tmk_core/common/action_macro.c ****             case END:
  82:./tmk_core/common/action_macro.c ****             default:
  83:./tmk_core/common/action_macro.c ****                 return;
  84:./tmk_core/common/action_macro.c ****         }
  85:./tmk_core/common/action_macro.c ****         // interval
  86:./tmk_core/common/action_macro.c ****         { uint8_t ms = interval; while (ms--) wait_ms(1); }
 267               		.loc 1 86 0
 268 00dc 8F2D      		mov r24,r15
 269               	.LVL37:
 270               	.L15:
 271               		.loc 1 86 0 is_stmt 0 discriminator 1
 272 00de 8823      		tst r24
 273 00e0 01F0      		breq .L26
 274               	.LVL38:
 275               	.LBB24:
 276               	.LBB25:
 277               		.loc 2 164 0 is_stmt 1
 278 00e2 EFE9      		ldi r30,lo8(3999)
 279 00e4 FFE0      		ldi r31,hi8(3999)
 280 00e6 3197      		1: sbiw r30,1
 281 00e8 01F4      		brne 1b
 282 00ea 00C0      		rjmp .
 283 00ec 0000      		nop
 284 00ee 8150      		subi r24,lo8(-(-1))
 285               	.LVL39:
 286 00f0 00C0      		rjmp .L15
 287               	.LVL40:
 288               	.L26:
 289               	.LBE25:
 290               	.LBE24:
 291               		.loc 1 86 0
 292 00f2 9E01      		movw r18,r28
 293 00f4 00C0      		rjmp .L17
 294               	.LVL41:
 295               	.L1:
 296               	/* epilogue start */
 297               	.LBE23:
  87:./tmk_core/common/action_macro.c ****     }
  88:./tmk_core/common/action_macro.c **** }
 298               		.loc 1 88 0
 299 00f6 DF91      		pop r29
 300 00f8 CF91      		pop r28
 301 00fa 1F91      		pop r17
 302 00fc 0F91      		pop r16
 303 00fe FF90      		pop r15
 304 0100 EF90      		pop r14
 305 0102 0895      		ret
 306               		.cfi_endproc
 307               	.LFE13:
 309               		.text
 310               	.Letext0:
 311               		.file 3 "/usr/lib/avr/include/stdint.h"
 312               		.file 4 "./tmk_core/common/action_macro.h"
 313               		.file 5 "./tmk_core/common/keycode.h"
 314               		.file 6 "./tmk_core/common/report.h"
 315               		.file 7 "./tmk_core/common/action.h"
 316               		.file 8 "./tmk_core/common/action_util.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action_macro.c
     /tmp/ccZRH9B2.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccZRH9B2.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccZRH9B2.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccZRH9B2.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccZRH9B2.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccZRH9B2.s:13     .text.action_macro_play:0000000000000000 action_macro_play

UNDEFINED SYMBOLS
unregister_code
add_macro_mods
register_code
del_macro_mods
send_keyboard_report
