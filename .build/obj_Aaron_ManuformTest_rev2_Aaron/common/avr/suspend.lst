   1               		.file	"suspend.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.suspend_idle,"ax",@progbits
  11               	.global	suspend_idle
  13               	suspend_idle:
  14               	.LFB104:
  15               		.file 1 "./tmk_core/common/avr/suspend.c"
   1:./tmk_core/common/avr/suspend.c **** #include <stdbool.h>
   2:./tmk_core/common/avr/suspend.c **** #include <avr/sleep.h>
   3:./tmk_core/common/avr/suspend.c **** #include <avr/wdt.h>
   4:./tmk_core/common/avr/suspend.c **** #include <avr/interrupt.h>
   5:./tmk_core/common/avr/suspend.c **** #include "matrix.h"
   6:./tmk_core/common/avr/suspend.c **** #include "action.h"
   7:./tmk_core/common/avr/suspend.c **** #include "backlight.h"
   8:./tmk_core/common/avr/suspend.c **** #include "suspend_avr.h"
   9:./tmk_core/common/avr/suspend.c **** #include "suspend.h"
  10:./tmk_core/common/avr/suspend.c **** #include "timer.h"
  11:./tmk_core/common/avr/suspend.c **** #include "led.h"
  12:./tmk_core/common/avr/suspend.c **** #include "host.h"
  13:./tmk_core/common/avr/suspend.c **** 
  14:./tmk_core/common/avr/suspend.c **** #ifdef PROTOCOL_LUFA
  15:./tmk_core/common/avr/suspend.c **** 	#include "lufa.h"
  16:./tmk_core/common/avr/suspend.c **** #endif
  17:./tmk_core/common/avr/suspend.c **** 
  18:./tmk_core/common/avr/suspend.c **** #ifdef AUDIO_ENABLE
  19:./tmk_core/common/avr/suspend.c ****     #include "audio.h"
  20:./tmk_core/common/avr/suspend.c **** #endif /* AUDIO_ENABLE */
  21:./tmk_core/common/avr/suspend.c **** 
  22:./tmk_core/common/avr/suspend.c **** #ifdef RGBLIGHT_SLEEP
  23:./tmk_core/common/avr/suspend.c ****   #include "rgblight.h"
  24:./tmk_core/common/avr/suspend.c **** #endif
  25:./tmk_core/common/avr/suspend.c **** 
  26:./tmk_core/common/avr/suspend.c **** 
  27:./tmk_core/common/avr/suspend.c **** #define wdt_intr_enable(value)   \
  28:./tmk_core/common/avr/suspend.c **** __asm__ __volatile__ (  \
  29:./tmk_core/common/avr/suspend.c ****     "in __tmp_reg__,__SREG__" "\n\t"    \
  30:./tmk_core/common/avr/suspend.c ****     "cli" "\n\t"    \
  31:./tmk_core/common/avr/suspend.c ****     "wdr" "\n\t"    \
  32:./tmk_core/common/avr/suspend.c ****     "sts %0,%1" "\n\t"  \
  33:./tmk_core/common/avr/suspend.c ****     "out __SREG__,__tmp_reg__" "\n\t"   \
  34:./tmk_core/common/avr/suspend.c ****     "sts %0,%2" "\n\t" \
  35:./tmk_core/common/avr/suspend.c ****     : /* no outputs */  \
  36:./tmk_core/common/avr/suspend.c ****     : "M" (_SFR_MEM_ADDR(_WD_CONTROL_REG)), \
  37:./tmk_core/common/avr/suspend.c ****     "r" (_BV(_WD_CHANGE_BIT) | _BV(WDE)), \
  38:./tmk_core/common/avr/suspend.c ****     "r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) | \
  39:./tmk_core/common/avr/suspend.c ****         _BV(WDIE) | (value & 0x07)) ) \
  40:./tmk_core/common/avr/suspend.c ****     : "r0"  \
  41:./tmk_core/common/avr/suspend.c **** )
  42:./tmk_core/common/avr/suspend.c **** 
  43:./tmk_core/common/avr/suspend.c **** 
  44:./tmk_core/common/avr/suspend.c **** /** \brief Suspend idle
  45:./tmk_core/common/avr/suspend.c ****  *
  46:./tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
  47:./tmk_core/common/avr/suspend.c ****  */
  48:./tmk_core/common/avr/suspend.c **** void suspend_idle(uint8_t time)
  49:./tmk_core/common/avr/suspend.c **** {
  16               		.loc 1 49 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  50:./tmk_core/common/avr/suspend.c ****     cli();
  23               		.loc 1 50 0
  24               	/* #APP */
  25               	 ;  50 "./tmk_core/common/avr/suspend.c" 1
  26 0000 F894      		cli
  27               	 ;  0 "" 2
  51:./tmk_core/common/avr/suspend.c ****     set_sleep_mode(SLEEP_MODE_IDLE);
  28               		.loc 1 51 0
  29               	/* #NOAPP */
  30 0002 83B7      		in r24,0x33
  31               	.LVL1:
  32 0004 817F      		andi r24,lo8(-15)
  33 0006 83BF      		out 0x33,r24
  52:./tmk_core/common/avr/suspend.c ****     sleep_enable();
  34               		.loc 1 52 0
  35 0008 83B7      		in r24,0x33
  36 000a 8160      		ori r24,lo8(1)
  37 000c 83BF      		out 0x33,r24
  53:./tmk_core/common/avr/suspend.c ****     sei();
  38               		.loc 1 53 0
  39               	/* #APP */
  40               	 ;  53 "./tmk_core/common/avr/suspend.c" 1
  41 000e 7894      		sei
  42               	 ;  0 "" 2
  54:./tmk_core/common/avr/suspend.c ****     sleep_cpu();
  43               		.loc 1 54 0
  44               	 ;  54 "./tmk_core/common/avr/suspend.c" 1
  45 0010 8895      		sleep
  46               		
  47               	 ;  0 "" 2
  55:./tmk_core/common/avr/suspend.c ****     sleep_disable();
  48               		.loc 1 55 0
  49               	/* #NOAPP */
  50 0012 83B7      		in r24,0x33
  51 0014 8E7F      		andi r24,lo8(-2)
  52 0016 83BF      		out 0x33,r24
  53 0018 0895      		ret
  54               		.cfi_endproc
  55               	.LFE104:
  57               		.section	.text.suspend_power_down,"ax",@progbits
  58               	.global	suspend_power_down
  60               	suspend_power_down:
  61               	.LFB106:
  56:./tmk_core/common/avr/suspend.c **** }
  57:./tmk_core/common/avr/suspend.c **** 
  58:./tmk_core/common/avr/suspend.c **** #ifndef NO_SUSPEND_POWER_DOWN
  59:./tmk_core/common/avr/suspend.c **** /** \brief Power down MCU with watchdog timer
  60:./tmk_core/common/avr/suspend.c ****  *
  61:./tmk_core/common/avr/suspend.c ****  * wdto: watchdog timer timeout defined in <avr/wdt.h>
  62:./tmk_core/common/avr/suspend.c ****  *          WDTO_15MS
  63:./tmk_core/common/avr/suspend.c ****  *          WDTO_30MS
  64:./tmk_core/common/avr/suspend.c ****  *          WDTO_60MS
  65:./tmk_core/common/avr/suspend.c ****  *          WDTO_120MS
  66:./tmk_core/common/avr/suspend.c ****  *          WDTO_250MS
  67:./tmk_core/common/avr/suspend.c ****  *          WDTO_500MS
  68:./tmk_core/common/avr/suspend.c ****  *          WDTO_1S
  69:./tmk_core/common/avr/suspend.c ****  *          WDTO_2S
  70:./tmk_core/common/avr/suspend.c ****  *          WDTO_4S
  71:./tmk_core/common/avr/suspend.c ****  *          WDTO_8S
  72:./tmk_core/common/avr/suspend.c ****  */
  73:./tmk_core/common/avr/suspend.c **** static uint8_t wdt_timeout = 0;
  74:./tmk_core/common/avr/suspend.c **** 
  75:./tmk_core/common/avr/suspend.c **** /** \brief Power down
  76:./tmk_core/common/avr/suspend.c ****  *
  77:./tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
  78:./tmk_core/common/avr/suspend.c ****  */
  79:./tmk_core/common/avr/suspend.c **** static void power_down(uint8_t wdto)
  80:./tmk_core/common/avr/suspend.c **** {
  81:./tmk_core/common/avr/suspend.c **** #ifdef PROTOCOL_LUFA
  82:./tmk_core/common/avr/suspend.c ****     if (USB_DeviceState == DEVICE_STATE_Configured) return;
  83:./tmk_core/common/avr/suspend.c **** #endif
  84:./tmk_core/common/avr/suspend.c ****     wdt_timeout = wdto;
  85:./tmk_core/common/avr/suspend.c **** 
  86:./tmk_core/common/avr/suspend.c ****     // Watchdog Interrupt Mode
  87:./tmk_core/common/avr/suspend.c ****     wdt_intr_enable(wdto);
  88:./tmk_core/common/avr/suspend.c **** 
  89:./tmk_core/common/avr/suspend.c **** #ifdef BACKLIGHT_ENABLE
  90:./tmk_core/common/avr/suspend.c **** 	backlight_set(0);
  91:./tmk_core/common/avr/suspend.c **** #endif
  92:./tmk_core/common/avr/suspend.c **** 
  93:./tmk_core/common/avr/suspend.c **** 	// Turn off LED indicators
  94:./tmk_core/common/avr/suspend.c **** 	led_set(0);
  95:./tmk_core/common/avr/suspend.c **** 
  96:./tmk_core/common/avr/suspend.c **** 	#ifdef AUDIO_ENABLE
  97:./tmk_core/common/avr/suspend.c ****         // This sometimes disables the start-up noise, so it's been disabled
  98:./tmk_core/common/avr/suspend.c **** 		// stop_all_notes();
  99:./tmk_core/common/avr/suspend.c **** 	#endif /* AUDIO_ENABLE */
 100:./tmk_core/common/avr/suspend.c **** #ifdef RGBLIGHT_SLEEP
 101:./tmk_core/common/avr/suspend.c **** #ifdef RGBLIGHT_ANIMATIONS
 102:./tmk_core/common/avr/suspend.c ****   rgblight_timer_disable();
 103:./tmk_core/common/avr/suspend.c **** #endif
 104:./tmk_core/common/avr/suspend.c ****   rgblight_disable();
 105:./tmk_core/common/avr/suspend.c **** #endif
 106:./tmk_core/common/avr/suspend.c ****     // TODO: more power saving
 107:./tmk_core/common/avr/suspend.c ****     // See PicoPower application note
 108:./tmk_core/common/avr/suspend.c ****     // - I/O port input with pullup
 109:./tmk_core/common/avr/suspend.c ****     // - prescale clock
 110:./tmk_core/common/avr/suspend.c ****     // - BOD disable
 111:./tmk_core/common/avr/suspend.c ****     // - Power Reduction Register PRR
 112:./tmk_core/common/avr/suspend.c ****     set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 113:./tmk_core/common/avr/suspend.c ****     sleep_enable();
 114:./tmk_core/common/avr/suspend.c ****     sei();
 115:./tmk_core/common/avr/suspend.c ****     sleep_cpu();
 116:./tmk_core/common/avr/suspend.c ****     sleep_disable();
 117:./tmk_core/common/avr/suspend.c **** 
 118:./tmk_core/common/avr/suspend.c ****     // Disable watchdog after sleep
 119:./tmk_core/common/avr/suspend.c ****     wdt_disable();
 120:./tmk_core/common/avr/suspend.c **** }
 121:./tmk_core/common/avr/suspend.c **** #endif
 122:./tmk_core/common/avr/suspend.c **** 
 123:./tmk_core/common/avr/suspend.c **** /** \brief Suspend power down
 124:./tmk_core/common/avr/suspend.c ****  *
 125:./tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
 126:./tmk_core/common/avr/suspend.c ****  */
 127:./tmk_core/common/avr/suspend.c **** void suspend_power_down(void)
 128:./tmk_core/common/avr/suspend.c **** {
  62               		.loc 1 128 0
  63               		.cfi_startproc
  64               	/* prologue: function */
  65               	/* frame size = 0 */
  66               	/* stack size = 0 */
  67               	.L__stack_usage = 0
  68               	.LVL2:
  69               	.LBB4:
  70               	.LBB5:
  82:./tmk_core/common/avr/suspend.c ****     if (USB_DeviceState == DEVICE_STATE_Configured) return;
  71               		.loc 1 82 0
  72 0000 8091 0000 		lds r24,USB_DeviceState
  73 0004 8430      		cpi r24,lo8(4)
  74 0006 01F0      		breq .L2
  84:./tmk_core/common/avr/suspend.c ****     wdt_timeout = wdto;
  75               		.loc 1 84 0
  76 0008 1092 0000 		sts wdt_timeout,__zero_reg__
  87:./tmk_core/common/avr/suspend.c ****     wdt_intr_enable(wdto);
  77               		.loc 1 87 0
  78 000c 20E4      		ldi r18,lo8(64)
  79 000e 88E1      		ldi r24,lo8(24)
  80 0010 90E0      		ldi r25,0
  81               	/* #APP */
  82               	 ;  87 "./tmk_core/common/avr/suspend.c" 1
  83 0012 0FB6      		in __tmp_reg__,__SREG__
  84 0014 F894      		cli
  85 0016 A895      		wdr
  86 0018 8093 6000 		sts 96,r24
  87 001c 0FBE      		out __SREG__,__tmp_reg__
  88 001e 2093 6000 		sts 96,r18
  89               		
  90               	 ;  0 "" 2
  94:./tmk_core/common/avr/suspend.c **** 	led_set(0);
  91               		.loc 1 94 0
  92               	/* #NOAPP */
  93 0022 80E0      		ldi r24,0
  94 0024 0E94 0000 		call led_set
  95               	.LVL3:
 112:./tmk_core/common/avr/suspend.c ****     set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  96               		.loc 1 112 0
  97 0028 83B7      		in r24,0x33
  98 002a 817F      		andi r24,lo8(-15)
  99 002c 8460      		ori r24,lo8(4)
 100 002e 83BF      		out 0x33,r24
 113:./tmk_core/common/avr/suspend.c ****     sleep_enable();
 101               		.loc 1 113 0
 102 0030 83B7      		in r24,0x33
 103 0032 8160      		ori r24,lo8(1)
 104 0034 83BF      		out 0x33,r24
 114:./tmk_core/common/avr/suspend.c ****     sei();
 105               		.loc 1 114 0
 106               	/* #APP */
 107               	 ;  114 "./tmk_core/common/avr/suspend.c" 1
 108 0036 7894      		sei
 109               	 ;  0 "" 2
 115:./tmk_core/common/avr/suspend.c ****     sleep_cpu();
 110               		.loc 1 115 0
 111               	 ;  115 "./tmk_core/common/avr/suspend.c" 1
 112 0038 8895      		sleep
 113               		
 114               	 ;  0 "" 2
 116:./tmk_core/common/avr/suspend.c ****     sleep_disable();
 115               		.loc 1 116 0
 116               	/* #NOAPP */
 117 003a 83B7      		in r24,0x33
 118 003c 8E7F      		andi r24,lo8(-2)
 119 003e 83BF      		out 0x33,r24
 119:./tmk_core/common/avr/suspend.c ****     wdt_disable();
 120               		.loc 1 119 0
 121 0040 88E1      		ldi r24,lo8(24)
 122               	/* #APP */
 123               	 ;  119 "./tmk_core/common/avr/suspend.c" 1
 124 0042 0FB6      		in __tmp_reg__, __SREG__
 125 0044 F894      		cli
 126 0046 8093 6000 		sts 96, r24
 127 004a 1092 6000 		sts 96, __zero_reg__
 128 004e 0FBE      		out __SREG__,__tmp_reg__
 129               		
 130               	 ;  0 "" 2
 131               	/* #NOAPP */
 132               	.L2:
 133 0050 0895      		ret
 134               	.LBE5:
 135               	.LBE4:
 136               		.cfi_endproc
 137               	.LFE106:
 139               		.section	.text.matrix_power_up,"ax",@progbits
 140               		.weak	matrix_power_up
 142               	matrix_power_up:
 143               	.LFB107:
 129:./tmk_core/common/avr/suspend.c **** #ifndef NO_SUSPEND_POWER_DOWN
 130:./tmk_core/common/avr/suspend.c ****     power_down(WDTO_15MS);
 131:./tmk_core/common/avr/suspend.c **** #endif
 132:./tmk_core/common/avr/suspend.c **** }
 133:./tmk_core/common/avr/suspend.c **** 
 134:./tmk_core/common/avr/suspend.c **** __attribute__ ((weak)) void matrix_power_up(void) {}
 144               		.loc 1 134 0
 145               		.cfi_startproc
 146               	/* prologue: function */
 147               	/* frame size = 0 */
 148               	/* stack size = 0 */
 149               	.L__stack_usage = 0
 150 0000 0895      		ret
 151               		.cfi_endproc
 152               	.LFE107:
 154               		.section	.text.matrix_power_down,"ax",@progbits
 155               		.weak	matrix_power_down
 157               	matrix_power_down:
 158               	.LFB108:
 135:./tmk_core/common/avr/suspend.c **** __attribute__ ((weak)) void matrix_power_down(void) {}
 159               		.loc 1 135 0
 160               		.cfi_startproc
 161               	/* prologue: function */
 162               	/* frame size = 0 */
 163               	/* stack size = 0 */
 164               	.L__stack_usage = 0
 165 0000 0895      		ret
 166               		.cfi_endproc
 167               	.LFE108:
 169               		.section	.text.suspend_wakeup_condition,"ax",@progbits
 170               	.global	suspend_wakeup_condition
 172               	suspend_wakeup_condition:
 173               	.LFB109:
 136:./tmk_core/common/avr/suspend.c **** bool suspend_wakeup_condition(void)
 137:./tmk_core/common/avr/suspend.c **** {
 174               		.loc 1 137 0
 175               		.cfi_startproc
 176               		.loc 1 137 0
 177 0000 CF93      		push r28
 178               	.LCFI0:
 179               		.cfi_def_cfa_offset 3
 180               		.cfi_offset 28, -2
 181               	/* prologue: function */
 182               	/* frame size = 0 */
 183               	/* stack size = 1 */
 184               	.L__stack_usage = 1
 138:./tmk_core/common/avr/suspend.c ****     matrix_power_up();
 185               		.loc 1 138 0
 186 0002 0E94 0000 		call matrix_power_up
 187               	.LVL4:
 139:./tmk_core/common/avr/suspend.c ****     matrix_scan();
 188               		.loc 1 139 0
 189 0006 0E94 0000 		call matrix_scan
 190               	.LVL5:
 140:./tmk_core/common/avr/suspend.c ****     matrix_power_down();
 191               		.loc 1 140 0
 192 000a 0E94 0000 		call matrix_power_down
 193               	.LVL6:
 194               	.LBB6:
 141:./tmk_core/common/avr/suspend.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 195               		.loc 1 141 0
 196 000e C0E0      		ldi r28,0
 197               	.LVL7:
 198               	.L12:
 142:./tmk_core/common/avr/suspend.c ****         if (matrix_get_row(r)) return true;
 199               		.loc 1 142 0
 200 0010 8C2F      		mov r24,r28
 201 0012 0E94 0000 		call matrix_get_row
 202               	.LVL8:
 203 0016 8111      		cpse r24,__zero_reg__
 204 0018 00C0      		rjmp .L13
 141:./tmk_core/common/avr/suspend.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 205               		.loc 1 141 0
 206 001a CF5F      		subi r28,lo8(-(1))
 207               	.LVL9:
 208 001c CE30      		cpi r28,lo8(14)
 209 001e 01F4      		brne .L12
 210               	.LBE6:
 143:./tmk_core/common/avr/suspend.c ****     }
 144:./tmk_core/common/avr/suspend.c ****      return false;
 211               		.loc 1 144 0
 212 0020 80E0      		ldi r24,0
 213 0022 00C0      		rjmp .L11
 214               	.L13:
 215               	.LBB7:
 142:./tmk_core/common/avr/suspend.c ****         if (matrix_get_row(r)) return true;
 216               		.loc 1 142 0
 217 0024 81E0      		ldi r24,lo8(1)
 218               	.L11:
 219               	/* epilogue start */
 220               	.LBE7:
 145:./tmk_core/common/avr/suspend.c **** }
 221               		.loc 1 145 0
 222 0026 CF91      		pop r28
 223               	.LVL10:
 224 0028 0895      		ret
 225               		.cfi_endproc
 226               	.LFE109:
 228               		.section	.text.suspend_wakeup_init,"ax",@progbits
 229               	.global	suspend_wakeup_init
 231               	suspend_wakeup_init:
 232               	.LFB110:
 146:./tmk_core/common/avr/suspend.c **** 
 147:./tmk_core/common/avr/suspend.c **** /** \brief run immediately after wakeup
 148:./tmk_core/common/avr/suspend.c ****  *
 149:./tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
 150:./tmk_core/common/avr/suspend.c ****  */
 151:./tmk_core/common/avr/suspend.c **** void suspend_wakeup_init(void)
 152:./tmk_core/common/avr/suspend.c **** {
 233               		.loc 1 152 0
 234               		.cfi_startproc
 235               	/* prologue: function */
 236               	/* frame size = 0 */
 237               	/* stack size = 0 */
 238               	.L__stack_usage = 0
 153:./tmk_core/common/avr/suspend.c ****     // clear keyboard state
 154:./tmk_core/common/avr/suspend.c ****     clear_keyboard();
 239               		.loc 1 154 0
 240 0000 0E94 0000 		call clear_keyboard
 241               	.LVL11:
 155:./tmk_core/common/avr/suspend.c **** #ifdef BACKLIGHT_ENABLE
 156:./tmk_core/common/avr/suspend.c ****     backlight_init();
 157:./tmk_core/common/avr/suspend.c **** #endif
 158:./tmk_core/common/avr/suspend.c **** 	led_set(host_keyboard_leds());
 242               		.loc 1 158 0
 243 0004 0E94 0000 		call host_keyboard_leds
 244               	.LVL12:
 245 0008 0C94 0000 		jmp led_set
 246               	.LVL13:
 247               		.cfi_endproc
 248               	.LFE110:
 250               		.section	.text.__vector_12,"ax",@progbits
 251               	.global	__vector_12
 253               	__vector_12:
 254               	.LFB111:
 159:./tmk_core/common/avr/suspend.c **** #ifdef RGBLIGHT_SLEEP
 160:./tmk_core/common/avr/suspend.c ****   rgblight_enable();
 161:./tmk_core/common/avr/suspend.c **** #ifdef RGBLIGHT_ANIMATIONS
 162:./tmk_core/common/avr/suspend.c ****   rgblight_timer_enable();
 163:./tmk_core/common/avr/suspend.c **** #endif
 164:./tmk_core/common/avr/suspend.c **** #endif
 165:./tmk_core/common/avr/suspend.c **** }
 166:./tmk_core/common/avr/suspend.c **** 
 167:./tmk_core/common/avr/suspend.c **** #ifndef NO_SUSPEND_POWER_DOWN
 168:./tmk_core/common/avr/suspend.c **** /* watchdog timeout */
 169:./tmk_core/common/avr/suspend.c **** ISR(WDT_vect)
 170:./tmk_core/common/avr/suspend.c **** {
 255               		.loc 1 170 0
 256               		.cfi_startproc
 257 0000 1F92      		push r1
 258               	.LCFI1:
 259               		.cfi_def_cfa_offset 3
 260               		.cfi_offset 1, -2
 261 0002 0F92      		push r0
 262               	.LCFI2:
 263               		.cfi_def_cfa_offset 4
 264               		.cfi_offset 0, -3
 265 0004 0FB6      		in r0,__SREG__
 266 0006 0F92      		push r0
 267 0008 1124      		clr __zero_reg__
 268 000a 8F93      		push r24
 269               	.LCFI3:
 270               		.cfi_def_cfa_offset 5
 271               		.cfi_offset 24, -4
 272 000c 9F93      		push r25
 273               	.LCFI4:
 274               		.cfi_def_cfa_offset 6
 275               		.cfi_offset 25, -5
 276 000e AF93      		push r26
 277               	.LCFI5:
 278               		.cfi_def_cfa_offset 7
 279               		.cfi_offset 26, -6
 280 0010 BF93      		push r27
 281               	.LCFI6:
 282               		.cfi_def_cfa_offset 8
 283               		.cfi_offset 27, -7
 284               	/* prologue: Signal */
 285               	/* frame size = 0 */
 286               	/* stack size = 7 */
 287               	.L__stack_usage = 7
 171:./tmk_core/common/avr/suspend.c ****     // compensate timer for sleep
 172:./tmk_core/common/avr/suspend.c ****     switch (wdt_timeout) {
 288               		.loc 1 172 0
 289 0012 8091 0000 		lds r24,wdt_timeout
 290 0016 8111      		cpse r24,__zero_reg__
 291 0018 00C0      		rjmp .L16
 173:./tmk_core/common/avr/suspend.c ****         case WDTO_15MS:
 174:./tmk_core/common/avr/suspend.c ****             timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
 292               		.loc 1 174 0
 293 001a 8091 0000 		lds r24,timer_count
 294 001e 9091 0000 		lds r25,timer_count+1
 295 0022 A091 0000 		lds r26,timer_count+2
 296 0026 B091 0000 		lds r27,timer_count+3
 297 002a 4196      		adiw r24,17
 298 002c A11D      		adc r26,__zero_reg__
 299 002e B11D      		adc r27,__zero_reg__
 300 0030 8093 0000 		sts timer_count,r24
 301 0034 9093 0000 		sts timer_count+1,r25
 302 0038 A093 0000 		sts timer_count+2,r26
 303 003c B093 0000 		sts timer_count+3,r27
 304               	.L16:
 305               	/* epilogue start */
 175:./tmk_core/common/avr/suspend.c ****             break;
 176:./tmk_core/common/avr/suspend.c ****         default:
 177:./tmk_core/common/avr/suspend.c ****             ;
 178:./tmk_core/common/avr/suspend.c ****     }
 179:./tmk_core/common/avr/suspend.c **** }
 306               		.loc 1 179 0
 307 0040 BF91      		pop r27
 308 0042 AF91      		pop r26
 309 0044 9F91      		pop r25
 310 0046 8F91      		pop r24
 311 0048 0F90      		pop r0
 312 004a 0FBE      		out __SREG__,r0
 313 004c 0F90      		pop r0
 314 004e 1F90      		pop r1
 315 0050 1895      		reti
 316               		.cfi_endproc
 317               	.LFE111:
 319               		.section	.bss.wdt_timeout,"aw",@nobits
 322               	wdt_timeout:
 323 0000 00        		.zero	1
 324               		.text
 325               	.Letext0:
 326               		.file 2 "/usr/lib/avr/include/stdint.h"
 327               		.file 3 "./tmk_core/common/matrix.h"
 328               		.file 4 "./tmk_core/common/timer.h"
 329               		.file 5 "./lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 330               		.file 6 "./tmk_core/common/host.h"
 331               		.file 7 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../Device.h"
 332               		.file 8 "./tmk_core/common/led.h"
 333               		.file 9 "./tmk_core/common/action.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 suspend.c
     /tmp/ccZVRnV3.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccZVRnV3.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccZVRnV3.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccZVRnV3.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccZVRnV3.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccZVRnV3.s:13     .text.suspend_idle:0000000000000000 suspend_idle
     /tmp/ccZVRnV3.s:60     .text.suspend_power_down:0000000000000000 suspend_power_down
     /tmp/ccZVRnV3.s:322    .bss.wdt_timeout:0000000000000000 wdt_timeout
     /tmp/ccZVRnV3.s:142    .text.matrix_power_up:0000000000000000 matrix_power_up
     /tmp/ccZVRnV3.s:157    .text.matrix_power_down:0000000000000000 matrix_power_down
     /tmp/ccZVRnV3.s:172    .text.suspend_wakeup_condition:0000000000000000 suspend_wakeup_condition
     /tmp/ccZVRnV3.s:231    .text.suspend_wakeup_init:0000000000000000 suspend_wakeup_init
     /tmp/ccZVRnV3.s:253    .text.__vector_12:0000000000000000 __vector_12

UNDEFINED SYMBOLS
USB_DeviceState
led_set
matrix_scan
matrix_get_row
clear_keyboard
host_keyboard_leds
timer_count
__do_clear_bss
