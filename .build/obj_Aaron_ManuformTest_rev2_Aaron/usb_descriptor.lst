   1               		.file	"usb_descriptor.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.get_usb_descriptor,"ax",@progbits
  11               	.global	get_usb_descriptor
  13               	get_usb_descriptor:
  14               	.LFB100:
  15               		.file 1 "tmk_core/protocol/usb_descriptor.c"
   1:tmk_core/protocol/usb_descriptor.c **** /*
   2:tmk_core/protocol/usb_descriptor.c ****  * Copyright 2012 Jun Wako <wakojun@gmail.com>
   3:tmk_core/protocol/usb_descriptor.c ****  * This file is based on:
   4:tmk_core/protocol/usb_descriptor.c ****  *     LUFA-120219/Demos/Device/Lowlevel/KeyboardMouse
   5:tmk_core/protocol/usb_descriptor.c ****  *     LUFA-120219/Demos/Device/Lowlevel/GenericHID
   6:tmk_core/protocol/usb_descriptor.c ****  */
   7:tmk_core/protocol/usb_descriptor.c **** 
   8:tmk_core/protocol/usb_descriptor.c **** /*
   9:tmk_core/protocol/usb_descriptor.c ****              LUFA Library
  10:tmk_core/protocol/usb_descriptor.c ****      Copyright (C) Dean Camera, 2012.
  11:tmk_core/protocol/usb_descriptor.c **** 
  12:tmk_core/protocol/usb_descriptor.c ****   dean [at] fourwalledcubicle [dot] com
  13:tmk_core/protocol/usb_descriptor.c ****            www.lufa-lib.org
  14:tmk_core/protocol/usb_descriptor.c **** */
  15:tmk_core/protocol/usb_descriptor.c **** 
  16:tmk_core/protocol/usb_descriptor.c **** /*
  17:tmk_core/protocol/usb_descriptor.c ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  18:tmk_core/protocol/usb_descriptor.c ****   Copyright 2010  Denver Gingerich (denver [at] ossguy [dot] com)
  19:tmk_core/protocol/usb_descriptor.c **** 
  20:tmk_core/protocol/usb_descriptor.c ****   Permission to use, copy, modify, distribute, and sell this
  21:tmk_core/protocol/usb_descriptor.c ****   software and its documentation for any purpose is hereby granted
  22:tmk_core/protocol/usb_descriptor.c ****   without fee, provided that the above copyright notice appear in
  23:tmk_core/protocol/usb_descriptor.c ****   all copies and that both that the copyright notice and this
  24:tmk_core/protocol/usb_descriptor.c ****   permission notice and warranty disclaimer appear in supporting
  25:tmk_core/protocol/usb_descriptor.c ****   documentation, and that the name of the author not be used in
  26:tmk_core/protocol/usb_descriptor.c ****   advertising or publicity pertaining to distribution of the
  27:tmk_core/protocol/usb_descriptor.c ****   software without specific, written prior permission.
  28:tmk_core/protocol/usb_descriptor.c **** 
  29:tmk_core/protocol/usb_descriptor.c ****   The author disclaim all warranties with regard to this
  30:tmk_core/protocol/usb_descriptor.c ****   software, including all implied warranties of merchantability
  31:tmk_core/protocol/usb_descriptor.c ****   and fitness.  In no event shall the author be liable for any
  32:tmk_core/protocol/usb_descriptor.c ****   special, indirect or consequential damages or any damages
  33:tmk_core/protocol/usb_descriptor.c ****   whatsoever resulting from loss of use, data or profits, whether
  34:tmk_core/protocol/usb_descriptor.c ****   in an action of contract, negligence or other tortious action,
  35:tmk_core/protocol/usb_descriptor.c ****   arising out of or in connection with the use or performance of
  36:tmk_core/protocol/usb_descriptor.c ****   this software.
  37:tmk_core/protocol/usb_descriptor.c **** */
  38:tmk_core/protocol/usb_descriptor.c **** 
  39:tmk_core/protocol/usb_descriptor.c **** #include "util.h"
  40:tmk_core/protocol/usb_descriptor.c **** #include "report.h"
  41:tmk_core/protocol/usb_descriptor.c **** #include "usb_descriptor.h"
  42:tmk_core/protocol/usb_descriptor.c **** 
  43:tmk_core/protocol/usb_descriptor.c **** #ifndef USB_MAX_POWER_CONSUMPTION
  44:tmk_core/protocol/usb_descriptor.c **** #define USB_MAX_POWER_CONSUMPTION 500
  45:tmk_core/protocol/usb_descriptor.c **** #endif
  46:tmk_core/protocol/usb_descriptor.c **** 
  47:tmk_core/protocol/usb_descriptor.c **** /*******************************************************************************
  48:tmk_core/protocol/usb_descriptor.c ****  * HID Report Descriptors
  49:tmk_core/protocol/usb_descriptor.c ****  ******************************************************************************/
  50:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM KeyboardReport[] =
  51:tmk_core/protocol/usb_descriptor.c **** {
  52:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01), /* Generic Desktop */
  53:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x06), /* Keyboard */
  54:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01), /* Application */
  55:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07), /* Key Codes */
  56:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0xE0), /* Keyboard Left Control */
  57:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0xE7), /* Keyboard Right GUI */
  58:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
  59:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0x01),
  60:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x08),
  61:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
  62:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
  63:tmk_core/protocol/usb_descriptor.c **** 
  64:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x01),
  65:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
  66:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_CONSTANT),  /* reserved */
  67:tmk_core/protocol/usb_descriptor.c **** 
  68:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x08), /* LEDs */
  69:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x01), /* Num Lock */
  70:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0x05), /* Kana */
  71:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x05),
  72:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
  73:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
  74:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x01),
  75:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x03),
  76:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_CONSTANT),
  77:tmk_core/protocol/usb_descriptor.c **** 
  78:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07), /* Keyboard */
  79:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x00), /* Reserved (no event indicated) */
  80:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0xFF), /* Keyboard Application */
  81:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
  82:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
  83:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x06),
  84:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
  85:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
  86:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
  87:tmk_core/protocol/usb_descriptor.c **** };
  88:tmk_core/protocol/usb_descriptor.c **** 
  89:tmk_core/protocol/usb_descriptor.c **** #ifdef MOUSE_ENABLE
  90:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM MouseReport[] =
  91:tmk_core/protocol/usb_descriptor.c **** {
  92:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01), /* Generic Desktop */
  93:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x02), /* Mouse */
  94:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01), /* Application */
  95:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE(8, 0x01), /* Pointer */
  96:tmk_core/protocol/usb_descriptor.c ****         HID_RI_COLLECTION(8, 0x00), /* Physical */
  97:tmk_core/protocol/usb_descriptor.c **** 
  98:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_PAGE(8, 0x09), /* Button */
  99:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_MINIMUM(8, 0x01),  /* Button 1 */
 100:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_MAXIMUM(8, 0x05),  /* Button 5 */
 101:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, 0x00),
 102:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 103:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x05),
 104:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x01),
 105:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 106:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x01),
 107:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x03),
 108:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_CONSTANT),
 109:tmk_core/protocol/usb_descriptor.c **** 
 110:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_PAGE(8, 0x01), /* Generic Desktop */
 111:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x30), /* Usage X */
 112:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x31), /* Usage Y */
 113:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, -127),
 114:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 127),
 115:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x02),
 116:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x08),
 117:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 118:tmk_core/protocol/usb_descriptor.c **** 
 119:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x38), /* Wheel */
 120:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, -127),
 121:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 127),
 122:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x01),
 123:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x08),
 124:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 125:tmk_core/protocol/usb_descriptor.c **** 
 126:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_PAGE(8, 0x0C), /* Consumer */
 127:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(16, 0x0238), /* AC Pan (Horizontal wheel) */
 128:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, -127),
 129:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 127),
 130:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x01),
 131:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x08),
 132:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 133:tmk_core/protocol/usb_descriptor.c **** 
 134:tmk_core/protocol/usb_descriptor.c ****         HID_RI_END_COLLECTION(0),
 135:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 136:tmk_core/protocol/usb_descriptor.c **** };
 137:tmk_core/protocol/usb_descriptor.c **** #endif
 138:tmk_core/protocol/usb_descriptor.c **** 
 139:tmk_core/protocol/usb_descriptor.c **** #ifdef EXTRAKEY_ENABLE
 140:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM ExtrakeyReport[] =
 141:tmk_core/protocol/usb_descriptor.c **** {
 142:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01), /* Generic Desktop */
 143:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x80), /* System Control */
 144:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01), /* Application */
 145:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_SYSTEM),
 146:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(16, 0x0001),
 147:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x0003),
 148:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(16, 0x0081), /* System Power Down */
 149:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(16, 0x0083), /* System Wake Up */
 150:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 16),
 151:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 1),
 152:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
 153:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 154:tmk_core/protocol/usb_descriptor.c **** 
 155:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x0C), /* Consumer */
 156:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x01), /* Consumer Control */
 157:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01), /* Application */
 158:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_CONSUMER),
 159:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(16, 0x0001),
 160:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x029C),
 161:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(16, 0x0001), /* +10 */
 162:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(16, 0x029C), /* AC Distribute Vertically */
 163:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 16),
 164:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 1),
 165:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
 166:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 167:tmk_core/protocol/usb_descriptor.c **** };
 168:tmk_core/protocol/usb_descriptor.c **** #endif
 169:tmk_core/protocol/usb_descriptor.c **** 
 170:tmk_core/protocol/usb_descriptor.c **** #ifdef RAW_ENABLE
 171:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM RawReport[] =
 172:tmk_core/protocol/usb_descriptor.c **** {
 173:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(16, 0xFF60), /* Vendor Page 0xFF60 */
 174:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x61), /* Vendor Usage 0x61 */
 175:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01), /* Application */
 176:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE(8, 0x62), /* Vendor Usage 0x62 */
 177:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 178:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 179:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, RAW_EPSIZE),
 180:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
 181:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 182:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE(8, 0x63), /* Vendor Usage 0x63 */
 183:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 184:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 185:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, RAW_EPSIZE),
 186:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
 187:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
 188:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 189:tmk_core/protocol/usb_descriptor.c **** };
 190:tmk_core/protocol/usb_descriptor.c **** #endif
 191:tmk_core/protocol/usb_descriptor.c **** 
 192:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
 193:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM ConsoleReport[] =
 194:tmk_core/protocol/usb_descriptor.c **** {
 195:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(16, 0xFF31), /* Vendor Page(PJRC Teensy compatible) */
 196:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x74), /* Vendor Usage(PJRC Teensy compatible) */
 197:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01), /* Application */
 198:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE(8, 0x75), /* Vendor Usage 0x75 */
 199:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 200:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 201:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, CONSOLE_EPSIZE),
 202:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
 203:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 204:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE(8, 0x76), /* Vendor Usage 0x76 */
 205:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 206:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 207:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, CONSOLE_EPSIZE),
 208:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
 209:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
 210:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 211:tmk_core/protocol/usb_descriptor.c **** };
 212:tmk_core/protocol/usb_descriptor.c **** #endif
 213:tmk_core/protocol/usb_descriptor.c **** 
 214:tmk_core/protocol/usb_descriptor.c **** #ifdef NKRO_ENABLE
 215:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM NKROReport[] =
 216:tmk_core/protocol/usb_descriptor.c **** {
 217:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01), /* Generic Desktop */
 218:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x06), /* Keyboard */
 219:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01), /* Application */
 220:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07), /* Key Codes */
 221:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0xE0), /* Keyboard Left Control */
 222:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0xE7), /* Keyboard Right GUI */
 223:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 224:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 225:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x08),
 226:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
 227:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 228:tmk_core/protocol/usb_descriptor.c **** 
 229:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x08), /* LEDs */
 230:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x01), /* Num Lock */
 231:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0x05), /* Kana */
 232:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x05),
 233:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
 234:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
 235:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x01),
 236:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x03),
 237:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_CONSTANT),
 238:tmk_core/protocol/usb_descriptor.c **** 
 239:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07), /* Key Codes */
 240:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x00), /* Keyboard 0 */
 241:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, (NKRO_EPSIZE-1)*8-1), /* Keyboard Right GUI */
 242:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 243:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 244:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, (NKRO_EPSIZE-1)*8),
 245:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
 246:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 247:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 248:tmk_core/protocol/usb_descriptor.c **** };
 249:tmk_core/protocol/usb_descriptor.c **** #endif
 250:tmk_core/protocol/usb_descriptor.c **** 
 251:tmk_core/protocol/usb_descriptor.c **** /*******************************************************************************
 252:tmk_core/protocol/usb_descriptor.c ****  * Device Descriptors
 253:tmk_core/protocol/usb_descriptor.c ****  ******************************************************************************/
 254:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_Device_t PROGMEM DeviceDescriptor =
 255:tmk_core/protocol/usb_descriptor.c **** {
 256:tmk_core/protocol/usb_descriptor.c ****     .Header                 = {.Size = sizeof(USB_Descriptor_Device_t), .Type = DTYPE_Device},
 257:tmk_core/protocol/usb_descriptor.c **** 
 258:tmk_core/protocol/usb_descriptor.c ****     .USBSpecification       = VERSION_BCD(1,1,0),
 259:tmk_core/protocol/usb_descriptor.c **** #if VIRTSER_ENABLE
 260:tmk_core/protocol/usb_descriptor.c ****     .Class                  = USB_CSCP_IADDeviceClass,
 261:tmk_core/protocol/usb_descriptor.c ****     .SubClass               = USB_CSCP_IADDeviceSubclass,
 262:tmk_core/protocol/usb_descriptor.c ****     .Protocol               = USB_CSCP_IADDeviceProtocol,
 263:tmk_core/protocol/usb_descriptor.c **** #else
 264:tmk_core/protocol/usb_descriptor.c ****     .Class                  = USB_CSCP_NoDeviceClass,
 265:tmk_core/protocol/usb_descriptor.c ****     .SubClass               = USB_CSCP_NoDeviceSubclass,
 266:tmk_core/protocol/usb_descriptor.c ****     .Protocol               = USB_CSCP_NoDeviceProtocol,
 267:tmk_core/protocol/usb_descriptor.c **** #endif
 268:tmk_core/protocol/usb_descriptor.c **** 
 269:tmk_core/protocol/usb_descriptor.c ****     .Endpoint0Size          = FIXED_CONTROL_ENDPOINT_SIZE,
 270:tmk_core/protocol/usb_descriptor.c **** 
 271:tmk_core/protocol/usb_descriptor.c ****     /* specified in config.h */
 272:tmk_core/protocol/usb_descriptor.c ****     .VendorID               = VENDOR_ID,
 273:tmk_core/protocol/usb_descriptor.c ****     .ProductID              = PRODUCT_ID,
 274:tmk_core/protocol/usb_descriptor.c ****     .ReleaseNumber          = DEVICE_VER,
 275:tmk_core/protocol/usb_descriptor.c **** 
 276:tmk_core/protocol/usb_descriptor.c ****     .ManufacturerStrIndex   = 0x01,
 277:tmk_core/protocol/usb_descriptor.c ****     .ProductStrIndex        = 0x02,
 278:tmk_core/protocol/usb_descriptor.c ****     .SerialNumStrIndex      = 0x03,
 279:tmk_core/protocol/usb_descriptor.c **** 
 280:tmk_core/protocol/usb_descriptor.c ****     .NumberOfConfigurations = FIXED_NUM_CONFIGURATIONS
 281:tmk_core/protocol/usb_descriptor.c **** };
 282:tmk_core/protocol/usb_descriptor.c **** 
 283:tmk_core/protocol/usb_descriptor.c **** /*******************************************************************************
 284:tmk_core/protocol/usb_descriptor.c ****  * Configuration Descriptors
 285:tmk_core/protocol/usb_descriptor.c ****  ******************************************************************************/
 286:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_Configuration_t PROGMEM ConfigurationDescriptor =
 287:tmk_core/protocol/usb_descriptor.c **** {
 288:tmk_core/protocol/usb_descriptor.c ****     .Config =
 289:tmk_core/protocol/usb_descriptor.c ****         {
 290:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Configuration_Header_t), .Type
 291:tmk_core/protocol/usb_descriptor.c **** 
 292:tmk_core/protocol/usb_descriptor.c ****             .TotalConfigurationSize = sizeof(USB_Descriptor_Configuration_t),
 293:tmk_core/protocol/usb_descriptor.c ****             .TotalInterfaces        = TOTAL_INTERFACES,
 294:tmk_core/protocol/usb_descriptor.c **** 
 295:tmk_core/protocol/usb_descriptor.c ****             .ConfigurationNumber    = 1,
 296:tmk_core/protocol/usb_descriptor.c ****             .ConfigurationStrIndex  = NO_DESCRIPTOR,
 297:tmk_core/protocol/usb_descriptor.c **** 
 298:tmk_core/protocol/usb_descriptor.c ****             .ConfigAttributes       = (USB_CONFIG_ATTR_RESERVED | USB_CONFIG_ATTR_REMOTEWAKEUP),
 299:tmk_core/protocol/usb_descriptor.c **** 
 300:tmk_core/protocol/usb_descriptor.c ****             .MaxPowerConsumption    = USB_CONFIG_POWER_MA(USB_MAX_POWER_CONSUMPTION)
 301:tmk_core/protocol/usb_descriptor.c ****         },
 302:tmk_core/protocol/usb_descriptor.c **** 
 303:tmk_core/protocol/usb_descriptor.c ****     /*
 304:tmk_core/protocol/usb_descriptor.c ****      * Keyboard
 305:tmk_core/protocol/usb_descriptor.c ****      */
 306:tmk_core/protocol/usb_descriptor.c ****     .Keyboard_Interface =
 307:tmk_core/protocol/usb_descriptor.c ****         {
 308:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_In
 309:tmk_core/protocol/usb_descriptor.c **** 
 310:tmk_core/protocol/usb_descriptor.c ****             .InterfaceNumber        = KEYBOARD_INTERFACE,
 311:tmk_core/protocol/usb_descriptor.c ****             .AlternateSetting       = 0x00,
 312:tmk_core/protocol/usb_descriptor.c **** 
 313:tmk_core/protocol/usb_descriptor.c ****             .TotalEndpoints         = 1,
 314:tmk_core/protocol/usb_descriptor.c **** 
 315:tmk_core/protocol/usb_descriptor.c ****             .Class                  = HID_CSCP_HIDClass,
 316:tmk_core/protocol/usb_descriptor.c ****             .SubClass               = HID_CSCP_BootSubclass,
 317:tmk_core/protocol/usb_descriptor.c ****             .Protocol               = HID_CSCP_KeyboardBootProtocol,
 318:tmk_core/protocol/usb_descriptor.c **** 
 319:tmk_core/protocol/usb_descriptor.c ****             .InterfaceStrIndex      = NO_DESCRIPTOR
 320:tmk_core/protocol/usb_descriptor.c ****         },
 321:tmk_core/protocol/usb_descriptor.c **** 
 322:tmk_core/protocol/usb_descriptor.c ****     .Keyboard_HID =
 323:tmk_core/protocol/usb_descriptor.c ****         {
 324:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HID_DTYPE_
 325:tmk_core/protocol/usb_descriptor.c **** 
 326:tmk_core/protocol/usb_descriptor.c ****             .HIDSpec                = VERSION_BCD(1,1,1),
 327:tmk_core/protocol/usb_descriptor.c ****             .CountryCode            = 0x00,
 328:tmk_core/protocol/usb_descriptor.c ****             .TotalReportDescriptors = 1,
 329:tmk_core/protocol/usb_descriptor.c ****             .HIDReportType          = HID_DTYPE_Report,
 330:tmk_core/protocol/usb_descriptor.c ****             .HIDReportLength        = sizeof(KeyboardReport)
 331:tmk_core/protocol/usb_descriptor.c ****         },
 332:tmk_core/protocol/usb_descriptor.c **** 
 333:tmk_core/protocol/usb_descriptor.c ****     .Keyboard_INEndpoint =
 334:tmk_core/protocol/usb_descriptor.c ****         {
 335:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_End
 336:tmk_core/protocol/usb_descriptor.c **** 
 337:tmk_core/protocol/usb_descriptor.c ****             .EndpointAddress        = (ENDPOINT_DIR_IN | KEYBOARD_IN_EPNUM),
 338:tmk_core/protocol/usb_descriptor.c ****             .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_D
 339:tmk_core/protocol/usb_descriptor.c ****             .EndpointSize           = KEYBOARD_EPSIZE,
 340:tmk_core/protocol/usb_descriptor.c ****             .PollingIntervalMS      = 0x0A
 341:tmk_core/protocol/usb_descriptor.c ****         },
 342:tmk_core/protocol/usb_descriptor.c **** 
 343:tmk_core/protocol/usb_descriptor.c ****     /*
 344:tmk_core/protocol/usb_descriptor.c ****      * Mouse
 345:tmk_core/protocol/usb_descriptor.c ****      */
 346:tmk_core/protocol/usb_descriptor.c **** #ifdef MOUSE_ENABLE
 347:tmk_core/protocol/usb_descriptor.c ****     .Mouse_Interface =
 348:tmk_core/protocol/usb_descriptor.c ****         {
 349:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_In
 350:tmk_core/protocol/usb_descriptor.c **** 
 351:tmk_core/protocol/usb_descriptor.c ****             .InterfaceNumber        = MOUSE_INTERFACE,
 352:tmk_core/protocol/usb_descriptor.c ****             .AlternateSetting       = 0x00,
 353:tmk_core/protocol/usb_descriptor.c **** 
 354:tmk_core/protocol/usb_descriptor.c ****             .TotalEndpoints         = 1,
 355:tmk_core/protocol/usb_descriptor.c **** 
 356:tmk_core/protocol/usb_descriptor.c ****             .Class                  = HID_CSCP_HIDClass,
 357:tmk_core/protocol/usb_descriptor.c ****             .SubClass               = HID_CSCP_BootSubclass,
 358:tmk_core/protocol/usb_descriptor.c ****             .Protocol               = HID_CSCP_MouseBootProtocol,
 359:tmk_core/protocol/usb_descriptor.c **** 
 360:tmk_core/protocol/usb_descriptor.c ****             .InterfaceStrIndex      = NO_DESCRIPTOR
 361:tmk_core/protocol/usb_descriptor.c ****         },
 362:tmk_core/protocol/usb_descriptor.c **** 
 363:tmk_core/protocol/usb_descriptor.c ****     .Mouse_HID =
 364:tmk_core/protocol/usb_descriptor.c ****         {
 365:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HID_DTYPE_
 366:tmk_core/protocol/usb_descriptor.c **** 
 367:tmk_core/protocol/usb_descriptor.c ****             .HIDSpec                = VERSION_BCD(1,1,1),
 368:tmk_core/protocol/usb_descriptor.c ****             .CountryCode            = 0x00,
 369:tmk_core/protocol/usb_descriptor.c ****             .TotalReportDescriptors = 1,
 370:tmk_core/protocol/usb_descriptor.c ****             .HIDReportType          = HID_DTYPE_Report,
 371:tmk_core/protocol/usb_descriptor.c ****             .HIDReportLength        = sizeof(MouseReport)
 372:tmk_core/protocol/usb_descriptor.c ****         },
 373:tmk_core/protocol/usb_descriptor.c **** 
 374:tmk_core/protocol/usb_descriptor.c ****     .Mouse_INEndpoint =
 375:tmk_core/protocol/usb_descriptor.c ****         {
 376:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_End
 377:tmk_core/protocol/usb_descriptor.c **** 
 378:tmk_core/protocol/usb_descriptor.c ****             .EndpointAddress        = (ENDPOINT_DIR_IN | MOUSE_IN_EPNUM),
 379:tmk_core/protocol/usb_descriptor.c ****             .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_D
 380:tmk_core/protocol/usb_descriptor.c ****             .EndpointSize           = MOUSE_EPSIZE,
 381:tmk_core/protocol/usb_descriptor.c ****             .PollingIntervalMS      = 0x0A
 382:tmk_core/protocol/usb_descriptor.c ****         },
 383:tmk_core/protocol/usb_descriptor.c **** #endif
 384:tmk_core/protocol/usb_descriptor.c **** 
 385:tmk_core/protocol/usb_descriptor.c ****     /*
 386:tmk_core/protocol/usb_descriptor.c ****      * Extra
 387:tmk_core/protocol/usb_descriptor.c ****      */
 388:tmk_core/protocol/usb_descriptor.c **** #ifdef EXTRAKEY_ENABLE
 389:tmk_core/protocol/usb_descriptor.c ****     .Extrakey_Interface =
 390:tmk_core/protocol/usb_descriptor.c ****         {
 391:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_In
 392:tmk_core/protocol/usb_descriptor.c **** 
 393:tmk_core/protocol/usb_descriptor.c ****             .InterfaceNumber        = EXTRAKEY_INTERFACE,
 394:tmk_core/protocol/usb_descriptor.c ****             .AlternateSetting       = 0x00,
 395:tmk_core/protocol/usb_descriptor.c **** 
 396:tmk_core/protocol/usb_descriptor.c ****             .TotalEndpoints         = 1,
 397:tmk_core/protocol/usb_descriptor.c **** 
 398:tmk_core/protocol/usb_descriptor.c ****             .Class                  = HID_CSCP_HIDClass,
 399:tmk_core/protocol/usb_descriptor.c ****             .SubClass               = HID_CSCP_NonBootSubclass,
 400:tmk_core/protocol/usb_descriptor.c ****             .Protocol               = HID_CSCP_NonBootProtocol,
 401:tmk_core/protocol/usb_descriptor.c **** 
 402:tmk_core/protocol/usb_descriptor.c ****             .InterfaceStrIndex      = NO_DESCRIPTOR
 403:tmk_core/protocol/usb_descriptor.c ****         },
 404:tmk_core/protocol/usb_descriptor.c **** 
 405:tmk_core/protocol/usb_descriptor.c ****     .Extrakey_HID =
 406:tmk_core/protocol/usb_descriptor.c ****         {
 407:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HID_DTYPE_
 408:tmk_core/protocol/usb_descriptor.c **** 
 409:tmk_core/protocol/usb_descriptor.c ****             .HIDSpec                = VERSION_BCD(1,1,1),
 410:tmk_core/protocol/usb_descriptor.c ****             .CountryCode            = 0x00,
 411:tmk_core/protocol/usb_descriptor.c ****             .TotalReportDescriptors = 1,
 412:tmk_core/protocol/usb_descriptor.c ****             .HIDReportType          = HID_DTYPE_Report,
 413:tmk_core/protocol/usb_descriptor.c ****             .HIDReportLength        = sizeof(ExtrakeyReport)
 414:tmk_core/protocol/usb_descriptor.c ****         },
 415:tmk_core/protocol/usb_descriptor.c **** 
 416:tmk_core/protocol/usb_descriptor.c ****     .Extrakey_INEndpoint =
 417:tmk_core/protocol/usb_descriptor.c ****         {
 418:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_End
 419:tmk_core/protocol/usb_descriptor.c **** 
 420:tmk_core/protocol/usb_descriptor.c ****             .EndpointAddress        = (ENDPOINT_DIR_IN | EXTRAKEY_IN_EPNUM),
 421:tmk_core/protocol/usb_descriptor.c ****             .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_D
 422:tmk_core/protocol/usb_descriptor.c ****             .EndpointSize           = EXTRAKEY_EPSIZE,
 423:tmk_core/protocol/usb_descriptor.c ****             .PollingIntervalMS      = 0x0A
 424:tmk_core/protocol/usb_descriptor.c ****         },
 425:tmk_core/protocol/usb_descriptor.c **** #endif
 426:tmk_core/protocol/usb_descriptor.c **** 
 427:tmk_core/protocol/usb_descriptor.c **** 		/*
 428:tmk_core/protocol/usb_descriptor.c **** 	     * Raw
 429:tmk_core/protocol/usb_descriptor.c **** 	     */
 430:tmk_core/protocol/usb_descriptor.c **** 	#ifdef RAW_ENABLE
 431:tmk_core/protocol/usb_descriptor.c **** 	    .Raw_Interface =
 432:tmk_core/protocol/usb_descriptor.c **** 	        {
 433:tmk_core/protocol/usb_descriptor.c **** 	            .Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_I
 434:tmk_core/protocol/usb_descriptor.c **** 
 435:tmk_core/protocol/usb_descriptor.c **** 	            .InterfaceNumber        = RAW_INTERFACE,
 436:tmk_core/protocol/usb_descriptor.c **** 	            .AlternateSetting       = 0x00,
 437:tmk_core/protocol/usb_descriptor.c **** 
 438:tmk_core/protocol/usb_descriptor.c **** 	            .TotalEndpoints         = 2,
 439:tmk_core/protocol/usb_descriptor.c **** 
 440:tmk_core/protocol/usb_descriptor.c **** 	            .Class                  = HID_CSCP_HIDClass,
 441:tmk_core/protocol/usb_descriptor.c **** 	            .SubClass               = HID_CSCP_NonBootSubclass,
 442:tmk_core/protocol/usb_descriptor.c **** 	            .Protocol               = HID_CSCP_NonBootProtocol,
 443:tmk_core/protocol/usb_descriptor.c **** 
 444:tmk_core/protocol/usb_descriptor.c **** 	            .InterfaceStrIndex      = NO_DESCRIPTOR
 445:tmk_core/protocol/usb_descriptor.c **** 	        },
 446:tmk_core/protocol/usb_descriptor.c **** 
 447:tmk_core/protocol/usb_descriptor.c **** 	    .Raw_HID =
 448:tmk_core/protocol/usb_descriptor.c **** 	        {
 449:tmk_core/protocol/usb_descriptor.c **** 	            .Header                 = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HID_DTYPE
 450:tmk_core/protocol/usb_descriptor.c **** 
 451:tmk_core/protocol/usb_descriptor.c **** 	            .HIDSpec                = VERSION_BCD(1,1,1),
 452:tmk_core/protocol/usb_descriptor.c **** 	            .CountryCode            = 0x00,
 453:tmk_core/protocol/usb_descriptor.c **** 	            .TotalReportDescriptors = 1,
 454:tmk_core/protocol/usb_descriptor.c **** 	            .HIDReportType          = HID_DTYPE_Report,
 455:tmk_core/protocol/usb_descriptor.c **** 	            .HIDReportLength        = sizeof(RawReport)
 456:tmk_core/protocol/usb_descriptor.c **** 	        },
 457:tmk_core/protocol/usb_descriptor.c **** 
 458:tmk_core/protocol/usb_descriptor.c **** 	    .Raw_INEndpoint =
 459:tmk_core/protocol/usb_descriptor.c **** 	        {
 460:tmk_core/protocol/usb_descriptor.c **** 	            .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_En
 461:tmk_core/protocol/usb_descriptor.c **** 
 462:tmk_core/protocol/usb_descriptor.c **** 	            .EndpointAddress        = (ENDPOINT_DIR_IN | RAW_IN_EPNUM),
 463:tmk_core/protocol/usb_descriptor.c **** 	            .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_
 464:tmk_core/protocol/usb_descriptor.c **** 	            .EndpointSize           = RAW_EPSIZE,
 465:tmk_core/protocol/usb_descriptor.c **** 	            .PollingIntervalMS      = 0x01
 466:tmk_core/protocol/usb_descriptor.c **** 	        },
 467:tmk_core/protocol/usb_descriptor.c **** 
 468:tmk_core/protocol/usb_descriptor.c **** 	    .Raw_OUTEndpoint =
 469:tmk_core/protocol/usb_descriptor.c **** 	        {
 470:tmk_core/protocol/usb_descriptor.c **** 	            .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_En
 471:tmk_core/protocol/usb_descriptor.c **** 
 472:tmk_core/protocol/usb_descriptor.c **** 	            .EndpointAddress        = (ENDPOINT_DIR_OUT | RAW_OUT_EPNUM),
 473:tmk_core/protocol/usb_descriptor.c **** 	            .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_
 474:tmk_core/protocol/usb_descriptor.c **** 	            .EndpointSize           = RAW_EPSIZE,
 475:tmk_core/protocol/usb_descriptor.c **** 	            .PollingIntervalMS      = 0x01
 476:tmk_core/protocol/usb_descriptor.c **** 	        },
 477:tmk_core/protocol/usb_descriptor.c **** 	#endif
 478:tmk_core/protocol/usb_descriptor.c **** 
 479:tmk_core/protocol/usb_descriptor.c ****     /*
 480:tmk_core/protocol/usb_descriptor.c ****      * Console
 481:tmk_core/protocol/usb_descriptor.c ****      */
 482:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
 483:tmk_core/protocol/usb_descriptor.c ****     .Console_Interface =
 484:tmk_core/protocol/usb_descriptor.c ****         {
 485:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_In
 486:tmk_core/protocol/usb_descriptor.c **** 
 487:tmk_core/protocol/usb_descriptor.c ****             .InterfaceNumber        = CONSOLE_INTERFACE,
 488:tmk_core/protocol/usb_descriptor.c ****             .AlternateSetting       = 0x00,
 489:tmk_core/protocol/usb_descriptor.c **** 
 490:tmk_core/protocol/usb_descriptor.c ****             .TotalEndpoints         = 2,
 491:tmk_core/protocol/usb_descriptor.c **** 
 492:tmk_core/protocol/usb_descriptor.c ****             .Class                  = HID_CSCP_HIDClass,
 493:tmk_core/protocol/usb_descriptor.c ****             .SubClass               = HID_CSCP_NonBootSubclass,
 494:tmk_core/protocol/usb_descriptor.c ****             .Protocol               = HID_CSCP_NonBootProtocol,
 495:tmk_core/protocol/usb_descriptor.c **** 
 496:tmk_core/protocol/usb_descriptor.c ****             .InterfaceStrIndex      = NO_DESCRIPTOR
 497:tmk_core/protocol/usb_descriptor.c ****         },
 498:tmk_core/protocol/usb_descriptor.c **** 
 499:tmk_core/protocol/usb_descriptor.c ****     .Console_HID =
 500:tmk_core/protocol/usb_descriptor.c ****         {
 501:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HID_DTYPE_
 502:tmk_core/protocol/usb_descriptor.c **** 
 503:tmk_core/protocol/usb_descriptor.c ****             .HIDSpec                = VERSION_BCD(1,1,1),
 504:tmk_core/protocol/usb_descriptor.c ****             .CountryCode            = 0x00,
 505:tmk_core/protocol/usb_descriptor.c ****             .TotalReportDescriptors = 1,
 506:tmk_core/protocol/usb_descriptor.c ****             .HIDReportType          = HID_DTYPE_Report,
 507:tmk_core/protocol/usb_descriptor.c ****             .HIDReportLength        = sizeof(ConsoleReport)
 508:tmk_core/protocol/usb_descriptor.c ****         },
 509:tmk_core/protocol/usb_descriptor.c **** 
 510:tmk_core/protocol/usb_descriptor.c ****     .Console_INEndpoint =
 511:tmk_core/protocol/usb_descriptor.c ****         {
 512:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_End
 513:tmk_core/protocol/usb_descriptor.c **** 
 514:tmk_core/protocol/usb_descriptor.c ****             .EndpointAddress        = (ENDPOINT_DIR_IN | CONSOLE_IN_EPNUM),
 515:tmk_core/protocol/usb_descriptor.c ****             .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_D
 516:tmk_core/protocol/usb_descriptor.c ****             .EndpointSize           = CONSOLE_EPSIZE,
 517:tmk_core/protocol/usb_descriptor.c ****             .PollingIntervalMS      = 0x01
 518:tmk_core/protocol/usb_descriptor.c ****         },
 519:tmk_core/protocol/usb_descriptor.c **** 
 520:tmk_core/protocol/usb_descriptor.c ****     .Console_OUTEndpoint =
 521:tmk_core/protocol/usb_descriptor.c ****         {
 522:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_End
 523:tmk_core/protocol/usb_descriptor.c **** 
 524:tmk_core/protocol/usb_descriptor.c ****             .EndpointAddress        = (ENDPOINT_DIR_OUT | CONSOLE_OUT_EPNUM),
 525:tmk_core/protocol/usb_descriptor.c ****             .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_D
 526:tmk_core/protocol/usb_descriptor.c ****             .EndpointSize           = CONSOLE_EPSIZE,
 527:tmk_core/protocol/usb_descriptor.c ****             .PollingIntervalMS      = 0x01
 528:tmk_core/protocol/usb_descriptor.c ****         },
 529:tmk_core/protocol/usb_descriptor.c **** #endif
 530:tmk_core/protocol/usb_descriptor.c **** 
 531:tmk_core/protocol/usb_descriptor.c ****     /*
 532:tmk_core/protocol/usb_descriptor.c ****      * NKRO
 533:tmk_core/protocol/usb_descriptor.c ****      */
 534:tmk_core/protocol/usb_descriptor.c **** #ifdef NKRO_ENABLE
 535:tmk_core/protocol/usb_descriptor.c ****     .NKRO_Interface =
 536:tmk_core/protocol/usb_descriptor.c ****         {
 537:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_In
 538:tmk_core/protocol/usb_descriptor.c **** 
 539:tmk_core/protocol/usb_descriptor.c ****             .InterfaceNumber        = NKRO_INTERFACE,
 540:tmk_core/protocol/usb_descriptor.c ****             .AlternateSetting       = 0x00,
 541:tmk_core/protocol/usb_descriptor.c **** 
 542:tmk_core/protocol/usb_descriptor.c ****             .TotalEndpoints         = 1,
 543:tmk_core/protocol/usb_descriptor.c **** 
 544:tmk_core/protocol/usb_descriptor.c ****             .Class                  = HID_CSCP_HIDClass,
 545:tmk_core/protocol/usb_descriptor.c ****             .SubClass               = HID_CSCP_NonBootSubclass,
 546:tmk_core/protocol/usb_descriptor.c ****             .Protocol               = HID_CSCP_NonBootProtocol,
 547:tmk_core/protocol/usb_descriptor.c **** 
 548:tmk_core/protocol/usb_descriptor.c ****             .InterfaceStrIndex      = NO_DESCRIPTOR
 549:tmk_core/protocol/usb_descriptor.c ****         },
 550:tmk_core/protocol/usb_descriptor.c **** 
 551:tmk_core/protocol/usb_descriptor.c ****     .NKRO_HID =
 552:tmk_core/protocol/usb_descriptor.c ****         {
 553:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HID_DTYPE_
 554:tmk_core/protocol/usb_descriptor.c **** 
 555:tmk_core/protocol/usb_descriptor.c ****             .HIDSpec                = VERSION_BCD(1,1,1),
 556:tmk_core/protocol/usb_descriptor.c ****             .CountryCode            = 0x00,
 557:tmk_core/protocol/usb_descriptor.c ****             .TotalReportDescriptors = 1,
 558:tmk_core/protocol/usb_descriptor.c ****             .HIDReportType          = HID_DTYPE_Report,
 559:tmk_core/protocol/usb_descriptor.c ****             .HIDReportLength        = sizeof(NKROReport)
 560:tmk_core/protocol/usb_descriptor.c ****         },
 561:tmk_core/protocol/usb_descriptor.c **** 
 562:tmk_core/protocol/usb_descriptor.c ****     .NKRO_INEndpoint =
 563:tmk_core/protocol/usb_descriptor.c ****         {
 564:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_End
 565:tmk_core/protocol/usb_descriptor.c **** 
 566:tmk_core/protocol/usb_descriptor.c ****             .EndpointAddress        = (ENDPOINT_DIR_IN | NKRO_IN_EPNUM),
 567:tmk_core/protocol/usb_descriptor.c ****             .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_D
 568:tmk_core/protocol/usb_descriptor.c ****             .EndpointSize           = NKRO_EPSIZE,
 569:tmk_core/protocol/usb_descriptor.c ****             .PollingIntervalMS      = 0x01
 570:tmk_core/protocol/usb_descriptor.c ****         },
 571:tmk_core/protocol/usb_descriptor.c **** #endif
 572:tmk_core/protocol/usb_descriptor.c **** 
 573:tmk_core/protocol/usb_descriptor.c **** #ifdef MIDI_ENABLE
 574:tmk_core/protocol/usb_descriptor.c ****     .Audio_Interface_Association =
 575:tmk_core/protocol/usb_descriptor.c ****         {
 576:tmk_core/protocol/usb_descriptor.c ****             .Header                   = {.Size = sizeof(USB_Descriptor_Interface_Association_t), .T
 577:tmk_core/protocol/usb_descriptor.c **** 
 578:tmk_core/protocol/usb_descriptor.c ****             .FirstInterfaceIndex      = AC_INTERFACE,
 579:tmk_core/protocol/usb_descriptor.c ****             .TotalInterfaces          = 2,
 580:tmk_core/protocol/usb_descriptor.c **** 
 581:tmk_core/protocol/usb_descriptor.c ****             .Class                    = AUDIO_CSCP_AudioClass,
 582:tmk_core/protocol/usb_descriptor.c ****             .SubClass                 = AUDIO_CSCP_ControlSubclass,
 583:tmk_core/protocol/usb_descriptor.c ****             .Protocol                 = AUDIO_CSCP_ControlProtocol,
 584:tmk_core/protocol/usb_descriptor.c **** 
 585:tmk_core/protocol/usb_descriptor.c ****             .IADStrIndex              = NO_DESCRIPTOR,
 586:tmk_core/protocol/usb_descriptor.c ****         },
 587:tmk_core/protocol/usb_descriptor.c ****     .Audio_ControlInterface =
 588:tmk_core/protocol/usb_descriptor.c ****         {
 589:tmk_core/protocol/usb_descriptor.c ****             .Header                   = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_
 590:tmk_core/protocol/usb_descriptor.c **** 
 591:tmk_core/protocol/usb_descriptor.c ****             .InterfaceNumber          = AC_INTERFACE,
 592:tmk_core/protocol/usb_descriptor.c ****             .AlternateSetting         = 0,
 593:tmk_core/protocol/usb_descriptor.c **** 
 594:tmk_core/protocol/usb_descriptor.c ****             .TotalEndpoints           = 0,
 595:tmk_core/protocol/usb_descriptor.c **** 
 596:tmk_core/protocol/usb_descriptor.c ****             .Class                    = AUDIO_CSCP_AudioClass,
 597:tmk_core/protocol/usb_descriptor.c ****             .SubClass                 = AUDIO_CSCP_ControlSubclass,
 598:tmk_core/protocol/usb_descriptor.c ****             .Protocol                 = AUDIO_CSCP_ControlProtocol,
 599:tmk_core/protocol/usb_descriptor.c **** 
 600:tmk_core/protocol/usb_descriptor.c ****             .InterfaceStrIndex        = NO_DESCRIPTOR
 601:tmk_core/protocol/usb_descriptor.c ****         },
 602:tmk_core/protocol/usb_descriptor.c **** 
 603:tmk_core/protocol/usb_descriptor.c ****     .Audio_ControlInterface_SPC =
 604:tmk_core/protocol/usb_descriptor.c ****         {
 605:tmk_core/protocol/usb_descriptor.c ****             .Header                   = {.Size = sizeof(USB_Audio_Descriptor_Interface_AC_t), .Type
 606:tmk_core/protocol/usb_descriptor.c ****             .Subtype                  = AUDIO_DSUBTYPE_CSInterface_Header,
 607:tmk_core/protocol/usb_descriptor.c **** 
 608:tmk_core/protocol/usb_descriptor.c ****             .ACSpecification          = VERSION_BCD(1,0,0),
 609:tmk_core/protocol/usb_descriptor.c ****             .TotalLength              = sizeof(USB_Audio_Descriptor_Interface_AC_t),
 610:tmk_core/protocol/usb_descriptor.c **** 
 611:tmk_core/protocol/usb_descriptor.c ****             .InCollection             = 1,
 612:tmk_core/protocol/usb_descriptor.c ****             .InterfaceNumber          = AS_INTERFACE,
 613:tmk_core/protocol/usb_descriptor.c ****         },
 614:tmk_core/protocol/usb_descriptor.c **** 
 615:tmk_core/protocol/usb_descriptor.c ****     .Audio_StreamInterface =
 616:tmk_core/protocol/usb_descriptor.c ****         {
 617:tmk_core/protocol/usb_descriptor.c ****             .Header                   = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_
 618:tmk_core/protocol/usb_descriptor.c **** 
 619:tmk_core/protocol/usb_descriptor.c ****             .InterfaceNumber          = AS_INTERFACE,
 620:tmk_core/protocol/usb_descriptor.c ****             .AlternateSetting         = 0,
 621:tmk_core/protocol/usb_descriptor.c **** 
 622:tmk_core/protocol/usb_descriptor.c ****             .TotalEndpoints           = 2,
 623:tmk_core/protocol/usb_descriptor.c **** 
 624:tmk_core/protocol/usb_descriptor.c ****             .Class                    = AUDIO_CSCP_AudioClass,
 625:tmk_core/protocol/usb_descriptor.c ****             .SubClass                 = AUDIO_CSCP_MIDIStreamingSubclass,
 626:tmk_core/protocol/usb_descriptor.c ****             .Protocol                 = AUDIO_CSCP_StreamingProtocol,
 627:tmk_core/protocol/usb_descriptor.c **** 
 628:tmk_core/protocol/usb_descriptor.c ****             .InterfaceStrIndex        = NO_DESCRIPTOR
 629:tmk_core/protocol/usb_descriptor.c ****         },
 630:tmk_core/protocol/usb_descriptor.c **** 
 631:tmk_core/protocol/usb_descriptor.c ****     .Audio_StreamInterface_SPC =
 632:tmk_core/protocol/usb_descriptor.c ****         {
 633:tmk_core/protocol/usb_descriptor.c ****             .Header                   = {.Size = sizeof(USB_MIDI_Descriptor_AudioInterface_AS_t), .
 634:tmk_core/protocol/usb_descriptor.c ****             .Subtype                  = AUDIO_DSUBTYPE_CSInterface_General,
 635:tmk_core/protocol/usb_descriptor.c **** 
 636:tmk_core/protocol/usb_descriptor.c ****             .AudioSpecification       = VERSION_BCD(1,0,0),
 637:tmk_core/protocol/usb_descriptor.c **** 
 638:tmk_core/protocol/usb_descriptor.c ****             .TotalLength              = offsetof(USB_Descriptor_Configuration_t, MIDI_Out_Jack_Endp
 639:tmk_core/protocol/usb_descriptor.c ****                                         + sizeof(USB_MIDI_Descriptor_Jack_Endpoint_t)
 640:tmk_core/protocol/usb_descriptor.c ****                                         - offsetof(USB_Descriptor_Configuration_t, Audio_StreamInte
 641:tmk_core/protocol/usb_descriptor.c ****         },
 642:tmk_core/protocol/usb_descriptor.c **** 
 643:tmk_core/protocol/usb_descriptor.c ****     .MIDI_In_Jack_Emb =
 644:tmk_core/protocol/usb_descriptor.c ****         {
 645:tmk_core/protocol/usb_descriptor.c ****             .Header                   = {.Size = sizeof(USB_MIDI_Descriptor_InputJack_t), .Type = D
 646:tmk_core/protocol/usb_descriptor.c ****             .Subtype                  = AUDIO_DSUBTYPE_CSInterface_InputTerminal,
 647:tmk_core/protocol/usb_descriptor.c **** 
 648:tmk_core/protocol/usb_descriptor.c ****             .JackType                 = MIDI_JACKTYPE_Embedded,
 649:tmk_core/protocol/usb_descriptor.c ****             .JackID                   = 0x01,
 650:tmk_core/protocol/usb_descriptor.c **** 
 651:tmk_core/protocol/usb_descriptor.c ****             .JackStrIndex             = NO_DESCRIPTOR
 652:tmk_core/protocol/usb_descriptor.c ****         },
 653:tmk_core/protocol/usb_descriptor.c **** 
 654:tmk_core/protocol/usb_descriptor.c ****     .MIDI_In_Jack_Ext =
 655:tmk_core/protocol/usb_descriptor.c ****         {
 656:tmk_core/protocol/usb_descriptor.c ****             .Header                   = {.Size = sizeof(USB_MIDI_Descriptor_InputJack_t), .Type = D
 657:tmk_core/protocol/usb_descriptor.c ****             .Subtype                  = AUDIO_DSUBTYPE_CSInterface_InputTerminal,
 658:tmk_core/protocol/usb_descriptor.c **** 
 659:tmk_core/protocol/usb_descriptor.c ****             .JackType                 = MIDI_JACKTYPE_External,
 660:tmk_core/protocol/usb_descriptor.c ****             .JackID                   = 0x02,
 661:tmk_core/protocol/usb_descriptor.c **** 
 662:tmk_core/protocol/usb_descriptor.c ****             .JackStrIndex             = NO_DESCRIPTOR
 663:tmk_core/protocol/usb_descriptor.c ****         },
 664:tmk_core/protocol/usb_descriptor.c **** 
 665:tmk_core/protocol/usb_descriptor.c ****     .MIDI_Out_Jack_Emb =
 666:tmk_core/protocol/usb_descriptor.c ****         {
 667:tmk_core/protocol/usb_descriptor.c ****             .Header                   = {.Size = sizeof(USB_MIDI_Descriptor_OutputJack_t), .Type = 
 668:tmk_core/protocol/usb_descriptor.c ****             .Subtype                  = AUDIO_DSUBTYPE_CSInterface_OutputTerminal,
 669:tmk_core/protocol/usb_descriptor.c **** 
 670:tmk_core/protocol/usb_descriptor.c ****             .JackType                 = MIDI_JACKTYPE_Embedded,
 671:tmk_core/protocol/usb_descriptor.c ****             .JackID                   = 0x03,
 672:tmk_core/protocol/usb_descriptor.c **** 
 673:tmk_core/protocol/usb_descriptor.c ****             .NumberOfPins             = 1,
 674:tmk_core/protocol/usb_descriptor.c ****             .SourceJackID             = {0x02},
 675:tmk_core/protocol/usb_descriptor.c ****             .SourcePinID              = {0x01},
 676:tmk_core/protocol/usb_descriptor.c **** 
 677:tmk_core/protocol/usb_descriptor.c ****             .JackStrIndex             = NO_DESCRIPTOR
 678:tmk_core/protocol/usb_descriptor.c ****         },
 679:tmk_core/protocol/usb_descriptor.c **** 
 680:tmk_core/protocol/usb_descriptor.c ****     .MIDI_Out_Jack_Ext =
 681:tmk_core/protocol/usb_descriptor.c ****         {
 682:tmk_core/protocol/usb_descriptor.c ****             .Header                   = {.Size = sizeof(USB_MIDI_Descriptor_OutputJack_t), .Type = 
 683:tmk_core/protocol/usb_descriptor.c ****             .Subtype                  = AUDIO_DSUBTYPE_CSInterface_OutputTerminal,
 684:tmk_core/protocol/usb_descriptor.c **** 
 685:tmk_core/protocol/usb_descriptor.c ****             .JackType                 = MIDI_JACKTYPE_External,
 686:tmk_core/protocol/usb_descriptor.c ****             .JackID                   = 0x04,
 687:tmk_core/protocol/usb_descriptor.c **** 
 688:tmk_core/protocol/usb_descriptor.c ****             .NumberOfPins             = 1,
 689:tmk_core/protocol/usb_descriptor.c ****             .SourceJackID             = {0x01},
 690:tmk_core/protocol/usb_descriptor.c ****             .SourcePinID              = {0x01},
 691:tmk_core/protocol/usb_descriptor.c **** 
 692:tmk_core/protocol/usb_descriptor.c ****             .JackStrIndex             = NO_DESCRIPTOR
 693:tmk_core/protocol/usb_descriptor.c ****         },
 694:tmk_core/protocol/usb_descriptor.c **** 
 695:tmk_core/protocol/usb_descriptor.c ****     .MIDI_In_Jack_Endpoint =
 696:tmk_core/protocol/usb_descriptor.c ****         {
 697:tmk_core/protocol/usb_descriptor.c ****             .Endpoint =
 698:tmk_core/protocol/usb_descriptor.c ****                 {
 699:tmk_core/protocol/usb_descriptor.c ****                     .Header              = {.Size = sizeof(USB_Audio_Descriptor_StreamEndpoint_Std_
 700:tmk_core/protocol/usb_descriptor.c **** 
 701:tmk_core/protocol/usb_descriptor.c ****                     .EndpointAddress     = MIDI_STREAM_OUT_EPADDR,
 702:tmk_core/protocol/usb_descriptor.c ****                     .Attributes          = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_D
 703:tmk_core/protocol/usb_descriptor.c ****                     .EndpointSize        = MIDI_STREAM_EPSIZE,
 704:tmk_core/protocol/usb_descriptor.c ****                     .PollingIntervalMS   = 0x05
 705:tmk_core/protocol/usb_descriptor.c ****                 },
 706:tmk_core/protocol/usb_descriptor.c **** 
 707:tmk_core/protocol/usb_descriptor.c ****             .Refresh                  = 0,
 708:tmk_core/protocol/usb_descriptor.c ****             .SyncEndpointNumber       = 0
 709:tmk_core/protocol/usb_descriptor.c ****         },
 710:tmk_core/protocol/usb_descriptor.c **** 
 711:tmk_core/protocol/usb_descriptor.c ****     .MIDI_In_Jack_Endpoint_SPC =
 712:tmk_core/protocol/usb_descriptor.c ****         {
 713:tmk_core/protocol/usb_descriptor.c ****             .Header                   = {.Size = sizeof(USB_MIDI_Descriptor_Jack_Endpoint_t), .Type
 714:tmk_core/protocol/usb_descriptor.c ****             .Subtype                  = AUDIO_DSUBTYPE_CSEndpoint_General,
 715:tmk_core/protocol/usb_descriptor.c **** 
 716:tmk_core/protocol/usb_descriptor.c ****             .TotalEmbeddedJacks       = 0x01,
 717:tmk_core/protocol/usb_descriptor.c ****             .AssociatedJackID         = {0x01}
 718:tmk_core/protocol/usb_descriptor.c ****         },
 719:tmk_core/protocol/usb_descriptor.c **** 
 720:tmk_core/protocol/usb_descriptor.c ****     .MIDI_Out_Jack_Endpoint =
 721:tmk_core/protocol/usb_descriptor.c ****         {
 722:tmk_core/protocol/usb_descriptor.c ****             .Endpoint =
 723:tmk_core/protocol/usb_descriptor.c ****                 {
 724:tmk_core/protocol/usb_descriptor.c ****                     .Header              = {.Size = sizeof(USB_Audio_Descriptor_StreamEndpoint_Std_
 725:tmk_core/protocol/usb_descriptor.c **** 
 726:tmk_core/protocol/usb_descriptor.c ****                     .EndpointAddress     = MIDI_STREAM_IN_EPADDR,
 727:tmk_core/protocol/usb_descriptor.c ****                     .Attributes          = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_D
 728:tmk_core/protocol/usb_descriptor.c ****                     .EndpointSize        = MIDI_STREAM_EPSIZE,
 729:tmk_core/protocol/usb_descriptor.c ****                     .PollingIntervalMS   = 0x05
 730:tmk_core/protocol/usb_descriptor.c ****                 },
 731:tmk_core/protocol/usb_descriptor.c **** 
 732:tmk_core/protocol/usb_descriptor.c ****             .Refresh                  = 0,
 733:tmk_core/protocol/usb_descriptor.c ****             .SyncEndpointNumber       = 0
 734:tmk_core/protocol/usb_descriptor.c ****         },
 735:tmk_core/protocol/usb_descriptor.c **** 
 736:tmk_core/protocol/usb_descriptor.c ****     .MIDI_Out_Jack_Endpoint_SPC =
 737:tmk_core/protocol/usb_descriptor.c ****         {
 738:tmk_core/protocol/usb_descriptor.c ****             .Header                   = {.Size = sizeof(USB_MIDI_Descriptor_Jack_Endpoint_t), .Type
 739:tmk_core/protocol/usb_descriptor.c ****             .Subtype                  = AUDIO_DSUBTYPE_CSEndpoint_General,
 740:tmk_core/protocol/usb_descriptor.c **** 
 741:tmk_core/protocol/usb_descriptor.c ****             .TotalEmbeddedJacks       = 0x01,
 742:tmk_core/protocol/usb_descriptor.c ****             .AssociatedJackID         = {0x03}
 743:tmk_core/protocol/usb_descriptor.c ****         },
 744:tmk_core/protocol/usb_descriptor.c **** #endif
 745:tmk_core/protocol/usb_descriptor.c **** 
 746:tmk_core/protocol/usb_descriptor.c **** #ifdef VIRTSER_ENABLE
 747:tmk_core/protocol/usb_descriptor.c ****     .CDC_Interface_Association =
 748:tmk_core/protocol/usb_descriptor.c ****             {
 749:tmk_core/protocol/usb_descriptor.c ****                     .Header                 = {.Size = sizeof(USB_Descriptor_Interface_Association_
 750:tmk_core/protocol/usb_descriptor.c **** 
 751:tmk_core/protocol/usb_descriptor.c ****                     .FirstInterfaceIndex    = CCI_INTERFACE,
 752:tmk_core/protocol/usb_descriptor.c ****                     .TotalInterfaces        = 2,
 753:tmk_core/protocol/usb_descriptor.c **** 
 754:tmk_core/protocol/usb_descriptor.c ****                     .Class                  = CDC_CSCP_CDCClass,
 755:tmk_core/protocol/usb_descriptor.c ****                     .SubClass               = CDC_CSCP_ACMSubclass,
 756:tmk_core/protocol/usb_descriptor.c ****                     .Protocol               = CDC_CSCP_ATCommandProtocol,
 757:tmk_core/protocol/usb_descriptor.c **** 
 758:tmk_core/protocol/usb_descriptor.c ****                     .IADStrIndex            = NO_DESCRIPTOR,
 759:tmk_core/protocol/usb_descriptor.c ****             },
 760:tmk_core/protocol/usb_descriptor.c **** 
 761:tmk_core/protocol/usb_descriptor.c ****     .CDC_CCI_Interface =
 762:tmk_core/protocol/usb_descriptor.c ****             {
 763:tmk_core/protocol/usb_descriptor.c ****                     .Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = 
 764:tmk_core/protocol/usb_descriptor.c **** 
 765:tmk_core/protocol/usb_descriptor.c ****                     .InterfaceNumber        = CCI_INTERFACE,
 766:tmk_core/protocol/usb_descriptor.c ****                     .AlternateSetting       = 0,
 767:tmk_core/protocol/usb_descriptor.c **** 
 768:tmk_core/protocol/usb_descriptor.c ****                     .TotalEndpoints         = 1,
 769:tmk_core/protocol/usb_descriptor.c **** 
 770:tmk_core/protocol/usb_descriptor.c ****                     .Class                  = CDC_CSCP_CDCClass,
 771:tmk_core/protocol/usb_descriptor.c ****                     .SubClass               = CDC_CSCP_ACMSubclass,
 772:tmk_core/protocol/usb_descriptor.c ****                     .Protocol               = CDC_CSCP_ATCommandProtocol,
 773:tmk_core/protocol/usb_descriptor.c **** 
 774:tmk_core/protocol/usb_descriptor.c ****                     .InterfaceStrIndex      = NO_DESCRIPTOR
 775:tmk_core/protocol/usb_descriptor.c ****             },
 776:tmk_core/protocol/usb_descriptor.c **** 
 777:tmk_core/protocol/usb_descriptor.c ****     .CDC_Functional_Header =
 778:tmk_core/protocol/usb_descriptor.c ****             {
 779:tmk_core/protocol/usb_descriptor.c ****                     .Header                 = {.Size = sizeof(USB_CDC_Descriptor_FunctionalHeader_t
 780:tmk_core/protocol/usb_descriptor.c ****                     .Subtype                = 0x00,
 781:tmk_core/protocol/usb_descriptor.c **** 
 782:tmk_core/protocol/usb_descriptor.c ****                     .CDCSpecification       = VERSION_BCD(1,1,0),
 783:tmk_core/protocol/usb_descriptor.c ****             },
 784:tmk_core/protocol/usb_descriptor.c **** 
 785:tmk_core/protocol/usb_descriptor.c ****     .CDC_Functional_ACM =
 786:tmk_core/protocol/usb_descriptor.c ****             {
 787:tmk_core/protocol/usb_descriptor.c ****                     .Header                 = {.Size = sizeof(USB_CDC_Descriptor_FunctionalACM_t), 
 788:tmk_core/protocol/usb_descriptor.c ****                     .Subtype                = 0x02,
 789:tmk_core/protocol/usb_descriptor.c **** 
 790:tmk_core/protocol/usb_descriptor.c ****                     .Capabilities           = 0x02,
 791:tmk_core/protocol/usb_descriptor.c ****             },
 792:tmk_core/protocol/usb_descriptor.c **** 
 793:tmk_core/protocol/usb_descriptor.c ****     .CDC_Functional_Union =
 794:tmk_core/protocol/usb_descriptor.c ****             {
 795:tmk_core/protocol/usb_descriptor.c ****                     .Header                 = {.Size = sizeof(USB_CDC_Descriptor_FunctionalUnion_t)
 796:tmk_core/protocol/usb_descriptor.c ****                     .Subtype                = 0x06,
 797:tmk_core/protocol/usb_descriptor.c **** 
 798:tmk_core/protocol/usb_descriptor.c ****                     .MasterInterfaceNumber  = CCI_INTERFACE,
 799:tmk_core/protocol/usb_descriptor.c ****                     .SlaveInterfaceNumber   = CDI_INTERFACE,
 800:tmk_core/protocol/usb_descriptor.c ****             },
 801:tmk_core/protocol/usb_descriptor.c **** 
 802:tmk_core/protocol/usb_descriptor.c ****     .CDC_NotificationEndpoint =
 803:tmk_core/protocol/usb_descriptor.c ****             {
 804:tmk_core/protocol/usb_descriptor.c ****                     .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = D
 805:tmk_core/protocol/usb_descriptor.c **** 
 806:tmk_core/protocol/usb_descriptor.c ****                     .EndpointAddress        = CDC_NOTIFICATION_EPADDR,
 807:tmk_core/protocol/usb_descriptor.c ****                     .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT
 808:tmk_core/protocol/usb_descriptor.c ****                     .EndpointSize           = CDC_NOTIFICATION_EPSIZE,
 809:tmk_core/protocol/usb_descriptor.c ****                     .PollingIntervalMS      = 0xFF
 810:tmk_core/protocol/usb_descriptor.c ****             },
 811:tmk_core/protocol/usb_descriptor.c **** 
 812:tmk_core/protocol/usb_descriptor.c ****     .CDC_DCI_Interface =
 813:tmk_core/protocol/usb_descriptor.c ****             {
 814:tmk_core/protocol/usb_descriptor.c ****                     .Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = 
 815:tmk_core/protocol/usb_descriptor.c **** 
 816:tmk_core/protocol/usb_descriptor.c ****                     .InterfaceNumber        = CDI_INTERFACE,
 817:tmk_core/protocol/usb_descriptor.c ****                     .AlternateSetting       = 0,
 818:tmk_core/protocol/usb_descriptor.c **** 
 819:tmk_core/protocol/usb_descriptor.c ****                     .TotalEndpoints         = 2,
 820:tmk_core/protocol/usb_descriptor.c **** 
 821:tmk_core/protocol/usb_descriptor.c ****                     .Class                  = CDC_CSCP_CDCDataClass,
 822:tmk_core/protocol/usb_descriptor.c ****                     .SubClass               = CDC_CSCP_NoDataSubclass,
 823:tmk_core/protocol/usb_descriptor.c ****                     .Protocol               = CDC_CSCP_NoDataProtocol,
 824:tmk_core/protocol/usb_descriptor.c **** 
 825:tmk_core/protocol/usb_descriptor.c ****                     .InterfaceStrIndex      = NO_DESCRIPTOR
 826:tmk_core/protocol/usb_descriptor.c ****             },
 827:tmk_core/protocol/usb_descriptor.c **** 
 828:tmk_core/protocol/usb_descriptor.c ****     .CDC_DataOutEndpoint =
 829:tmk_core/protocol/usb_descriptor.c ****             {
 830:tmk_core/protocol/usb_descriptor.c ****                     .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = D
 831:tmk_core/protocol/usb_descriptor.c **** 
 832:tmk_core/protocol/usb_descriptor.c ****                     .EndpointAddress        = CDC_OUT_EPADDR,
 833:tmk_core/protocol/usb_descriptor.c ****                     .Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAG
 834:tmk_core/protocol/usb_descriptor.c ****                     .EndpointSize           = CDC_EPSIZE,
 835:tmk_core/protocol/usb_descriptor.c ****                     .PollingIntervalMS      = 0x05
 836:tmk_core/protocol/usb_descriptor.c ****             },
 837:tmk_core/protocol/usb_descriptor.c **** 
 838:tmk_core/protocol/usb_descriptor.c ****     .CDC_DataInEndpoint =
 839:tmk_core/protocol/usb_descriptor.c ****             {
 840:tmk_core/protocol/usb_descriptor.c ****                     .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = D
 841:tmk_core/protocol/usb_descriptor.c **** 
 842:tmk_core/protocol/usb_descriptor.c ****                     .EndpointAddress        = CDC_IN_EPADDR,
 843:tmk_core/protocol/usb_descriptor.c ****                     .Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAG
 844:tmk_core/protocol/usb_descriptor.c ****                     .EndpointSize           = CDC_EPSIZE,
 845:tmk_core/protocol/usb_descriptor.c ****                     .PollingIntervalMS      = 0x05
 846:tmk_core/protocol/usb_descriptor.c ****             },
 847:tmk_core/protocol/usb_descriptor.c **** #endif
 848:tmk_core/protocol/usb_descriptor.c **** };
 849:tmk_core/protocol/usb_descriptor.c **** 
 850:tmk_core/protocol/usb_descriptor.c **** 
 851:tmk_core/protocol/usb_descriptor.c **** /*******************************************************************************
 852:tmk_core/protocol/usb_descriptor.c ****  * String Descriptors
 853:tmk_core/protocol/usb_descriptor.c ****  ******************************************************************************/
 854:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM LanguageString =
 855:tmk_core/protocol/usb_descriptor.c **** {
 856:tmk_core/protocol/usb_descriptor.c ****     .Header                 = {.Size = USB_STRING_LEN(1), .Type = DTYPE_String},
 857:tmk_core/protocol/usb_descriptor.c **** 
 858:tmk_core/protocol/usb_descriptor.c ****     .UnicodeString          = {LANGUAGE_ID_ENG}
 859:tmk_core/protocol/usb_descriptor.c **** };
 860:tmk_core/protocol/usb_descriptor.c **** 
 861:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM ManufacturerString =
 862:tmk_core/protocol/usb_descriptor.c **** {
 863:tmk_core/protocol/usb_descriptor.c ****     /* subtract 1 for null terminator */
 864:tmk_core/protocol/usb_descriptor.c ****     .Header                 = {.Size = USB_STRING_LEN(sizeof(STR(MANUFACTURER))-1), .Type = DTYPE_S
 865:tmk_core/protocol/usb_descriptor.c **** 
 866:tmk_core/protocol/usb_descriptor.c ****     .UnicodeString          = LSTR(MANUFACTURER)
 867:tmk_core/protocol/usb_descriptor.c **** };
 868:tmk_core/protocol/usb_descriptor.c **** 
 869:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM ProductString =
 870:tmk_core/protocol/usb_descriptor.c **** {
 871:tmk_core/protocol/usb_descriptor.c ****     /* subtract 1 for null terminator */
 872:tmk_core/protocol/usb_descriptor.c ****     .Header                 = {.Size = USB_STRING_LEN(sizeof(STR(PRODUCT))-1), .Type = DTYPE_String
 873:tmk_core/protocol/usb_descriptor.c **** 
 874:tmk_core/protocol/usb_descriptor.c ****     .UnicodeString          = LSTR(PRODUCT)
 875:tmk_core/protocol/usb_descriptor.c **** };
 876:tmk_core/protocol/usb_descriptor.c **** 
 877:tmk_core/protocol/usb_descriptor.c **** #ifndef SERIAL_NUMBER
 878:tmk_core/protocol/usb_descriptor.c ****     #define SERIAL_NUMBER 0
 879:tmk_core/protocol/usb_descriptor.c **** #endif
 880:tmk_core/protocol/usb_descriptor.c **** 
 881:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM SerialNumberString =
 882:tmk_core/protocol/usb_descriptor.c **** {
 883:tmk_core/protocol/usb_descriptor.c ****     /* subtract 1 for null terminator */
 884:tmk_core/protocol/usb_descriptor.c ****     .Header                 = {.Size = USB_STRING_LEN(sizeof(STR(SERIAL_NUMBER))-1), .Type = DTYPE_
 885:tmk_core/protocol/usb_descriptor.c **** 
 886:tmk_core/protocol/usb_descriptor.c ****     .UnicodeString          = LSTR(SERIAL_NUMBER)
 887:tmk_core/protocol/usb_descriptor.c **** };
 888:tmk_core/protocol/usb_descriptor.c **** 
 889:tmk_core/protocol/usb_descriptor.c **** 
 890:tmk_core/protocol/usb_descriptor.c **** /** This function is called by the library when in device mode, and must be overridden (see library
 891:tmk_core/protocol/usb_descriptor.c ****  *  documentation) by the application code so that the address and size of a requested descriptor c
 892:tmk_core/protocol/usb_descriptor.c ****  *  to the USB library. When the device receives a Get Descriptor request on the control endpoint, 
 893:tmk_core/protocol/usb_descriptor.c ****  *  is called so that the descriptor details can be passed back and the appropriate descriptor sent
 894:tmk_core/protocol/usb_descriptor.c ****  *  USB host.
 895:tmk_core/protocol/usb_descriptor.c ****  */
 896:tmk_core/protocol/usb_descriptor.c **** uint16_t get_usb_descriptor(const uint16_t wValue,
 897:tmk_core/protocol/usb_descriptor.c ****                             const uint16_t wIndex,
 898:tmk_core/protocol/usb_descriptor.c ****                             const void** const DescriptorAddress)
 899:tmk_core/protocol/usb_descriptor.c **** {
  16               		.loc 1 899 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 900:tmk_core/protocol/usb_descriptor.c ****     const uint8_t  DescriptorType   = (wValue >> 8);
  23               		.loc 1 900 0
  24 0000 292F      		mov r18,r25
  25 0002 3327      		clr r19
 901:tmk_core/protocol/usb_descriptor.c ****     const uint8_t  DescriptorIndex  = (wValue & 0xFF);
 902:tmk_core/protocol/usb_descriptor.c **** 
 903:tmk_core/protocol/usb_descriptor.c ****     const void* Address = NULL;
 904:tmk_core/protocol/usb_descriptor.c ****     uint16_t    Size    = NO_DESCRIPTOR;
 905:tmk_core/protocol/usb_descriptor.c **** 
 906:tmk_core/protocol/usb_descriptor.c ****     switch (DescriptorType)
  26               		.loc 1 906 0
  27 0004 2330      		cpi r18,3
  28 0006 3105      		cpc r19,__zero_reg__
  29 0008 01F0      		breq .L3
  30 000a 04F4      		brge .L4
  31 000c 2130      		cpi r18,1
  32 000e 3105      		cpc r19,__zero_reg__
  33 0010 01F4      		brne .+2
  34 0012 00C0      		rjmp .L14
  35 0014 2230      		cpi r18,2
  36 0016 3105      		cpc r19,__zero_reg__
  37 0018 01F0      		breq .+2
  38 001a 00C0      		rjmp .L17
  39               	.LVL1:
 907:tmk_core/protocol/usb_descriptor.c ****     {
 908:tmk_core/protocol/usb_descriptor.c ****         case DTYPE_Device:
 909:tmk_core/protocol/usb_descriptor.c ****             Address = &DeviceDescriptor;
 910:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Device_t);
 911:tmk_core/protocol/usb_descriptor.c ****             break;
 912:tmk_core/protocol/usb_descriptor.c ****         case DTYPE_Configuration:
 913:tmk_core/protocol/usb_descriptor.c ****             Address = &ConfigurationDescriptor;
 914:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Configuration_t);
  40               		.loc 1 914 0
  41 001c 84E5      		ldi r24,lo8(84)
  42 001e 90E0      		ldi r25,0
  43               	.LVL2:
 913:tmk_core/protocol/usb_descriptor.c ****             Address = &ConfigurationDescriptor;
  44               		.loc 1 913 0
  45 0020 20E0      		ldi r18,lo8(ConfigurationDescriptor)
  46 0022 30E0      		ldi r19,hi8(ConfigurationDescriptor)
 915:tmk_core/protocol/usb_descriptor.c ****             break;
  47               		.loc 1 915 0
  48 0024 00C0      		rjmp .L5
  49               	.LVL3:
  50               	.L4:
 906:tmk_core/protocol/usb_descriptor.c ****     switch (DescriptorType)
  51               		.loc 1 906 0
  52 0026 2132      		cpi r18,33
  53 0028 3105      		cpc r19,__zero_reg__
  54 002a 01F0      		breq .L7
  55 002c 2232      		cpi r18,34
  56 002e 3105      		cpc r19,__zero_reg__
  57 0030 01F0      		breq .L8
  58 0032 00C0      		rjmp .L17
  59               	.L3:
  60 0034 9927      		clr r25
  61               	.LVL4:
 916:tmk_core/protocol/usb_descriptor.c ****         case DTYPE_String:
 917:tmk_core/protocol/usb_descriptor.c ****             switch (DescriptorIndex )
  62               		.loc 1 917 0
  63 0036 8130      		cpi r24,1
  64 0038 9105      		cpc r25,__zero_reg__
  65 003a 01F0      		breq .L9
  66 003c 04F4      		brge .L10
  67 003e 892B      		or r24,r25
  68 0040 01F4      		brne .L17
  69               	.LVL5:
  70               	.LBB2:
 918:tmk_core/protocol/usb_descriptor.c ****             {
 919:tmk_core/protocol/usb_descriptor.c ****                 case 0x00:
 920:tmk_core/protocol/usb_descriptor.c ****                     Address = &LanguageString;
 921:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&LanguageString.Header.Size);
  71               		.loc 1 921 0
  72 0042 E0E0      		ldi r30,lo8(LanguageString)
  73 0044 F0E0      		ldi r31,hi8(LanguageString)
  74 0046 00C0      		rjmp .L18
  75               	.LVL6:
  76               	.L10:
  77               	.LBE2:
 917:tmk_core/protocol/usb_descriptor.c ****             switch (DescriptorIndex )
  78               		.loc 1 917 0
  79 0048 8230      		cpi r24,2
  80 004a 9105      		cpc r25,__zero_reg__
  81 004c 01F0      		breq .L12
  82 004e 0397      		sbiw r24,3
  83 0050 01F4      		brne .L17
  84               	.LVL7:
  85               	.LBB3:
 922:tmk_core/protocol/usb_descriptor.c ****                     break;
 923:tmk_core/protocol/usb_descriptor.c ****                 case 0x01:
 924:tmk_core/protocol/usb_descriptor.c ****                     Address = &ManufacturerString;
 925:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 926:tmk_core/protocol/usb_descriptor.c ****                     break;
 927:tmk_core/protocol/usb_descriptor.c ****                 case 0x02:
 928:tmk_core/protocol/usb_descriptor.c ****                     Address = &ProductString;
 929:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&ProductString.Header.Size);
 930:tmk_core/protocol/usb_descriptor.c ****                     break;
 931:tmk_core/protocol/usb_descriptor.c ****                 case 0x03:
 932:tmk_core/protocol/usb_descriptor.c ****                     Address = &SerialNumberString;
 933:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&SerialNumberString.Header.Size);
  86               		.loc 1 933 0
  87 0052 E0E0      		ldi r30,lo8(SerialNumberString)
  88 0054 F0E0      		ldi r31,hi8(SerialNumberString)
  89 0056 00C0      		rjmp .L18
  90               	.LVL8:
  91               	.L9:
  92               	.LBE3:
  93               	.LBB4:
 925:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&ManufacturerString.Header.Size);
  94               		.loc 1 925 0
  95 0058 E0E0      		ldi r30,lo8(ManufacturerString)
  96 005a F0E0      		ldi r31,hi8(ManufacturerString)
  97 005c 00C0      		rjmp .L18
  98               	.LVL9:
  99               	.L12:
 100               	.LBE4:
 101               	.LBB5:
 929:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&ProductString.Header.Size);
 102               		.loc 1 929 0
 103 005e E0E0      		ldi r30,lo8(ProductString)
 104 0060 F0E0      		ldi r31,hi8(ProductString)
 105               	.LVL10:
 106               	.L18:
 107               	.LBE5:
 108               	.LBB6:
 109               		.loc 1 933 0
 110               	/* #APP */
 111               	 ;  933 "tmk_core/protocol/usb_descriptor.c" 1
 112 0062 8491      		lpm r24, Z
 113               		
 114               	 ;  0 "" 2
 115               	.LVL11:
 116               	/* #NOAPP */
 117               	.LBE6:
 118 0064 90E0      		ldi r25,0
 119               	.LVL12:
 932:tmk_core/protocol/usb_descriptor.c ****                     Address = &SerialNumberString;
 120               		.loc 1 932 0
 121 0066 9F01      		movw r18,r30
 934:tmk_core/protocol/usb_descriptor.c ****                     break;
 122               		.loc 1 934 0
 123 0068 00C0      		rjmp .L5
 124               	.LVL13:
 125               	.L7:
 126 006a 6330      		cpi r22,3
 127 006c 7105      		cpc r23,__zero_reg__
 128 006e 00F4      		brsh .L17
 129 0070 FB01      		movw r30,r22
 130 0072 EE0F      		lsl r30
 131 0074 FF1F      		rol r31
 132 0076 E050      		subi r30,lo8(-(CSWTCH.1))
 133 0078 F040      		sbci r31,hi8(-(CSWTCH.1))
 134 007a 2081      		ld r18,Z
 135 007c 3181      		ldd r19,Z+1
 136 007e 89E0      		ldi r24,lo8(9)
 137 0080 90E0      		ldi r25,0
 138               	.LVL14:
 139 0082 00C0      		rjmp .L5
 140               	.LVL15:
 141               	.L8:
 142 0084 6330      		cpi r22,3
 143 0086 7105      		cpc r23,__zero_reg__
 144 0088 00F4      		brsh .L17
 145 008a FB01      		movw r30,r22
 146 008c EE0F      		lsl r30
 147 008e FF1F      		rol r31
 148               	.LVL16:
 149 0090 E050      		subi r30,lo8(-(CSWTCH.2))
 150 0092 F040      		sbci r31,hi8(-(CSWTCH.2))
 151 0094 2081      		ld r18,Z
 152 0096 3181      		ldd r19,Z+1
 153 0098 FB01      		movw r30,r22
 154 009a E050      		subi r30,lo8(-(CSWTCH.3))
 155 009c F040      		sbci r31,hi8(-(CSWTCH.3))
 156 009e 8081      		ld r24,Z
 157 00a0 90E0      		ldi r25,0
 158 00a2 00C0      		rjmp .L5
 159               	.LVL17:
 160               	.L14:
 910:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Device_t);
 161               		.loc 1 910 0
 162 00a4 82E1      		ldi r24,lo8(18)
 163 00a6 90E0      		ldi r25,0
 164               	.LVL18:
 909:tmk_core/protocol/usb_descriptor.c ****             Address = &DeviceDescriptor;
 165               		.loc 1 909 0
 166 00a8 20E0      		ldi r18,lo8(DeviceDescriptor)
 167 00aa 30E0      		ldi r19,hi8(DeviceDescriptor)
 168 00ac 00C0      		rjmp .L5
 169               	.L17:
 170 00ae 80E0      		ldi r24,0
 171 00b0 90E0      		ldi r25,0
 172 00b2 20E0      		ldi r18,0
 173 00b4 30E0      		ldi r19,0
 174               	.LVL19:
 175               	.L5:
 935:tmk_core/protocol/usb_descriptor.c ****             }
 936:tmk_core/protocol/usb_descriptor.c ****             break;
 937:tmk_core/protocol/usb_descriptor.c ****         case HID_DTYPE_HID:
 938:tmk_core/protocol/usb_descriptor.c ****             switch (wIndex) {
 939:tmk_core/protocol/usb_descriptor.c ****             case KEYBOARD_INTERFACE:
 940:tmk_core/protocol/usb_descriptor.c ****                 Address = &ConfigurationDescriptor.Keyboard_HID;
 941:tmk_core/protocol/usb_descriptor.c ****                 Size    = sizeof(USB_HID_Descriptor_HID_t);
 942:tmk_core/protocol/usb_descriptor.c ****                 break;
 943:tmk_core/protocol/usb_descriptor.c **** #ifdef MOUSE_ENABLE
 944:tmk_core/protocol/usb_descriptor.c ****             case MOUSE_INTERFACE:
 945:tmk_core/protocol/usb_descriptor.c ****                 Address = &ConfigurationDescriptor.Mouse_HID;
 946:tmk_core/protocol/usb_descriptor.c ****                 Size    = sizeof(USB_HID_Descriptor_HID_t);
 947:tmk_core/protocol/usb_descriptor.c ****                 break;
 948:tmk_core/protocol/usb_descriptor.c **** #endif
 949:tmk_core/protocol/usb_descriptor.c **** #ifdef EXTRAKEY_ENABLE
 950:tmk_core/protocol/usb_descriptor.c ****             case EXTRAKEY_INTERFACE:
 951:tmk_core/protocol/usb_descriptor.c ****                 Address = &ConfigurationDescriptor.Extrakey_HID;
 952:tmk_core/protocol/usb_descriptor.c ****                 Size    = sizeof(USB_HID_Descriptor_HID_t);
 953:tmk_core/protocol/usb_descriptor.c ****                 break;
 954:tmk_core/protocol/usb_descriptor.c **** #endif
 955:tmk_core/protocol/usb_descriptor.c **** #ifdef RAW_ENABLE
 956:tmk_core/protocol/usb_descriptor.c ****             case RAW_INTERFACE:
 957:tmk_core/protocol/usb_descriptor.c ****                 Address = &ConfigurationDescriptor.Raw_HID;
 958:tmk_core/protocol/usb_descriptor.c ****                 Size    = sizeof(USB_HID_Descriptor_HID_t);
 959:tmk_core/protocol/usb_descriptor.c ****                 break;
 960:tmk_core/protocol/usb_descriptor.c **** #endif
 961:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
 962:tmk_core/protocol/usb_descriptor.c ****             case CONSOLE_INTERFACE:
 963:tmk_core/protocol/usb_descriptor.c ****                 Address = &ConfigurationDescriptor.Console_HID;
 964:tmk_core/protocol/usb_descriptor.c ****                 Size    = sizeof(USB_HID_Descriptor_HID_t);
 965:tmk_core/protocol/usb_descriptor.c ****                 break;
 966:tmk_core/protocol/usb_descriptor.c **** #endif
 967:tmk_core/protocol/usb_descriptor.c **** #ifdef NKRO_ENABLE
 968:tmk_core/protocol/usb_descriptor.c ****             case NKRO_INTERFACE:
 969:tmk_core/protocol/usb_descriptor.c ****                 Address = &ConfigurationDescriptor.NKRO_HID;
 970:tmk_core/protocol/usb_descriptor.c ****                 Size    = sizeof(USB_HID_Descriptor_HID_t);
 971:tmk_core/protocol/usb_descriptor.c ****                 break;
 972:tmk_core/protocol/usb_descriptor.c **** #endif
 973:tmk_core/protocol/usb_descriptor.c ****             }
 974:tmk_core/protocol/usb_descriptor.c ****             break;
 975:tmk_core/protocol/usb_descriptor.c ****         case HID_DTYPE_Report:
 976:tmk_core/protocol/usb_descriptor.c ****             switch (wIndex) {
 977:tmk_core/protocol/usb_descriptor.c ****             case KEYBOARD_INTERFACE:
 978:tmk_core/protocol/usb_descriptor.c ****                 Address = &KeyboardReport;
 979:tmk_core/protocol/usb_descriptor.c ****                 Size    = sizeof(KeyboardReport);
 980:tmk_core/protocol/usb_descriptor.c ****                 break;
 981:tmk_core/protocol/usb_descriptor.c **** #ifdef MOUSE_ENABLE
 982:tmk_core/protocol/usb_descriptor.c ****             case MOUSE_INTERFACE:
 983:tmk_core/protocol/usb_descriptor.c ****                 Address = &MouseReport;
 984:tmk_core/protocol/usb_descriptor.c ****                 Size    = sizeof(MouseReport);
 985:tmk_core/protocol/usb_descriptor.c ****                 break;
 986:tmk_core/protocol/usb_descriptor.c **** #endif
 987:tmk_core/protocol/usb_descriptor.c **** #ifdef EXTRAKEY_ENABLE
 988:tmk_core/protocol/usb_descriptor.c ****             case EXTRAKEY_INTERFACE:
 989:tmk_core/protocol/usb_descriptor.c ****                 Address = &ExtrakeyReport;
 990:tmk_core/protocol/usb_descriptor.c ****                 Size    = sizeof(ExtrakeyReport);
 991:tmk_core/protocol/usb_descriptor.c ****                 break;
 992:tmk_core/protocol/usb_descriptor.c **** #endif
 993:tmk_core/protocol/usb_descriptor.c **** #ifdef RAW_ENABLE
 994:tmk_core/protocol/usb_descriptor.c ****             case RAW_INTERFACE:
 995:tmk_core/protocol/usb_descriptor.c ****                 Address = &RawReport;
 996:tmk_core/protocol/usb_descriptor.c ****                 Size    = sizeof(RawReport);
 997:tmk_core/protocol/usb_descriptor.c ****                 break;
 998:tmk_core/protocol/usb_descriptor.c **** #endif
 999:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
1000:tmk_core/protocol/usb_descriptor.c ****             case CONSOLE_INTERFACE:
1001:tmk_core/protocol/usb_descriptor.c ****                 Address = &ConsoleReport;
1002:tmk_core/protocol/usb_descriptor.c ****                 Size    = sizeof(ConsoleReport);
1003:tmk_core/protocol/usb_descriptor.c ****                 break;
1004:tmk_core/protocol/usb_descriptor.c **** #endif
1005:tmk_core/protocol/usb_descriptor.c **** #ifdef NKRO_ENABLE
1006:tmk_core/protocol/usb_descriptor.c ****             case NKRO_INTERFACE:
1007:tmk_core/protocol/usb_descriptor.c ****                 Address = &NKROReport;
1008:tmk_core/protocol/usb_descriptor.c ****                 Size    = sizeof(NKROReport);
1009:tmk_core/protocol/usb_descriptor.c ****                 break;
1010:tmk_core/protocol/usb_descriptor.c **** #endif
1011:tmk_core/protocol/usb_descriptor.c ****             }
1012:tmk_core/protocol/usb_descriptor.c ****             break;
1013:tmk_core/protocol/usb_descriptor.c ****     }
1014:tmk_core/protocol/usb_descriptor.c **** 
1015:tmk_core/protocol/usb_descriptor.c ****     *DescriptorAddress = Address;
 176               		.loc 1 1015 0
 177 00b6 FA01      		movw r30,r20
 178 00b8 3183      		std Z+1,r19
 179 00ba 2083      		st Z,r18
1016:tmk_core/protocol/usb_descriptor.c ****     return Size;
1017:tmk_core/protocol/usb_descriptor.c **** }
 180               		.loc 1 1017 0
 181 00bc 0895      		ret
 182               		.cfi_endproc
 183               	.LFE100:
 185               		.section	.rodata.CSWTCH.3,"a",@progbits
 188               	CSWTCH.3:
 189 0000 40        		.byte	64
 190 0001 4D        		.byte	77
 191 0002 36        		.byte	54
 192               		.section	.rodata.CSWTCH.2,"a",@progbits
 195               	CSWTCH.2:
 196 0000 0000      		.word	KeyboardReport
 197 0002 0000      		.word	MouseReport
 198 0004 0000      		.word	ExtrakeyReport
 199               		.section	.rodata.CSWTCH.1,"a",@progbits
 202               	CSWTCH.1:
 203 0000 0000      		.word	ConfigurationDescriptor+18
 204 0002 0000      		.word	ConfigurationDescriptor+43
 205 0004 0000      		.word	ConfigurationDescriptor+68
 206               	.global	SerialNumberString
 207               		.section	.progmem.data.SerialNumberString,"a",@progbits
 210               	SerialNumberString:
 211 0000 04        		.byte	4
 212 0001 03        		.byte	3
 213 0002 3000      		.string	"0"
 214 0004 00        		.string	""
 215 0005 00        		.string	""
 216               	.global	ProductString
 217               		.section	.progmem.data.ProductString,"a",@progbits
 220               	ProductString:
 221 0000 12        		.byte	18
 222 0001 03        		.byte	3
 223 0002 4D00      		.string	"M"
 224 0004 6100      		.string	"a"
 225 0006 6E00      		.string	"n"
 226 0008 7500      		.string	"u"
 227 000a 6600      		.string	"f"
 228 000c 6F00      		.string	"o"
 229 000e 7200      		.string	"r"
 230 0010 6D00      		.string	"m"
 231 0012 00        		.string	""
 232 0013 00        		.string	""
 233               	.global	ManufacturerString
 234               		.section	.progmem.data.ManufacturerString,"a",@progbits
 237               	ManufacturerString:
 238 0000 16        		.byte	22
 239 0001 03        		.byte	3
 240 0002 4300      		.string	"C"
 241 0004 4800      		.string	"H"
 242 0006 2000      		.string	" "
 243 0008 6200      		.string	"b"
 244 000a 6F00      		.string	"o"
 245 000c 7800      		.string	"x"
 246 000e 4D00      		.string	"M"
 247 0010 6F00      		.string	"o"
 248 0012 6400      		.string	"d"
 249 0014 7300      		.string	"s"
 250 0016 00        		.string	""
 251 0017 00        		.string	""
 252               	.global	LanguageString
 253               		.section	.progmem.data.LanguageString,"a",@progbits
 256               	LanguageString:
 257 0000 04        		.byte	4
 258 0001 03        		.byte	3
 259 0002 0904      		.word	1033
 260               	.global	ConfigurationDescriptor
 261               		.section	.progmem.data.ConfigurationDescriptor,"a",@progbits
 264               	ConfigurationDescriptor:
 265 0000 09        		.byte	9
 266 0001 02        		.byte	2
 267 0002 5400      		.word	84
 268 0004 03        		.byte	3
 269 0005 01        		.byte	1
 270 0006 00        		.byte	0
 271 0007 A0        		.byte	-96
 272 0008 FA        		.byte	-6
 273 0009 09        		.byte	9
 274 000a 04        		.byte	4
 275 000b 00        		.byte	0
 276 000c 00        		.byte	0
 277 000d 01        		.byte	1
 278 000e 03        		.byte	3
 279 000f 01        		.byte	1
 280 0010 01        		.byte	1
 281 0011 00        		.byte	0
 282 0012 09        		.byte	9
 283 0013 21        		.byte	33
 284 0014 1101      		.word	273
 285 0016 00        		.byte	0
 286 0017 01        		.byte	1
 287 0018 22        		.byte	34
 288 0019 4000      		.word	64
 289 001b 07        		.byte	7
 290 001c 05        		.byte	5
 291 001d 81        		.byte	-127
 292 001e 03        		.byte	3
 293 001f 0800      		.word	8
 294 0021 0A        		.byte	10
 295 0022 09        		.byte	9
 296 0023 04        		.byte	4
 297 0024 01        		.byte	1
 298 0025 00        		.byte	0
 299 0026 01        		.byte	1
 300 0027 03        		.byte	3
 301 0028 01        		.byte	1
 302 0029 02        		.byte	2
 303 002a 00        		.byte	0
 304 002b 09        		.byte	9
 305 002c 21        		.byte	33
 306 002d 1101      		.word	273
 307 002f 00        		.byte	0
 308 0030 01        		.byte	1
 309 0031 22        		.byte	34
 310 0032 4D00      		.word	77
 311 0034 07        		.byte	7
 312 0035 05        		.byte	5
 313 0036 82        		.byte	-126
 314 0037 03        		.byte	3
 315 0038 0800      		.word	8
 316 003a 0A        		.byte	10
 317 003b 09        		.byte	9
 318 003c 04        		.byte	4
 319 003d 02        		.byte	2
 320 003e 00        		.byte	0
 321 003f 01        		.byte	1
 322 0040 03        		.byte	3
 323 0041 00        		.byte	0
 324 0042 00        		.byte	0
 325 0043 00        		.byte	0
 326 0044 09        		.byte	9
 327 0045 21        		.byte	33
 328 0046 1101      		.word	273
 329 0048 00        		.byte	0
 330 0049 01        		.byte	1
 331 004a 22        		.byte	34
 332 004b 3600      		.word	54
 333 004d 07        		.byte	7
 334 004e 05        		.byte	5
 335 004f 83        		.byte	-125
 336 0050 03        		.byte	3
 337 0051 0800      		.word	8
 338 0053 0A        		.byte	10
 339               	.global	DeviceDescriptor
 340               		.section	.progmem.data.DeviceDescriptor,"a",@progbits
 343               	DeviceDescriptor:
 344 0000 12        		.byte	18
 345 0001 01        		.byte	1
 346 0002 1001      		.word	272
 347 0004 00        		.byte	0
 348 0005 00        		.byte	0
 349 0006 00        		.byte	0
 350 0007 08        		.byte	8
 351 0008 EDFE      		.word	-275
 352 000a 6030      		.word	12384
 353 000c 0100      		.word	1
 354 000e 01        		.byte	1
 355 000f 02        		.byte	2
 356 0010 03        		.byte	3
 357 0011 01        		.byte	1
 358               	.global	ExtrakeyReport
 359               		.section	.progmem.data.ExtrakeyReport,"a",@progbits
 362               	ExtrakeyReport:
 363 0000 05        		.byte	5
 364 0001 01        		.byte	1
 365 0002 09        		.byte	9
 366 0003 80        		.byte	-128
 367 0004 A1        		.byte	-95
 368 0005 01        		.byte	1
 369 0006 85        		.byte	-123
 370 0007 02        		.byte	2
 371 0008 16        		.byte	22
 372 0009 01        		.byte	1
 373 000a 00        		.byte	0
 374 000b 26        		.byte	38
 375 000c 03        		.byte	3
 376 000d 00        		.byte	0
 377 000e 1A        		.byte	26
 378 000f 81        		.byte	-127
 379 0010 00        		.byte	0
 380 0011 2A        		.byte	42
 381 0012 83        		.byte	-125
 382 0013 00        		.byte	0
 383 0014 75        		.byte	117
 384 0015 10        		.byte	16
 385 0016 95        		.byte	-107
 386 0017 01        		.byte	1
 387 0018 81        		.byte	-127
 388 0019 00        		.byte	0
 389 001a C0        		.byte	-64
 390 001b 05        		.byte	5
 391 001c 0C        		.byte	12
 392 001d 09        		.byte	9
 393 001e 01        		.byte	1
 394 001f A1        		.byte	-95
 395 0020 01        		.byte	1
 396 0021 85        		.byte	-123
 397 0022 03        		.byte	3
 398 0023 16        		.byte	22
 399 0024 01        		.byte	1
 400 0025 00        		.byte	0
 401 0026 26        		.byte	38
 402 0027 9C        		.byte	-100
 403 0028 02        		.byte	2
 404 0029 1A        		.byte	26
 405 002a 01        		.byte	1
 406 002b 00        		.byte	0
 407 002c 2A        		.byte	42
 408 002d 9C        		.byte	-100
 409 002e 02        		.byte	2
 410 002f 75        		.byte	117
 411 0030 10        		.byte	16
 412 0031 95        		.byte	-107
 413 0032 01        		.byte	1
 414 0033 81        		.byte	-127
 415 0034 00        		.byte	0
 416 0035 C0        		.byte	-64
 417               	.global	MouseReport
 418               		.section	.progmem.data.MouseReport,"a",@progbits
 421               	MouseReport:
 422 0000 05        		.byte	5
 423 0001 01        		.byte	1
 424 0002 09        		.byte	9
 425 0003 02        		.byte	2
 426 0004 A1        		.byte	-95
 427 0005 01        		.byte	1
 428 0006 09        		.byte	9
 429 0007 01        		.byte	1
 430 0008 A1        		.byte	-95
 431 0009 00        		.byte	0
 432 000a 05        		.byte	5
 433 000b 09        		.byte	9
 434 000c 19        		.byte	25
 435 000d 01        		.byte	1
 436 000e 29        		.byte	41
 437 000f 05        		.byte	5
 438 0010 15        		.byte	21
 439 0011 00        		.byte	0
 440 0012 25        		.byte	37
 441 0013 01        		.byte	1
 442 0014 95        		.byte	-107
 443 0015 05        		.byte	5
 444 0016 75        		.byte	117
 445 0017 01        		.byte	1
 446 0018 81        		.byte	-127
 447 0019 02        		.byte	2
 448 001a 95        		.byte	-107
 449 001b 01        		.byte	1
 450 001c 75        		.byte	117
 451 001d 03        		.byte	3
 452 001e 81        		.byte	-127
 453 001f 01        		.byte	1
 454 0020 05        		.byte	5
 455 0021 01        		.byte	1
 456 0022 09        		.byte	9
 457 0023 30        		.byte	48
 458 0024 09        		.byte	9
 459 0025 31        		.byte	49
 460 0026 15        		.byte	21
 461 0027 81        		.byte	-127
 462 0028 25        		.byte	37
 463 0029 7F        		.byte	127
 464 002a 95        		.byte	-107
 465 002b 02        		.byte	2
 466 002c 75        		.byte	117
 467 002d 08        		.byte	8
 468 002e 81        		.byte	-127
 469 002f 06        		.byte	6
 470 0030 09        		.byte	9
 471 0031 38        		.byte	56
 472 0032 15        		.byte	21
 473 0033 81        		.byte	-127
 474 0034 25        		.byte	37
 475 0035 7F        		.byte	127
 476 0036 95        		.byte	-107
 477 0037 01        		.byte	1
 478 0038 75        		.byte	117
 479 0039 08        		.byte	8
 480 003a 81        		.byte	-127
 481 003b 06        		.byte	6
 482 003c 05        		.byte	5
 483 003d 0C        		.byte	12
 484 003e 0A        		.byte	10
 485 003f 38        		.byte	56
 486 0040 02        		.byte	2
 487 0041 15        		.byte	21
 488 0042 81        		.byte	-127
 489 0043 25        		.byte	37
 490 0044 7F        		.byte	127
 491 0045 95        		.byte	-107
 492 0046 01        		.byte	1
 493 0047 75        		.byte	117
 494 0048 08        		.byte	8
 495 0049 81        		.byte	-127
 496 004a 06        		.byte	6
 497 004b C0        		.byte	-64
 498 004c C0        		.byte	-64
 499               	.global	KeyboardReport
 500               		.section	.progmem.data.KeyboardReport,"a",@progbits
 503               	KeyboardReport:
 504 0000 05        		.byte	5
 505 0001 01        		.byte	1
 506 0002 09        		.byte	9
 507 0003 06        		.byte	6
 508 0004 A1        		.byte	-95
 509 0005 01        		.byte	1
 510 0006 05        		.byte	5
 511 0007 07        		.byte	7
 512 0008 19        		.byte	25
 513 0009 E0        		.byte	-32
 514 000a 29        		.byte	41
 515 000b E7        		.byte	-25
 516 000c 15        		.byte	21
 517 000d 00        		.byte	0
 518 000e 25        		.byte	37
 519 000f 01        		.byte	1
 520 0010 95        		.byte	-107
 521 0011 08        		.byte	8
 522 0012 75        		.byte	117
 523 0013 01        		.byte	1
 524 0014 81        		.byte	-127
 525 0015 02        		.byte	2
 526 0016 95        		.byte	-107
 527 0017 01        		.byte	1
 528 0018 75        		.byte	117
 529 0019 08        		.byte	8
 530 001a 81        		.byte	-127
 531 001b 01        		.byte	1
 532 001c 05        		.byte	5
 533 001d 08        		.byte	8
 534 001e 19        		.byte	25
 535 001f 01        		.byte	1
 536 0020 29        		.byte	41
 537 0021 05        		.byte	5
 538 0022 95        		.byte	-107
 539 0023 05        		.byte	5
 540 0024 75        		.byte	117
 541 0025 01        		.byte	1
 542 0026 91        		.byte	-111
 543 0027 02        		.byte	2
 544 0028 95        		.byte	-107
 545 0029 01        		.byte	1
 546 002a 75        		.byte	117
 547 002b 03        		.byte	3
 548 002c 91        		.byte	-111
 549 002d 01        		.byte	1
 550 002e 05        		.byte	5
 551 002f 07        		.byte	7
 552 0030 19        		.byte	25
 553 0031 00        		.byte	0
 554 0032 29        		.byte	41
 555 0033 FF        		.byte	-1
 556 0034 15        		.byte	21
 557 0035 00        		.byte	0
 558 0036 26        		.byte	38
 559 0037 FF        		.byte	-1
 560 0038 00        		.byte	0
 561 0039 95        		.byte	-107
 562 003a 06        		.byte	6
 563 003b 75        		.byte	117
 564 003c 08        		.byte	8
 565 003d 81        		.byte	-127
 566 003e 00        		.byte	0
 567 003f C0        		.byte	-64
 568               		.text
 569               	.Letext0:
 570               		.file 2 "/usr/lib/avr/include/stdint.h"
 571               		.file 3 "/usr/lib/gcc/avr/4.8.2/include/stddef.h"
 572               		.file 4 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdDescriptors.h"
 573               		.file 5 "./lib/lufa/LUFA/Drivers/USB/Class/Device/../Common/HIDClassCommon.h"
 574               		.file 6 "tmk_core/protocol/usb_descriptor.h"
 575               		.file 7 "./lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 usb_descriptor.c
     /tmp/ccnIlXlC.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccnIlXlC.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccnIlXlC.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccnIlXlC.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccnIlXlC.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccnIlXlC.s:13     .text.get_usb_descriptor:0000000000000000 get_usb_descriptor
     /tmp/ccnIlXlC.s:264    .progmem.data.ConfigurationDescriptor:0000000000000000 ConfigurationDescriptor
     /tmp/ccnIlXlC.s:256    .progmem.data.LanguageString:0000000000000000 LanguageString
     /tmp/ccnIlXlC.s:210    .progmem.data.SerialNumberString:0000000000000000 SerialNumberString
     /tmp/ccnIlXlC.s:237    .progmem.data.ManufacturerString:0000000000000000 ManufacturerString
     /tmp/ccnIlXlC.s:220    .progmem.data.ProductString:0000000000000000 ProductString
     /tmp/ccnIlXlC.s:202    .rodata.CSWTCH.1:0000000000000000 CSWTCH.1
     /tmp/ccnIlXlC.s:195    .rodata.CSWTCH.2:0000000000000000 CSWTCH.2
     /tmp/ccnIlXlC.s:188    .rodata.CSWTCH.3:0000000000000000 CSWTCH.3
     /tmp/ccnIlXlC.s:343    .progmem.data.DeviceDescriptor:0000000000000000 DeviceDescriptor
     /tmp/ccnIlXlC.s:503    .progmem.data.KeyboardReport:0000000000000000 KeyboardReport
     /tmp/ccnIlXlC.s:421    .progmem.data.MouseReport:0000000000000000 MouseReport
     /tmp/ccnIlXlC.s:362    .progmem.data.ExtrakeyReport:0000000000000000 ExtrakeyReport

UNDEFINED SYMBOLS
__do_copy_data
