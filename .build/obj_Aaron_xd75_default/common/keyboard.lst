   1               		.file	"keyboard.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.matrix_setup,"ax",@progbits
  11               		.weak	matrix_setup
  13               	matrix_setup:
  14               	.LFB103:
  15               		.file 1 "./tmk_core/common/keyboard.c"
   1:./tmk_core/common/keyboard.c **** /*
   2:./tmk_core/common/keyboard.c **** Copyright 2011, 2012, 2013 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/keyboard.c **** 
   4:./tmk_core/common/keyboard.c **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/keyboard.c **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/keyboard.c **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/keyboard.c **** (at your option) any later version.
   8:./tmk_core/common/keyboard.c **** 
   9:./tmk_core/common/keyboard.c **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/keyboard.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/keyboard.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/keyboard.c **** GNU General Public License for more details.
  13:./tmk_core/common/keyboard.c **** 
  14:./tmk_core/common/keyboard.c **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/keyboard.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/keyboard.c **** */
  17:./tmk_core/common/keyboard.c **** 
  18:./tmk_core/common/keyboard.c **** #include <stdint.h>
  19:./tmk_core/common/keyboard.c **** #include "keyboard.h"
  20:./tmk_core/common/keyboard.c **** #include "matrix.h"
  21:./tmk_core/common/keyboard.c **** #include "keymap.h"
  22:./tmk_core/common/keyboard.c **** #include "host.h"
  23:./tmk_core/common/keyboard.c **** #include "led.h"
  24:./tmk_core/common/keyboard.c **** #include "keycode.h"
  25:./tmk_core/common/keyboard.c **** #include "timer.h"
  26:./tmk_core/common/keyboard.c **** #include "print.h"
  27:./tmk_core/common/keyboard.c **** #include "debug.h"
  28:./tmk_core/common/keyboard.c **** #include "command.h"
  29:./tmk_core/common/keyboard.c **** #include "util.h"
  30:./tmk_core/common/keyboard.c **** #include "sendchar.h"
  31:./tmk_core/common/keyboard.c **** #include "eeconfig.h"
  32:./tmk_core/common/keyboard.c **** #include "backlight.h"
  33:./tmk_core/common/keyboard.c **** #include "action_layer.h"
  34:./tmk_core/common/keyboard.c **** #ifdef BOOTMAGIC_ENABLE
  35:./tmk_core/common/keyboard.c **** #   include "bootmagic.h"
  36:./tmk_core/common/keyboard.c **** #else
  37:./tmk_core/common/keyboard.c **** #   include "magic.h"
  38:./tmk_core/common/keyboard.c **** #endif
  39:./tmk_core/common/keyboard.c **** #ifdef MOUSEKEY_ENABLE
  40:./tmk_core/common/keyboard.c **** #   include "mousekey.h"
  41:./tmk_core/common/keyboard.c **** #endif
  42:./tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
  43:./tmk_core/common/keyboard.c **** #   include "ps2_mouse.h"
  44:./tmk_core/common/keyboard.c **** #endif
  45:./tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
  46:./tmk_core/common/keyboard.c **** #   include "serial_mouse.h"
  47:./tmk_core/common/keyboard.c **** #endif
  48:./tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
  49:./tmk_core/common/keyboard.c **** #   include "adb.h"
  50:./tmk_core/common/keyboard.c **** #endif
  51:./tmk_core/common/keyboard.c **** #ifdef RGBLIGHT_ENABLE
  52:./tmk_core/common/keyboard.c **** #   include "rgblight.h"
  53:./tmk_core/common/keyboard.c **** #endif
  54:./tmk_core/common/keyboard.c **** #ifdef STENO_ENABLE
  55:./tmk_core/common/keyboard.c **** #   include "process_steno.h"
  56:./tmk_core/common/keyboard.c **** #endif
  57:./tmk_core/common/keyboard.c **** #ifdef FAUXCLICKY_ENABLE
  58:./tmk_core/common/keyboard.c **** #   include "fauxclicky.h"
  59:./tmk_core/common/keyboard.c **** #endif
  60:./tmk_core/common/keyboard.c **** #ifdef SERIAL_LINK_ENABLE
  61:./tmk_core/common/keyboard.c **** #   include "serial_link/system/serial_link.h"
  62:./tmk_core/common/keyboard.c **** #endif
  63:./tmk_core/common/keyboard.c **** #ifdef VISUALIZER_ENABLE
  64:./tmk_core/common/keyboard.c **** #   include "visualizer/visualizer.h"
  65:./tmk_core/common/keyboard.c **** #endif
  66:./tmk_core/common/keyboard.c **** #ifdef POINTING_DEVICE_ENABLE
  67:./tmk_core/common/keyboard.c **** #   include "pointing_device.h"
  68:./tmk_core/common/keyboard.c **** #endif
  69:./tmk_core/common/keyboard.c **** #ifdef MIDI_ENABLE
  70:./tmk_core/common/keyboard.c **** #   include "process_midi.h"
  71:./tmk_core/common/keyboard.c **** #endif
  72:./tmk_core/common/keyboard.c **** 
  73:./tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
  74:./tmk_core/common/keyboard.c **** extern const uint16_t keymaps[][MATRIX_ROWS][MATRIX_COLS];
  75:./tmk_core/common/keyboard.c **** static matrix_row_t get_real_keys(uint8_t row, matrix_row_t rowdata){
  76:./tmk_core/common/keyboard.c ****     matrix_row_t out = 0;
  77:./tmk_core/common/keyboard.c ****     for (uint8_t col = 0; col < MATRIX_COLS; col++) {
  78:./tmk_core/common/keyboard.c ****         //read each key in the row data and check if the keymap defines it as a real key
  79:./tmk_core/common/keyboard.c ****         if (pgm_read_byte(&keymaps[0][row][col]) && (rowdata & (1<<col))){
  80:./tmk_core/common/keyboard.c ****             //this creates new row data, if a key is defined in the keymap, it will be set here
  81:./tmk_core/common/keyboard.c ****             out |= 1<<col;
  82:./tmk_core/common/keyboard.c ****         }
  83:./tmk_core/common/keyboard.c ****     }
  84:./tmk_core/common/keyboard.c ****     return out;
  85:./tmk_core/common/keyboard.c **** }
  86:./tmk_core/common/keyboard.c **** 
  87:./tmk_core/common/keyboard.c **** static inline bool popcount_more_than_one(matrix_row_t rowdata)
  88:./tmk_core/common/keyboard.c **** {
  89:./tmk_core/common/keyboard.c ****     rowdata &= rowdata-1; //if there are less than two bits (keys) set, rowdata will become zero
  90:./tmk_core/common/keyboard.c ****     return rowdata;
  91:./tmk_core/common/keyboard.c **** }
  92:./tmk_core/common/keyboard.c **** 
  93:./tmk_core/common/keyboard.c **** static inline bool has_ghost_in_row(uint8_t row, matrix_row_t rowdata)
  94:./tmk_core/common/keyboard.c **** {
  95:./tmk_core/common/keyboard.c ****     /* No ghost exists when less than 2 keys are down on the row.
  96:./tmk_core/common/keyboard.c ****     If there are "active" blanks in the matrix, the key can't be pressed by the user,
  97:./tmk_core/common/keyboard.c ****     there is no doubt as to which keys are really being pressed.
  98:./tmk_core/common/keyboard.c ****     The ghosts will be ignored, they are KC_NO.   */
  99:./tmk_core/common/keyboard.c ****     rowdata = get_real_keys(row, rowdata);
 100:./tmk_core/common/keyboard.c ****     if ((popcount_more_than_one(rowdata)) == 0){
 101:./tmk_core/common/keyboard.c ****         return false;
 102:./tmk_core/common/keyboard.c ****     }
 103:./tmk_core/common/keyboard.c ****     /* Ghost occurs when the row shares a column line with other row,
 104:./tmk_core/common/keyboard.c ****     and two columns are read on each row. Blanks in the matrix don't matter,
 105:./tmk_core/common/keyboard.c ****     so they are filtered out.
 106:./tmk_core/common/keyboard.c ****     If there are two or more real keys pressed and they match columns with
 107:./tmk_core/common/keyboard.c ****     at least two of another row's real keys, the row will be ignored. Keep in mind,
 108:./tmk_core/common/keyboard.c ****     we are checking one row at a time, not all of them at once.
 109:./tmk_core/common/keyboard.c ****     */
 110:./tmk_core/common/keyboard.c ****     for (uint8_t i=0; i < MATRIX_ROWS; i++) {
 111:./tmk_core/common/keyboard.c ****         if (i != row && popcount_more_than_one(get_real_keys(i, matrix_get_row(i)) & rowdata)){
 112:./tmk_core/common/keyboard.c ****             return true;
 113:./tmk_core/common/keyboard.c ****         }
 114:./tmk_core/common/keyboard.c ****     }
 115:./tmk_core/common/keyboard.c ****     return false;
 116:./tmk_core/common/keyboard.c **** }
 117:./tmk_core/common/keyboard.c **** 
 118:./tmk_core/common/keyboard.c **** #endif
 119:./tmk_core/common/keyboard.c **** 
 120:./tmk_core/common/keyboard.c **** /** \brief matrix_setup
 121:./tmk_core/common/keyboard.c ****  *
 122:./tmk_core/common/keyboard.c ****  * FIXME: needs doc
 123:./tmk_core/common/keyboard.c ****  */
 124:./tmk_core/common/keyboard.c **** __attribute__ ((weak))
 125:./tmk_core/common/keyboard.c **** void matrix_setup(void) {
  16               		.loc 1 125 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22 0000 0895      		ret
  23               		.cfi_endproc
  24               	.LFE103:
  26               		.section	.text.keyboard_setup,"ax",@progbits
  27               	.global	keyboard_setup
  29               	keyboard_setup:
  30               	.LFB104:
 126:./tmk_core/common/keyboard.c **** }
 127:./tmk_core/common/keyboard.c **** 
 128:./tmk_core/common/keyboard.c **** /** \brief keyboard_setup
 129:./tmk_core/common/keyboard.c ****  *
 130:./tmk_core/common/keyboard.c ****  * FIXME: needs doc
 131:./tmk_core/common/keyboard.c ****  */
 132:./tmk_core/common/keyboard.c **** void keyboard_setup(void) {
  31               		.loc 1 132 0
  32               		.cfi_startproc
  33               	/* prologue: function */
  34               	/* frame size = 0 */
  35               	/* stack size = 0 */
  36               	.L__stack_usage = 0
 133:./tmk_core/common/keyboard.c ****     matrix_setup();
  37               		.loc 1 133 0
  38 0000 0C94 0000 		jmp matrix_setup
  39               	.LVL0:
  40               		.cfi_endproc
  41               	.LFE104:
  43               		.section	.text.is_keyboard_master,"ax",@progbits
  44               		.weak	is_keyboard_master
  46               	is_keyboard_master:
  47               	.LFB105:
 134:./tmk_core/common/keyboard.c **** }
 135:./tmk_core/common/keyboard.c **** 
 136:./tmk_core/common/keyboard.c **** /** \brief is_keyboard_master
 137:./tmk_core/common/keyboard.c ****  *
 138:./tmk_core/common/keyboard.c ****  * FIXME: needs doc
 139:./tmk_core/common/keyboard.c ****  */
 140:./tmk_core/common/keyboard.c **** __attribute__((weak))
 141:./tmk_core/common/keyboard.c **** bool is_keyboard_master(void) {
  48               		.loc 1 141 0
  49               		.cfi_startproc
  50               	/* prologue: function */
  51               	/* frame size = 0 */
  52               	/* stack size = 0 */
  53               	.L__stack_usage = 0
 142:./tmk_core/common/keyboard.c ****     return true;
 143:./tmk_core/common/keyboard.c **** }
  54               		.loc 1 143 0
  55 0000 81E0      		ldi r24,lo8(1)
  56 0002 0895      		ret
  57               		.cfi_endproc
  58               	.LFE105:
  60               		.section	.text.keyboard_init,"ax",@progbits
  61               	.global	keyboard_init
  63               	keyboard_init:
  64               	.LFB106:
 144:./tmk_core/common/keyboard.c **** 
 145:./tmk_core/common/keyboard.c **** /** \brief keyboard_init
 146:./tmk_core/common/keyboard.c ****  *
 147:./tmk_core/common/keyboard.c ****  * FIXME: needs doc
 148:./tmk_core/common/keyboard.c ****  */
 149:./tmk_core/common/keyboard.c **** void keyboard_init(void) {
  65               		.loc 1 149 0
  66               		.cfi_startproc
  67               	/* prologue: function */
  68               	/* frame size = 0 */
  69               	/* stack size = 0 */
  70               	.L__stack_usage = 0
 150:./tmk_core/common/keyboard.c ****     timer_init();
  71               		.loc 1 150 0
  72 0000 0E94 0000 		call timer_init
  73               	.LVL1:
 151:./tmk_core/common/keyboard.c ****     matrix_init();
  74               		.loc 1 151 0
  75 0004 0E94 0000 		call matrix_init
  76               	.LVL2:
 152:./tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
 153:./tmk_core/common/keyboard.c ****     ps2_mouse_init();
 154:./tmk_core/common/keyboard.c **** #endif
 155:./tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
 156:./tmk_core/common/keyboard.c ****     serial_mouse_init();
 157:./tmk_core/common/keyboard.c **** #endif
 158:./tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
 159:./tmk_core/common/keyboard.c ****     adb_mouse_init();
 160:./tmk_core/common/keyboard.c **** #endif
 161:./tmk_core/common/keyboard.c **** #ifdef BOOTMAGIC_ENABLE
 162:./tmk_core/common/keyboard.c ****     bootmagic();
  77               		.loc 1 162 0
  78 0008 0E94 0000 		call bootmagic
  79               	.LVL3:
 163:./tmk_core/common/keyboard.c **** #else
 164:./tmk_core/common/keyboard.c ****     magic();
 165:./tmk_core/common/keyboard.c **** #endif
 166:./tmk_core/common/keyboard.c **** #ifdef BACKLIGHT_ENABLE
 167:./tmk_core/common/keyboard.c ****     backlight_init();
 168:./tmk_core/common/keyboard.c **** #endif
 169:./tmk_core/common/keyboard.c **** #ifdef RGBLIGHT_ENABLE
 170:./tmk_core/common/keyboard.c ****     rgblight_init();
  80               		.loc 1 170 0
  81 000c 0C94 0000 		jmp rgblight_init
  82               	.LVL4:
  83               		.cfi_endproc
  84               	.LFE106:
  86               		.section	.text.keyboard_task,"ax",@progbits
  87               	.global	keyboard_task
  89               	keyboard_task:
  90               	.LFB107:
 171:./tmk_core/common/keyboard.c **** #endif
 172:./tmk_core/common/keyboard.c **** #ifdef STENO_ENABLE
 173:./tmk_core/common/keyboard.c ****     steno_init();
 174:./tmk_core/common/keyboard.c **** #endif
 175:./tmk_core/common/keyboard.c **** #ifdef FAUXCLICKY_ENABLE
 176:./tmk_core/common/keyboard.c ****     fauxclicky_init();
 177:./tmk_core/common/keyboard.c **** #endif
 178:./tmk_core/common/keyboard.c **** #ifdef POINTING_DEVICE_ENABLE
 179:./tmk_core/common/keyboard.c ****     pointing_device_init();
 180:./tmk_core/common/keyboard.c **** #endif
 181:./tmk_core/common/keyboard.c **** #if defined(NKRO_ENABLE) && defined(FORCE_NKRO)
 182:./tmk_core/common/keyboard.c ****     keymap_config.nkro = 1;
 183:./tmk_core/common/keyboard.c **** #endif
 184:./tmk_core/common/keyboard.c **** }
 185:./tmk_core/common/keyboard.c **** 
 186:./tmk_core/common/keyboard.c **** /** \brief Keyboard task: Do keyboard routine jobs
 187:./tmk_core/common/keyboard.c ****  *
 188:./tmk_core/common/keyboard.c ****  * Do routine keyboard jobs: 
 189:./tmk_core/common/keyboard.c ****  *
 190:./tmk_core/common/keyboard.c ****  * * scan matrix
 191:./tmk_core/common/keyboard.c ****  * * handle mouse movements
 192:./tmk_core/common/keyboard.c ****  * * run visualizer code
 193:./tmk_core/common/keyboard.c ****  * * handle midi commands
 194:./tmk_core/common/keyboard.c ****  * * light LEDs
 195:./tmk_core/common/keyboard.c ****  *
 196:./tmk_core/common/keyboard.c ****  * This is repeatedly called as fast as possible.
 197:./tmk_core/common/keyboard.c ****  */
 198:./tmk_core/common/keyboard.c **** void keyboard_task(void)
 199:./tmk_core/common/keyboard.c **** {
  91               		.loc 1 199 0
  92               		.cfi_startproc
  93 0000 5F92      		push r5
  94               	.LCFI0:
  95               		.cfi_def_cfa_offset 3
  96               		.cfi_offset 5, -2
  97 0002 6F92      		push r6
  98               	.LCFI1:
  99               		.cfi_def_cfa_offset 4
 100               		.cfi_offset 6, -3
 101 0004 7F92      		push r7
 102               	.LCFI2:
 103               		.cfi_def_cfa_offset 5
 104               		.cfi_offset 7, -4
 105 0006 8F92      		push r8
 106               	.LCFI3:
 107               		.cfi_def_cfa_offset 6
 108               		.cfi_offset 8, -5
 109 0008 9F92      		push r9
 110               	.LCFI4:
 111               		.cfi_def_cfa_offset 7
 112               		.cfi_offset 9, -6
 113 000a AF92      		push r10
 114               	.LCFI5:
 115               		.cfi_def_cfa_offset 8
 116               		.cfi_offset 10, -7
 117 000c BF92      		push r11
 118               	.LCFI6:
 119               		.cfi_def_cfa_offset 9
 120               		.cfi_offset 11, -8
 121 000e CF92      		push r12
 122               	.LCFI7:
 123               		.cfi_def_cfa_offset 10
 124               		.cfi_offset 12, -9
 125 0010 DF92      		push r13
 126               	.LCFI8:
 127               		.cfi_def_cfa_offset 11
 128               		.cfi_offset 13, -10
 129 0012 EF92      		push r14
 130               	.LCFI9:
 131               		.cfi_def_cfa_offset 12
 132               		.cfi_offset 14, -11
 133 0014 FF92      		push r15
 134               	.LCFI10:
 135               		.cfi_def_cfa_offset 13
 136               		.cfi_offset 15, -12
 137 0016 0F93      		push r16
 138               	.LCFI11:
 139               		.cfi_def_cfa_offset 14
 140               		.cfi_offset 16, -13
 141 0018 1F93      		push r17
 142               	.LCFI12:
 143               		.cfi_def_cfa_offset 15
 144               		.cfi_offset 17, -14
 145 001a CF93      		push r28
 146               	.LCFI13:
 147               		.cfi_def_cfa_offset 16
 148               		.cfi_offset 28, -15
 149 001c DF93      		push r29
 150               	.LCFI14:
 151               		.cfi_def_cfa_offset 17
 152               		.cfi_offset 29, -16
 153 001e CDB7      		in r28,__SP_L__
 154 0020 DEB7      		in r29,__SP_H__
 155               	.LCFI15:
 156               		.cfi_def_cfa_register 28
 157 0022 2A97      		sbiw r28,10
 158               	.LCFI16:
 159               		.cfi_def_cfa_offset 27
 160 0024 0FB6      		in __tmp_reg__,__SREG__
 161 0026 F894      		cli
 162 0028 DEBF      		out __SP_H__,r29
 163 002a 0FBE      		out __SREG__,__tmp_reg__
 164 002c CDBF      		out __SP_L__,r28
 165               	/* prologue: function */
 166               	/* frame size = 10 */
 167               	/* stack size = 25 */
 168               	.L__stack_usage = 25
 169               	.LVL5:
 200:./tmk_core/common/keyboard.c ****     static matrix_row_t matrix_prev[MATRIX_ROWS];
 201:./tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 202:./tmk_core/common/keyboard.c ****   //  static matrix_row_t matrix_ghost[MATRIX_ROWS];
 203:./tmk_core/common/keyboard.c **** #endif
 204:./tmk_core/common/keyboard.c ****     static uint8_t led_status = 0;
 205:./tmk_core/common/keyboard.c ****     matrix_row_t matrix_row = 0;
 206:./tmk_core/common/keyboard.c ****     matrix_row_t matrix_change = 0;
 207:./tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 208:./tmk_core/common/keyboard.c ****     uint8_t keys_processed = 0;
 209:./tmk_core/common/keyboard.c **** #endif
 210:./tmk_core/common/keyboard.c **** 
 211:./tmk_core/common/keyboard.c ****     matrix_scan();
 170               		.loc 1 211 0
 171 002e 0E94 0000 		call matrix_scan
 172               	.LVL6:
 212:./tmk_core/common/keyboard.c ****     if (is_keyboard_master()) {
 173               		.loc 1 212 0
 174 0032 0E94 0000 		call is_keyboard_master
 175               	.LVL7:
 176 0036 8111      		cpse r24,__zero_reg__
 177 0038 00C0      		rjmp .L6
 178               	.LVL8:
 179               	.L10:
 213:./tmk_core/common/keyboard.c ****         for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 214:./tmk_core/common/keyboard.c ****             matrix_row = matrix_get_row(r);
 215:./tmk_core/common/keyboard.c ****             matrix_change = matrix_row ^ matrix_prev[r];
 216:./tmk_core/common/keyboard.c ****             if (matrix_change) {
 217:./tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 218:./tmk_core/common/keyboard.c ****                 if (has_ghost_in_row(r, matrix_row)) {
 219:./tmk_core/common/keyboard.c ****                     /* Keep track of whether ghosted status has changed for
 220:./tmk_core/common/keyboard.c ****                     * debugging. But don't update matrix_prev until un-ghosted, or
 221:./tmk_core/common/keyboard.c ****                     * the last key would be lost.
 222:./tmk_core/common/keyboard.c ****                     */
 223:./tmk_core/common/keyboard.c ****                     //if (debug_matrix && matrix_ghost[r] != matrix_row) {
 224:./tmk_core/common/keyboard.c ****                     //    matrix_print();
 225:./tmk_core/common/keyboard.c ****                     //}
 226:./tmk_core/common/keyboard.c ****                     //matrix_ghost[r] = matrix_row;
 227:./tmk_core/common/keyboard.c ****                     continue;
 228:./tmk_core/common/keyboard.c ****                 }
 229:./tmk_core/common/keyboard.c ****                 //matrix_ghost[r] = matrix_row;
 230:./tmk_core/common/keyboard.c **** #endif
 231:./tmk_core/common/keyboard.c ****                 if (debug_matrix) matrix_print();
 232:./tmk_core/common/keyboard.c ****                 for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 233:./tmk_core/common/keyboard.c ****                     if (matrix_change & ((matrix_row_t)1<<c)) {
 234:./tmk_core/common/keyboard.c ****                         action_exec((keyevent_t){
 235:./tmk_core/common/keyboard.c ****                             .key = (keypos_t){ .row = r, .col = c },
 236:./tmk_core/common/keyboard.c ****                             .pressed = (matrix_row & ((matrix_row_t)1<<c)),
 237:./tmk_core/common/keyboard.c ****                             .time = (timer_read() | 1) /* time should not be 0 */
 238:./tmk_core/common/keyboard.c ****                         });
 239:./tmk_core/common/keyboard.c ****                         // record a processed key
 240:./tmk_core/common/keyboard.c ****                         matrix_prev[r] ^= ((matrix_row_t)1<<c);
 241:./tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 242:./tmk_core/common/keyboard.c ****                         // only jump out if we have processed "enough" keys.
 243:./tmk_core/common/keyboard.c ****                         if (++keys_processed >= QMK_KEYS_PER_SCAN)
 244:./tmk_core/common/keyboard.c **** #endif
 245:./tmk_core/common/keyboard.c ****                         // process a key per task call
 246:./tmk_core/common/keyboard.c ****                         goto MATRIX_LOOP_END;
 247:./tmk_core/common/keyboard.c ****                     }
 248:./tmk_core/common/keyboard.c ****                 }
 249:./tmk_core/common/keyboard.c ****             }
 250:./tmk_core/common/keyboard.c ****         }
 251:./tmk_core/common/keyboard.c ****     }
 252:./tmk_core/common/keyboard.c ****     // call with pseudo tick event when no real key event.
 253:./tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 254:./tmk_core/common/keyboard.c ****     // we can get here with some keys processed now.
 255:./tmk_core/common/keyboard.c ****     if (!keys_processed)
 256:./tmk_core/common/keyboard.c **** #endif
 257:./tmk_core/common/keyboard.c ****     action_exec(TICK);
 180               		.loc 1 257 0
 181 003a 8FEF      		ldi r24,lo8(-1)
 182 003c 8983      		std Y+1,r24
 183 003e 8A83      		std Y+2,r24
 184 0040 1B82      		std Y+3,__zero_reg__
 185 0042 0E94 0000 		call timer_read
 186               	.LVL9:
 187 0046 8160      		ori r24,1
 188 0048 782F      		mov r23,r24
 189 004a 9D83      		std Y+5,r25
 190 004c 8C83      		std Y+4,r24
 191 004e 4981      		ldd r20,Y+1
 192 0050 5A81      		ldd r21,Y+2
 193 0052 6B81      		ldd r22,Y+3
 194 0054 8D81      		ldd r24,Y+5
 195 0056 0E94 0000 		call action_exec
 196               	.LVL10:
 197 005a 00C0      		rjmp .L7
 198               	.LVL11:
 199               	.L6:
 200 005c 90E0      		ldi r25,lo8(matrix_prev.5301)
 201 005e C92E      		mov r12,r25
 202 0060 90E0      		ldi r25,hi8(matrix_prev.5301)
 203 0062 D92E      		mov r13,r25
 212:./tmk_core/common/keyboard.c ****     if (is_keyboard_master()) {
 204               		.loc 1 212 0
 205 0064 00E0      		ldi r16,0
 206 0066 10E0      		ldi r17,0
 207               	.LBB6:
 208               	.LBB7:
 233:./tmk_core/common/keyboard.c ****                     if (matrix_change & ((matrix_row_t)1<<c)) {
 209               		.loc 1 233 0
 210 0068 AA24      		clr r10
 211 006a A394      		inc r10
 212 006c B12C      		mov r11,__zero_reg__
 213               	.LVL12:
 214               	.L16:
 215 006e 502E      		mov r5,r16
 216               	.LVL13:
 217               	.LBE7:
 214:./tmk_core/common/keyboard.c ****             matrix_row = matrix_get_row(r);
 218               		.loc 1 214 0
 219 0070 802F      		mov r24,r16
 220 0072 0E94 0000 		call matrix_get_row
 221               	.LVL14:
 222 0076 3C01      		movw r6,r24
 223               	.LVL15:
 215:./tmk_core/common/keyboard.c ****             matrix_change = matrix_row ^ matrix_prev[r];
 224               		.loc 1 215 0
 225 0078 F601      		movw r30,r12
 226 007a E190      		ld r14,Z+
 227 007c F190      		ld r15,Z+
 228 007e 6F01      		movw r12,r30
 229 0080 E826      		eor r14,r24
 230 0082 F926      		eor r15,r25
 231               	.LVL16:
 216:./tmk_core/common/keyboard.c ****             if (matrix_change) {
 232               		.loc 1 216 0
 233 0084 E114      		cp r14,__zero_reg__
 234 0086 F104      		cpc r15,__zero_reg__
 235 0088 01F4      		brne .L8
 236               	.L14:
 237               	.LVL17:
 238 008a 0F5F      		subi r16,-1
 239 008c 1F4F      		sbci r17,-1
 240               	.LVL18:
 213:./tmk_core/common/keyboard.c ****         for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 241               		.loc 1 213 0
 242 008e 0530      		cpi r16,5
 243 0090 1105      		cpc r17,__zero_reg__
 244 0092 01F4      		brne .L16
 245 0094 00C0      		rjmp .L10
 246               	.L8:
 231:./tmk_core/common/keyboard.c ****                 if (debug_matrix) matrix_print();
 247               		.loc 1 231 0
 248 0096 8091 0000 		lds r24,debug_config
 249 009a 81FD      		sbrc r24,1
 231:./tmk_core/common/keyboard.c ****                 if (debug_matrix) matrix_print();
 250               		.loc 1 231 0 is_stmt 0 discriminator 1
 251 009c 0E94 0000 		call matrix_print
 252               	.LVL19:
 253               	.L11:
 254               	.LBE6:
 212:./tmk_core/common/keyboard.c ****     if (is_keyboard_master()) {
 255               		.loc 1 212 0 is_stmt 1
 256 00a0 20E0      		ldi r18,0
 257 00a2 30E0      		ldi r19,0
 258               	.LVL20:
 259               	.L15:
 260               	.LBB9:
 261               	.LBB8:
 233:./tmk_core/common/keyboard.c ****                     if (matrix_change & ((matrix_row_t)1<<c)) {
 262               		.loc 1 233 0
 263 00a4 4501      		movw r8,r10
 264 00a6 022E      		mov r0,r18
 265 00a8 00C0      		rjmp 2f
 266               		1:
 267 00aa 880C      		lsl r8
 268 00ac 991C      		rol r9
 269               		2:
 270 00ae 0A94      		dec r0
 271 00b0 02F4      		brpl 1b
 272 00b2 C401      		movw r24,r8
 273 00b4 8E21      		and r24,r14
 274 00b6 9F21      		and r25,r15
 275 00b8 892B      		or r24,r25
 276 00ba 01F0      		breq .L12
 234:./tmk_core/common/keyboard.c ****                         action_exec((keyevent_t){
 277               		.loc 1 234 0
 278 00bc 2E83      		std Y+6,r18
 279 00be 5F82      		std Y+7,r5
 236:./tmk_core/common/keyboard.c ****                             .pressed = (matrix_row & ((matrix_row_t)1<<c)),
 280               		.loc 1 236 0
 281 00c0 6820      		and r6,r8
 282 00c2 7920      		and r7,r9
 283               	.LVL21:
 284 00c4 81E0      		ldi r24,lo8(1)
 285 00c6 6728      		or r6,r7
 286 00c8 01F4      		brne .L13
 287 00ca 80E0      		ldi r24,0
 288               	.L13:
 234:./tmk_core/common/keyboard.c ****                         action_exec((keyevent_t){
 289               		.loc 1 234 0
 290 00cc 8887      		std Y+8,r24
 237:./tmk_core/common/keyboard.c ****                             .time = (timer_read() | 1) /* time should not be 0 */
 291               		.loc 1 237 0
 292 00ce 0E94 0000 		call timer_read
 293               	.LVL22:
 294 00d2 8160      		ori r24,1
 234:./tmk_core/common/keyboard.c ****                         action_exec((keyevent_t){
 295               		.loc 1 234 0
 296 00d4 782F      		mov r23,r24
 297 00d6 9A87      		std Y+10,r25
 298 00d8 8987      		std Y+9,r24
 299 00da 4E81      		ldd r20,Y+6
 300 00dc 5F81      		ldd r21,Y+7
 301 00de 6885      		ldd r22,Y+8
 302 00e0 8A85      		ldd r24,Y+10
 303 00e2 0E94 0000 		call action_exec
 304               	.LVL23:
 240:./tmk_core/common/keyboard.c ****                         matrix_prev[r] ^= ((matrix_row_t)1<<c);
 305               		.loc 1 240 0
 306 00e6 F801      		movw r30,r16
 307 00e8 EE0F      		lsl r30
 308 00ea FF1F      		rol r31
 309 00ec E050      		subi r30,lo8(-(matrix_prev.5301))
 310 00ee F040      		sbci r31,hi8(-(matrix_prev.5301))
 311 00f0 8081      		ld r24,Z
 312 00f2 9181      		ldd r25,Z+1
 313 00f4 8825      		eor r24,r8
 314 00f6 9925      		eor r25,r9
 315 00f8 9183      		std Z+1,r25
 316 00fa 8083      		st Z,r24
 246:./tmk_core/common/keyboard.c ****                         goto MATRIX_LOOP_END;
 317               		.loc 1 246 0
 318 00fc 00C0      		rjmp .L7
 319               	.LVL24:
 320               	.L12:
 321 00fe 2F5F      		subi r18,-1
 322 0100 3F4F      		sbci r19,-1
 323               	.LVL25:
 232:./tmk_core/common/keyboard.c ****                 for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 324               		.loc 1 232 0
 325 0102 2F30      		cpi r18,15
 326 0104 3105      		cpc r19,__zero_reg__
 327 0106 01F4      		brne .L15
 328 0108 00C0      		rjmp .L14
 329               	.LVL26:
 330               	.L7:
 331               	.LBE8:
 332               	.LBE9:
 258:./tmk_core/common/keyboard.c **** 
 259:./tmk_core/common/keyboard.c **** MATRIX_LOOP_END:
 260:./tmk_core/common/keyboard.c **** 
 261:./tmk_core/common/keyboard.c **** #ifdef MOUSEKEY_ENABLE
 262:./tmk_core/common/keyboard.c ****     // mousekey repeat & acceleration
 263:./tmk_core/common/keyboard.c ****     mousekey_task();
 333               		.loc 1 263 0
 334 010a 0E94 0000 		call mousekey_task
 335               	.LVL27:
 264:./tmk_core/common/keyboard.c **** #endif
 265:./tmk_core/common/keyboard.c **** 
 266:./tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
 267:./tmk_core/common/keyboard.c ****     ps2_mouse_task();
 268:./tmk_core/common/keyboard.c **** #endif
 269:./tmk_core/common/keyboard.c **** 
 270:./tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
 271:./tmk_core/common/keyboard.c ****     serial_mouse_task();
 272:./tmk_core/common/keyboard.c **** #endif
 273:./tmk_core/common/keyboard.c **** 
 274:./tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
 275:./tmk_core/common/keyboard.c ****     adb_mouse_task();
 276:./tmk_core/common/keyboard.c **** #endif
 277:./tmk_core/common/keyboard.c **** 
 278:./tmk_core/common/keyboard.c **** #ifdef SERIAL_LINK_ENABLE
 279:./tmk_core/common/keyboard.c **** 	serial_link_update();
 280:./tmk_core/common/keyboard.c **** #endif
 281:./tmk_core/common/keyboard.c **** 
 282:./tmk_core/common/keyboard.c **** #ifdef VISUALIZER_ENABLE
 283:./tmk_core/common/keyboard.c ****     visualizer_update(default_layer_state, layer_state, visualizer_get_mods(), host_keyboard_leds()
 284:./tmk_core/common/keyboard.c **** #endif
 285:./tmk_core/common/keyboard.c **** 
 286:./tmk_core/common/keyboard.c **** #ifdef POINTING_DEVICE_ENABLE
 287:./tmk_core/common/keyboard.c ****     pointing_device_task();
 288:./tmk_core/common/keyboard.c **** #endif
 289:./tmk_core/common/keyboard.c **** 
 290:./tmk_core/common/keyboard.c **** #ifdef MIDI_ENABLE
 291:./tmk_core/common/keyboard.c ****     midi_task();
 292:./tmk_core/common/keyboard.c **** #endif
 293:./tmk_core/common/keyboard.c **** 
 294:./tmk_core/common/keyboard.c ****     // update LED
 295:./tmk_core/common/keyboard.c ****     if (led_status != host_keyboard_leds()) {
 336               		.loc 1 295 0
 337 010e 1091 0000 		lds r17,led_status.5302
 338 0112 0E94 0000 		call host_keyboard_leds
 339               	.LVL28:
 340 0116 1817      		cp r17,r24
 341 0118 01F0      		breq .L5
 296:./tmk_core/common/keyboard.c ****         led_status = host_keyboard_leds();
 342               		.loc 1 296 0
 343 011a 0E94 0000 		call host_keyboard_leds
 344               	.LVL29:
 345 011e 8093 0000 		sts led_status.5302,r24
 346               	.LVL30:
 347               	/* epilogue start */
 297:./tmk_core/common/keyboard.c ****         keyboard_set_leds(led_status);
 298:./tmk_core/common/keyboard.c ****     }
 299:./tmk_core/common/keyboard.c **** }
 348               		.loc 1 299 0
 349 0122 2A96      		adiw r28,10
 350 0124 0FB6      		in __tmp_reg__,__SREG__
 351 0126 F894      		cli
 352 0128 DEBF      		out __SP_H__,r29
 353 012a 0FBE      		out __SREG__,__tmp_reg__
 354 012c CDBF      		out __SP_L__,r28
 355 012e DF91      		pop r29
 356 0130 CF91      		pop r28
 357 0132 1F91      		pop r17
 358 0134 0F91      		pop r16
 359 0136 FF90      		pop r15
 360 0138 EF90      		pop r14
 361 013a DF90      		pop r13
 362 013c CF90      		pop r12
 363 013e BF90      		pop r11
 364 0140 AF90      		pop r10
 365 0142 9F90      		pop r9
 366 0144 8F90      		pop r8
 367 0146 7F90      		pop r7
 368 0148 6F90      		pop r6
 369 014a 5F90      		pop r5
 370               	.LBB10:
 371               	.LBB11:
 300:./tmk_core/common/keyboard.c **** 
 301:./tmk_core/common/keyboard.c **** /** \brief keyboard set leds
 302:./tmk_core/common/keyboard.c ****  *
 303:./tmk_core/common/keyboard.c ****  * FIXME: needs doc
 304:./tmk_core/common/keyboard.c ****  */
 305:./tmk_core/common/keyboard.c **** void keyboard_set_leds(uint8_t leds)
 306:./tmk_core/common/keyboard.c **** {
 307:./tmk_core/common/keyboard.c ****     if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
 308:./tmk_core/common/keyboard.c ****     led_set(leds);
 372               		.loc 1 308 0
 373 014c 0C94 0000 		jmp led_set
 374               	.LVL31:
 375               	.L5:
 376               	/* epilogue start */
 377               	.LBE11:
 378               	.LBE10:
 299:./tmk_core/common/keyboard.c **** }
 379               		.loc 1 299 0
 380 0150 2A96      		adiw r28,10
 381 0152 0FB6      		in __tmp_reg__,__SREG__
 382 0154 F894      		cli
 383 0156 DEBF      		out __SP_H__,r29
 384 0158 0FBE      		out __SREG__,__tmp_reg__
 385 015a CDBF      		out __SP_L__,r28
 386 015c DF91      		pop r29
 387 015e CF91      		pop r28
 388 0160 1F91      		pop r17
 389 0162 0F91      		pop r16
 390 0164 FF90      		pop r15
 391 0166 EF90      		pop r14
 392 0168 DF90      		pop r13
 393 016a CF90      		pop r12
 394 016c BF90      		pop r11
 395 016e AF90      		pop r10
 396 0170 9F90      		pop r9
 397 0172 8F90      		pop r8
 398 0174 7F90      		pop r7
 399 0176 6F90      		pop r6
 400 0178 5F90      		pop r5
 401 017a 0895      		ret
 402               		.cfi_endproc
 403               	.LFE107:
 405               		.section	.text.keyboard_set_leds,"ax",@progbits
 406               	.global	keyboard_set_leds
 408               	keyboard_set_leds:
 409               	.LFB108:
 306:./tmk_core/common/keyboard.c **** {
 410               		.loc 1 306 0
 411               		.cfi_startproc
 412               	.LVL32:
 413               	/* prologue: function */
 414               	/* frame size = 0 */
 415               	/* stack size = 0 */
 416               	.L__stack_usage = 0
 417               		.loc 1 308 0
 418 0000 0C94 0000 		jmp led_set
 419               	.LVL33:
 420               		.cfi_endproc
 421               	.LFE108:
 423               		.section	.bss.led_status.5302,"aw",@nobits
 426               	led_status.5302:
 427 0000 00        		.zero	1
 428               		.section	.bss.matrix_prev.5301,"aw",@nobits
 431               	matrix_prev.5301:
 432 0000 0000 0000 		.zero	10
 432      0000 0000 
 432      0000 
 433               		.text
 434               	.Letext0:
 435               		.file 2 "/usr/lib/avr/include/stdint.h"
 436               		.file 3 "./tmk_core/common/keyboard.h"
 437               		.file 4 "./tmk_core/common/matrix.h"
 438               		.file 5 "./tmk_core/common/debug.h"
 439               		.file 6 "./lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 440               		.file 7 "./tmk_core/common/timer.h"
 441               		.file 8 "./tmk_core/common/bootmagic.h"
 442               		.file 9 "./quantum/rgblight.h"
 443               		.file 10 "./tmk_core/common/action.h"
 444               		.file 11 "./tmk_core/common/led.h"
 445               		.file 12 "./tmk_core/common/mousekey.h"
 446               		.file 13 "./tmk_core/common/host.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 keyboard.c
     /tmp/ccvLJt9T.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccvLJt9T.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccvLJt9T.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccvLJt9T.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccvLJt9T.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccvLJt9T.s:13     .text.matrix_setup:0000000000000000 matrix_setup
     /tmp/ccvLJt9T.s:29     .text.keyboard_setup:0000000000000000 keyboard_setup
     /tmp/ccvLJt9T.s:46     .text.is_keyboard_master:0000000000000000 is_keyboard_master
     /tmp/ccvLJt9T.s:63     .text.keyboard_init:0000000000000000 keyboard_init
     /tmp/ccvLJt9T.s:89     .text.keyboard_task:0000000000000000 keyboard_task
     /tmp/ccvLJt9T.s:431    .bss.matrix_prev.5301:0000000000000000 matrix_prev.5301
     /tmp/ccvLJt9T.s:426    .bss.led_status.5302:0000000000000000 led_status.5302
     /tmp/ccvLJt9T.s:408    .text.keyboard_set_leds:0000000000000000 keyboard_set_leds

UNDEFINED SYMBOLS
timer_init
matrix_init
bootmagic
rgblight_init
matrix_scan
timer_read
action_exec
matrix_get_row
debug_config
matrix_print
mousekey_task
host_keyboard_leds
led_set
__do_clear_bss
