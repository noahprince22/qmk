   1               		.file	"command.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.mousekey_param_inc,"ax",@progbits
  12               	mousekey_param_inc:
  13               	.LFB117:
  14               		.file 1 "./tmk_core/common/command.c"
   1:./tmk_core/common/command.c **** /*
   2:./tmk_core/common/command.c **** Copyright 2011 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/command.c **** 
   4:./tmk_core/common/command.c **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/command.c **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/command.c **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/command.c **** (at your option) any later version.
   8:./tmk_core/common/command.c **** 
   9:./tmk_core/common/command.c **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/command.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/command.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/command.c **** GNU General Public License for more details.
  13:./tmk_core/common/command.c **** 
  14:./tmk_core/common/command.c **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/command.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/command.c **** */
  17:./tmk_core/common/command.c **** #include <stdint.h>
  18:./tmk_core/common/command.c **** #include <stdbool.h>
  19:./tmk_core/common/command.c **** #include "wait.h"
  20:./tmk_core/common/command.c **** #include "keycode.h"
  21:./tmk_core/common/command.c **** #include "host.h"
  22:./tmk_core/common/command.c **** #include "keymap.h"
  23:./tmk_core/common/command.c **** #include "print.h"
  24:./tmk_core/common/command.c **** #include "debug.h"
  25:./tmk_core/common/command.c **** #include "util.h"
  26:./tmk_core/common/command.c **** #include "timer.h"
  27:./tmk_core/common/command.c **** #include "keyboard.h"
  28:./tmk_core/common/command.c **** #include "bootloader.h"
  29:./tmk_core/common/command.c **** #include "action_layer.h"
  30:./tmk_core/common/command.c **** #include "action_util.h"
  31:./tmk_core/common/command.c **** #include "eeconfig.h"
  32:./tmk_core/common/command.c **** #include "sleep_led.h"
  33:./tmk_core/common/command.c **** #include "led.h"
  34:./tmk_core/common/command.c **** #include "command.h"
  35:./tmk_core/common/command.c **** #include "backlight.h"
  36:./tmk_core/common/command.c **** #include "quantum.h"
  37:./tmk_core/common/command.c **** #include "version.h"
  38:./tmk_core/common/command.c **** 
  39:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  40:./tmk_core/common/command.c **** #include "mousekey.h"
  41:./tmk_core/common/command.c **** #endif
  42:./tmk_core/common/command.c **** 
  43:./tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
  44:./tmk_core/common/command.c **** 	#include "usb_keyboard.h"
  45:./tmk_core/common/command.c **** 		#ifdef EXTRAKEY_ENABLE
  46:./tmk_core/common/command.c **** 		#include "usb_extra.h"
  47:./tmk_core/common/command.c **** 	#endif
  48:./tmk_core/common/command.c **** #endif
  49:./tmk_core/common/command.c **** 
  50:./tmk_core/common/command.c **** #ifdef PROTOCOL_VUSB
  51:./tmk_core/common/command.c **** 	#include "usbdrv.h"
  52:./tmk_core/common/command.c **** #endif
  53:./tmk_core/common/command.c **** 
  54:./tmk_core/common/command.c **** #ifdef AUDIO_ENABLE
  55:./tmk_core/common/command.c ****     #include "audio.h"
  56:./tmk_core/common/command.c **** #endif /* AUDIO_ENABLE */
  57:./tmk_core/common/command.c **** 
  58:./tmk_core/common/command.c **** 
  59:./tmk_core/common/command.c **** static bool command_common(uint8_t code);
  60:./tmk_core/common/command.c **** static void command_common_help(void);
  61:./tmk_core/common/command.c **** static void print_version(void);
  62:./tmk_core/common/command.c **** static void print_status(void);
  63:./tmk_core/common/command.c **** static bool command_console(uint8_t code);
  64:./tmk_core/common/command.c **** static void command_console_help(void);
  65:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  66:./tmk_core/common/command.c **** static bool mousekey_console(uint8_t code);
  67:./tmk_core/common/command.c **** static void mousekey_console_help(void);
  68:./tmk_core/common/command.c **** #endif
  69:./tmk_core/common/command.c **** 
  70:./tmk_core/common/command.c **** static void switch_default_layer(uint8_t layer);
  71:./tmk_core/common/command.c **** 
  72:./tmk_core/common/command.c **** 
  73:./tmk_core/common/command.c **** command_state_t command_state = ONESHOT;
  74:./tmk_core/common/command.c **** 
  75:./tmk_core/common/command.c **** 
  76:./tmk_core/common/command.c **** bool command_proc(uint8_t code)
  77:./tmk_core/common/command.c **** {
  78:./tmk_core/common/command.c ****     switch (command_state) {
  79:./tmk_core/common/command.c ****         case ONESHOT:
  80:./tmk_core/common/command.c ****             if (!IS_COMMAND())
  81:./tmk_core/common/command.c ****                 return false;
  82:./tmk_core/common/command.c ****             return (command_extra(code) || command_common(code));
  83:./tmk_core/common/command.c ****             break;
  84:./tmk_core/common/command.c ****         case CONSOLE:
  85:./tmk_core/common/command.c ****             if (IS_COMMAND())
  86:./tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
  87:./tmk_core/common/command.c ****             else
  88:./tmk_core/common/command.c ****                 return (command_console_extra(code) || command_console(code));
  89:./tmk_core/common/command.c ****             break;
  90:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  91:./tmk_core/common/command.c ****         case MOUSEKEY:
  92:./tmk_core/common/command.c ****             mousekey_console(code);
  93:./tmk_core/common/command.c ****             break;
  94:./tmk_core/common/command.c **** #endif
  95:./tmk_core/common/command.c ****         default:
  96:./tmk_core/common/command.c ****             command_state = ONESHOT;
  97:./tmk_core/common/command.c ****             return false;
  98:./tmk_core/common/command.c ****     }
  99:./tmk_core/common/command.c ****     return true;
 100:./tmk_core/common/command.c **** }
 101:./tmk_core/common/command.c **** 
 102:./tmk_core/common/command.c **** /* TODO: Refactoring is needed. */
 103:./tmk_core/common/command.c **** /* This allows to define extra commands. return false when not processed. */
 104:./tmk_core/common/command.c **** bool command_extra(uint8_t code) __attribute__ ((weak));
 105:./tmk_core/common/command.c **** bool command_extra(uint8_t code)
 106:./tmk_core/common/command.c **** {
 107:./tmk_core/common/command.c ****     (void)code;
 108:./tmk_core/common/command.c ****     return false;
 109:./tmk_core/common/command.c **** }
 110:./tmk_core/common/command.c **** 
 111:./tmk_core/common/command.c **** bool command_console_extra(uint8_t code) __attribute__ ((weak));
 112:./tmk_core/common/command.c **** bool command_console_extra(uint8_t code)
 113:./tmk_core/common/command.c **** {
 114:./tmk_core/common/command.c ****     (void)code;
 115:./tmk_core/common/command.c ****     return false;
 116:./tmk_core/common/command.c **** }
 117:./tmk_core/common/command.c **** 
 118:./tmk_core/common/command.c **** 
 119:./tmk_core/common/command.c **** /***********************************************************
 120:./tmk_core/common/command.c ****  * Command common
 121:./tmk_core/common/command.c ****  ***********************************************************/
 122:./tmk_core/common/command.c **** static void command_common_help(void)
 123:./tmk_core/common/command.c **** {
 124:./tmk_core/common/command.c **** 	print(                            "\n\t- Magic -\n"
 125:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG       ) ":	Debug Message Toggle\n"
 126:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG_MATRIX) ":	Matrix Debug Mode Toggle - Show keypresses in matrix grid\n"
 127:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG_KBD   ) ":	Keyboard Debug Toggle - Show keypress report\n"
 128:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG_MOUSE ) ":	Debug Mouse Toggle\n"
 129:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_VERSION     ) ":	Version\n"
 130:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_STATUS      ) ":	Status\n"
 131:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_CONSOLE     ) ":	Activate Console Mode\n"
 132:./tmk_core/common/command.c **** 
 133:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_CUSTOM
 134:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER0      ) ":	Switch to Layer 0\n"
 135:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER1      ) ":	Switch to Layer 1\n"
 136:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER2      ) ":	Switch to Layer 2\n"
 137:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER3      ) ":	Switch to Layer 3\n"
 138:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER4      ) ":	Switch to Layer 4\n"
 139:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER5      ) ":	Switch to Layer 5\n"
 140:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER6      ) ":	Switch to Layer 6\n"
 141:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER7      ) ":	Switch to Layer 7\n"
 142:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER8      ) ":	Switch to Layer 8\n"
 143:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER9      ) ":	Switch to Layer 9\n"
 144:./tmk_core/common/command.c **** #endif
 145:./tmk_core/common/command.c **** 
 146:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_FKEYS
 147:./tmk_core/common/command.c **** 		                            "F1-F10:	Switch to Layer 0-9 (F10 = L0)\n"
 148:./tmk_core/common/command.c **** #endif
 149:./tmk_core/common/command.c **** 
 150:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_NKEYS
 151:./tmk_core/common/command.c **** 		                            "0-9:	Switch to Layer 0-9\n"
 152:./tmk_core/common/command.c **** #endif
 153:./tmk_core/common/command.c **** 
 154:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER0_ALT1 ) ":	Switch to Layer 0 (alternate key 1)\n"
 155:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER0_ALT2 ) ":	Switch to Layer 0 (alternate key 2)\n"
 156:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_BOOTLOADER  ) ":	Jump to Bootloader (Reset)\n"
 157:./tmk_core/common/command.c **** 
 158:./tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 159:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LOCK        ) ":	Lock\n"
 160:./tmk_core/common/command.c **** #endif
 161:./tmk_core/common/command.c **** 
 162:./tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 163:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_EEPROM      ) ":	Print EEPROM Settings\n"
 164:./tmk_core/common/command.c **** #endif
 165:./tmk_core/common/command.c **** 
 166:./tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 167:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_NKRO        ) ":	NKRO Toggle\n"
 168:./tmk_core/common/command.c **** #endif
 169:./tmk_core/common/command.c **** 
 170:./tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 171:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_SLEEP_LED   ) ":	Sleep LED Test\n"
 172:./tmk_core/common/command.c **** #endif
 173:./tmk_core/common/command.c ****     );
 174:./tmk_core/common/command.c **** }
 175:./tmk_core/common/command.c **** 
 176:./tmk_core/common/command.c **** static void print_version(void)
 177:./tmk_core/common/command.c **** {
 178:./tmk_core/common/command.c **** 	// print version & information
 179:./tmk_core/common/command.c ****     print("\n\t- Version -\n");
 180:./tmk_core/common/command.c ****     print("DESC: " STR(DESCRIPTION) "\n");
 181:./tmk_core/common/command.c ****     print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
 182:./tmk_core/common/command.c ****           "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
 183:./tmk_core/common/command.c ****           "VER: " STR(DEVICE_VER) "\n");
 184:./tmk_core/common/command.c ****     print("BUILD: " STR(QMK_VERSION) " (" __TIME__ " " __DATE__ ")\n");
 185:./tmk_core/common/command.c **** 
 186:./tmk_core/common/command.c ****     /* build options */
 187:./tmk_core/common/command.c ****     print("OPTIONS:"
 188:./tmk_core/common/command.c **** 
 189:./tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 190:./tmk_core/common/command.c **** 	    " PJRC"
 191:./tmk_core/common/command.c **** #endif
 192:./tmk_core/common/command.c **** #ifdef PROTOCOL_LUFA
 193:./tmk_core/common/command.c **** 	    " LUFA"
 194:./tmk_core/common/command.c **** #endif
 195:./tmk_core/common/command.c **** #ifdef PROTOCOL_VUSB
 196:./tmk_core/common/command.c **** 	    " VUSB"
 197:./tmk_core/common/command.c **** #endif
 198:./tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 199:./tmk_core/common/command.c **** 	    " BOOTMAGIC"
 200:./tmk_core/common/command.c **** #endif
 201:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 202:./tmk_core/common/command.c **** 	    " MOUSEKEY"
 203:./tmk_core/common/command.c **** #endif
 204:./tmk_core/common/command.c **** #ifdef EXTRAKEY_ENABLE
 205:./tmk_core/common/command.c **** 	    " EXTRAKEY"
 206:./tmk_core/common/command.c **** #endif
 207:./tmk_core/common/command.c **** #ifdef CONSOLE_ENABLE
 208:./tmk_core/common/command.c **** 	    " CONSOLE"
 209:./tmk_core/common/command.c **** #endif
 210:./tmk_core/common/command.c **** #ifdef COMMAND_ENABLE
 211:./tmk_core/common/command.c **** 	    " COMMAND"
 212:./tmk_core/common/command.c **** #endif
 213:./tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 214:./tmk_core/common/command.c **** 	    " NKRO"
 215:./tmk_core/common/command.c **** #endif
 216:./tmk_core/common/command.c **** #ifdef KEYMAP_SECTION_ENABLE
 217:./tmk_core/common/command.c **** 	    " KEYMAP_SECTION"
 218:./tmk_core/common/command.c **** #endif
 219:./tmk_core/common/command.c **** 
 220:./tmk_core/common/command.c **** 	    " " STR(BOOTLOADER_SIZE) "\n");
 221:./tmk_core/common/command.c **** 
 222:./tmk_core/common/command.c ****     print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
 223:./tmk_core/common/command.c **** #if defined(__AVR__)
 224:./tmk_core/common/command.c ****           " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
 225:./tmk_core/common/command.c ****           " AVR_ARCH: avr" STR(__AVR_ARCH__)
 226:./tmk_core/common/command.c **** #endif
 227:./tmk_core/common/command.c **** 		  "\n");
 228:./tmk_core/common/command.c **** 
 229:./tmk_core/common/command.c **** 	return;
 230:./tmk_core/common/command.c **** }
 231:./tmk_core/common/command.c **** 
 232:./tmk_core/common/command.c **** static void print_status(void)
 233:./tmk_core/common/command.c **** {
 234:./tmk_core/common/command.c **** 
 235:./tmk_core/common/command.c ****     print("\n\t- Status -\n");
 236:./tmk_core/common/command.c **** 
 237:./tmk_core/common/command.c ****     print_val_hex8(host_keyboard_leds());
 238:./tmk_core/common/command.c **** #ifndef PROTOCOL_VUSB
 239:./tmk_core/common/command.c ****     // these aren't set on the V-USB protocol, so we just ignore them for now
 240:./tmk_core/common/command.c ****     print_val_hex8(keyboard_protocol);
 241:./tmk_core/common/command.c ****     print_val_hex8(keyboard_idle);
 242:./tmk_core/common/command.c **** #endif
 243:./tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 244:./tmk_core/common/command.c ****     print_val_hex8(keymap_config.nkro);
 245:./tmk_core/common/command.c **** #endif
 246:./tmk_core/common/command.c ****     print_val_hex32(timer_read32());
 247:./tmk_core/common/command.c **** 
 248:./tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 249:./tmk_core/common/command.c ****     print_val_hex8(UDCON);
 250:./tmk_core/common/command.c ****     print_val_hex8(UDIEN);
 251:./tmk_core/common/command.c ****     print_val_hex8(UDINT);
 252:./tmk_core/common/command.c ****     print_val_hex8(usb_keyboard_leds);
 253:./tmk_core/common/command.c ****     print_val_hex8(usb_keyboard_idle_count);
 254:./tmk_core/common/command.c **** #endif
 255:./tmk_core/common/command.c **** 
 256:./tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 257:./tmk_core/common/command.c **** #   if USB_COUNT_SOF
 258:./tmk_core/common/command.c ****     print_val_hex8(usbSofCount);
 259:./tmk_core/common/command.c **** #   endif
 260:./tmk_core/common/command.c **** #endif
 261:./tmk_core/common/command.c **** 	return;
 262:./tmk_core/common/command.c **** }
 263:./tmk_core/common/command.c **** 
 264:./tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 265:./tmk_core/common/command.c **** static void print_eeconfig(void)
 266:./tmk_core/common/command.c **** {
 267:./tmk_core/common/command.c **** 
 268:./tmk_core/common/command.c **** // Print these variables if NO_PRINT or USER_PRINT are not defined.
 269:./tmk_core/common/command.c **** #if !defined(NO_PRINT) && !defined(USER_PRINT)
 270:./tmk_core/common/command.c **** 
 271:./tmk_core/common/command.c ****     print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
 272:./tmk_core/common/command.c **** 
 273:./tmk_core/common/command.c ****     debug_config_t dc;
 274:./tmk_core/common/command.c ****     dc.raw = eeconfig_read_debug();
 275:./tmk_core/common/command.c ****     print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
 276:./tmk_core/common/command.c ****     print(".enable: "); print_dec(dc.enable); print("\n");
 277:./tmk_core/common/command.c ****     print(".matrix: "); print_dec(dc.matrix); print("\n");
 278:./tmk_core/common/command.c ****     print(".keyboard: "); print_dec(dc.keyboard); print("\n");
 279:./tmk_core/common/command.c ****     print(".mouse: "); print_dec(dc.mouse); print("\n");
 280:./tmk_core/common/command.c **** 
 281:./tmk_core/common/command.c ****     keymap_config_t kc;
 282:./tmk_core/common/command.c ****     kc.raw = eeconfig_read_keymap();
 283:./tmk_core/common/command.c ****     print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
 284:./tmk_core/common/command.c ****     print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
 285:./tmk_core/common/command.c ****     print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
 286:./tmk_core/common/command.c ****     print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
 287:./tmk_core/common/command.c ****     print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
 288:./tmk_core/common/command.c ****     print(".no_gui: "); print_dec(kc.no_gui); print("\n");
 289:./tmk_core/common/command.c ****     print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
 290:./tmk_core/common/command.c ****     print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
 291:./tmk_core/common/command.c ****     print(".nkro: "); print_dec(kc.nkro); print("\n");
 292:./tmk_core/common/command.c **** 
 293:./tmk_core/common/command.c **** #ifdef BACKLIGHT_ENABLE
 294:./tmk_core/common/command.c ****     backlight_config_t bc;
 295:./tmk_core/common/command.c ****     bc.raw = eeconfig_read_backlight();
 296:./tmk_core/common/command.c ****     print("backlight_config.raw: "); print_hex8(bc.raw); print("\n");
 297:./tmk_core/common/command.c ****     print(".enable: "); print_dec(bc.enable); print("\n");
 298:./tmk_core/common/command.c ****     print(".level: "); print_dec(bc.level); print("\n");
 299:./tmk_core/common/command.c **** #endif /* BACKLIGHT_ENABLE */
 300:./tmk_core/common/command.c **** 
 301:./tmk_core/common/command.c **** #endif /* !NO_PRINT */
 302:./tmk_core/common/command.c **** 
 303:./tmk_core/common/command.c **** }
 304:./tmk_core/common/command.c **** #endif /* BOOTMAGIC_ENABLE */
 305:./tmk_core/common/command.c **** 
 306:./tmk_core/common/command.c **** static bool command_common(uint8_t code)
 307:./tmk_core/common/command.c **** {
 308:./tmk_core/common/command.c **** 
 309:./tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 310:./tmk_core/common/command.c ****     static host_driver_t *host_driver = 0;
 311:./tmk_core/common/command.c **** #endif
 312:./tmk_core/common/command.c **** 
 313:./tmk_core/common/command.c ****     switch (code) {
 314:./tmk_core/common/command.c **** 
 315:./tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 316:./tmk_core/common/command.c **** 
 317:./tmk_core/common/command.c **** 		// test breathing sleep LED
 318:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_SLEEP_LED):
 319:./tmk_core/common/command.c ****             print("Sleep LED Test\n");
 320:./tmk_core/common/command.c ****             sleep_led_toggle();
 321:./tmk_core/common/command.c ****             led_set(host_keyboard_leds());
 322:./tmk_core/common/command.c ****             break;
 323:./tmk_core/common/command.c **** #endif
 324:./tmk_core/common/command.c **** 
 325:./tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 326:./tmk_core/common/command.c **** 
 327:./tmk_core/common/command.c **** 		// print stored eeprom config
 328:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_EEPROM):
 329:./tmk_core/common/command.c ****             print("eeconfig:\n");
 330:./tmk_core/common/command.c ****             print_eeconfig();
 331:./tmk_core/common/command.c ****             break;
 332:./tmk_core/common/command.c **** #endif
 333:./tmk_core/common/command.c **** 
 334:./tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 335:./tmk_core/common/command.c **** 
 336:./tmk_core/common/command.c **** 		// lock/unlock keyboard
 337:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_LOCK):
 338:./tmk_core/common/command.c ****             if (host_get_driver()) {
 339:./tmk_core/common/command.c ****                 host_driver = host_get_driver();
 340:./tmk_core/common/command.c ****                 clear_keyboard();
 341:./tmk_core/common/command.c ****                 host_set_driver(0);
 342:./tmk_core/common/command.c ****                 print("Locked.\n");
 343:./tmk_core/common/command.c ****             } else {
 344:./tmk_core/common/command.c ****                 host_set_driver(host_driver);
 345:./tmk_core/common/command.c ****                 print("Unlocked.\n");
 346:./tmk_core/common/command.c ****             }
 347:./tmk_core/common/command.c ****             break;
 348:./tmk_core/common/command.c **** #endif
 349:./tmk_core/common/command.c **** 
 350:./tmk_core/common/command.c **** 		// print help
 351:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_HELP1):
 352:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_HELP2):
 353:./tmk_core/common/command.c ****             command_common_help();
 354:./tmk_core/common/command.c ****             break;
 355:./tmk_core/common/command.c **** 
 356:./tmk_core/common/command.c **** 		// activate console
 357:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_CONSOLE):
 358:./tmk_core/common/command.c ****             debug_matrix   = false;
 359:./tmk_core/common/command.c ****             debug_keyboard = false;
 360:./tmk_core/common/command.c ****             debug_mouse    = false;
 361:./tmk_core/common/command.c ****             debug_enable   = false;
 362:./tmk_core/common/command.c ****             command_console_help();
 363:./tmk_core/common/command.c ****             print("C> ");
 364:./tmk_core/common/command.c ****             command_state = CONSOLE;
 365:./tmk_core/common/command.c ****             break;
 366:./tmk_core/common/command.c **** 
 367:./tmk_core/common/command.c ****         // jump to bootloader
 368:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_BOOTLOADER):
 369:./tmk_core/common/command.c ****             clear_keyboard(); // clear to prevent stuck keys
 370:./tmk_core/common/command.c ****             print("\n\nJumping to bootloader... ");
 371:./tmk_core/common/command.c ****             #ifdef AUDIO_ENABLE
 372:./tmk_core/common/command.c **** 	            stop_all_notes();
 373:./tmk_core/common/command.c ****                 shutdown_user();
 374:./tmk_core/common/command.c ****             #else
 375:./tmk_core/common/command.c **** 	            wait_ms(1000);
 376:./tmk_core/common/command.c ****             #endif
 377:./tmk_core/common/command.c ****             bootloader_jump(); // not return
 378:./tmk_core/common/command.c ****             break;
 379:./tmk_core/common/command.c **** 
 380:./tmk_core/common/command.c ****         // debug toggle
 381:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG):
 382:./tmk_core/common/command.c ****             debug_enable = !debug_enable;
 383:./tmk_core/common/command.c ****             if (debug_enable) {
 384:./tmk_core/common/command.c ****                 print("\ndebug: on\n");
 385:./tmk_core/common/command.c ****             } else {
 386:./tmk_core/common/command.c ****                 print("\ndebug: off\n");
 387:./tmk_core/common/command.c ****                 debug_matrix   = false;
 388:./tmk_core/common/command.c ****                 debug_keyboard = false;
 389:./tmk_core/common/command.c ****                 debug_mouse    = false;
 390:./tmk_core/common/command.c ****             }
 391:./tmk_core/common/command.c ****             break;
 392:./tmk_core/common/command.c **** 
 393:./tmk_core/common/command.c ****         // debug matrix toggle
 394:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_MATRIX):
 395:./tmk_core/common/command.c ****             debug_matrix = !debug_matrix;
 396:./tmk_core/common/command.c ****             if (debug_matrix) {
 397:./tmk_core/common/command.c ****                 print("\nmatrix: on\n");
 398:./tmk_core/common/command.c ****                 debug_enable = true;
 399:./tmk_core/common/command.c ****             } else {
 400:./tmk_core/common/command.c ****                 print("\nmatrix: off\n");
 401:./tmk_core/common/command.c ****             }
 402:./tmk_core/common/command.c ****             break;
 403:./tmk_core/common/command.c **** 
 404:./tmk_core/common/command.c ****         // debug keyboard toggle
 405:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_KBD):
 406:./tmk_core/common/command.c ****             debug_keyboard = !debug_keyboard;
 407:./tmk_core/common/command.c ****             if (debug_keyboard) {
 408:./tmk_core/common/command.c ****                 print("\nkeyboard: on\n");
 409:./tmk_core/common/command.c ****                 debug_enable = true;
 410:./tmk_core/common/command.c ****             } else {
 411:./tmk_core/common/command.c ****                 print("\nkeyboard: off\n");
 412:./tmk_core/common/command.c ****             }
 413:./tmk_core/common/command.c ****             break;
 414:./tmk_core/common/command.c **** 
 415:./tmk_core/common/command.c ****         // debug mouse toggle
 416:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_MOUSE):
 417:./tmk_core/common/command.c ****             debug_mouse = !debug_mouse;
 418:./tmk_core/common/command.c ****             if (debug_mouse) {
 419:./tmk_core/common/command.c ****                 print("\nmouse: on\n");
 420:./tmk_core/common/command.c ****                 debug_enable = true;
 421:./tmk_core/common/command.c ****             } else {
 422:./tmk_core/common/command.c **** 				print("\nmouse: off\n");
 423:./tmk_core/common/command.c ****             }
 424:./tmk_core/common/command.c ****             break;
 425:./tmk_core/common/command.c **** 
 426:./tmk_core/common/command.c **** 		// print version
 427:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_VERSION):
 428:./tmk_core/common/command.c ****         	print_version();
 429:./tmk_core/common/command.c **** 		    break;
 430:./tmk_core/common/command.c **** 
 431:./tmk_core/common/command.c **** 		// print status
 432:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_STATUS):
 433:./tmk_core/common/command.c **** 			print_status();
 434:./tmk_core/common/command.c ****             break;
 435:./tmk_core/common/command.c **** 
 436:./tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 437:./tmk_core/common/command.c **** 
 438:./tmk_core/common/command.c **** 		// NKRO toggle
 439:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_NKRO):
 440:./tmk_core/common/command.c ****             clear_keyboard(); // clear to prevent stuck keys
 441:./tmk_core/common/command.c ****             keymap_config.nkro = !keymap_config.nkro;
 442:./tmk_core/common/command.c ****             if (keymap_config.nkro) {
 443:./tmk_core/common/command.c ****                 print("NKRO: on\n");
 444:./tmk_core/common/command.c ****             } else {
 445:./tmk_core/common/command.c ****                 print("NKRO: off\n");
 446:./tmk_core/common/command.c ****             }
 447:./tmk_core/common/command.c ****             break;
 448:./tmk_core/common/command.c **** #endif
 449:./tmk_core/common/command.c **** 
 450:./tmk_core/common/command.c **** 		// switch layers
 451:./tmk_core/common/command.c **** 
 452:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER0_ALT1):
 453:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER0_ALT2):
 454:./tmk_core/common/command.c ****             switch_default_layer(0);
 455:./tmk_core/common/command.c ****             break;
 456:./tmk_core/common/command.c **** 
 457:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_CUSTOM
 458:./tmk_core/common/command.c **** 
 459:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER0):
 460:./tmk_core/common/command.c ****             switch_default_layer(0);
 461:./tmk_core/common/command.c ****             break;
 462:./tmk_core/common/command.c **** 
 463:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER1):
 464:./tmk_core/common/command.c ****             switch_default_layer(1);
 465:./tmk_core/common/command.c ****             break;
 466:./tmk_core/common/command.c **** 
 467:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER2):
 468:./tmk_core/common/command.c ****             switch_default_layer(2);
 469:./tmk_core/common/command.c ****             break;
 470:./tmk_core/common/command.c **** 
 471:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER3):
 472:./tmk_core/common/command.c ****             switch_default_layer(3);
 473:./tmk_core/common/command.c ****             break;
 474:./tmk_core/common/command.c **** 
 475:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER4):
 476:./tmk_core/common/command.c ****             switch_default_layer(4);
 477:./tmk_core/common/command.c ****             break;
 478:./tmk_core/common/command.c **** 
 479:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER5):
 480:./tmk_core/common/command.c ****             switch_default_layer(5);
 481:./tmk_core/common/command.c ****             break;
 482:./tmk_core/common/command.c **** 
 483:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER6):
 484:./tmk_core/common/command.c ****             switch_default_layer(6);
 485:./tmk_core/common/command.c ****             break;
 486:./tmk_core/common/command.c **** 
 487:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER7):
 488:./tmk_core/common/command.c ****             switch_default_layer(7);
 489:./tmk_core/common/command.c ****             break;
 490:./tmk_core/common/command.c **** 
 491:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER8):
 492:./tmk_core/common/command.c ****             switch_default_layer(8);
 493:./tmk_core/common/command.c ****             break;
 494:./tmk_core/common/command.c **** 
 495:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER9):
 496:./tmk_core/common/command.c ****             switch_default_layer(9);
 497:./tmk_core/common/command.c ****             break;
 498:./tmk_core/common/command.c **** #endif
 499:./tmk_core/common/command.c **** 
 500:./tmk_core/common/command.c **** 
 501:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_FKEYS
 502:./tmk_core/common/command.c **** 
 503:./tmk_core/common/command.c ****         case KC_F1 ... KC_F9:
 504:./tmk_core/common/command.c ****             switch_default_layer((code - KC_F1) + 1);
 505:./tmk_core/common/command.c ****             break;
 506:./tmk_core/common/command.c ****         case KC_F10:
 507:./tmk_core/common/command.c ****             switch_default_layer(0);
 508:./tmk_core/common/command.c ****             break;
 509:./tmk_core/common/command.c **** #endif
 510:./tmk_core/common/command.c **** 
 511:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_NKEYS
 512:./tmk_core/common/command.c **** 
 513:./tmk_core/common/command.c ****         case KC_1 ... KC_9:
 514:./tmk_core/common/command.c ****             switch_default_layer((code - KC_1) + 1);
 515:./tmk_core/common/command.c ****             break;
 516:./tmk_core/common/command.c ****         case KC_0:
 517:./tmk_core/common/command.c ****             switch_default_layer(0);
 518:./tmk_core/common/command.c ****             break;
 519:./tmk_core/common/command.c **** #endif
 520:./tmk_core/common/command.c **** 
 521:./tmk_core/common/command.c ****         default:
 522:./tmk_core/common/command.c ****             print("?");
 523:./tmk_core/common/command.c ****             return false;
 524:./tmk_core/common/command.c ****     }
 525:./tmk_core/common/command.c ****     return true;
 526:./tmk_core/common/command.c **** }
 527:./tmk_core/common/command.c **** 
 528:./tmk_core/common/command.c **** 
 529:./tmk_core/common/command.c **** /***********************************************************
 530:./tmk_core/common/command.c ****  * Command console
 531:./tmk_core/common/command.c ****  ***********************************************************/
 532:./tmk_core/common/command.c **** static void command_console_help(void)
 533:./tmk_core/common/command.c **** {
 534:./tmk_core/common/command.c ****     print("\n\t- Console -\n"
 535:./tmk_core/common/command.c ****           "ESC/q:	quit\n"
 536:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 537:./tmk_core/common/command.c ****           "m:	mousekey\n"
 538:./tmk_core/common/command.c **** #endif
 539:./tmk_core/common/command.c ****     );
 540:./tmk_core/common/command.c **** }
 541:./tmk_core/common/command.c **** 
 542:./tmk_core/common/command.c **** static bool command_console(uint8_t code)
 543:./tmk_core/common/command.c **** {
 544:./tmk_core/common/command.c ****     switch (code) {
 545:./tmk_core/common/command.c ****         case KC_H:
 546:./tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 547:./tmk_core/common/command.c ****             command_console_help();
 548:./tmk_core/common/command.c ****             break;
 549:./tmk_core/common/command.c ****         case KC_Q:
 550:./tmk_core/common/command.c ****         case KC_ESC:
 551:./tmk_core/common/command.c ****             command_state = ONESHOT;
 552:./tmk_core/common/command.c ****             return false;
 553:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 554:./tmk_core/common/command.c ****         case KC_M:
 555:./tmk_core/common/command.c ****             mousekey_console_help();
 556:./tmk_core/common/command.c ****             print("M> ");
 557:./tmk_core/common/command.c ****             command_state = MOUSEKEY;
 558:./tmk_core/common/command.c ****             return true;
 559:./tmk_core/common/command.c **** #endif
 560:./tmk_core/common/command.c ****         default:
 561:./tmk_core/common/command.c ****             print("?");
 562:./tmk_core/common/command.c ****             return false;
 563:./tmk_core/common/command.c ****     }
 564:./tmk_core/common/command.c ****     print("C> ");
 565:./tmk_core/common/command.c ****     return true;
 566:./tmk_core/common/command.c **** }
 567:./tmk_core/common/command.c **** 
 568:./tmk_core/common/command.c **** 
 569:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 570:./tmk_core/common/command.c **** /***********************************************************
 571:./tmk_core/common/command.c ****  * Mousekey console
 572:./tmk_core/common/command.c ****  ***********************************************************/
 573:./tmk_core/common/command.c **** static uint8_t mousekey_param = 0;
 574:./tmk_core/common/command.c **** 
 575:./tmk_core/common/command.c **** static void mousekey_param_print(void)
 576:./tmk_core/common/command.c **** {
 577:./tmk_core/common/command.c **** // Print these variables if NO_PRINT or USER_PRINT are not defined.
 578:./tmk_core/common/command.c **** #if !defined(NO_PRINT) && !defined(USER_PRINT)
 579:./tmk_core/common/command.c ****     print("\n\t- Values -\n");
 580:./tmk_core/common/command.c ****     print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
 581:./tmk_core/common/command.c ****     print("2: interval(ms): "); pdec(mk_interval); print("\n");
 582:./tmk_core/common/command.c ****     print("3: max_speed: "); pdec(mk_max_speed); print("\n");
 583:./tmk_core/common/command.c ****     print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
 584:./tmk_core/common/command.c ****     print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
 585:./tmk_core/common/command.c ****     print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
 586:./tmk_core/common/command.c **** #endif /* !NO_PRINT */
 587:./tmk_core/common/command.c **** 
 588:./tmk_core/common/command.c **** }
 589:./tmk_core/common/command.c **** 
 590:./tmk_core/common/command.c **** //#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
 591:./tmk_core/common/command.c **** #define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
 592:./tmk_core/common/command.c **** static void mousekey_param_inc(uint8_t param, uint8_t inc)
 593:./tmk_core/common/command.c **** {
  15               		.loc 1 593 0
  16               		.cfi_startproc
  17               	.LVL0:
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
 594:./tmk_core/common/command.c ****     switch (param) {
  22               		.loc 1 594 0
  23 0000 8330      		cpi r24,lo8(3)
  24 0002 01F0      		breq .L3
  25 0004 00F4      		brsh .L4
  26 0006 8130      		cpi r24,lo8(1)
  27 0008 01F0      		breq .L5
  28 000a 8230      		cpi r24,lo8(2)
  29 000c 01F0      		breq .L6
  30 000e 0895      		ret
  31               	.L4:
  32 0010 8530      		cpi r24,lo8(5)
  33 0012 01F4      		brne .+2
  34 0014 00C0      		rjmp .L7
  35 0016 00F0      		brlo .L8
  36 0018 8630      		cpi r24,lo8(6)
  37 001a 01F4      		brne .+2
  38 001c 00C0      		rjmp .L9
  39 001e 0895      		ret
  40               	.L5:
 595:./tmk_core/common/command.c ****         case 1:
 596:./tmk_core/common/command.c ****             if (mk_delay + inc < UINT8_MAX)
  41               		.loc 1 596 0
  42 0020 2091 0000 		lds r18,mk_delay
  43 0024 862F      		mov r24,r22
  44               	.LVL1:
  45 0026 90E0      		ldi r25,0
  46 0028 820F      		add r24,r18
  47 002a 911D      		adc r25,__zero_reg__
  48 002c 8F3F      		cpi r24,-1
  49 002e 9105      		cpc r25,__zero_reg__
  50 0030 00F4      		brsh .L10
 597:./tmk_core/common/command.c ****                 mk_delay += inc;
  51               		.loc 1 597 0
  52 0032 620F      		add r22,r18
  53               	.LVL2:
  54 0034 6093 0000 		sts mk_delay,r22
  55 0038 0895      		ret
  56               	.LVL3:
  57               	.L10:
 598:./tmk_core/common/command.c ****             else
 599:./tmk_core/common/command.c ****                 mk_delay = UINT8_MAX;
  58               		.loc 1 599 0
  59 003a 8FEF      		ldi r24,lo8(-1)
  60 003c 8093 0000 		sts mk_delay,r24
  61 0040 0895      		ret
  62               	.LVL4:
  63               	.L6:
 600:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 601:./tmk_core/common/command.c ****             break;
 602:./tmk_core/common/command.c ****         case 2:
 603:./tmk_core/common/command.c ****             if (mk_interval + inc < UINT8_MAX)
  64               		.loc 1 603 0
  65 0042 2091 0000 		lds r18,mk_interval
  66 0046 862F      		mov r24,r22
  67               	.LVL5:
  68 0048 90E0      		ldi r25,0
  69 004a 820F      		add r24,r18
  70 004c 911D      		adc r25,__zero_reg__
  71 004e 8F3F      		cpi r24,-1
  72 0050 9105      		cpc r25,__zero_reg__
  73 0052 00F4      		brsh .L11
 604:./tmk_core/common/command.c ****                 mk_interval += inc;
  74               		.loc 1 604 0
  75 0054 620F      		add r22,r18
  76               	.LVL6:
  77 0056 6093 0000 		sts mk_interval,r22
  78 005a 0895      		ret
  79               	.LVL7:
  80               	.L11:
 605:./tmk_core/common/command.c ****             else
 606:./tmk_core/common/command.c ****                 mk_interval = UINT8_MAX;
  81               		.loc 1 606 0
  82 005c 8FEF      		ldi r24,lo8(-1)
  83 005e 8093 0000 		sts mk_interval,r24
  84 0062 0895      		ret
  85               	.LVL8:
  86               	.L3:
 607:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 608:./tmk_core/common/command.c ****             break;
 609:./tmk_core/common/command.c ****         case 3:
 610:./tmk_core/common/command.c ****             if (mk_max_speed + inc < UINT8_MAX)
  87               		.loc 1 610 0
  88 0064 2091 0000 		lds r18,mk_max_speed
  89 0068 862F      		mov r24,r22
  90               	.LVL9:
  91 006a 90E0      		ldi r25,0
  92 006c 820F      		add r24,r18
  93 006e 911D      		adc r25,__zero_reg__
  94 0070 8F3F      		cpi r24,-1
  95 0072 9105      		cpc r25,__zero_reg__
  96 0074 00F4      		brsh .L12
 611:./tmk_core/common/command.c ****                 mk_max_speed += inc;
  97               		.loc 1 611 0
  98 0076 620F      		add r22,r18
  99               	.LVL10:
 100 0078 6093 0000 		sts mk_max_speed,r22
 101 007c 0895      		ret
 102               	.LVL11:
 103               	.L12:
 612:./tmk_core/common/command.c ****             else
 613:./tmk_core/common/command.c ****                 mk_max_speed = UINT8_MAX;
 104               		.loc 1 613 0
 105 007e 8FEF      		ldi r24,lo8(-1)
 106 0080 8093 0000 		sts mk_max_speed,r24
 107 0084 0895      		ret
 108               	.LVL12:
 109               	.L8:
 614:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 615:./tmk_core/common/command.c ****             break;
 616:./tmk_core/common/command.c ****         case 4:
 617:./tmk_core/common/command.c ****             if (mk_time_to_max + inc < UINT8_MAX)
 110               		.loc 1 617 0
 111 0086 2091 0000 		lds r18,mk_time_to_max
 112 008a 862F      		mov r24,r22
 113               	.LVL13:
 114 008c 90E0      		ldi r25,0
 115 008e 820F      		add r24,r18
 116 0090 911D      		adc r25,__zero_reg__
 117 0092 8F3F      		cpi r24,-1
 118 0094 9105      		cpc r25,__zero_reg__
 119 0096 00F4      		brsh .L13
 618:./tmk_core/common/command.c ****                 mk_time_to_max += inc;
 120               		.loc 1 618 0
 121 0098 620F      		add r22,r18
 122               	.LVL14:
 123 009a 6093 0000 		sts mk_time_to_max,r22
 124 009e 0895      		ret
 125               	.LVL15:
 126               	.L13:
 619:./tmk_core/common/command.c ****             else
 620:./tmk_core/common/command.c ****                 mk_time_to_max = UINT8_MAX;
 127               		.loc 1 620 0
 128 00a0 8FEF      		ldi r24,lo8(-1)
 129 00a2 8093 0000 		sts mk_time_to_max,r24
 130 00a6 0895      		ret
 131               	.LVL16:
 132               	.L7:
 621:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 622:./tmk_core/common/command.c ****             break;
 623:./tmk_core/common/command.c ****         case 5:
 624:./tmk_core/common/command.c ****             if (mk_wheel_max_speed + inc < UINT8_MAX)
 133               		.loc 1 624 0
 134 00a8 2091 0000 		lds r18,mk_wheel_max_speed
 135 00ac 862F      		mov r24,r22
 136               	.LVL17:
 137 00ae 90E0      		ldi r25,0
 138 00b0 820F      		add r24,r18
 139 00b2 911D      		adc r25,__zero_reg__
 140 00b4 8F3F      		cpi r24,-1
 141 00b6 9105      		cpc r25,__zero_reg__
 142 00b8 00F4      		brsh .L14
 625:./tmk_core/common/command.c ****                 mk_wheel_max_speed += inc;
 143               		.loc 1 625 0
 144 00ba 620F      		add r22,r18
 145               	.LVL18:
 146 00bc 6093 0000 		sts mk_wheel_max_speed,r22
 147 00c0 0895      		ret
 148               	.LVL19:
 149               	.L14:
 626:./tmk_core/common/command.c ****             else
 627:./tmk_core/common/command.c ****                 mk_wheel_max_speed = UINT8_MAX;
 150               		.loc 1 627 0
 151 00c2 8FEF      		ldi r24,lo8(-1)
 152 00c4 8093 0000 		sts mk_wheel_max_speed,r24
 153 00c8 0895      		ret
 154               	.LVL20:
 155               	.L9:
 628:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 629:./tmk_core/common/command.c ****             break;
 630:./tmk_core/common/command.c ****         case 6:
 631:./tmk_core/common/command.c ****             if (mk_wheel_time_to_max + inc < UINT8_MAX)
 156               		.loc 1 631 0
 157 00ca 2091 0000 		lds r18,mk_wheel_time_to_max
 158 00ce 862F      		mov r24,r22
 159               	.LVL21:
 160 00d0 90E0      		ldi r25,0
 161 00d2 820F      		add r24,r18
 162 00d4 911D      		adc r25,__zero_reg__
 163 00d6 8F3F      		cpi r24,-1
 164 00d8 9105      		cpc r25,__zero_reg__
 165 00da 00F4      		brsh .L15
 632:./tmk_core/common/command.c ****                 mk_wheel_time_to_max += inc;
 166               		.loc 1 632 0
 167 00dc 620F      		add r22,r18
 168               	.LVL22:
 169 00de 6093 0000 		sts mk_wheel_time_to_max,r22
 170 00e2 0895      		ret
 171               	.LVL23:
 172               	.L15:
 633:./tmk_core/common/command.c ****             else
 634:./tmk_core/common/command.c ****                 mk_wheel_time_to_max = UINT8_MAX;
 173               		.loc 1 634 0
 174 00e4 8FEF      		ldi r24,lo8(-1)
 175 00e6 8093 0000 		sts mk_wheel_time_to_max,r24
 176 00ea 0895      		ret
 177               		.cfi_endproc
 178               	.LFE117:
 180               		.section	.text.mousekey_param_dec,"ax",@progbits
 182               	mousekey_param_dec:
 183               	.LFB118:
 635:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 636:./tmk_core/common/command.c ****             break;
 637:./tmk_core/common/command.c ****     }
 638:./tmk_core/common/command.c **** }
 639:./tmk_core/common/command.c **** 
 640:./tmk_core/common/command.c **** static void mousekey_param_dec(uint8_t param, uint8_t dec)
 641:./tmk_core/common/command.c **** {
 184               		.loc 1 641 0
 185               		.cfi_startproc
 186               	.LVL24:
 187               	/* prologue: function */
 188               	/* frame size = 0 */
 189               	/* stack size = 0 */
 190               	.L__stack_usage = 0
 642:./tmk_core/common/command.c ****     switch (param) {
 191               		.loc 1 642 0
 192 0000 8330      		cpi r24,lo8(3)
 193 0002 01F0      		breq .L19
 194 0004 00F4      		brsh .L20
 195 0006 8130      		cpi r24,lo8(1)
 196 0008 01F0      		breq .L21
 197 000a 8230      		cpi r24,lo8(2)
 198 000c 01F0      		breq .L22
 199 000e 0895      		ret
 200               	.L20:
 201 0010 8530      		cpi r24,lo8(5)
 202 0012 01F0      		breq .L23
 203 0014 00F0      		brlo .L24
 204 0016 8630      		cpi r24,lo8(6)
 205 0018 01F0      		breq .L25
 206 001a 0895      		ret
 207               	.L21:
 643:./tmk_core/common/command.c ****         case 1:
 644:./tmk_core/common/command.c ****             if (mk_delay > dec)
 208               		.loc 1 644 0
 209 001c 8091 0000 		lds r24,mk_delay
 210               	.LVL25:
 211 0020 6817      		cp r22,r24
 212 0022 00F4      		brsh .L26
 645:./tmk_core/common/command.c ****                 mk_delay -= dec;
 213               		.loc 1 645 0
 214 0024 861B      		sub r24,r22
 215 0026 8093 0000 		sts mk_delay,r24
 216 002a 0895      		ret
 217               	.L26:
 646:./tmk_core/common/command.c ****             else
 647:./tmk_core/common/command.c ****                 mk_delay = 0;
 218               		.loc 1 647 0
 219 002c 1092 0000 		sts mk_delay,__zero_reg__
 220 0030 0895      		ret
 221               	.LVL26:
 222               	.L22:
 648:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 649:./tmk_core/common/command.c ****             break;
 650:./tmk_core/common/command.c ****         case 2:
 651:./tmk_core/common/command.c ****             if (mk_interval > dec)
 223               		.loc 1 651 0
 224 0032 8091 0000 		lds r24,mk_interval
 225               	.LVL27:
 226 0036 6817      		cp r22,r24
 227 0038 00F4      		brsh .L27
 652:./tmk_core/common/command.c ****                 mk_interval -= dec;
 228               		.loc 1 652 0
 229 003a 861B      		sub r24,r22
 230 003c 8093 0000 		sts mk_interval,r24
 231 0040 0895      		ret
 232               	.L27:
 653:./tmk_core/common/command.c ****             else
 654:./tmk_core/common/command.c ****                 mk_interval = 0;
 233               		.loc 1 654 0
 234 0042 1092 0000 		sts mk_interval,__zero_reg__
 235 0046 0895      		ret
 236               	.LVL28:
 237               	.L19:
 655:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 656:./tmk_core/common/command.c ****             break;
 657:./tmk_core/common/command.c ****         case 3:
 658:./tmk_core/common/command.c ****             if (mk_max_speed > dec)
 238               		.loc 1 658 0
 239 0048 8091 0000 		lds r24,mk_max_speed
 240               	.LVL29:
 241 004c 6817      		cp r22,r24
 242 004e 00F4      		brsh .L28
 659:./tmk_core/common/command.c ****                 mk_max_speed -= dec;
 243               		.loc 1 659 0
 244 0050 861B      		sub r24,r22
 245 0052 8093 0000 		sts mk_max_speed,r24
 246 0056 0895      		ret
 247               	.L28:
 660:./tmk_core/common/command.c ****             else
 661:./tmk_core/common/command.c ****                 mk_max_speed = 0;
 248               		.loc 1 661 0
 249 0058 1092 0000 		sts mk_max_speed,__zero_reg__
 250 005c 0895      		ret
 251               	.LVL30:
 252               	.L24:
 662:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 663:./tmk_core/common/command.c ****             break;
 664:./tmk_core/common/command.c ****         case 4:
 665:./tmk_core/common/command.c ****             if (mk_time_to_max > dec)
 253               		.loc 1 665 0
 254 005e 8091 0000 		lds r24,mk_time_to_max
 255               	.LVL31:
 256 0062 6817      		cp r22,r24
 257 0064 00F4      		brsh .L29
 666:./tmk_core/common/command.c ****                 mk_time_to_max -= dec;
 258               		.loc 1 666 0
 259 0066 861B      		sub r24,r22
 260 0068 8093 0000 		sts mk_time_to_max,r24
 261 006c 0895      		ret
 262               	.L29:
 667:./tmk_core/common/command.c ****             else
 668:./tmk_core/common/command.c ****                 mk_time_to_max = 0;
 263               		.loc 1 668 0
 264 006e 1092 0000 		sts mk_time_to_max,__zero_reg__
 265 0072 0895      		ret
 266               	.LVL32:
 267               	.L23:
 669:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 670:./tmk_core/common/command.c ****             break;
 671:./tmk_core/common/command.c ****         case 5:
 672:./tmk_core/common/command.c ****             if (mk_wheel_max_speed > dec)
 268               		.loc 1 672 0
 269 0074 8091 0000 		lds r24,mk_wheel_max_speed
 270               	.LVL33:
 271 0078 6817      		cp r22,r24
 272 007a 00F4      		brsh .L30
 673:./tmk_core/common/command.c ****                 mk_wheel_max_speed -= dec;
 273               		.loc 1 673 0
 274 007c 861B      		sub r24,r22
 275 007e 8093 0000 		sts mk_wheel_max_speed,r24
 276 0082 0895      		ret
 277               	.L30:
 674:./tmk_core/common/command.c ****             else
 675:./tmk_core/common/command.c ****                 mk_wheel_max_speed = 0;
 278               		.loc 1 675 0
 279 0084 1092 0000 		sts mk_wheel_max_speed,__zero_reg__
 280 0088 0895      		ret
 281               	.LVL34:
 282               	.L25:
 676:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 677:./tmk_core/common/command.c ****             break;
 678:./tmk_core/common/command.c ****         case 6:
 679:./tmk_core/common/command.c ****             if (mk_wheel_time_to_max > dec)
 283               		.loc 1 679 0
 284 008a 8091 0000 		lds r24,mk_wheel_time_to_max
 285               	.LVL35:
 286 008e 6817      		cp r22,r24
 287 0090 00F4      		brsh .L31
 680:./tmk_core/common/command.c ****                 mk_wheel_time_to_max -= dec;
 288               		.loc 1 680 0
 289 0092 861B      		sub r24,r22
 290 0094 8093 0000 		sts mk_wheel_time_to_max,r24
 291 0098 0895      		ret
 292               	.L31:
 681:./tmk_core/common/command.c ****             else
 682:./tmk_core/common/command.c ****                 mk_wheel_time_to_max = 0;
 293               		.loc 1 682 0
 294 009a 1092 0000 		sts mk_wheel_time_to_max,__zero_reg__
 295 009e 0895      		ret
 296               		.cfi_endproc
 297               	.LFE118:
 299               		.section	.text.command_common,"ax",@progbits
 301               	command_common:
 302               	.LFB113:
 307:./tmk_core/common/command.c **** {
 303               		.loc 1 307 0
 304               		.cfi_startproc
 305               	.LVL36:
 306               	/* prologue: function */
 307               	/* frame size = 0 */
 308               	/* stack size = 0 */
 309               	.L__stack_usage = 0
 313:./tmk_core/common/command.c ****     switch (code) {
 310               		.loc 1 313 0
 311 0000 8B31      		cpi r24,lo8(27)
 312 0002 01F4      		brne .+2
 313 0004 00C0      		rjmp .L34
 314 0006 00F4      		brsh .L35
 315 0008 8E30      		cpi r24,lo8(14)
 316 000a 01F4      		brne .+2
 317 000c 00C0      		rjmp .L36
 318 000e 00F4      		brsh .L37
 319 0010 8730      		cpi r24,lo8(7)
 320 0012 01F4      		brne .+2
 321 0014 00C0      		rjmp .L38
 322 0016 00F4      		brsh .L39
 323 0018 8630      		cpi r24,lo8(6)
 324 001a 01F0      		breq .L40
 325 001c 00C0      		rjmp .L33
 326               	.L39:
 327 001e 8830      		cpi r24,lo8(8)
 328 0020 01F4      		brne .+2
 329 0022 00C0      		rjmp .L56
 330 0024 8B30      		cpi r24,lo8(11)
 331 0026 01F4      		brne .+2
 332 0028 00C0      		rjmp .L56
 333 002a 00C0      		rjmp .L33
 334               	.L37:
 335 002c 8131      		cpi r24,lo8(17)
 336 002e 01F4      		brne .+2
 337 0030 00C0      		rjmp .L42
 338 0032 00F4      		brsh .L43
 339 0034 8031      		cpi r24,lo8(16)
 340 0036 01F4      		brne .+2
 341 0038 00C0      		rjmp .L44
 342 003a 00C0      		rjmp .L33
 343               	.L43:
 344 003c 8631      		cpi r24,lo8(22)
 345 003e 01F4      		brne .+2
 346 0040 00C0      		rjmp .L56
 347 0042 8931      		cpi r24,lo8(25)
 348 0044 01F4      		brne .+2
 349 0046 00C0      		rjmp .L56
 350 0048 00C0      		rjmp .L33
 351               	.L35:
 352 004a 8533      		cpi r24,lo8(53)
 353 004c 01F4      		brne .+2
 354 004e 00C0      		rjmp .L47
 355 0050 00F4      		brsh .L46
 356 0052 8732      		cpi r24,lo8(39)
 357 0054 01F4      		brne .+2
 358 0056 00C0      		rjmp .L47
 359 0058 00F4      		brsh .L48
 360 005a 8E31      		cpi r24,lo8(30)
 361 005c 00F0      		brlo .+2
 362 005e 00C0      		rjmp .L87
 363 0060 00C0      		rjmp .L33
 364               	.L48:
 365 0062 8932      		cpi r24,lo8(41)
 366 0064 01F4      		brne .+2
 367 0066 00C0      		rjmp .L47
 368 0068 00C0      		rjmp .L33
 369               	.L46:
 370 006a 8334      		cpi r24,lo8(67)
 371 006c 00F4      		brsh .L50
 372 006e 8A33      		cpi r24,lo8(58)
 373 0070 00F0      		brlo .+2
 374 0072 00C0      		rjmp .L51
 375 0074 8833      		cpi r24,lo8(56)
 376 0076 01F4      		brne .+2
 377 0078 00C0      		rjmp .L56
 378 007a 00C0      		rjmp .L33
 379               	.L50:
 380 007c 8334      		cpi r24,lo8(67)
 381 007e 01F4      		brne .+2
 382 0080 00C0      		rjmp .L47
 383 0082 8834      		cpi r24,lo8(72)
 384 0084 01F0      		breq .L53
 385               	.L33:
 523:./tmk_core/common/command.c ****             return false;
 386               		.loc 1 523 0
 387 0086 80E0      		ldi r24,0
 388               	.LVL37:
 389 0088 0895      		ret
 390               	.LVL38:
 391               	.L40:
 358:./tmk_core/common/command.c ****             debug_matrix   = false;
 392               		.loc 1 358 0
 393 008a 8091 0000 		lds r24,debug_config
 394               	.LVL39:
 361:./tmk_core/common/command.c ****             debug_enable   = false;
 395               		.loc 1 361 0
 396 008e 817F      		andi r24,lo8(-15)
 397 0090 8E7F      		andi r24,lo8(~(1<<0))
 398 0092 8093 0000 		sts debug_config,r24
 364:./tmk_core/common/command.c ****             command_state = CONSOLE;
 399               		.loc 1 364 0
 400 0096 81E0      		ldi r24,lo8(1)
 401 0098 8093 0000 		sts command_state,r24
 365:./tmk_core/common/command.c ****             break;
 402               		.loc 1 365 0
 403 009c 0895      		ret
 404               	.LVL40:
 405               	.L53:
 369:./tmk_core/common/command.c ****             clear_keyboard(); // clear to prevent stuck keys
 406               		.loc 1 369 0
 407 009e 0E94 0000 		call clear_keyboard
 408               	.LVL41:
 409               	.LBB16:
 410               	.LBB17:
 411               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/lib/avr/include/util/delay.h **** 
 153:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/lib/avr/include/util/delay.h **** 
 156:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/lib/avr/include/util/delay.h **** 
 159:/usr/lib/avr/include/util/delay.h **** 	#else
 160:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 161:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/lib/avr/include/util/delay.h **** 	#endif
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 412               		.loc 2 164 0
 413 00a2 2FEF      		ldi r18,lo8(3199999)
 414 00a4 83ED      		ldi r24,hi8(3199999)
 415 00a6 90E3      		ldi r25,hlo8(3199999)
 416 00a8 2150      		1: subi r18,1
 417 00aa 8040      		sbci r24,0
 418 00ac 9040      		sbci r25,0
 419 00ae 01F4      		brne 1b
 420 00b0 00C0      		rjmp .
 421 00b2 0000      		nop
 422               	.LBE17:
 423               	.LBE16:
 377:./tmk_core/common/command.c ****             bootloader_jump(); // not return
 424               		.loc 1 377 0
 425 00b4 0E94 0000 		call bootloader_jump
 426               	.LVL42:
 427 00b8 00C0      		rjmp .L56
 428               	.LVL43:
 429               	.L38:
 382:./tmk_core/common/command.c ****             debug_enable = !debug_enable;
 430               		.loc 1 382 0
 431 00ba 9091 0000 		lds r25,debug_config
 432 00be 892F      		mov r24,r25
 433               	.LVL44:
 434 00c0 8095      		com r24
 435 00c2 8170      		andi r24,lo8(1)
 436 00c4 80FB      		bst r24,0
 437 00c6 90F9      		bld r25,0
 438 00c8 9093 0000 		sts debug_config,r25
 383:./tmk_core/common/command.c ****             if (debug_enable) {
 439               		.loc 1 383 0
 440 00cc 8111      		cpse r24,__zero_reg__
 441 00ce 00C0      		rjmp .L56
 389:./tmk_core/common/command.c ****                 debug_mouse    = false;
 442               		.loc 1 389 0
 443 00d0 997F      		andi r25,lo8(-7)
 444 00d2 977F      		andi r25,lo8(~(1<<3))
 445 00d4 9093 0000 		sts debug_config,r25
 446 00d8 00C0      		rjmp .L56
 447               	.LVL45:
 448               	.L34:
 395:./tmk_core/common/command.c ****             debug_matrix = !debug_matrix;
 449               		.loc 1 395 0
 450 00da 9091 0000 		lds r25,debug_config
 451 00de 91FB      		bst r25,1
 452 00e0 8827      		clr r24
 453 00e2 80F9      		bld r24,0
 454               	.LVL46:
 455 00e4 21E0      		ldi r18,lo8(1)
 456 00e6 8227      		eor r24,r18
 457 00e8 80FB      		bst r24,0
 458 00ea 91F9      		bld r25,1
 459 00ec 00C0      		rjmp .L90
 460               	.LVL47:
 461               	.L36:
 406:./tmk_core/common/command.c ****             debug_keyboard = !debug_keyboard;
 462               		.loc 1 406 0
 463 00ee 9091 0000 		lds r25,debug_config
 464 00f2 92FB      		bst r25,2
 465 00f4 8827      		clr r24
 466 00f6 80F9      		bld r24,0
 467               	.LVL48:
 468 00f8 21E0      		ldi r18,lo8(1)
 469 00fa 8227      		eor r24,r18
 470 00fc 80FB      		bst r24,0
 471 00fe 92F9      		bld r25,2
 472 0100 00C0      		rjmp .L90
 473               	.LVL49:
 474               	.L44:
 417:./tmk_core/common/command.c ****             debug_mouse = !debug_mouse;
 475               		.loc 1 417 0
 476 0102 9091 0000 		lds r25,debug_config
 477 0106 93FB      		bst r25,3
 478 0108 8827      		clr r24
 479 010a 80F9      		bld r24,0
 480               	.LVL50:
 481 010c 21E0      		ldi r18,lo8(1)
 482 010e 8227      		eor r24,r18
 483 0110 80FB      		bst r24,0
 484 0112 93F9      		bld r25,3
 485               	.L90:
 486 0114 9093 0000 		sts debug_config,r25
 418:./tmk_core/common/command.c ****             if (debug_mouse) {
 487               		.loc 1 418 0
 488 0118 8823      		tst r24
 489 011a 01F0      		breq .L56
 420:./tmk_core/common/command.c ****                 debug_enable = true;
 490               		.loc 1 420 0
 491 011c 9160      		ori r25,lo8(1<<0)
 492 011e 9093 0000 		sts debug_config,r25
 493 0122 0895      		ret
 494               	.LVL51:
 495               	.L42:
 440:./tmk_core/common/command.c ****             clear_keyboard(); // clear to prevent stuck keys
 496               		.loc 1 440 0
 497 0124 0E94 0000 		call clear_keyboard
 498               	.LVL52:
 441:./tmk_core/common/command.c ****             keymap_config.nkro = !keymap_config.nkro;
 499               		.loc 1 441 0
 500 0128 9091 0000 		lds r25,keymap_config
 501 012c 97FB      		bst r25,7
 502 012e 8827      		clr r24
 503 0130 80F9      		bld r24,0
 504 0132 21E0      		ldi r18,lo8(1)
 505 0134 8227      		eor r24,r18
 506 0136 80FB      		bst r24,0
 507 0138 97F9      		bld r25,7
 508 013a 9093 0000 		sts keymap_config,r25
 509 013e 00C0      		rjmp .L56
 510               	.LVL53:
 511               	.L51:
 504:./tmk_core/common/command.c ****             switch_default_layer((code - KC_F1) + 1);
 512               		.loc 1 504 0
 513 0140 27EC      		ldi r18,lo8(-57)
 514 0142 00C0      		rjmp .L93
 515               	.LVL54:
 516               	.L87:
 514:./tmk_core/common/command.c ****             switch_default_layer((code - KC_1) + 1);
 517               		.loc 1 514 0
 518 0144 23EE      		ldi r18,lo8(-29)
 519               	.LVL55:
 520               	.L93:
 521 0146 280F      		add r18,r24
 522               	.LBB18:
 523               	.LBB19:
 683:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 684:./tmk_core/common/command.c ****             break;
 685:./tmk_core/common/command.c ****     }
 686:./tmk_core/common/command.c **** }
 687:./tmk_core/common/command.c **** 
 688:./tmk_core/common/command.c **** static void mousekey_console_help(void)
 689:./tmk_core/common/command.c **** {
 690:./tmk_core/common/command.c ****     print("\n\t- Mousekey -\n"
 691:./tmk_core/common/command.c ****           "ESC/q:	quit\n"
 692:./tmk_core/common/command.c ****           "1:	delay(*10ms)\n"
 693:./tmk_core/common/command.c ****           "2:	interval(ms)\n"
 694:./tmk_core/common/command.c ****           "3:	max_speed\n"
 695:./tmk_core/common/command.c ****           "4:	time_to_max\n"
 696:./tmk_core/common/command.c ****           "5:	wheel_max_speed\n"
 697:./tmk_core/common/command.c ****           "6:	wheel_time_to_max\n"
 698:./tmk_core/common/command.c ****           "\n"
 699:./tmk_core/common/command.c ****           "p:	print values\n"
 700:./tmk_core/common/command.c ****           "d:	set defaults\n"
 701:./tmk_core/common/command.c ****           "up:	+1\n"
 702:./tmk_core/common/command.c ****           "down:	-1\n"
 703:./tmk_core/common/command.c ****           "pgup:	+10\n"
 704:./tmk_core/common/command.c ****           "pgdown:	-10\n"
 705:./tmk_core/common/command.c ****           "\n"
 706:./tmk_core/common/command.c ****           "speed = delta * max_speed * (repeat / time_to_max)\n");
 707:./tmk_core/common/command.c ****     xprintf("where delta: cursor=%d, wheel=%d\n"
 708:./tmk_core/common/command.c ****             "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_D
 709:./tmk_core/common/command.c **** }
 710:./tmk_core/common/command.c **** 
 711:./tmk_core/common/command.c **** static bool mousekey_console(uint8_t code)
 712:./tmk_core/common/command.c **** {
 713:./tmk_core/common/command.c ****     switch (code) {
 714:./tmk_core/common/command.c ****         case KC_H:
 715:./tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 716:./tmk_core/common/command.c ****             mousekey_console_help();
 717:./tmk_core/common/command.c ****             break;
 718:./tmk_core/common/command.c ****         case KC_Q:
 719:./tmk_core/common/command.c ****         case KC_ESC:
 720:./tmk_core/common/command.c ****             if (mousekey_param) {
 721:./tmk_core/common/command.c ****                 mousekey_param = 0;
 722:./tmk_core/common/command.c ****             } else {
 723:./tmk_core/common/command.c ****                 print("C> ");
 724:./tmk_core/common/command.c ****                 command_state = CONSOLE;
 725:./tmk_core/common/command.c ****                 return false;
 726:./tmk_core/common/command.c ****             }
 727:./tmk_core/common/command.c ****             break;
 728:./tmk_core/common/command.c ****         case KC_P:
 729:./tmk_core/common/command.c ****             mousekey_param_print();
 730:./tmk_core/common/command.c ****             break;
 731:./tmk_core/common/command.c ****         case KC_1:
 732:./tmk_core/common/command.c ****         case KC_2:
 733:./tmk_core/common/command.c ****         case KC_3:
 734:./tmk_core/common/command.c ****         case KC_4:
 735:./tmk_core/common/command.c ****         case KC_5:
 736:./tmk_core/common/command.c ****         case KC_6:
 737:./tmk_core/common/command.c ****             mousekey_param = numkey2num(code);
 738:./tmk_core/common/command.c ****             break;
 739:./tmk_core/common/command.c ****         case KC_UP:
 740:./tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 1);
 741:./tmk_core/common/command.c ****             break;
 742:./tmk_core/common/command.c ****         case KC_DOWN:
 743:./tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 1);
 744:./tmk_core/common/command.c ****             break;
 745:./tmk_core/common/command.c ****         case KC_PGUP:
 746:./tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 10);
 747:./tmk_core/common/command.c ****             break;
 748:./tmk_core/common/command.c ****         case KC_PGDN:
 749:./tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 10);
 750:./tmk_core/common/command.c ****             break;
 751:./tmk_core/common/command.c ****         case KC_D:
 752:./tmk_core/common/command.c ****             mk_delay = MOUSEKEY_DELAY/10;
 753:./tmk_core/common/command.c ****             mk_interval = MOUSEKEY_INTERVAL;
 754:./tmk_core/common/command.c ****             mk_max_speed = MOUSEKEY_MAX_SPEED;
 755:./tmk_core/common/command.c ****             mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 756:./tmk_core/common/command.c ****             mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 757:./tmk_core/common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 758:./tmk_core/common/command.c ****             print("set default\n");
 759:./tmk_core/common/command.c ****             break;
 760:./tmk_core/common/command.c ****         default:
 761:./tmk_core/common/command.c ****             print("?");
 762:./tmk_core/common/command.c ****             return false;
 763:./tmk_core/common/command.c ****     }
 764:./tmk_core/common/command.c ****     if (mousekey_param) {
 765:./tmk_core/common/command.c ****         xprintf("M%d> ", mousekey_param);
 766:./tmk_core/common/command.c ****     } else {
 767:./tmk_core/common/command.c ****         print("M>" );
 768:./tmk_core/common/command.c ****     }
 769:./tmk_core/common/command.c ****     return true;
 770:./tmk_core/common/command.c **** }
 771:./tmk_core/common/command.c **** #endif
 772:./tmk_core/common/command.c **** 
 773:./tmk_core/common/command.c **** 
 774:./tmk_core/common/command.c **** /***********************************************************
 775:./tmk_core/common/command.c ****  * Utilities
 776:./tmk_core/common/command.c ****  ***********************************************************/
 777:./tmk_core/common/command.c **** uint8_t numkey2num(uint8_t code)
 778:./tmk_core/common/command.c **** {
 779:./tmk_core/common/command.c ****     switch (code) {
 780:./tmk_core/common/command.c ****         case KC_1: return 1;
 781:./tmk_core/common/command.c ****         case KC_2: return 2;
 782:./tmk_core/common/command.c ****         case KC_3: return 3;
 783:./tmk_core/common/command.c ****         case KC_4: return 4;
 784:./tmk_core/common/command.c ****         case KC_5: return 5;
 785:./tmk_core/common/command.c ****         case KC_6: return 6;
 786:./tmk_core/common/command.c ****         case KC_7: return 7;
 787:./tmk_core/common/command.c ****         case KC_8: return 8;
 788:./tmk_core/common/command.c ****         case KC_9: return 9;
 789:./tmk_core/common/command.c ****         case KC_0: return 0;
 790:./tmk_core/common/command.c ****     }
 791:./tmk_core/common/command.c ****     return 0;
 792:./tmk_core/common/command.c **** }
 793:./tmk_core/common/command.c **** 
 794:./tmk_core/common/command.c **** static void switch_default_layer(uint8_t layer)
 795:./tmk_core/common/command.c **** {
 796:./tmk_core/common/command.c ****     xprintf("L%d\n", layer);
 797:./tmk_core/common/command.c ****     default_layer_set(1UL<<layer);
 524               		.loc 1 797 0
 525 0148 61E0      		ldi r22,lo8(1)
 526 014a 70E0      		ldi r23,0
 527 014c 80E0      		ldi r24,0
 528 014e 90E0      		ldi r25,0
 529 0150 00C0      		rjmp 2f
 530               		1:
 531 0152 660F      		lsl r22
 532 0154 771F      		rol r23
 533 0156 881F      		rol r24
 534 0158 991F      		rol r25
 535               		2:
 536 015a 2A95      		dec r18
 537 015c 02F4      		brpl 1b
 538 015e 00C0      		rjmp .L92
 539               	.L47:
 540               	.LVL56:
 541               	.LBE19:
 542               	.LBE18:
 543               	.LBB20:
 544               	.LBB21:
 545 0160 61E0      		ldi r22,lo8(1)
 546 0162 70E0      		ldi r23,0
 547 0164 80E0      		ldi r24,0
 548 0166 90E0      		ldi r25,0
 549               	.LVL57:
 550               	.L92:
 551 0168 0E94 0000 		call default_layer_set
 552               	.LVL58:
 798:./tmk_core/common/command.c ****     clear_keyboard();
 553               		.loc 1 798 0
 554 016c 0E94 0000 		call clear_keyboard
 555               	.LVL59:
 556               	.L56:
 557               	.LBE21:
 558               	.LBE20:
 525:./tmk_core/common/command.c ****     return true;
 559               		.loc 1 525 0
 560 0170 81E0      		ldi r24,lo8(1)
 526:./tmk_core/common/command.c **** }
 561               		.loc 1 526 0
 562 0172 0895      		ret
 563               		.cfi_endproc
 564               	.LFE113:
 566               		.section	.text.command_extra,"ax",@progbits
 567               		.weak	command_extra
 569               	command_extra:
 570               	.LFB107:
 106:./tmk_core/common/command.c **** {
 571               		.loc 1 106 0
 572               		.cfi_startproc
 573               	.LVL60:
 574               	/* prologue: function */
 575               	/* frame size = 0 */
 576               	/* stack size = 0 */
 577               	.L__stack_usage = 0
 109:./tmk_core/common/command.c **** }
 578               		.loc 1 109 0
 579 0000 80E0      		ldi r24,0
 580               	.LVL61:
 581 0002 0895      		ret
 582               		.cfi_endproc
 583               	.LFE107:
 585               		.section	.text.command_console_extra,"ax",@progbits
 586               		.weak	command_console_extra
 588               	command_console_extra:
 589               	.LFB108:
 113:./tmk_core/common/command.c **** {
 590               		.loc 1 113 0
 591               		.cfi_startproc
 592               	.LVL62:
 593               	/* prologue: function */
 594               	/* frame size = 0 */
 595               	/* stack size = 0 */
 596               	.L__stack_usage = 0
 116:./tmk_core/common/command.c **** }
 597               		.loc 1 116 0
 598 0000 80E0      		ldi r24,0
 599               	.LVL63:
 600 0002 0895      		ret
 601               		.cfi_endproc
 602               	.LFE108:
 604               		.section	.text.numkey2num,"ax",@progbits
 605               	.global	numkey2num
 607               	numkey2num:
 608               	.LFB121:
 778:./tmk_core/common/command.c **** {
 609               		.loc 1 778 0
 610               		.cfi_startproc
 611               	.LVL64:
 612               	/* prologue: function */
 613               	/* frame size = 0 */
 614               	/* stack size = 0 */
 615               	.L__stack_usage = 0
 616 0000 8E51      		subi r24,lo8(-(-30))
 617               	.LVL65:
 618 0002 8A30      		cpi r24,lo8(10)
 619 0004 00F4      		brsh .L98
 620 0006 E82F      		mov r30,r24
 621 0008 F0E0      		ldi r31,0
 622 000a E050      		subi r30,lo8(-(CSWTCH.47))
 623 000c F040      		sbci r31,hi8(-(CSWTCH.47))
 624 000e 8081      		ld r24,Z
 625               	.LVL66:
 626 0010 0895      		ret
 627               	.L98:
 778:./tmk_core/common/command.c **** {
 628               		.loc 1 778 0
 629 0012 80E0      		ldi r24,0
 792:./tmk_core/common/command.c **** }
 630               		.loc 1 792 0
 631 0014 0895      		ret
 632               		.cfi_endproc
 633               	.LFE121:
 635               		.section	.text.command_proc,"ax",@progbits
 636               	.global	command_proc
 638               	command_proc:
 639               	.LFB106:
  77:./tmk_core/common/command.c **** {
 640               		.loc 1 77 0
 641               		.cfi_startproc
 642               	.LVL67:
 643 0000 CF93      		push r28
 644               	.LCFI0:
 645               		.cfi_def_cfa_offset 3
 646               		.cfi_offset 28, -2
 647               	/* prologue: function */
 648               	/* frame size = 0 */
 649               	/* stack size = 1 */
 650               	.L__stack_usage = 1
 651 0002 C82F      		mov r28,r24
  78:./tmk_core/common/command.c ****     switch (command_state) {
 652               		.loc 1 78 0
 653 0004 8091 0000 		lds r24,command_state
 654               	.LVL68:
 655 0008 8130      		cpi r24,lo8(1)
 656 000a 01F0      		breq .L101
 657 000c 00F0      		brlo .L102
 658 000e 8230      		cpi r24,lo8(2)
 659 0010 01F0      		breq .L103
 660 0012 00C0      		rjmp .L156
 661               	.L102:
  80:./tmk_core/common/command.c ****             if (!IS_COMMAND())
 662               		.loc 1 80 0
 663 0014 E091 0000 		lds r30,keyboard_report
 664 0018 F091 0000 		lds r31,keyboard_report+1
 665 001c 8081      		ld r24,Z
 666 001e 8232      		cpi r24,lo8(34)
 667 0020 01F0      		breq .+2
 668 0022 00C0      		rjmp .L125
 669 0024 00C0      		rjmp .L155
 670               	.L101:
  85:./tmk_core/common/command.c ****             if (IS_COMMAND())
 671               		.loc 1 85 0
 672 0026 E091 0000 		lds r30,keyboard_report
 673 002a F091 0000 		lds r31,keyboard_report+1
 674 002e 8081      		ld r24,Z
 675 0030 8232      		cpi r24,lo8(34)
 676 0032 01F4      		brne .L106
 677               	.L155:
  86:./tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
 678               		.loc 1 86 0
 679 0034 8C2F      		mov r24,r28
 680 0036 0E94 0000 		call command_extra
 681               	.LVL69:
 682 003a 8111      		cpse r24,__zero_reg__
 683 003c 00C0      		rjmp .L128
  86:./tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
 684               		.loc 1 86 0 is_stmt 0 discriminator 2
 685 003e 8C2F      		mov r24,r28
 686 0040 0E94 0000 		call command_common
 687               	.LVL70:
 688 0044 00C0      		rjmp .L108
 689               	.L106:
  88:./tmk_core/common/command.c ****                 return (command_console_extra(code) || command_console(code));
 690               		.loc 1 88 0 is_stmt 1
 691 0046 8C2F      		mov r24,r28
 692 0048 0E94 0000 		call command_console_extra
 693               	.LVL71:
 694 004c 8111      		cpse r24,__zero_reg__
 695 004e 00C0      		rjmp .L128
 696               	.LVL72:
 697               	.LBB26:
 698               	.LBB27:
 544:./tmk_core/common/command.c ****     switch (code) {
 699               		.loc 1 544 0
 700 0050 C431      		cpi r28,lo8(20)
 701 0052 01F0      		breq .L110
 702 0054 00F4      		brsh .L111
 703 0056 CB30      		cpi r28,lo8(11)
 704 0058 01F0      		breq .L128
 705 005a C031      		cpi r28,lo8(16)
 706 005c 01F0      		breq .+2
 707 005e 00C0      		rjmp .L109
 557:./tmk_core/common/command.c ****             command_state = MOUSEKEY;
 708               		.loc 1 557 0
 709 0060 82E0      		ldi r24,lo8(2)
 710 0062 8093 0000 		sts command_state,r24
 711 0066 00C0      		rjmp .L128
 712               	.L111:
 544:./tmk_core/common/command.c ****     switch (code) {
 713               		.loc 1 544 0
 714 0068 C932      		cpi r28,lo8(41)
 715 006a 01F0      		breq .L110
 716 006c C833      		cpi r28,lo8(56)
 717 006e 01F0      		breq .L128
 718 0070 00C0      		rjmp .L109
 719               	.L110:
 551:./tmk_core/common/command.c ****             command_state = ONESHOT;
 720               		.loc 1 551 0
 721 0072 1092 0000 		sts command_state,__zero_reg__
 722 0076 00C0      		rjmp .L109
 723               	.LVL73:
 724               	.L128:
 725               	.LBE27:
 726               	.LBE26:
  88:./tmk_core/common/command.c ****                 return (command_console_extra(code) || command_console(code));
 727               		.loc 1 88 0
 728 0078 81E0      		ldi r24,lo8(1)
 729               	.L108:
  88:./tmk_core/common/command.c ****                 return (command_console_extra(code) || command_console(code));
 730               		.loc 1 88 0 is_stmt 0 discriminator 4
 731 007a 8170      		andi r24,lo8(1)
 732 007c 00C0      		rjmp .L149
 733               	.L103:
 734               	.LVL74:
 735               	.LBB28:
 736               	.LBB29:
 713:./tmk_core/common/command.c ****     switch (code) {
 737               		.loc 1 713 0 is_stmt 1
 738 007e C932      		cpi r28,lo8(41)
 739 0080 01F0      		breq .L114
 740 0082 00F4      		brsh .L115
 741 0084 C431      		cpi r28,lo8(20)
 742 0086 01F0      		breq .L114
 743 0088 00F4      		brsh .L116
 744 008a C730      		cpi r28,lo8(7)
 745 008c 01F0      		breq .+2
 746 008e 00C0      		rjmp .L129
 752:./tmk_core/common/command.c ****             mk_delay = MOUSEKEY_DELAY/10;
 747               		.loc 1 752 0
 748 0090 8EE1      		ldi r24,lo8(30)
 749 0092 8093 0000 		sts mk_delay,r24
 753:./tmk_core/common/command.c ****             mk_interval = MOUSEKEY_INTERVAL;
 750               		.loc 1 753 0
 751 0096 82E3      		ldi r24,lo8(50)
 752 0098 8093 0000 		sts mk_interval,r24
 754:./tmk_core/common/command.c ****             mk_max_speed = MOUSEKEY_MAX_SPEED;
 753               		.loc 1 754 0
 754 009c 8AE0      		ldi r24,lo8(10)
 755 009e 8093 0000 		sts mk_max_speed,r24
 755:./tmk_core/common/command.c ****             mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 756               		.loc 1 755 0
 757 00a2 84E1      		ldi r24,lo8(20)
 758 00a4 8093 0000 		sts mk_time_to_max,r24
 756:./tmk_core/common/command.c ****             mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 759               		.loc 1 756 0
 760 00a8 88E0      		ldi r24,lo8(8)
 761 00aa 8093 0000 		sts mk_wheel_max_speed,r24
 757:./tmk_core/common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 762               		.loc 1 757 0
 763 00ae 88E2      		ldi r24,lo8(40)
 764 00b0 8093 0000 		sts mk_wheel_time_to_max,r24
 765 00b4 00C0      		rjmp .L129
 766               	.L116:
 713:./tmk_core/common/command.c ****     switch (code) {
 767               		.loc 1 713 0
 768 00b6 82EE      		ldi r24,lo8(-30)
 769 00b8 8C0F      		add r24,r28
 770 00ba 8630      		cpi r24,lo8(6)
 771 00bc 00F4      		brsh .L129
 737:./tmk_core/common/command.c ****             mousekey_param = numkey2num(code);
 772               		.loc 1 737 0
 773 00be 8C2F      		mov r24,r28
 774 00c0 0E94 0000 		call numkey2num
 775               	.LVL75:
 776 00c4 8093 0000 		sts mousekey_param,r24
 777 00c8 00C0      		rjmp .L129
 778               	.L115:
 713:./tmk_core/common/command.c ****     switch (code) {
 779               		.loc 1 713 0
 780 00ca CE34      		cpi r28,lo8(78)
 781 00cc 01F0      		breq .L119
 782 00ce 00F4      		brsh .L120
 783 00d0 CB34      		cpi r28,lo8(75)
 784 00d2 01F4      		brne .L129
 746:./tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 10);
 785               		.loc 1 746 0
 786 00d4 6AE0      		ldi r22,lo8(10)
 787 00d6 00C0      		rjmp .L153
 788               	.L120:
 713:./tmk_core/common/command.c ****     switch (code) {
 789               		.loc 1 713 0
 790 00d8 C135      		cpi r28,lo8(81)
 791 00da 01F0      		breq .L122
 792 00dc C235      		cpi r28,lo8(82)
 793 00de 01F4      		brne .L129
 740:./tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 1);
 794               		.loc 1 740 0
 795 00e0 61E0      		ldi r22,lo8(1)
 796 00e2 00C0      		rjmp .L153
 797               	.L114:
 720:./tmk_core/common/command.c ****             if (mousekey_param) {
 798               		.loc 1 720 0
 799 00e4 8091 0000 		lds r24,mousekey_param
 800 00e8 8823      		tst r24
 801 00ea 01F0      		breq .L124
 721:./tmk_core/common/command.c ****                 mousekey_param = 0;
 802               		.loc 1 721 0
 803 00ec 1092 0000 		sts mousekey_param,__zero_reg__
 804 00f0 00C0      		rjmp .L129
 805               	.L124:
 724:./tmk_core/common/command.c ****                 command_state = CONSOLE;
 806               		.loc 1 724 0
 807 00f2 81E0      		ldi r24,lo8(1)
 808 00f4 8093 0000 		sts command_state,r24
 809 00f8 00C0      		rjmp .L149
 810               	.L122:
 743:./tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 1);
 811               		.loc 1 743 0
 812 00fa 61E0      		ldi r22,lo8(1)
 813 00fc 00C0      		rjmp .L152
 814               	.L153:
 746:./tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 10);
 815               		.loc 1 746 0
 816 00fe 8091 0000 		lds r24,mousekey_param
 817 0102 0E94 0000 		call mousekey_param_inc
 818               	.LVL76:
 819 0106 00C0      		rjmp .L129
 820               	.L119:
 749:./tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 10);
 821               		.loc 1 749 0
 822 0108 6AE0      		ldi r22,lo8(10)
 823               	.L152:
 824 010a 8091 0000 		lds r24,mousekey_param
 825 010e 0E94 0000 		call mousekey_param_dec
 826               	.LVL77:
 827 0112 00C0      		rjmp .L129
 828               	.LVL78:
 829               	.L156:
 830               	.LBE29:
 831               	.LBE28:
  96:./tmk_core/common/command.c ****             command_state = ONESHOT;
 832               		.loc 1 96 0
 833 0114 1092 0000 		sts command_state,__zero_reg__
 834               	.L125:
  81:./tmk_core/common/command.c ****                 return false;
 835               		.loc 1 81 0
 836 0118 80E0      		ldi r24,0
 837 011a 00C0      		rjmp .L149
 838               	.LVL79:
 839               	.L129:
  99:./tmk_core/common/command.c ****     return true;
 840               		.loc 1 99 0
 841 011c 81E0      		ldi r24,lo8(1)
 842 011e 00C0      		rjmp .L149
 843               	.LVL80:
 844               	.L109:
  88:./tmk_core/common/command.c ****                 return (command_console_extra(code) || command_console(code));
 845               		.loc 1 88 0
 846 0120 80E0      		ldi r24,0
 847 0122 00C0      		rjmp .L108
 848               	.LVL81:
 849               	.L149:
 850               	/* epilogue start */
 100:./tmk_core/common/command.c **** }
 851               		.loc 1 100 0
 852 0124 CF91      		pop r28
 853               	.LVL82:
 854 0126 0895      		ret
 855               		.cfi_endproc
 856               	.LFE106:
 858               		.section	.rodata.CSWTCH.47,"a",@progbits
 861               	CSWTCH.47:
 862 0000 01        		.byte	1
 863 0001 02        		.byte	2
 864 0002 03        		.byte	3
 865 0003 04        		.byte	4
 866 0004 05        		.byte	5
 867 0005 06        		.byte	6
 868 0006 07        		.byte	7
 869 0007 08        		.byte	8
 870 0008 09        		.byte	9
 871 0009 00        		.byte	0
 872               		.section	.bss.mousekey_param,"aw",@nobits
 875               	mousekey_param:
 876 0000 00        		.zero	1
 877               	.global	command_state
 878               		.section	.bss.command_state,"aw",@nobits
 881               	command_state:
 882 0000 00        		.zero	1
 883               		.text
 884               	.Letext0:
 885               		.file 3 "/usr/lib/avr/include/stdint.h"
 886               		.file 4 "./tmk_core/common/report.h"
 887               		.file 5 "./tmk_core/common/debug.h"
 888               		.file 6 "./quantum/keycode_config.h"
 889               		.file 7 "./tmk_core/common/command.h"
 890               		.file 8 "./lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 891               		.file 9 "./tmk_core/common/action_util.h"
 892               		.file 10 "./tmk_core/common/mousekey.h"
 893               		.file 11 "./tmk_core/common/action.h"
 894               		.file 12 "./tmk_core/common/bootloader.h"
 895               		.file 13 "./tmk_core/common/keycode.h"
 896               		.file 14 "./tmk_core/common/action_layer.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 command.c
     /tmp/ccldLxnc.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccldLxnc.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccldLxnc.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccldLxnc.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccldLxnc.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccldLxnc.s:12     .text.mousekey_param_inc:0000000000000000 mousekey_param_inc
     /tmp/ccldLxnc.s:182    .text.mousekey_param_dec:0000000000000000 mousekey_param_dec
     /tmp/ccldLxnc.s:301    .text.command_common:0000000000000000 command_common
     /tmp/ccldLxnc.s:881    .bss.command_state:0000000000000000 command_state
     /tmp/ccldLxnc.s:569    .text.command_extra:0000000000000000 command_extra
     /tmp/ccldLxnc.s:588    .text.command_console_extra:0000000000000000 command_console_extra
     /tmp/ccldLxnc.s:607    .text.numkey2num:0000000000000000 numkey2num
     /tmp/ccldLxnc.s:861    .rodata.CSWTCH.47:0000000000000000 CSWTCH.47
     /tmp/ccldLxnc.s:638    .text.command_proc:0000000000000000 command_proc
     /tmp/ccldLxnc.s:875    .bss.mousekey_param:0000000000000000 mousekey_param

UNDEFINED SYMBOLS
mk_delay
mk_interval
mk_max_speed
mk_time_to_max
mk_wheel_max_speed
mk_wheel_time_to_max
debug_config
clear_keyboard
bootloader_jump
keymap_config
default_layer_set
keyboard_report
__do_copy_data
__do_clear_bss
