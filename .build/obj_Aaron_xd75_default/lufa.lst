   1               		.file	"lufa.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.keyboard_leds,"ax",@progbits
  12               	keyboard_leds:
  13               	.LFB119:
  14               		.file 1 "./tmk_core/protocol/lufa/lufa.c"
   1:./tmk_core/protocol/lufa/lufa.c **** /*
   2:./tmk_core/protocol/lufa/lufa.c ****  * Copyright 2012 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/protocol/lufa/lufa.c ****  * This file is based on:
   4:./tmk_core/protocol/lufa/lufa.c ****  *     LUFA-120219/Demos/Device/Lowlevel/KeyboardMouse
   5:./tmk_core/protocol/lufa/lufa.c ****  *     LUFA-120219/Demos/Device/Lowlevel/GenericHID
   6:./tmk_core/protocol/lufa/lufa.c ****  */
   7:./tmk_core/protocol/lufa/lufa.c **** 
   8:./tmk_core/protocol/lufa/lufa.c **** /*
   9:./tmk_core/protocol/lufa/lufa.c ****              LUFA Library
  10:./tmk_core/protocol/lufa/lufa.c ****      Copyright (C) Dean Camera, 2012.
  11:./tmk_core/protocol/lufa/lufa.c **** 
  12:./tmk_core/protocol/lufa/lufa.c ****   dean [at] fourwalledcubicle [dot] com
  13:./tmk_core/protocol/lufa/lufa.c ****            www.lufa-lib.org
  14:./tmk_core/protocol/lufa/lufa.c **** */
  15:./tmk_core/protocol/lufa/lufa.c **** 
  16:./tmk_core/protocol/lufa/lufa.c **** /*
  17:./tmk_core/protocol/lufa/lufa.c ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  18:./tmk_core/protocol/lufa/lufa.c ****   Copyright 2010  Denver Gingerich (denver [at] ossguy [dot] com)
  19:./tmk_core/protocol/lufa/lufa.c **** 
  20:./tmk_core/protocol/lufa/lufa.c ****   Permission to use, copy, modify, distribute, and sell this
  21:./tmk_core/protocol/lufa/lufa.c ****   software and its documentation for any purpose is hereby granted
  22:./tmk_core/protocol/lufa/lufa.c ****   without fee, provided that the above copyright notice appear in
  23:./tmk_core/protocol/lufa/lufa.c ****   all copies and that both that the copyright notice and this
  24:./tmk_core/protocol/lufa/lufa.c ****   permission notice and warranty disclaimer appear in supporting
  25:./tmk_core/protocol/lufa/lufa.c ****   documentation, and that the name of the author not be used in
  26:./tmk_core/protocol/lufa/lufa.c ****   advertising or publicity pertaining to distribution of the
  27:./tmk_core/protocol/lufa/lufa.c ****   software without specific, written prior permission.
  28:./tmk_core/protocol/lufa/lufa.c **** 
  29:./tmk_core/protocol/lufa/lufa.c ****   The author disclaim all warranties with regard to this
  30:./tmk_core/protocol/lufa/lufa.c ****   software, including all implied warranties of merchantability
  31:./tmk_core/protocol/lufa/lufa.c ****   and fitness.  In no event shall the author be liable for any
  32:./tmk_core/protocol/lufa/lufa.c ****   special, indirect or consequential damages or any damages
  33:./tmk_core/protocol/lufa/lufa.c ****   whatsoever resulting from loss of use, data or profits, whether
  34:./tmk_core/protocol/lufa/lufa.c ****   in an action of contract, negligence or other tortious action,
  35:./tmk_core/protocol/lufa/lufa.c ****   arising out of or in connection with the use or performance of
  36:./tmk_core/protocol/lufa/lufa.c ****   this software.
  37:./tmk_core/protocol/lufa/lufa.c **** */
  38:./tmk_core/protocol/lufa/lufa.c **** 
  39:./tmk_core/protocol/lufa/lufa.c **** #include "report.h"
  40:./tmk_core/protocol/lufa/lufa.c **** #include "host.h"
  41:./tmk_core/protocol/lufa/lufa.c **** #include "host_driver.h"
  42:./tmk_core/protocol/lufa/lufa.c **** #include "keyboard.h"
  43:./tmk_core/protocol/lufa/lufa.c **** #include "action.h"
  44:./tmk_core/protocol/lufa/lufa.c **** #include "led.h"
  45:./tmk_core/protocol/lufa/lufa.c **** #include "sendchar.h"
  46:./tmk_core/protocol/lufa/lufa.c **** #include "debug.h"
  47:./tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
  48:./tmk_core/protocol/lufa/lufa.c **** #include "sleep_led.h"
  49:./tmk_core/protocol/lufa/lufa.c **** #endif
  50:./tmk_core/protocol/lufa/lufa.c **** #include "suspend.h"
  51:./tmk_core/protocol/lufa/lufa.c **** 
  52:./tmk_core/protocol/lufa/lufa.c **** #include "usb_descriptor.h"
  53:./tmk_core/protocol/lufa/lufa.c **** #include "lufa.h"
  54:./tmk_core/protocol/lufa/lufa.c **** #include "quantum.h"
  55:./tmk_core/protocol/lufa/lufa.c **** #include <util/atomic.h>
  56:./tmk_core/protocol/lufa/lufa.c **** #include "outputselect.h"
  57:./tmk_core/protocol/lufa/lufa.c **** 
  58:./tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
  59:./tmk_core/protocol/lufa/lufa.c ****   #include "keycode_config.h"
  60:./tmk_core/protocol/lufa/lufa.c **** 
  61:./tmk_core/protocol/lufa/lufa.c ****   extern keymap_config_t keymap_config;
  62:./tmk_core/protocol/lufa/lufa.c **** #endif
  63:./tmk_core/protocol/lufa/lufa.c **** 
  64:./tmk_core/protocol/lufa/lufa.c **** 
  65:./tmk_core/protocol/lufa/lufa.c **** #ifdef AUDIO_ENABLE
  66:./tmk_core/protocol/lufa/lufa.c ****     #include <audio.h>
  67:./tmk_core/protocol/lufa/lufa.c **** #endif
  68:./tmk_core/protocol/lufa/lufa.c **** 
  69:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
  70:./tmk_core/protocol/lufa/lufa.c ****   #ifdef MODULE_ADAFRUIT_BLE
  71:./tmk_core/protocol/lufa/lufa.c ****     #include "adafruit_ble.h"
  72:./tmk_core/protocol/lufa/lufa.c ****   #else
  73:./tmk_core/protocol/lufa/lufa.c ****     #include "bluetooth.h"
  74:./tmk_core/protocol/lufa/lufa.c ****   #endif
  75:./tmk_core/protocol/lufa/lufa.c **** #endif
  76:./tmk_core/protocol/lufa/lufa.c **** 
  77:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
  78:./tmk_core/protocol/lufa/lufa.c ****     #include "virtser.h"
  79:./tmk_core/protocol/lufa/lufa.c **** #endif
  80:./tmk_core/protocol/lufa/lufa.c **** 
  81:./tmk_core/protocol/lufa/lufa.c **** #if (defined(RGB_MIDI) | defined(RGBLIGHT_ANIMATIONS)) & defined(RGBLIGHT_ENABLE)
  82:./tmk_core/protocol/lufa/lufa.c ****     #include "rgblight.h"
  83:./tmk_core/protocol/lufa/lufa.c **** #endif
  84:./tmk_core/protocol/lufa/lufa.c **** 
  85:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
  86:./tmk_core/protocol/lufa/lufa.c ****   #include "qmk_midi.h"
  87:./tmk_core/protocol/lufa/lufa.c **** #endif
  88:./tmk_core/protocol/lufa/lufa.c **** 
  89:./tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
  90:./tmk_core/protocol/lufa/lufa.c **** 	#include "raw_hid.h"
  91:./tmk_core/protocol/lufa/lufa.c **** #endif
  92:./tmk_core/protocol/lufa/lufa.c **** 
  93:./tmk_core/protocol/lufa/lufa.c **** uint8_t keyboard_idle = 0;
  94:./tmk_core/protocol/lufa/lufa.c **** /* 0: Boot Protocol, 1: Report Protocol(default) */
  95:./tmk_core/protocol/lufa/lufa.c **** uint8_t keyboard_protocol = 1;
  96:./tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_led_stats = 0;
  97:./tmk_core/protocol/lufa/lufa.c **** 
  98:./tmk_core/protocol/lufa/lufa.c **** static report_keyboard_t keyboard_report_sent;
  99:./tmk_core/protocol/lufa/lufa.c **** 
 100:./tmk_core/protocol/lufa/lufa.c **** /* Host driver */
 101:./tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_leds(void);
 102:./tmk_core/protocol/lufa/lufa.c **** static void send_keyboard(report_keyboard_t *report);
 103:./tmk_core/protocol/lufa/lufa.c **** static void send_mouse(report_mouse_t *report);
 104:./tmk_core/protocol/lufa/lufa.c **** static void send_system(uint16_t data);
 105:./tmk_core/protocol/lufa/lufa.c **** static void send_consumer(uint16_t data);
 106:./tmk_core/protocol/lufa/lufa.c **** host_driver_t lufa_driver = {
 107:./tmk_core/protocol/lufa/lufa.c ****     keyboard_leds,
 108:./tmk_core/protocol/lufa/lufa.c ****     send_keyboard,
 109:./tmk_core/protocol/lufa/lufa.c ****     send_mouse,
 110:./tmk_core/protocol/lufa/lufa.c ****     send_system,
 111:./tmk_core/protocol/lufa/lufa.c ****     send_consumer,
 112:./tmk_core/protocol/lufa/lufa.c **** };
 113:./tmk_core/protocol/lufa/lufa.c **** 
 114:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 115:./tmk_core/protocol/lufa/lufa.c **** USB_ClassInfo_CDC_Device_t cdc_device =
 116:./tmk_core/protocol/lufa/lufa.c **** {
 117:./tmk_core/protocol/lufa/lufa.c ****   .Config =
 118:./tmk_core/protocol/lufa/lufa.c ****   {
 119:./tmk_core/protocol/lufa/lufa.c ****     .ControlInterfaceNumber = CCI_INTERFACE,
 120:./tmk_core/protocol/lufa/lufa.c ****     .DataINEndpoint         =
 121:./tmk_core/protocol/lufa/lufa.c ****     {
 122:./tmk_core/protocol/lufa/lufa.c ****       .Address		= CDC_IN_EPADDR,
 123:./tmk_core/protocol/lufa/lufa.c ****       .Size		= CDC_EPSIZE,
 124:./tmk_core/protocol/lufa/lufa.c ****       .Banks		= 1,
 125:./tmk_core/protocol/lufa/lufa.c ****     },
 126:./tmk_core/protocol/lufa/lufa.c ****     .DataOUTEndpoint	    =
 127:./tmk_core/protocol/lufa/lufa.c ****     {
 128:./tmk_core/protocol/lufa/lufa.c ****       .Address		= CDC_OUT_EPADDR,
 129:./tmk_core/protocol/lufa/lufa.c ****       .Size		= CDC_EPSIZE,
 130:./tmk_core/protocol/lufa/lufa.c ****       .Banks		= 1,
 131:./tmk_core/protocol/lufa/lufa.c ****     },
 132:./tmk_core/protocol/lufa/lufa.c ****     .NotificationEndpoint   =
 133:./tmk_core/protocol/lufa/lufa.c ****     {
 134:./tmk_core/protocol/lufa/lufa.c ****       .Address		= CDC_NOTIFICATION_EPADDR,
 135:./tmk_core/protocol/lufa/lufa.c ****       .Size		= CDC_NOTIFICATION_EPSIZE,
 136:./tmk_core/protocol/lufa/lufa.c ****       .Banks		= 1,
 137:./tmk_core/protocol/lufa/lufa.c ****     },
 138:./tmk_core/protocol/lufa/lufa.c ****   },
 139:./tmk_core/protocol/lufa/lufa.c **** };
 140:./tmk_core/protocol/lufa/lufa.c **** #endif
 141:./tmk_core/protocol/lufa/lufa.c **** 
 142:./tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
 143:./tmk_core/protocol/lufa/lufa.c **** 
 144:./tmk_core/protocol/lufa/lufa.c **** /** \brief Raw HID Send
 145:./tmk_core/protocol/lufa/lufa.c ****  *
 146:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 147:./tmk_core/protocol/lufa/lufa.c ****  */
 148:./tmk_core/protocol/lufa/lufa.c **** void raw_hid_send( uint8_t *data, uint8_t length )
 149:./tmk_core/protocol/lufa/lufa.c **** {
 150:./tmk_core/protocol/lufa/lufa.c **** 	// TODO: implement variable size packet
 151:./tmk_core/protocol/lufa/lufa.c **** 	if ( length != RAW_EPSIZE )
 152:./tmk_core/protocol/lufa/lufa.c **** 	{
 153:./tmk_core/protocol/lufa/lufa.c **** 		return;
 154:./tmk_core/protocol/lufa/lufa.c **** 	}
 155:./tmk_core/protocol/lufa/lufa.c **** 
 156:./tmk_core/protocol/lufa/lufa.c **** 	if (USB_DeviceState != DEVICE_STATE_Configured)
 157:./tmk_core/protocol/lufa/lufa.c **** 	{
 158:./tmk_core/protocol/lufa/lufa.c **** 		return;
 159:./tmk_core/protocol/lufa/lufa.c **** 	}
 160:./tmk_core/protocol/lufa/lufa.c **** 
 161:./tmk_core/protocol/lufa/lufa.c **** 	// TODO: decide if we allow calls to raw_hid_send() in the middle
 162:./tmk_core/protocol/lufa/lufa.c **** 	// of other endpoint usage.
 163:./tmk_core/protocol/lufa/lufa.c **** 	uint8_t ep = Endpoint_GetCurrentEndpoint();
 164:./tmk_core/protocol/lufa/lufa.c **** 
 165:./tmk_core/protocol/lufa/lufa.c **** 	Endpoint_SelectEndpoint(RAW_IN_EPNUM);
 166:./tmk_core/protocol/lufa/lufa.c **** 
 167:./tmk_core/protocol/lufa/lufa.c **** 	// Check to see if the host is ready to accept another packet
 168:./tmk_core/protocol/lufa/lufa.c **** 	if (Endpoint_IsINReady())
 169:./tmk_core/protocol/lufa/lufa.c **** 	{
 170:./tmk_core/protocol/lufa/lufa.c **** 		// Write data
 171:./tmk_core/protocol/lufa/lufa.c **** 		Endpoint_Write_Stream_LE(data, RAW_EPSIZE, NULL);
 172:./tmk_core/protocol/lufa/lufa.c **** 		// Finalize the stream transfer to send the last packet
 173:./tmk_core/protocol/lufa/lufa.c **** 		Endpoint_ClearIN();
 174:./tmk_core/protocol/lufa/lufa.c **** 	}
 175:./tmk_core/protocol/lufa/lufa.c **** 
 176:./tmk_core/protocol/lufa/lufa.c **** 	Endpoint_SelectEndpoint(ep);
 177:./tmk_core/protocol/lufa/lufa.c **** }
 178:./tmk_core/protocol/lufa/lufa.c **** 
 179:./tmk_core/protocol/lufa/lufa.c **** /** \brief Raw HID Receive
 180:./tmk_core/protocol/lufa/lufa.c ****  *
 181:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 182:./tmk_core/protocol/lufa/lufa.c ****  */
 183:./tmk_core/protocol/lufa/lufa.c **** __attribute__ ((weak))
 184:./tmk_core/protocol/lufa/lufa.c **** void raw_hid_receive( uint8_t *data, uint8_t length )
 185:./tmk_core/protocol/lufa/lufa.c **** {
 186:./tmk_core/protocol/lufa/lufa.c **** 	// Users should #include "raw_hid.h" in their own code
 187:./tmk_core/protocol/lufa/lufa.c **** 	// and implement this function there. Leave this as weak linkage
 188:./tmk_core/protocol/lufa/lufa.c **** 	// so users can opt to not handle data coming in.
 189:./tmk_core/protocol/lufa/lufa.c **** }
 190:./tmk_core/protocol/lufa/lufa.c **** 
 191:./tmk_core/protocol/lufa/lufa.c **** /** \brief Raw HID Task
 192:./tmk_core/protocol/lufa/lufa.c ****  *
 193:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 194:./tmk_core/protocol/lufa/lufa.c ****  */
 195:./tmk_core/protocol/lufa/lufa.c **** static void raw_hid_task(void)
 196:./tmk_core/protocol/lufa/lufa.c **** {
 197:./tmk_core/protocol/lufa/lufa.c **** 	// Create a temporary buffer to hold the read in data from the host
 198:./tmk_core/protocol/lufa/lufa.c **** 	uint8_t data[RAW_EPSIZE];
 199:./tmk_core/protocol/lufa/lufa.c **** 	bool data_read = false;
 200:./tmk_core/protocol/lufa/lufa.c **** 
 201:./tmk_core/protocol/lufa/lufa.c **** 	// Device must be connected and configured for the task to run
 202:./tmk_core/protocol/lufa/lufa.c **** 	if (USB_DeviceState != DEVICE_STATE_Configured)
 203:./tmk_core/protocol/lufa/lufa.c **** 	return;
 204:./tmk_core/protocol/lufa/lufa.c **** 
 205:./tmk_core/protocol/lufa/lufa.c **** 	Endpoint_SelectEndpoint(RAW_OUT_EPNUM);
 206:./tmk_core/protocol/lufa/lufa.c **** 
 207:./tmk_core/protocol/lufa/lufa.c **** 	// Check to see if a packet has been sent from the host
 208:./tmk_core/protocol/lufa/lufa.c **** 	if (Endpoint_IsOUTReceived())
 209:./tmk_core/protocol/lufa/lufa.c **** 	{
 210:./tmk_core/protocol/lufa/lufa.c **** 		// Check to see if the packet contains data
 211:./tmk_core/protocol/lufa/lufa.c **** 		if (Endpoint_IsReadWriteAllowed())
 212:./tmk_core/protocol/lufa/lufa.c **** 		{
 213:./tmk_core/protocol/lufa/lufa.c **** 			/* Read data */
 214:./tmk_core/protocol/lufa/lufa.c **** 			Endpoint_Read_Stream_LE(data, sizeof(data), NULL);
 215:./tmk_core/protocol/lufa/lufa.c **** 			data_read = true;
 216:./tmk_core/protocol/lufa/lufa.c **** 		}
 217:./tmk_core/protocol/lufa/lufa.c **** 
 218:./tmk_core/protocol/lufa/lufa.c **** 		// Finalize the stream transfer to receive the last packet
 219:./tmk_core/protocol/lufa/lufa.c **** 		Endpoint_ClearOUT();
 220:./tmk_core/protocol/lufa/lufa.c **** 
 221:./tmk_core/protocol/lufa/lufa.c **** 		if ( data_read )
 222:./tmk_core/protocol/lufa/lufa.c **** 		{
 223:./tmk_core/protocol/lufa/lufa.c **** 			raw_hid_receive( data, sizeof(data) );
 224:./tmk_core/protocol/lufa/lufa.c **** 		}
 225:./tmk_core/protocol/lufa/lufa.c **** 	}
 226:./tmk_core/protocol/lufa/lufa.c **** }
 227:./tmk_core/protocol/lufa/lufa.c **** #endif
 228:./tmk_core/protocol/lufa/lufa.c **** 
 229:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 230:./tmk_core/protocol/lufa/lufa.c ****  * Console
 231:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 232:./tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 233:./tmk_core/protocol/lufa/lufa.c **** /** \brief Console Task
 234:./tmk_core/protocol/lufa/lufa.c ****  *
 235:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 236:./tmk_core/protocol/lufa/lufa.c ****  */
 237:./tmk_core/protocol/lufa/lufa.c **** static void Console_Task(void)
 238:./tmk_core/protocol/lufa/lufa.c **** {
 239:./tmk_core/protocol/lufa/lufa.c ****     /* Device must be connected and configured for the task to run */
 240:./tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 241:./tmk_core/protocol/lufa/lufa.c ****         return;
 242:./tmk_core/protocol/lufa/lufa.c **** 
 243:./tmk_core/protocol/lufa/lufa.c ****     uint8_t ep = Endpoint_GetCurrentEndpoint();
 244:./tmk_core/protocol/lufa/lufa.c **** 
 245:./tmk_core/protocol/lufa/lufa.c **** #if 0
 246:./tmk_core/protocol/lufa/lufa.c ****     // TODO: impl receivechar()/recvchar()
 247:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_OUT_EPNUM);
 248:./tmk_core/protocol/lufa/lufa.c **** 
 249:./tmk_core/protocol/lufa/lufa.c ****     /* Check to see if a packet has been sent from the host */
 250:./tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsOUTReceived())
 251:./tmk_core/protocol/lufa/lufa.c ****     {
 252:./tmk_core/protocol/lufa/lufa.c ****         /* Check to see if the packet contains data */
 253:./tmk_core/protocol/lufa/lufa.c ****         if (Endpoint_IsReadWriteAllowed())
 254:./tmk_core/protocol/lufa/lufa.c ****         {
 255:./tmk_core/protocol/lufa/lufa.c ****             /* Create a temporary buffer to hold the read in report from the host */
 256:./tmk_core/protocol/lufa/lufa.c ****             uint8_t ConsoleData[CONSOLE_EPSIZE];
 257:./tmk_core/protocol/lufa/lufa.c **** 
 258:./tmk_core/protocol/lufa/lufa.c ****             /* Read Console Report Data */
 259:./tmk_core/protocol/lufa/lufa.c ****             Endpoint_Read_Stream_LE(&ConsoleData, sizeof(ConsoleData), NULL);
 260:./tmk_core/protocol/lufa/lufa.c **** 
 261:./tmk_core/protocol/lufa/lufa.c ****             /* Process Console Report Data */
 262:./tmk_core/protocol/lufa/lufa.c ****             //ProcessConsoleHIDReport(ConsoleData);
 263:./tmk_core/protocol/lufa/lufa.c ****         }
 264:./tmk_core/protocol/lufa/lufa.c **** 
 265:./tmk_core/protocol/lufa/lufa.c ****         /* Finalize the stream transfer to send the last packet */
 266:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearOUT();
 267:./tmk_core/protocol/lufa/lufa.c ****     }
 268:./tmk_core/protocol/lufa/lufa.c **** #endif
 269:./tmk_core/protocol/lufa/lufa.c **** 
 270:./tmk_core/protocol/lufa/lufa.c ****     /* IN packet */
 271:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
 272:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 273:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
 274:./tmk_core/protocol/lufa/lufa.c ****         return;
 275:./tmk_core/protocol/lufa/lufa.c ****     }
 276:./tmk_core/protocol/lufa/lufa.c **** 
 277:./tmk_core/protocol/lufa/lufa.c ****     // fill empty bank
 278:./tmk_core/protocol/lufa/lufa.c ****     while (Endpoint_IsReadWriteAllowed())
 279:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_8(0);
 280:./tmk_core/protocol/lufa/lufa.c **** 
 281:./tmk_core/protocol/lufa/lufa.c ****     // flash senchar packet
 282:./tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsINReady()) {
 283:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 284:./tmk_core/protocol/lufa/lufa.c ****     }
 285:./tmk_core/protocol/lufa/lufa.c **** 
 286:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 287:./tmk_core/protocol/lufa/lufa.c **** }
 288:./tmk_core/protocol/lufa/lufa.c **** #endif
 289:./tmk_core/protocol/lufa/lufa.c **** 
 290:./tmk_core/protocol/lufa/lufa.c **** 
 291:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 292:./tmk_core/protocol/lufa/lufa.c ****  * USB Events
 293:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 294:./tmk_core/protocol/lufa/lufa.c **** /*
 295:./tmk_core/protocol/lufa/lufa.c ****  * Event Order of Plug in:
 296:./tmk_core/protocol/lufa/lufa.c ****  * 0) EVENT_USB_Device_Connect
 297:./tmk_core/protocol/lufa/lufa.c ****  * 1) EVENT_USB_Device_Suspend
 298:./tmk_core/protocol/lufa/lufa.c ****  * 2) EVENT_USB_Device_Reset
 299:./tmk_core/protocol/lufa/lufa.c ****  * 3) EVENT_USB_Device_Wake
 300:./tmk_core/protocol/lufa/lufa.c **** */
 301:./tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 302:./tmk_core/protocol/lufa/lufa.c ****  *
 303:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 304:./tmk_core/protocol/lufa/lufa.c ****  */
 305:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Connect(void)
 306:./tmk_core/protocol/lufa/lufa.c **** {
 307:./tmk_core/protocol/lufa/lufa.c ****     print("[C]");
 308:./tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 309:./tmk_core/protocol/lufa/lufa.c ****     if (!USB_IsInitialized) {
 310:./tmk_core/protocol/lufa/lufa.c ****         USB_Disable();
 311:./tmk_core/protocol/lufa/lufa.c ****         USB_Init();
 312:./tmk_core/protocol/lufa/lufa.c ****         USB_Device_EnableSOFEvents();
 313:./tmk_core/protocol/lufa/lufa.c ****     }
 314:./tmk_core/protocol/lufa/lufa.c **** }
 315:./tmk_core/protocol/lufa/lufa.c **** 
 316:./tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 317:./tmk_core/protocol/lufa/lufa.c ****  *
 318:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 319:./tmk_core/protocol/lufa/lufa.c ****  */
 320:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Disconnect(void)
 321:./tmk_core/protocol/lufa/lufa.c **** {
 322:./tmk_core/protocol/lufa/lufa.c ****     print("[D]");
 323:./tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 324:./tmk_core/protocol/lufa/lufa.c ****     USB_IsInitialized = false;
 325:./tmk_core/protocol/lufa/lufa.c **** /* TODO: This doesn't work. After several plug in/outs can not be enumerated.
 326:./tmk_core/protocol/lufa/lufa.c ****     if (USB_IsInitialized) {
 327:./tmk_core/protocol/lufa/lufa.c ****         USB_Disable();  // Disable all interrupts
 328:./tmk_core/protocol/lufa/lufa.c **** 	USB_Controller_Enable();
 329:./tmk_core/protocol/lufa/lufa.c ****         USB_INT_Enable(USB_INT_VBUSTI);
 330:./tmk_core/protocol/lufa/lufa.c ****     }
 331:./tmk_core/protocol/lufa/lufa.c **** */
 332:./tmk_core/protocol/lufa/lufa.c **** }
 333:./tmk_core/protocol/lufa/lufa.c **** 
 334:./tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 335:./tmk_core/protocol/lufa/lufa.c ****  *
 336:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 337:./tmk_core/protocol/lufa/lufa.c ****  */
 338:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Reset(void)
 339:./tmk_core/protocol/lufa/lufa.c **** {
 340:./tmk_core/protocol/lufa/lufa.c ****     print("[R]");
 341:./tmk_core/protocol/lufa/lufa.c **** }
 342:./tmk_core/protocol/lufa/lufa.c **** 
 343:./tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 344:./tmk_core/protocol/lufa/lufa.c ****  *
 345:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 346:./tmk_core/protocol/lufa/lufa.c ****  */
 347:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Suspend()
 348:./tmk_core/protocol/lufa/lufa.c **** {
 349:./tmk_core/protocol/lufa/lufa.c ****     print("[S]");
 350:./tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 351:./tmk_core/protocol/lufa/lufa.c ****     sleep_led_enable();
 352:./tmk_core/protocol/lufa/lufa.c **** #endif
 353:./tmk_core/protocol/lufa/lufa.c **** }
 354:./tmk_core/protocol/lufa/lufa.c **** 
 355:./tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 356:./tmk_core/protocol/lufa/lufa.c ****  *
 357:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 358:./tmk_core/protocol/lufa/lufa.c ****  */
 359:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_WakeUp()
 360:./tmk_core/protocol/lufa/lufa.c **** {
 361:./tmk_core/protocol/lufa/lufa.c ****     print("[W]");
 362:./tmk_core/protocol/lufa/lufa.c ****     suspend_wakeup_init();
 363:./tmk_core/protocol/lufa/lufa.c **** 
 364:./tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 365:./tmk_core/protocol/lufa/lufa.c ****     sleep_led_disable();
 366:./tmk_core/protocol/lufa/lufa.c ****     // NOTE: converters may not accept this
 367:./tmk_core/protocol/lufa/lufa.c ****     led_set(host_keyboard_leds());
 368:./tmk_core/protocol/lufa/lufa.c **** #endif
 369:./tmk_core/protocol/lufa/lufa.c **** }
 370:./tmk_core/protocol/lufa/lufa.c **** 
 371:./tmk_core/protocol/lufa/lufa.c **** 
 372:./tmk_core/protocol/lufa/lufa.c **** 
 373:./tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 374:./tmk_core/protocol/lufa/lufa.c **** static bool console_flush = false;
 375:./tmk_core/protocol/lufa/lufa.c **** #define CONSOLE_FLUSH_SET(b)   do { \
 376:./tmk_core/protocol/lufa/lufa.c ****   ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {\
 377:./tmk_core/protocol/lufa/lufa.c ****     console_flush = b; \
 378:./tmk_core/protocol/lufa/lufa.c ****   } \
 379:./tmk_core/protocol/lufa/lufa.c **** } while (0)
 380:./tmk_core/protocol/lufa/lufa.c **** 
 381:./tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Start Of Frame
 382:./tmk_core/protocol/lufa/lufa.c ****  *
 383:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 384:./tmk_core/protocol/lufa/lufa.c ****  * called every 1ms
 385:./tmk_core/protocol/lufa/lufa.c ****  */
 386:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_StartOfFrame(void)
 387:./tmk_core/protocol/lufa/lufa.c **** {
 388:./tmk_core/protocol/lufa/lufa.c ****     static uint8_t count;
 389:./tmk_core/protocol/lufa/lufa.c ****     if (++count % 50) return;
 390:./tmk_core/protocol/lufa/lufa.c ****     count = 0;
 391:./tmk_core/protocol/lufa/lufa.c **** 
 392:./tmk_core/protocol/lufa/lufa.c ****     if (!console_flush) return;
 393:./tmk_core/protocol/lufa/lufa.c ****     Console_Task();
 394:./tmk_core/protocol/lufa/lufa.c ****     console_flush = false;
 395:./tmk_core/protocol/lufa/lufa.c **** }
 396:./tmk_core/protocol/lufa/lufa.c **** 
 397:./tmk_core/protocol/lufa/lufa.c **** #endif
 398:./tmk_core/protocol/lufa/lufa.c **** 
 399:./tmk_core/protocol/lufa/lufa.c **** /** \brief Event handler for the USB_ConfigurationChanged event.
 400:./tmk_core/protocol/lufa/lufa.c ****  *
 401:./tmk_core/protocol/lufa/lufa.c ****  * This is fired when the host sets the current configuration of the USB device after enumeration.
 402:./tmk_core/protocol/lufa/lufa.c ****  *
 403:./tmk_core/protocol/lufa/lufa.c ****  * ATMega32u2 supports dual bank(ping-pong mode) only on endpoint 3 and 4,
 404:./tmk_core/protocol/lufa/lufa.c ****  * it is safe to use single bank for all endpoints.
 405:./tmk_core/protocol/lufa/lufa.c ****  */
 406:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_ConfigurationChanged(void)
 407:./tmk_core/protocol/lufa/lufa.c **** {
 408:./tmk_core/protocol/lufa/lufa.c ****     bool ConfigSuccess = true;
 409:./tmk_core/protocol/lufa/lufa.c **** 
 410:./tmk_core/protocol/lufa/lufa.c ****     /* Setup Keyboard HID Report Endpoints */
 411:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(KEYBOARD_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 412:./tmk_core/protocol/lufa/lufa.c ****                                      KEYBOARD_EPSIZE, ENDPOINT_BANK_SINGLE);
 413:./tmk_core/protocol/lufa/lufa.c **** 
 414:./tmk_core/protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 415:./tmk_core/protocol/lufa/lufa.c ****     /* Setup Mouse HID Report Endpoint */
 416:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(MOUSE_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 417:./tmk_core/protocol/lufa/lufa.c ****                                      MOUSE_EPSIZE, ENDPOINT_BANK_SINGLE);
 418:./tmk_core/protocol/lufa/lufa.c **** #endif
 419:./tmk_core/protocol/lufa/lufa.c **** 
 420:./tmk_core/protocol/lufa/lufa.c **** #ifdef EXTRAKEY_ENABLE
 421:./tmk_core/protocol/lufa/lufa.c ****     /* Setup Extra HID Report Endpoint */
 422:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(EXTRAKEY_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 423:./tmk_core/protocol/lufa/lufa.c ****                                      EXTRAKEY_EPSIZE, ENDPOINT_BANK_SINGLE);
 424:./tmk_core/protocol/lufa/lufa.c **** #endif
 425:./tmk_core/protocol/lufa/lufa.c **** 
 426:./tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
 427:./tmk_core/protocol/lufa/lufa.c ****     /* Setup Raw HID Report Endpoints */
 428:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(RAW_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 429:./tmk_core/protocol/lufa/lufa.c **** 									 RAW_EPSIZE, ENDPOINT_BANK_SINGLE);
 430:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(RAW_OUT_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_OUT,
 431:./tmk_core/protocol/lufa/lufa.c **** 									 RAW_EPSIZE, ENDPOINT_BANK_SINGLE);
 432:./tmk_core/protocol/lufa/lufa.c **** #endif
 433:./tmk_core/protocol/lufa/lufa.c **** 
 434:./tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 435:./tmk_core/protocol/lufa/lufa.c ****     /* Setup Console HID Report Endpoints */
 436:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(CONSOLE_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 437:./tmk_core/protocol/lufa/lufa.c ****                                      CONSOLE_EPSIZE, ENDPOINT_BANK_SINGLE);
 438:./tmk_core/protocol/lufa/lufa.c **** #if 0
 439:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(CONSOLE_OUT_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_OUT,
 440:./tmk_core/protocol/lufa/lufa.c ****                                      CONSOLE_EPSIZE, ENDPOINT_BANK_SINGLE);
 441:./tmk_core/protocol/lufa/lufa.c **** #endif
 442:./tmk_core/protocol/lufa/lufa.c **** #endif
 443:./tmk_core/protocol/lufa/lufa.c **** 
 444:./tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 445:./tmk_core/protocol/lufa/lufa.c ****     /* Setup NKRO HID Report Endpoints */
 446:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(NKRO_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 447:./tmk_core/protocol/lufa/lufa.c ****                                      NKRO_EPSIZE, ENDPOINT_BANK_SINGLE);
 448:./tmk_core/protocol/lufa/lufa.c **** #endif
 449:./tmk_core/protocol/lufa/lufa.c **** 
 450:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 451:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_IN_EPADDR, EP_TYPE_BULK, MIDI_STREAM_EP
 452:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_OUT_EPADDR, EP_TYPE_BULK, MIDI_STREAM_E
 453:./tmk_core/protocol/lufa/lufa.c **** #endif
 454:./tmk_core/protocol/lufa/lufa.c **** 
 455:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 456:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_NOTIFICATION_EPADDR, EP_TYPE_INTERRUPT, CDC_NOT
 457:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_OUT_EPADDR, EP_TYPE_BULK, CDC_EPSIZE, ENDPOINT_
 458:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_IN_EPADDR, EP_TYPE_BULK, CDC_EPSIZE, ENDPOINT_B
 459:./tmk_core/protocol/lufa/lufa.c **** #endif
 460:./tmk_core/protocol/lufa/lufa.c **** }
 461:./tmk_core/protocol/lufa/lufa.c **** 
 462:./tmk_core/protocol/lufa/lufa.c **** /* FIXME: Expose this table in the docs somehow
 463:./tmk_core/protocol/lufa/lufa.c **** Appendix G: HID Request Support Requirements
 464:./tmk_core/protocol/lufa/lufa.c **** 
 465:./tmk_core/protocol/lufa/lufa.c **** The following table enumerates the requests that need to be supported by various types of HID class
 466:./tmk_core/protocol/lufa/lufa.c **** 
 467:./tmk_core/protocol/lufa/lufa.c **** Device type     GetReport   SetReport   GetIdle     SetIdle     GetProtocol SetProtocol
 468:./tmk_core/protocol/lufa/lufa.c **** ------------------------------------------------------------------------------------------
 469:./tmk_core/protocol/lufa/lufa.c **** Boot Mouse      Required    Optional    Optional    Optional    Required    Required
 470:./tmk_core/protocol/lufa/lufa.c **** Non-Boot Mouse  Required    Optional    Optional    Optional    Optional    Optional
 471:./tmk_core/protocol/lufa/lufa.c **** Boot Keyboard   Required    Optional    Required    Required    Required    Required
 472:./tmk_core/protocol/lufa/lufa.c **** Non-Boot Keybrd Required    Optional    Required    Required    Optional    Optional
 473:./tmk_core/protocol/lufa/lufa.c **** Other Device    Required    Optional    Optional    Optional    Optional    Optional
 474:./tmk_core/protocol/lufa/lufa.c **** */
 475:./tmk_core/protocol/lufa/lufa.c **** /** \brief Event handler for the USB_ControlRequest event.
 476:./tmk_core/protocol/lufa/lufa.c ****  *
 477:./tmk_core/protocol/lufa/lufa.c ****  *  This is fired before passing along unhandled control requests to the library for processing int
 478:./tmk_core/protocol/lufa/lufa.c ****  */
 479:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_ControlRequest(void)
 480:./tmk_core/protocol/lufa/lufa.c **** {
 481:./tmk_core/protocol/lufa/lufa.c ****     uint8_t* ReportData = NULL;
 482:./tmk_core/protocol/lufa/lufa.c ****     uint8_t  ReportSize = 0;
 483:./tmk_core/protocol/lufa/lufa.c **** 
 484:./tmk_core/protocol/lufa/lufa.c ****     /* Handle HID Class specific requests */
 485:./tmk_core/protocol/lufa/lufa.c ****     switch (USB_ControlRequest.bRequest)
 486:./tmk_core/protocol/lufa/lufa.c ****     {
 487:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetReport:
 488:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 489:./tmk_core/protocol/lufa/lufa.c ****             {
 490:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 491:./tmk_core/protocol/lufa/lufa.c **** 
 492:./tmk_core/protocol/lufa/lufa.c ****                 // Interface
 493:./tmk_core/protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 494:./tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 495:./tmk_core/protocol/lufa/lufa.c ****                     // TODO: test/check
 496:./tmk_core/protocol/lufa/lufa.c ****                     ReportData = (uint8_t*)&keyboard_report_sent;
 497:./tmk_core/protocol/lufa/lufa.c ****                     ReportSize = sizeof(keyboard_report_sent);
 498:./tmk_core/protocol/lufa/lufa.c ****                     break;
 499:./tmk_core/protocol/lufa/lufa.c ****                 }
 500:./tmk_core/protocol/lufa/lufa.c **** 
 501:./tmk_core/protocol/lufa/lufa.c ****                 /* Write the report data to the control endpoint */
 502:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
 503:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearOUT();
 504:./tmk_core/protocol/lufa/lufa.c ****             }
 505:./tmk_core/protocol/lufa/lufa.c **** 
 506:./tmk_core/protocol/lufa/lufa.c ****             break;
 507:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetReport:
 508:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 509:./tmk_core/protocol/lufa/lufa.c ****             {
 510:./tmk_core/protocol/lufa/lufa.c **** 
 511:./tmk_core/protocol/lufa/lufa.c ****                 // Interface
 512:./tmk_core/protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 513:./tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 514:./tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 515:./tmk_core/protocol/lufa/lufa.c ****                 case NKRO_INTERFACE:
 516:./tmk_core/protocol/lufa/lufa.c **** #endif
 517:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 518:./tmk_core/protocol/lufa/lufa.c **** 
 519:./tmk_core/protocol/lufa/lufa.c ****                     while (!(Endpoint_IsOUTReceived())) {
 520:./tmk_core/protocol/lufa/lufa.c ****                         if (USB_DeviceState == DEVICE_STATE_Unattached)
 521:./tmk_core/protocol/lufa/lufa.c ****                           return;
 522:./tmk_core/protocol/lufa/lufa.c ****                     }
 523:./tmk_core/protocol/lufa/lufa.c ****                     keyboard_led_stats = Endpoint_Read_8();
 524:./tmk_core/protocol/lufa/lufa.c **** 
 525:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearOUT();
 526:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 527:./tmk_core/protocol/lufa/lufa.c ****                     break;
 528:./tmk_core/protocol/lufa/lufa.c ****                 }
 529:./tmk_core/protocol/lufa/lufa.c **** 
 530:./tmk_core/protocol/lufa/lufa.c ****             }
 531:./tmk_core/protocol/lufa/lufa.c **** 
 532:./tmk_core/protocol/lufa/lufa.c ****             break;
 533:./tmk_core/protocol/lufa/lufa.c **** 
 534:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetProtocol:
 535:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 536:./tmk_core/protocol/lufa/lufa.c ****             {
 537:./tmk_core/protocol/lufa/lufa.c ****                 if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
 538:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 539:./tmk_core/protocol/lufa/lufa.c ****                     while (!(Endpoint_IsINReady()));
 540:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_Write_8(keyboard_protocol);
 541:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearIN();
 542:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 543:./tmk_core/protocol/lufa/lufa.c ****                 }
 544:./tmk_core/protocol/lufa/lufa.c ****             }
 545:./tmk_core/protocol/lufa/lufa.c **** 
 546:./tmk_core/protocol/lufa/lufa.c ****             break;
 547:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetProtocol:
 548:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 549:./tmk_core/protocol/lufa/lufa.c ****             {
 550:./tmk_core/protocol/lufa/lufa.c ****                 if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
 551:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 552:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 553:./tmk_core/protocol/lufa/lufa.c **** 
 554:./tmk_core/protocol/lufa/lufa.c ****                     keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
 555:./tmk_core/protocol/lufa/lufa.c ****                     clear_keyboard();
 556:./tmk_core/protocol/lufa/lufa.c ****                 }
 557:./tmk_core/protocol/lufa/lufa.c ****             }
 558:./tmk_core/protocol/lufa/lufa.c **** 
 559:./tmk_core/protocol/lufa/lufa.c ****             break;
 560:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetIdle:
 561:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 562:./tmk_core/protocol/lufa/lufa.c ****             {
 563:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 564:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 565:./tmk_core/protocol/lufa/lufa.c **** 
 566:./tmk_core/protocol/lufa/lufa.c ****                 keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
 567:./tmk_core/protocol/lufa/lufa.c ****             }
 568:./tmk_core/protocol/lufa/lufa.c **** 
 569:./tmk_core/protocol/lufa/lufa.c ****             break;
 570:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetIdle:
 571:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 572:./tmk_core/protocol/lufa/lufa.c ****             {
 573:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 574:./tmk_core/protocol/lufa/lufa.c ****                 while (!(Endpoint_IsINReady()));
 575:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_8(keyboard_idle);
 576:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearIN();
 577:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 578:./tmk_core/protocol/lufa/lufa.c ****             }
 579:./tmk_core/protocol/lufa/lufa.c **** 
 580:./tmk_core/protocol/lufa/lufa.c ****             break;
 581:./tmk_core/protocol/lufa/lufa.c ****     }
 582:./tmk_core/protocol/lufa/lufa.c **** 
 583:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 584:./tmk_core/protocol/lufa/lufa.c ****     CDC_Device_ProcessControlRequest(&cdc_device);
 585:./tmk_core/protocol/lufa/lufa.c **** #endif
 586:./tmk_core/protocol/lufa/lufa.c **** }
 587:./tmk_core/protocol/lufa/lufa.c **** 
 588:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 589:./tmk_core/protocol/lufa/lufa.c ****  * Host driver
 590:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 591:./tmk_core/protocol/lufa/lufa.c **** /** \brief Keyboard LEDs
 592:./tmk_core/protocol/lufa/lufa.c ****  *
 593:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 594:./tmk_core/protocol/lufa/lufa.c ****  */
 595:./tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_leds(void)
 596:./tmk_core/protocol/lufa/lufa.c **** {
  15               		.loc 1 596 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
 597:./tmk_core/protocol/lufa/lufa.c ****     return keyboard_led_stats;
 598:./tmk_core/protocol/lufa/lufa.c **** }
  21               		.loc 1 598 0
  22 0000 8091 0000 		lds r24,keyboard_led_stats
  23 0004 0895      		ret
  24               		.cfi_endproc
  25               	.LFE119:
  27               		.section	.text.send_consumer,"ax",@progbits
  29               	send_consumer:
  30               	.LFB123:
 599:./tmk_core/protocol/lufa/lufa.c **** 
 600:./tmk_core/protocol/lufa/lufa.c **** /** \brief Send Keyboard
 601:./tmk_core/protocol/lufa/lufa.c ****  *
 602:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 603:./tmk_core/protocol/lufa/lufa.c ****  */
 604:./tmk_core/protocol/lufa/lufa.c **** static void send_keyboard(report_keyboard_t *report)
 605:./tmk_core/protocol/lufa/lufa.c **** {
 606:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 607:./tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
 608:./tmk_core/protocol/lufa/lufa.c **** 
 609:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 610:./tmk_core/protocol/lufa/lufa.c ****   if (where == OUTPUT_BLUETOOTH || where == OUTPUT_USB_AND_BT) {
 611:./tmk_core/protocol/lufa/lufa.c ****     #ifdef MODULE_ADAFRUIT_BLE
 612:./tmk_core/protocol/lufa/lufa.c ****       adafruit_ble_send_keys(report->mods, report->keys, sizeof(report->keys));
 613:./tmk_core/protocol/lufa/lufa.c ****     #elif MODULE_RN42
 614:./tmk_core/protocol/lufa/lufa.c ****        bluefruit_serial_send(0xFD);
 615:./tmk_core/protocol/lufa/lufa.c ****        bluefruit_serial_send(0x09);
 616:./tmk_core/protocol/lufa/lufa.c ****        bluefruit_serial_send(0x01);
 617:./tmk_core/protocol/lufa/lufa.c ****        for (uint8_t i = 0; i < KEYBOARD_EPSIZE; i++) {
 618:./tmk_core/protocol/lufa/lufa.c ****          bluefruit_serial_send(report->raw[i]);
 619:./tmk_core/protocol/lufa/lufa.c ****        }
 620:./tmk_core/protocol/lufa/lufa.c ****     #else
 621:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0xFD);
 622:./tmk_core/protocol/lufa/lufa.c ****       for (uint8_t i = 0; i < KEYBOARD_EPSIZE; i++) {
 623:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(report->raw[i]);
 624:./tmk_core/protocol/lufa/lufa.c ****       }
 625:./tmk_core/protocol/lufa/lufa.c ****     #endif
 626:./tmk_core/protocol/lufa/lufa.c ****   }
 627:./tmk_core/protocol/lufa/lufa.c **** #endif
 628:./tmk_core/protocol/lufa/lufa.c **** 
 629:./tmk_core/protocol/lufa/lufa.c ****     if (where != OUTPUT_USB && where != OUTPUT_USB_AND_BT) {
 630:./tmk_core/protocol/lufa/lufa.c ****       return;
 631:./tmk_core/protocol/lufa/lufa.c ****     }
 632:./tmk_core/protocol/lufa/lufa.c **** 
 633:./tmk_core/protocol/lufa/lufa.c ****     /* Select the Keyboard Report Endpoint */
 634:./tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 635:./tmk_core/protocol/lufa/lufa.c ****     if (keyboard_protocol && keymap_config.nkro) {
 636:./tmk_core/protocol/lufa/lufa.c ****         /* Report protocol - NKRO */
 637:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(NKRO_IN_EPNUM);
 638:./tmk_core/protocol/lufa/lufa.c **** 
 639:./tmk_core/protocol/lufa/lufa.c ****         /* Check if write ready for a polling interval around 1ms */
 640:./tmk_core/protocol/lufa/lufa.c ****         while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(4);
 641:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 642:./tmk_core/protocol/lufa/lufa.c **** 
 643:./tmk_core/protocol/lufa/lufa.c ****         /* Write Keyboard Report Data */
 644:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
 645:./tmk_core/protocol/lufa/lufa.c ****     }
 646:./tmk_core/protocol/lufa/lufa.c ****     else
 647:./tmk_core/protocol/lufa/lufa.c **** #endif
 648:./tmk_core/protocol/lufa/lufa.c ****     {
 649:./tmk_core/protocol/lufa/lufa.c ****         /* Boot protocol */
 650:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);
 651:./tmk_core/protocol/lufa/lufa.c **** 
 652:./tmk_core/protocol/lufa/lufa.c ****         /* Check if write ready for a polling interval around 10ms */
 653:./tmk_core/protocol/lufa/lufa.c ****         while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 654:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 655:./tmk_core/protocol/lufa/lufa.c **** 
 656:./tmk_core/protocol/lufa/lufa.c ****         /* Write Keyboard Report Data */
 657:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
 658:./tmk_core/protocol/lufa/lufa.c ****     }
 659:./tmk_core/protocol/lufa/lufa.c **** 
 660:./tmk_core/protocol/lufa/lufa.c ****     /* Finalize the stream transfer to send the last packet */
 661:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 662:./tmk_core/protocol/lufa/lufa.c **** 
 663:./tmk_core/protocol/lufa/lufa.c ****     keyboard_report_sent = *report;
 664:./tmk_core/protocol/lufa/lufa.c **** }
 665:./tmk_core/protocol/lufa/lufa.c ****  
 666:./tmk_core/protocol/lufa/lufa.c **** /** \brief Send Mouse
 667:./tmk_core/protocol/lufa/lufa.c ****  *
 668:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 669:./tmk_core/protocol/lufa/lufa.c ****  */
 670:./tmk_core/protocol/lufa/lufa.c **** static void send_mouse(report_mouse_t *report)
 671:./tmk_core/protocol/lufa/lufa.c **** {
 672:./tmk_core/protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 673:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 674:./tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
 675:./tmk_core/protocol/lufa/lufa.c **** 
 676:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 677:./tmk_core/protocol/lufa/lufa.c ****   if (where == OUTPUT_BLUETOOTH || where == OUTPUT_USB_AND_BT) {
 678:./tmk_core/protocol/lufa/lufa.c ****     #ifdef MODULE_ADAFRUIT_BLE
 679:./tmk_core/protocol/lufa/lufa.c ****       // FIXME: mouse buttons
 680:./tmk_core/protocol/lufa/lufa.c ****       adafruit_ble_send_mouse_move(report->x, report->y, report->v, report->h, report->buttons);
 681:./tmk_core/protocol/lufa/lufa.c ****     #else
 682:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0xFD);
 683:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0x00);
 684:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0x03);
 685:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->buttons);
 686:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->x);
 687:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->y);
 688:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->v); // should try sending the wheel v here
 689:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->h); // should try sending the wheel h here
 690:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0x00);
 691:./tmk_core/protocol/lufa/lufa.c ****     #endif
 692:./tmk_core/protocol/lufa/lufa.c ****   }
 693:./tmk_core/protocol/lufa/lufa.c **** #endif
 694:./tmk_core/protocol/lufa/lufa.c **** 
 695:./tmk_core/protocol/lufa/lufa.c ****     if (where != OUTPUT_USB && where != OUTPUT_USB_AND_BT) {
 696:./tmk_core/protocol/lufa/lufa.c ****       return;
 697:./tmk_core/protocol/lufa/lufa.c ****     }
 698:./tmk_core/protocol/lufa/lufa.c **** 
 699:./tmk_core/protocol/lufa/lufa.c ****     /* Select the Mouse Report Endpoint */
 700:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);
 701:./tmk_core/protocol/lufa/lufa.c **** 
 702:./tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 703:./tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 704:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 705:./tmk_core/protocol/lufa/lufa.c **** 
 706:./tmk_core/protocol/lufa/lufa.c ****     /* Write Mouse Report Data */
 707:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
 708:./tmk_core/protocol/lufa/lufa.c **** 
 709:./tmk_core/protocol/lufa/lufa.c ****     /* Finalize the stream transfer to send the last packet */
 710:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 711:./tmk_core/protocol/lufa/lufa.c **** #endif
 712:./tmk_core/protocol/lufa/lufa.c **** }
 713:./tmk_core/protocol/lufa/lufa.c **** 
 714:./tmk_core/protocol/lufa/lufa.c **** /** \brief Send System
 715:./tmk_core/protocol/lufa/lufa.c ****  *
 716:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 717:./tmk_core/protocol/lufa/lufa.c ****  */
 718:./tmk_core/protocol/lufa/lufa.c **** static void send_system(uint16_t data)
 719:./tmk_core/protocol/lufa/lufa.c **** {
 720:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 721:./tmk_core/protocol/lufa/lufa.c **** 
 722:./tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 723:./tmk_core/protocol/lufa/lufa.c ****         return;
 724:./tmk_core/protocol/lufa/lufa.c **** 
 725:./tmk_core/protocol/lufa/lufa.c ****     report_extra_t r = {
 726:./tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_SYSTEM,
 727:./tmk_core/protocol/lufa/lufa.c ****         .usage = data - SYSTEM_POWER_DOWN + 1
 728:./tmk_core/protocol/lufa/lufa.c ****     };
 729:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);
 730:./tmk_core/protocol/lufa/lufa.c **** 
 731:./tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 732:./tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 733:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 734:./tmk_core/protocol/lufa/lufa.c **** 
 735:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 736:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 737:./tmk_core/protocol/lufa/lufa.c **** }
 738:./tmk_core/protocol/lufa/lufa.c **** 
 739:./tmk_core/protocol/lufa/lufa.c **** /** \brief Send Consumer
 740:./tmk_core/protocol/lufa/lufa.c ****  *
 741:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 742:./tmk_core/protocol/lufa/lufa.c ****  */
 743:./tmk_core/protocol/lufa/lufa.c **** static void send_consumer(uint16_t data)
 744:./tmk_core/protocol/lufa/lufa.c **** {
  31               		.loc 1 744 0
  32               		.cfi_startproc
  33               	.LVL0:
  34 0000 0F93      		push r16
  35               	.LCFI0:
  36               		.cfi_def_cfa_offset 3
  37               		.cfi_offset 16, -2
  38 0002 1F93      		push r17
  39               	.LCFI1:
  40               		.cfi_def_cfa_offset 4
  41               		.cfi_offset 17, -3
  42 0004 CF93      		push r28
  43               	.LCFI2:
  44               		.cfi_def_cfa_offset 5
  45               		.cfi_offset 28, -4
  46 0006 DF93      		push r29
  47               	.LCFI3:
  48               		.cfi_def_cfa_offset 6
  49               		.cfi_offset 29, -5
  50 0008 00D0      		rcall .
  51 000a 1F92      		push __zero_reg__
  52               	.LCFI4:
  53               		.cfi_def_cfa_offset 9
  54 000c CDB7      		in r28,__SP_L__
  55 000e DEB7      		in r29,__SP_H__
  56               	.LCFI5:
  57               		.cfi_def_cfa_register 28
  58               	/* prologue: function */
  59               	/* frame size = 3 */
  60               	/* stack size = 7 */
  61               	.L__stack_usage = 7
  62 0010 8C01      		movw r16,r24
  63               	.LVL1:
 745:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 746:./tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
  64               		.loc 1 746 0
  65 0012 0E94 0000 		call where_to_send
  66               	.LVL2:
 747:./tmk_core/protocol/lufa/lufa.c **** 
 748:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 749:./tmk_core/protocol/lufa/lufa.c ****     if (where == OUTPUT_BLUETOOTH || where == OUTPUT_USB_AND_BT) {
 750:./tmk_core/protocol/lufa/lufa.c ****       #ifdef MODULE_ADAFRUIT_BLE
 751:./tmk_core/protocol/lufa/lufa.c ****         adafruit_ble_send_consumer_key(data, 0);
 752:./tmk_core/protocol/lufa/lufa.c ****       #elif MODULE_RN42
 753:./tmk_core/protocol/lufa/lufa.c ****         static uint16_t last_data = 0;
 754:./tmk_core/protocol/lufa/lufa.c ****         if (data == last_data) return;
 755:./tmk_core/protocol/lufa/lufa.c ****         last_data = data;
 756:./tmk_core/protocol/lufa/lufa.c ****         uint16_t bitmap = CONSUMER2RN42(data);
 757:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0xFD);
 758:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x03);
 759:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x03);
 760:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(bitmap&0xFF);
 761:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send((bitmap>>8)&0xFF);
 762:./tmk_core/protocol/lufa/lufa.c ****       #else
 763:./tmk_core/protocol/lufa/lufa.c ****         static uint16_t last_data = 0;
 764:./tmk_core/protocol/lufa/lufa.c ****         if (data == last_data) return;
 765:./tmk_core/protocol/lufa/lufa.c ****         last_data = data;
 766:./tmk_core/protocol/lufa/lufa.c ****         uint16_t bitmap = CONSUMER2BLUEFRUIT(data);
 767:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0xFD);
 768:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 769:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x02);
 770:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send((bitmap>>8)&0xFF);
 771:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(bitmap&0xFF);
 772:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 773:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 774:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 775:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 776:./tmk_core/protocol/lufa/lufa.c ****       #endif
 777:./tmk_core/protocol/lufa/lufa.c ****     }
 778:./tmk_core/protocol/lufa/lufa.c **** #endif
 779:./tmk_core/protocol/lufa/lufa.c **** 
 780:./tmk_core/protocol/lufa/lufa.c ****     if (where != OUTPUT_USB && where != OUTPUT_USB_AND_BT) {
  67               		.loc 1 780 0
  68 0016 8230      		cpi r24,lo8(2)
  69 0018 01F0      		breq .L3
  70               		.loc 1 780 0 is_stmt 0 discriminator 1
  71 001a 8430      		cpi r24,lo8(4)
  72 001c 01F4      		brne .L2
  73               	.L3:
 781:./tmk_core/protocol/lufa/lufa.c ****       return;
 782:./tmk_core/protocol/lufa/lufa.c ****     }
 783:./tmk_core/protocol/lufa/lufa.c **** 
 784:./tmk_core/protocol/lufa/lufa.c ****     report_extra_t r = {
  74               		.loc 1 784 0 is_stmt 1
  75 001e 83E0      		ldi r24,lo8(3)
  76               	.LVL3:
  77 0020 8983      		std Y+1,r24
  78 0022 1B83      		std Y+3,r17
  79 0024 0A83      		std Y+2,r16
  80               	.LVL4:
  81               	.LBB110:
  82               	.LBB111:
  83               		.file 2 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h"
   1:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
   2:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****              LUFA Library
   3:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****      Copyright (C) Dean Camera, 2017.
   4:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   5:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****            www.lufa-lib.org
   7:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
   8:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   9:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
  10:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Copyright 2017  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  12:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   all copies and that both that the copyright notice and this
  16:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   documentation, and that the name of the author not be used in
  18:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software without specific, written prior permission.
  20:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  21:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   The author disclaims all warranties with regard to this
  22:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software, including all implied warranties of merchantability
  23:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   special, indirect or consequential damages or any damages
  25:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   arising out of or in connection with the use or performance of
  28:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   this software.
  29:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
  30:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  31:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \file
  32:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief USB Endpoint definitions for the AVR8 microcontrollers.
  33:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \copydetails Group_EndpointManagement_AVR8
  34:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  35:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  38:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  39:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointRW
  40:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointRW_AVR8 Endpoint Data Reading and Writing (AVR8)
  41:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint data read/write definitions for the Atmel AVR8 architecture.
  42:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  43:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  44:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  45:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  46:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPrimitiveRW
  47:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPrimitiveRW_AVR8 Read/Write of Primitive Data Types (AVR8)
  48:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint primitive read/write definitions for the Atmel AVR8 architecture.
  49:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  50:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  51:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  from and to endpoints.
  52:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  53:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  54:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPacketManagement
  55:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPacketManagement_AVR8 Endpoint Packet Management (AVR8)
  56:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint packet management definitions for the Atmel AVR8 architecture.
  57:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  58:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  59:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  60:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  61:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointManagement
  62:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointManagement_AVR8 Endpoint Management (AVR8)
  63:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint management definitions for the Atmel AVR8 architecture.
  64:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  65:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  66:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  67:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  send/receive functions for various data types.
  68:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  69:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  @{
  70:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  71:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  72:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #ifndef __ENDPOINT_AVR8_H__
  73:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #define __ENDPOINT_AVR8_H__
  74:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  75:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Includes: */
  76:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../../../../Common/Common.h"
  77:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBTask.h"
  78:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBInterrupt.h"
  79:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  80:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  81:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if defined(__cplusplus)
  82:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			extern "C" {
  83:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  84:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  85:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Preprocessor Checks: */
  86:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  87:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  88:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  89:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  90:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Private Interface - For use in library only: */
  91:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#if !defined(__DOXYGEN__)
  92:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
  93:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT A
  94:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                                                       ATTR_ALWAYS_INLINE;
  95:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
  96:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
  97:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t  MaskVal    = 0;
  98:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint16_t CheckBytes = 8;
  99:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 100:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (CheckBytes < Bytes)
 101:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 102:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					MaskVal++;
 103:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					CheckBytes <<= 1;
 104:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 105:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 106:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (MaskVal << EPSIZE0);
 107:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 108:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 109:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Function Prototypes: */
 110:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			void Endpoint_ClearEndpoints(void);
 111:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
 112:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG0XData,
 113:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG1XData);
 114:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 115:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#endif
 116:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 117:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Public Interface - May be used in end-application: */
 118:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */
 119:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 120:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 121:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  value in the device descriptor. Not available if the \c FIXED_CONTROL_ENDPOINT_SIZE token i
 122:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 123:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE     8
 124:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 125:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 126:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if !defined(CONTROL_ONLY_DEVICE) || defined(__DOXYGEN__)
 127:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defi
 128:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					/** Total number of endpoints (including the default control endpoint at address 0) which may
 129:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 130:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 131:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 */
 132:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS        7
 133:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 134:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS        5
 135:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 136:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 137:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            1
 138:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 139:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 140:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Enums: */
 141:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 142:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 143:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 144:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 145:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 146:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 147:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 148:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 149:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   transfer by the host or device.
 150:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 151:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 152:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   waiting for the endpoint to become ready.
 153:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 154:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 155:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   no USB endpoint traffic can occur until th
 156:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   has resumed.
 157:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 158:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 159:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   within the software timeout period set by 
 160:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 161:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 162:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			};
 163:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 164:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 165:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Configures the specified endpoint address with the given endpoint type, bank size and number
 166:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  banks. Once configured, the endpoint may be read from or written to, depending on its direct
 167:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 168:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address    Endpoint address to configure.
 169:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 170:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Type       Type of endpoint to configure, a \c EP_TYPE_* mask. Not all endpoint t
 171:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        are available on Low Speed USB devices - refer to the USB 2.0 specific
 172:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 173:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Size       Size of the endpoint's bank, where packets are stored before they are 
 174:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        to the USB host, or after they have been received from the USB host (d
 175:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        the endpoint's data direction). The bank size must indicate the maximu
 176:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        that the endpoint can handle.
 177:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 178:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Banks      Number of banks to use for the endpoint being configured.
 179:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 180:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \attention When the \c ORDERED_EP_CONFIG compile time option is used, Endpoints <b>must</b> 
 181:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *             ascending order, or bank corruption will occur.
 182:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 183:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Different endpoints may have different maximum packet sizes based on the endpoint's in
 184:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        refer to the chosen microcontroller model's datasheet to determine the maximum bank si
 185:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 186:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 187:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The default control endpoint should not be manually configured by the user application
 188:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        it is automatically configured by the library internally.
 189:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 190:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 191:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This routine will automatically select the specified endpoint upon success. Upon failu
 192:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        which failed to reconfigure correctly will be selected.
 193:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 194:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the configuration succeeded, \c false otherwise.
 195:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 196:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
 197:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 198:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 199:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks) ATTR_ALWAYS_INLINE;
 200:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
 201:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 202:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 203:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks)
 204:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 205:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
 206:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 207:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
 208:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				  return false;
 209:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 210:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number,
 211:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 212:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Endpoi
 213:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 214:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 215:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Indicates the number of bytes currently stored in the current endpoint's selected bank.
 216:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 217:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 218:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 219:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
 220:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 221:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
 222:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void)
 223:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 224:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
 225:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCX;
 226:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_4_AVR)
 227:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 228:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_2_AVR)
 229:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCLX;
 230:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 231:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 232:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 233:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines the currently selected endpoint's direction.
 234:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 235:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
 236:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 237:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_IN
 238:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void)
 239:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 240:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 241:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 242:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 243:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Get the endpoint address of the currently selected endpoint. This is typically used to save
 244:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint so that it can be restored after another endpoint has been
 245:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  manipulated.
 246:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 247:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Index of the currently selected endpoint.
 248:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 249:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLI
 250:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
 251:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 252:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 253:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 254:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 255:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ENDPOINT_CONTROLEP;
 256:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 257:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 258:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 259:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Selects the given endpoint address.
 260:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 261:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  Any endpoint operations which do not require the endpoint address to be indicated will opera
 262:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint.
 263:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 264:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address Endpoint address to select.
 265:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 266:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
 267:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
 268:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 269:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = (Address & ENDPOINT_EPNUM_MASK);
  84               		.loc 2 270 0
  85 0026 8093 E900 		sts 233,r24
  86               	.LVL5:
  87 002a 8FEF      		ldi r24,lo8(-1)
  88               	.LVL6:
  89               	.L5:
  90               	.LBE111:
  91               	.LBE110:
  92               	.LBB112:
  93               	.LBB113:
 271:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 272:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 273:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 274:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the endpoint bank FIFO. This clears all the endpoint banks and resets the USB control
 275:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  data In and Out pointers to the bank's contents.
 276:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 277:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
 278:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 279:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
 280:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
 281:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 282:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 283:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = 0;
 284:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 285:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 286:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enables the currently selected endpoint so that data can be sent and received through it to
 287:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and from a host.
 288:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 289:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
 290:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 291:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
 292:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void)
 293:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 294:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << EPEN);
 295:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 296:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 297:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Disables the currently selected endpoint so that data cannot be sent and received through it
 298:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  to and from a host.
 299:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 300:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
 301:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void)
 302:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 303:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX &= ~(1 << EPEN);
 304:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 305:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 306:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is enabled, but not necessarily configured.
 307:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 308:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
 309:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 310:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 311:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void)
 312:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 313:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
 314:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 315:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 316:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the number of busy banks in the currently selected endpoint, which have been queue
 317:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  transmission via the \ref Endpoint_ClearIN() command, or are awaiting acknowledgment via the
 318:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ref Endpoint_ClearOUT() command.
 319:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 320:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 321:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 322:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of busy banks in the selected endpoint.
 323:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 324:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
 325:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void)
 326:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 327:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UESTA0X & (0x03 << NBUSYBK0));
 328:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 329:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 330:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Aborts all pending IN transactions on the currently selected endpoint, once the bank
 331:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  has been queued for transmission to the host via \ref Endpoint_ClearIN(). This function
 332:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  will terminate all queued transactions, resetting the endpoint banks ready for a new
 333:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  packet.
 334:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 335:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 336:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 337:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_AbortPendingIN(void)
 338:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 339:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (Endpoint_GetBusyBanks() != 0)
 340:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 341:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX |= (1 << RXOUTI);
 342:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					while (UEINTX & (1 << RXOUTI));
 343:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 344:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 345:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 346:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint may be read from (if data is waiting in the en
 347:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank and the endpoint is an OUT direction, or if the bank is not yet full if the endpoint is
 348:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction). This function will return false if an error has occurred in the endpoint, if the
 349:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is an OUT direction and no packet (or an empty packet) has been received, or if the endpoint
 350:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction and the endpoint bank is full.
 351:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 352:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 353:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 354:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint may be read from or written to, d
 355:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *          on its direction.
 356:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 357:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 358:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void)
 359:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
  94               		.loc 2 360 0
  95 002c 9091 E800 		lds r25,232
  96 0030 8150      		subi r24,lo8(-(-1))
  97               	.LVL7:
  98               	.LBE113:
  99               	.LBE112:
 785:./tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_CONSUMER,
 786:./tmk_core/protocol/lufa/lufa.c ****         .usage = data
 787:./tmk_core/protocol/lufa/lufa.c ****     };
 788:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);
 789:./tmk_core/protocol/lufa/lufa.c **** 
 790:./tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 791:./tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 100               		.loc 1 791 0
 101 0032 95FD      		sbrc r25,5
 102 0034 00C0      		rjmp .L6
 103               	.LVL8:
 104               	.LBB114:
 105               	.LBB115:
 106               		.file 3 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/lib/avr/include/util/delay.h **** 
 153:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/lib/avr/include/util/delay.h **** 
 156:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/lib/avr/include/util/delay.h **** 
 159:/usr/lib/avr/include/util/delay.h **** 	#else
 160:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 161:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/lib/avr/include/util/delay.h **** 	#endif
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 165:/usr/lib/avr/include/util/delay.h **** 
 166:/usr/lib/avr/include/util/delay.h **** #else
 167:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 168:/usr/lib/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 169:/usr/lib/avr/include/util/delay.h **** 		__ticks = 1;
 170:/usr/lib/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 171:/usr/lib/avr/include/util/delay.h **** 	{
 172:/usr/lib/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 173:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 174:/usr/lib/avr/include/util/delay.h **** 		while(__ticks)
 175:/usr/lib/avr/include/util/delay.h **** 		{
 176:/usr/lib/avr/include/util/delay.h **** 			// wait 1/10 ms
 177:/usr/lib/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 178:/usr/lib/avr/include/util/delay.h **** 			__ticks --;
 179:/usr/lib/avr/include/util/delay.h **** 		}
 180:/usr/lib/avr/include/util/delay.h **** 		return;
 181:/usr/lib/avr/include/util/delay.h **** 	}
 182:/usr/lib/avr/include/util/delay.h **** 	else
 183:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 184:/usr/lib/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 185:/usr/lib/avr/include/util/delay.h **** #endif
 186:/usr/lib/avr/include/util/delay.h **** }
 187:/usr/lib/avr/include/util/delay.h **** 
 188:/usr/lib/avr/include/util/delay.h **** /**
 189:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 190:/usr/lib/avr/include/util/delay.h **** 
 191:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 192:/usr/lib/avr/include/util/delay.h **** 
 193:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 194:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 195:/usr/lib/avr/include/util/delay.h **** 
 196:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 197:/usr/lib/avr/include/util/delay.h **** 
 198:/usr/lib/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 199:/usr/lib/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 200:/usr/lib/avr/include/util/delay.h ****    will not be informed about this case.
 201:/usr/lib/avr/include/util/delay.h **** 
 202:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 203:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 204:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 205:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0us.
 206:/usr/lib/avr/include/util/delay.h ****   
 207:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 208:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 209:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 210:/usr/lib/avr/include/util/delay.h **** 
 211:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 212:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 213:/usr/lib/avr/include/util/delay.h ****  
 214:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_us(double __us) with 
 215:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible.
 216:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 217:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 218:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 219:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 220:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 221:/usr/lib/avr/include/util/delay.h **** 
 222:/usr/lib/avr/include/util/delay.h ****  */
 223:/usr/lib/avr/include/util/delay.h **** void
 224:/usr/lib/avr/include/util/delay.h **** _delay_us(double __us)
 225:/usr/lib/avr/include/util/delay.h **** {
 226:/usr/lib/avr/include/util/delay.h **** 	uint8_t __ticks;
 227:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 228:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 229:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 230:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 231:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 232:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 233:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 234:/usr/lib/avr/include/util/delay.h **** 
 235:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 236:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 237:/usr/lib/avr/include/util/delay.h **** 
 238:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 239:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 240:/usr/lib/avr/include/util/delay.h **** 
 241:/usr/lib/avr/include/util/delay.h **** 	#else
 242:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 243:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 244:/usr/lib/avr/include/util/delay.h **** 	#endif
 245:/usr/lib/avr/include/util/delay.h **** 
 246:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 107               		.loc 3 246 0
 108 0036 95ED      		ldi r25,lo8(-43)
 109 0038 9A95      		1: dec r25
 110 003a 01F4      		brne 1b
 111 003c 0000      		nop
 112               	.LVL9:
 113               	.LBE115:
 114               	.LBE114:
 115               		.loc 1 791 0
 116 003e 8111      		cpse r24,__zero_reg__
 117 0040 00C0      		rjmp .L5
 118               	.LVL10:
 119               	.L6:
 120               	.LBB116:
 121               	.LBB117:
 122               		.loc 2 360 0
 123 0042 8091 E800 		lds r24,232
 124               	.LBE117:
 125               	.LBE116:
 792:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 126               		.loc 1 792 0
 127 0046 85FF      		sbrs r24,5
 128 0048 00C0      		rjmp .L2
 793:./tmk_core/protocol/lufa/lufa.c **** 
 794:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 129               		.loc 1 794 0
 130 004a 40E0      		ldi r20,0
 131 004c 50E0      		ldi r21,0
 132 004e 63E0      		ldi r22,lo8(3)
 133 0050 70E0      		ldi r23,0
 134 0052 CE01      		movw r24,r28
 135 0054 0196      		adiw r24,1
 136 0056 0E94 0000 		call Endpoint_Write_Stream_LE
 137               	.LVL11:
 138               	.LBB118:
 139               	.LBB119:
 361:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 362:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 363:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is configured.
 364:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 365:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false oth
 366:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 367:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 368:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void)
 369:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 370:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 371:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 372:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 373:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Returns a mask indicating which INTERRUPT type endpoints have interrupted - i.e. their
 374:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  interrupt duration has elapsed. Which endpoints have interrupted can be determined by
 375:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  masking the return value against <tt>(1 << <i>{Endpoint Number}</i>)</tt>.
 376:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 377:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Mask whose bits indicate which endpoints have interrupted.
 378:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 379:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_I
 380:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void)
 381:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 382:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEINT;
 383:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 384:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 385:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the specified endpoint number has interrupted (valid only for INTERRUPT type
 386:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoints).
 387:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 388:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address  Address of the endpoint whose interrupt flag should be tested.
 389:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 390:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the specified endpoint has interrupted, \c false otherwise.
 391:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 392:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t Address) ATTR_WARN_UNUSED_RESUL
 393:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t Address)
 394:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 395:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((Endpoint_GetEndpointInterrupts() & (1 << (Address & ENDPOINT_EPNUM_MASK))) ? true : fa
 396:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 397:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 398:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected IN endpoint is ready for a new packet to be sent to the host.
 399:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 400:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 401:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 402:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwis
 403:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 404:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 405:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void)
 406:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 407:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 408:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 409:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 410:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected OUT endpoint has received new packet from the host.
 411:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 412:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 413:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 414:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwis
 415:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 416:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 417:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void)
 418:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 419:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 420:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 421:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 422:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the current CONTROL type endpoint has received a SETUP packet.
 423:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 424:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 425:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 426:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false other
 427:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 428:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 429:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void)
 430:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 431:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 432:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 433:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 434:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears a received SETUP packet on the currently selected CONTROL type endpoint, freeing up t
 435:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint for the next packet.
 436:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 437:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 438:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 439:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This is not applicable for non CONTROL type endpoints.
 440:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 441:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
 442:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void)
 443:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 445:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 446:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 447:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sends an IN packet to the host on the currently selected endpoint, freeing up the endpoint f
 448:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  next packet and switching to the alternative endpoint bank if double banked.
 449:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 450:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 451:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 452:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
 453:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void)
 454:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 455:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 456:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 140               		.loc 2 456 0
 141 005a 8091 E800 		lds r24,232
 142 005e 8E77      		andi r24,lo8(126)
 143 0060 8093 E800 		sts 232,r24
 144               	.LVL12:
 145               	.L2:
 146               	/* epilogue start */
 147               	.LBE119:
 148               	.LBE118:
 795:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 796:./tmk_core/protocol/lufa/lufa.c **** }
 149               		.loc 1 796 0
 150 0064 0F90      		pop __tmp_reg__
 151 0066 0F90      		pop __tmp_reg__
 152 0068 0F90      		pop __tmp_reg__
 153 006a DF91      		pop r29
 154 006c CF91      		pop r28
 155 006e 1F91      		pop r17
 156 0070 0F91      		pop r16
 157               	.LVL13:
 158 0072 0895      		ret
 159               		.cfi_endproc
 160               	.LFE123:
 162               		.section	.text.send_system,"ax",@progbits
 164               	send_system:
 165               	.LFB122:
 719:./tmk_core/protocol/lufa/lufa.c **** {
 166               		.loc 1 719 0
 167               		.cfi_startproc
 168               	.LVL14:
 169 0000 CF93      		push r28
 170               	.LCFI6:
 171               		.cfi_def_cfa_offset 3
 172               		.cfi_offset 28, -2
 173 0002 DF93      		push r29
 174               	.LCFI7:
 175               		.cfi_def_cfa_offset 4
 176               		.cfi_offset 29, -3
 177 0004 00D0      		rcall .
 178 0006 1F92      		push __zero_reg__
 179               	.LCFI8:
 180               		.cfi_def_cfa_offset 7
 181 0008 CDB7      		in r28,__SP_L__
 182 000a DEB7      		in r29,__SP_H__
 183               	.LCFI9:
 184               		.cfi_def_cfa_register 28
 185               	/* prologue: function */
 186               	/* frame size = 3 */
 187               	/* stack size = 5 */
 188               	.L__stack_usage = 5
 189               	.LVL15:
 722:./tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 190               		.loc 1 722 0
 191 000c 2091 0000 		lds r18,USB_DeviceState
 192 0010 2430      		cpi r18,lo8(4)
 193 0012 01F4      		brne .L19
 725:./tmk_core/protocol/lufa/lufa.c ****     report_extra_t r = {
 194               		.loc 1 725 0
 195 0014 22E0      		ldi r18,lo8(2)
 196 0016 2983      		std Y+1,r18
 727:./tmk_core/protocol/lufa/lufa.c ****         .usage = data - SYSTEM_POWER_DOWN + 1
 197               		.loc 1 727 0
 198 0018 8058      		subi r24,-128
 199 001a 9109      		sbc r25,__zero_reg__
 200               	.LVL16:
 725:./tmk_core/protocol/lufa/lufa.c ****     report_extra_t r = {
 201               		.loc 1 725 0
 202 001c 9B83      		std Y+3,r25
 203 001e 8A83      		std Y+2,r24
 204               	.LVL17:
 205               	.LBB120:
 206               	.LBB121:
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 207               		.loc 2 270 0
 208 0020 83E0      		ldi r24,lo8(3)
 209               	.LVL18:
 210 0022 8093 E900 		sts 233,r24
 211               	.LVL19:
 212 0026 8FEF      		ldi r24,lo8(-1)
 213               	.LVL20:
 214               	.L21:
 215               	.LBE121:
 216               	.LBE120:
 217               	.LBB122:
 218               	.LBB123:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 219               		.loc 2 360 0
 220 0028 9091 E800 		lds r25,232
 221 002c 8150      		subi r24,lo8(-(-1))
 222               	.LVL21:
 223               	.LBE123:
 224               	.LBE122:
 732:./tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 225               		.loc 1 732 0
 226 002e 95FD      		sbrc r25,5
 227 0030 00C0      		rjmp .L22
 228               	.LVL22:
 229               	.LBB124:
 230               	.LBB125:
 231               		.loc 3 246 0
 232 0032 95ED      		ldi r25,lo8(-43)
 233 0034 9A95      		1: dec r25
 234 0036 01F4      		brne 1b
 235 0038 0000      		nop
 236               	.LVL23:
 237               	.LBE125:
 238               	.LBE124:
 732:./tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 239               		.loc 1 732 0
 240 003a 8111      		cpse r24,__zero_reg__
 241 003c 00C0      		rjmp .L21
 242               	.LVL24:
 243               	.L22:
 244               	.LBB126:
 245               	.LBB127:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 246               		.loc 2 360 0
 247 003e 8091 E800 		lds r24,232
 248               	.LBE127:
 249               	.LBE126:
 733:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 250               		.loc 1 733 0
 251 0042 85FF      		sbrs r24,5
 252 0044 00C0      		rjmp .L19
 735:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 253               		.loc 1 735 0
 254 0046 40E0      		ldi r20,0
 255 0048 50E0      		ldi r21,0
 256 004a 63E0      		ldi r22,lo8(3)
 257 004c 70E0      		ldi r23,0
 258 004e CE01      		movw r24,r28
 259 0050 0196      		adiw r24,1
 260 0052 0E94 0000 		call Endpoint_Write_Stream_LE
 261               	.LVL25:
 262               	.LBB128:
 263               	.LBB129:
 264               		.loc 2 456 0
 265 0056 8091 E800 		lds r24,232
 266 005a 8E77      		andi r24,lo8(126)
 267 005c 8093 E800 		sts 232,r24
 268               	.LVL26:
 269               	.L19:
 270               	/* epilogue start */
 271               	.LBE129:
 272               	.LBE128:
 737:./tmk_core/protocol/lufa/lufa.c **** }
 273               		.loc 1 737 0
 274 0060 0F90      		pop __tmp_reg__
 275 0062 0F90      		pop __tmp_reg__
 276 0064 0F90      		pop __tmp_reg__
 277 0066 DF91      		pop r29
 278 0068 CF91      		pop r28
 279 006a 0895      		ret
 280               		.cfi_endproc
 281               	.LFE122:
 283               		.section	.text.send_mouse,"ax",@progbits
 285               	send_mouse:
 286               	.LFB121:
 671:./tmk_core/protocol/lufa/lufa.c **** {
 287               		.loc 1 671 0
 288               		.cfi_startproc
 289               	.LVL27:
 290 0000 CF93      		push r28
 291               	.LCFI10:
 292               		.cfi_def_cfa_offset 3
 293               		.cfi_offset 28, -2
 294 0002 DF93      		push r29
 295               	.LCFI11:
 296               		.cfi_def_cfa_offset 4
 297               		.cfi_offset 29, -3
 298               	/* prologue: function */
 299               	/* frame size = 0 */
 300               	/* stack size = 2 */
 301               	.L__stack_usage = 2
 302 0004 EC01      		movw r28,r24
 303               	.LVL28:
 674:./tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
 304               		.loc 1 674 0
 305 0006 0E94 0000 		call where_to_send
 306               	.LVL29:
 695:./tmk_core/protocol/lufa/lufa.c ****     if (where != OUTPUT_USB && where != OUTPUT_USB_AND_BT) {
 307               		.loc 1 695 0
 308 000a 8230      		cpi r24,lo8(2)
 309 000c 01F0      		breq .L32
 695:./tmk_core/protocol/lufa/lufa.c ****     if (where != OUTPUT_USB && where != OUTPUT_USB_AND_BT) {
 310               		.loc 1 695 0 is_stmt 0 discriminator 1
 311 000e 8430      		cpi r24,lo8(4)
 312 0010 01F4      		brne .L31
 313               	.L32:
 314               	.LVL30:
 315               	.LBB130:
 316               	.LBB131:
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 317               		.loc 2 270 0 is_stmt 1
 318 0012 82E0      		ldi r24,lo8(2)
 319               	.LVL31:
 320 0014 8093 E900 		sts 233,r24
 321               	.LVL32:
 322 0018 8FEF      		ldi r24,lo8(-1)
 323               	.LVL33:
 324               	.L34:
 325               	.LBE131:
 326               	.LBE130:
 327               	.LBB132:
 328               	.LBB133:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 329               		.loc 2 360 0
 330 001a 9091 E800 		lds r25,232
 331 001e 8150      		subi r24,lo8(-(-1))
 332               	.LVL34:
 333               	.LBE133:
 334               	.LBE132:
 703:./tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 335               		.loc 1 703 0
 336 0020 95FD      		sbrc r25,5
 337 0022 00C0      		rjmp .L35
 338               	.LVL35:
 339               	.LBB134:
 340               	.LBB135:
 341               		.loc 3 246 0
 342 0024 95ED      		ldi r25,lo8(-43)
 343 0026 9A95      		1: dec r25
 344 0028 01F4      		brne 1b
 345 002a 0000      		nop
 346               	.LVL36:
 347               	.LBE135:
 348               	.LBE134:
 703:./tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 349               		.loc 1 703 0
 350 002c 8111      		cpse r24,__zero_reg__
 351 002e 00C0      		rjmp .L34
 352               	.LVL37:
 353               	.L35:
 354               	.LBB136:
 355               	.LBB137:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 356               		.loc 2 360 0
 357 0030 8091 E800 		lds r24,232
 358               	.LBE137:
 359               	.LBE136:
 704:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 360               		.loc 1 704 0
 361 0034 85FF      		sbrs r24,5
 362 0036 00C0      		rjmp .L31
 707:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
 363               		.loc 1 707 0
 364 0038 40E0      		ldi r20,0
 365 003a 50E0      		ldi r21,0
 366 003c 65E0      		ldi r22,lo8(5)
 367 003e 70E0      		ldi r23,0
 368 0040 CE01      		movw r24,r28
 369 0042 0E94 0000 		call Endpoint_Write_Stream_LE
 370               	.LVL38:
 371               	.LBB138:
 372               	.LBB139:
 373               		.loc 2 456 0
 374 0046 8091 E800 		lds r24,232
 375 004a 8E77      		andi r24,lo8(126)
 376 004c 8093 E800 		sts 232,r24
 377               	.LVL39:
 378               	.L31:
 379               	/* epilogue start */
 380               	.LBE139:
 381               	.LBE138:
 712:./tmk_core/protocol/lufa/lufa.c **** }
 382               		.loc 1 712 0
 383 0050 DF91      		pop r29
 384 0052 CF91      		pop r28
 385               	.LVL40:
 386 0054 0895      		ret
 387               		.cfi_endproc
 388               	.LFE121:
 390               		.section	.text.send_keyboard,"ax",@progbits
 392               	send_keyboard:
 393               	.LFB120:
 605:./tmk_core/protocol/lufa/lufa.c **** {
 394               		.loc 1 605 0
 395               		.cfi_startproc
 396               	.LVL41:
 397 0000 CF93      		push r28
 398               	.LCFI12:
 399               		.cfi_def_cfa_offset 3
 400               		.cfi_offset 28, -2
 401 0002 DF93      		push r29
 402               	.LCFI13:
 403               		.cfi_def_cfa_offset 4
 404               		.cfi_offset 29, -3
 405               	/* prologue: function */
 406               	/* frame size = 0 */
 407               	/* stack size = 2 */
 408               	.L__stack_usage = 2
 409 0004 EC01      		movw r28,r24
 410               	.LVL42:
 607:./tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
 411               		.loc 1 607 0
 412 0006 0E94 0000 		call where_to_send
 413               	.LVL43:
 629:./tmk_core/protocol/lufa/lufa.c ****     if (where != OUTPUT_USB && where != OUTPUT_USB_AND_BT) {
 414               		.loc 1 629 0
 415 000a 8230      		cpi r24,lo8(2)
 416 000c 01F0      		breq .L51
 629:./tmk_core/protocol/lufa/lufa.c ****     if (where != OUTPUT_USB && where != OUTPUT_USB_AND_BT) {
 417               		.loc 1 629 0 is_stmt 0 discriminator 1
 418 000e 8430      		cpi r24,lo8(4)
 419 0010 01F0      		breq .+2
 420 0012 00C0      		rjmp .L50
 421               	.L51:
 635:./tmk_core/protocol/lufa/lufa.c ****     if (keyboard_protocol && keymap_config.nkro) {
 422               		.loc 1 635 0 is_stmt 1
 423 0014 8091 0000 		lds r24,keyboard_protocol
 424               	.LVL44:
 425 0018 8823      		tst r24
 426 001a 01F0      		breq .L53
 635:./tmk_core/protocol/lufa/lufa.c ****     if (keyboard_protocol && keymap_config.nkro) {
 427               		.loc 1 635 0 is_stmt 0 discriminator 1
 428 001c 8091 0000 		lds r24,keymap_config
 429 0020 87FF      		sbrs r24,7
 430 0022 00C0      		rjmp .L53
 431               	.LVL45:
 432               	.LBB140:
 433               	.LBB141:
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 434               		.loc 2 270 0 is_stmt 1
 435 0024 84E0      		ldi r24,lo8(4)
 436 0026 8093 E900 		sts 233,r24
 437               	.LVL46:
 438 002a 8FEF      		ldi r24,lo8(-1)
 439               	.LVL47:
 440               	.L54:
 441               	.LBE141:
 442               	.LBE140:
 443               	.LBB142:
 444               	.LBB143:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 445               		.loc 2 360 0
 446 002c 9091 E800 		lds r25,232
 447 0030 8150      		subi r24,lo8(-(-1))
 448               	.LVL48:
 449               	.LBE143:
 450               	.LBE142:
 640:./tmk_core/protocol/lufa/lufa.c ****         while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(4);
 451               		.loc 1 640 0
 452 0032 95FD      		sbrc r25,5
 453 0034 00C0      		rjmp .L55
 454               	.LVL49:
 455               	.LBB144:
 456               	.LBB145:
 457               		.loc 3 246 0
 458 0036 95E1      		ldi r25,lo8(21)
 459 0038 9A95      		1: dec r25
 460 003a 01F4      		brne 1b
 461 003c 0000      		nop
 462               	.LVL50:
 463               	.LBE145:
 464               	.LBE144:
 640:./tmk_core/protocol/lufa/lufa.c ****         while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(4);
 465               		.loc 1 640 0
 466 003e 8111      		cpse r24,__zero_reg__
 467 0040 00C0      		rjmp .L54
 468               	.LVL51:
 469               	.L55:
 470               	.LBB146:
 471               	.LBB147:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 472               		.loc 2 360 0
 473 0042 8091 E800 		lds r24,232
 474               	.LBE147:
 475               	.LBE146:
 641:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 476               		.loc 1 641 0
 477 0046 85FF      		sbrs r24,5
 478 0048 00C0      		rjmp .L50
 644:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
 479               		.loc 1 644 0
 480 004a 40E0      		ldi r20,0
 481 004c 50E0      		ldi r21,0
 482 004e 60E2      		ldi r22,lo8(32)
 483 0050 70E0      		ldi r23,0
 484 0052 00C0      		rjmp .L86
 485               	.LVL52:
 486               	.L53:
 487               	.LBB148:
 488               	.LBB149:
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 489               		.loc 2 270 0
 490 0054 81E0      		ldi r24,lo8(1)
 491 0056 8093 E900 		sts 233,r24
 492               	.LVL53:
 493 005a 8FEF      		ldi r24,lo8(-1)
 494               	.LVL54:
 495               	.L59:
 496               	.LBE149:
 497               	.LBE148:
 498               	.LBB150:
 499               	.LBB151:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 500               		.loc 2 360 0
 501 005c 9091 E800 		lds r25,232
 502 0060 8150      		subi r24,lo8(-(-1))
 503               	.LVL55:
 504               	.LBE151:
 505               	.LBE150:
 653:./tmk_core/protocol/lufa/lufa.c ****         while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 506               		.loc 1 653 0
 507 0062 95FD      		sbrc r25,5
 508 0064 00C0      		rjmp .L60
 509               	.LVL56:
 510               	.LBB152:
 511               	.LBB153:
 512               		.loc 3 246 0
 513 0066 95ED      		ldi r25,lo8(-43)
 514 0068 9A95      		1: dec r25
 515 006a 01F4      		brne 1b
 516 006c 0000      		nop
 517               	.LVL57:
 518               	.LBE153:
 519               	.LBE152:
 653:./tmk_core/protocol/lufa/lufa.c ****         while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 520               		.loc 1 653 0
 521 006e 8111      		cpse r24,__zero_reg__
 522 0070 00C0      		rjmp .L59
 523               	.LVL58:
 524               	.L60:
 525               	.LBB154:
 526               	.LBB155:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 527               		.loc 2 360 0
 528 0072 8091 E800 		lds r24,232
 529               	.LBE155:
 530               	.LBE154:
 654:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 531               		.loc 1 654 0
 532 0076 85FF      		sbrs r24,5
 533 0078 00C0      		rjmp .L50
 657:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
 534               		.loc 1 657 0
 535 007a 40E0      		ldi r20,0
 536 007c 50E0      		ldi r21,0
 537 007e 68E0      		ldi r22,lo8(8)
 538 0080 70E0      		ldi r23,0
 539               	.LVL59:
 540               	.L86:
 541 0082 CE01      		movw r24,r28
 542 0084 0E94 0000 		call Endpoint_Write_Stream_LE
 543               	.LVL60:
 544               	.LBB156:
 545               	.LBB157:
 546               		.loc 2 456 0
 547 0088 8091 E800 		lds r24,232
 548 008c 8E77      		andi r24,lo8(126)
 549 008e 8093 E800 		sts 232,r24
 550               	.LBE157:
 551               	.LBE156:
 663:./tmk_core/protocol/lufa/lufa.c ****     keyboard_report_sent = *report;
 552               		.loc 1 663 0
 553 0092 80E2      		ldi r24,lo8(32)
 554 0094 FE01      		movw r30,r28
 555 0096 A0E0      		ldi r26,lo8(keyboard_report_sent)
 556 0098 B0E0      		ldi r27,hi8(keyboard_report_sent)
 557               		0:
 558 009a 0190      		ld r0,Z+
 559 009c 0D92      		st X+,r0
 560 009e 8A95      		dec r24
 561 00a0 01F4      		brne 0b
 562               	.L50:
 563               	/* epilogue start */
 664:./tmk_core/protocol/lufa/lufa.c **** }
 564               		.loc 1 664 0
 565 00a2 DF91      		pop r29
 566 00a4 CF91      		pop r28
 567               	.LVL61:
 568 00a6 0895      		ret
 569               		.cfi_endproc
 570               	.LFE120:
 572               		.section	.text.EVENT_USB_Device_Connect,"ax",@progbits
 573               	.global	EVENT_USB_Device_Connect
 575               	EVENT_USB_Device_Connect:
 576               	.LFB112:
 306:./tmk_core/protocol/lufa/lufa.c **** {
 577               		.loc 1 306 0
 578               		.cfi_startproc
 579               	/* prologue: function */
 580               	/* frame size = 0 */
 581               	/* stack size = 0 */
 582               	.L__stack_usage = 0
 309:./tmk_core/protocol/lufa/lufa.c ****     if (!USB_IsInitialized) {
 583               		.loc 1 309 0
 584 0000 8091 0000 		lds r24,USB_IsInitialized
 585 0004 8111      		cpse r24,__zero_reg__
 586 0006 00C0      		rjmp .L87
 310:./tmk_core/protocol/lufa/lufa.c ****         USB_Disable();
 587               		.loc 1 310 0
 588 0008 0E94 0000 		call USB_Disable
 589               	.LVL62:
 311:./tmk_core/protocol/lufa/lufa.c ****         USB_Init();
 590               		.loc 1 311 0
 591 000c 0E94 0000 		call USB_Init
 592               	.LVL63:
 593               	.LBB158:
 594               	.LBB159:
 595               	.LBB160:
 596               		.file 4 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h"
   1:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /*
   2:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****              LUFA Library
   3:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****      Copyright (C) Dean Camera, 2017.
   4:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
   5:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****            www.lufa-lib.org
   7:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** */
   8:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
   9:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /*
  10:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   Copyright 2017  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  12:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   all copies and that both that the copyright notice and this
  16:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   documentation, and that the name of the author not be used in
  18:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software without specific, written prior permission.
  20:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  21:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   The author disclaims all warranties with regard to this
  22:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software, including all implied warranties of merchantability
  23:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   special, indirect or consequential damages or any damages
  25:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   arising out of or in connection with the use or performance of
  28:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   this software.
  29:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** */
  30:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  31:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /** \file
  32:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  \brief USB Controller Interrupt definitions for the AVR8 microcontrollers.
  33:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *
  34:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  This file contains definitions required for the correct handling of low level USB service routi
  35:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  from the USB controller.
  36:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *
  37:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  38:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  39:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  */
  40:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  41:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** #ifndef __USBINTERRUPT_AVR8_H__
  42:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** #define __USBINTERRUPT_AVR8_H__
  43:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  44:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Includes: */
  45:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#include "../../../../Common/Common.h"
  46:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  47:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  48:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#if defined(__cplusplus)
  49:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			extern "C" {
  50:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#endif
  51:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  52:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Preprocessor Checks: */
  53:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  54:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  55:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#endif
  56:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  57:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Private Interface - For use in library only: */
  58:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	#if !defined(__DOXYGEN__)
  59:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		/* Enums: */
  60:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			enum USB_Interrupts_t
  61:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			{
  62:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || def
  63:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_VBUSTI  = 0,
  64:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  65:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_BOTH) || defined(__DOXYGEN__))
  66:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_IDTI    = 1,
  67:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  68:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_DEVICE) || defined(__DOXYGEN__))
  69:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_WAKEUPI = 2,
  70:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SUSPI   = 3,
  71:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_EORSTI  = 4,
  72:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SOFI    = 5,
  73:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_RXSTPI  = 6,
  74:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  75:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_HOST) || defined(__DOXYGEN__))
  76:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_HSOFI   = 7,
  77:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_DCONNI  = 8,
  78:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_DDISCI  = 9,
  79:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_RSTI    = 10,
  80:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_BCERRI  = 11,
  81:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_VBERRI  = 12,
  82:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SRPI    = 13,
  83:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  84:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			};
  85:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  86:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		/* Inline Functions: */
  87:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			static inline void USB_INT_Enable(const uint8_t Interrupt) ATTR_ALWAYS_INLINE;
  88:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			static inline void USB_INT_Enable(const uint8_t Interrupt)
  89:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			{
  90:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				switch (Interrupt)
  91:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				{
  92:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
  93:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_VBUSTI:
  94:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						USBCON |= (1 << VBUSTE);
  95:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
  96:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#endif
  97:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if defined(USB_CAN_BE_BOTH)
  98:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_IDTI:
  99:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						USBCON |= (1 << IDTE);
 100:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 101:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#endif
 102:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if defined(USB_CAN_BE_DEVICE)
 103:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_WAKEUPI:
 104:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << WAKEUPE);
 105:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 106:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_SUSPI:
 107:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << SUSPE);
 108:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 109:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_EORSTI:
 110:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << EORSTE);
 111:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 112:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_SOFI:
 113:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << SOFE);
 597               		.loc 4 113 0
 598 0010 8091 E200 		lds r24,226
 599 0014 8460      		ori r24,lo8(4)
 600 0016 8093 E200 		sts 226,r24
 601               	.LVL64:
 602               	.L87:
 603 001a 0895      		ret
 604               	.LBE160:
 605               	.LBE159:
 606               	.LBE158:
 607               		.cfi_endproc
 608               	.LFE112:
 610               		.section	.text.EVENT_USB_Device_Disconnect,"ax",@progbits
 611               	.global	EVENT_USB_Device_Disconnect
 613               	EVENT_USB_Device_Disconnect:
 614               	.LFB113:
 321:./tmk_core/protocol/lufa/lufa.c **** {
 615               		.loc 1 321 0
 616               		.cfi_startproc
 617               	/* prologue: function */
 618               	/* frame size = 0 */
 619               	/* stack size = 0 */
 620               	.L__stack_usage = 0
 324:./tmk_core/protocol/lufa/lufa.c ****     USB_IsInitialized = false;
 621               		.loc 1 324 0
 622 0000 1092 0000 		sts USB_IsInitialized,__zero_reg__
 623 0004 0895      		ret
 624               		.cfi_endproc
 625               	.LFE113:
 627               		.section	.text.EVENT_USB_Device_Reset,"ax",@progbits
 628               	.global	EVENT_USB_Device_Reset
 630               	EVENT_USB_Device_Reset:
 631               	.LFB114:
 339:./tmk_core/protocol/lufa/lufa.c **** {
 632               		.loc 1 339 0
 633               		.cfi_startproc
 634               	/* prologue: function */
 635               	/* frame size = 0 */
 636               	/* stack size = 0 */
 637               	.L__stack_usage = 0
 638 0000 0895      		ret
 639               		.cfi_endproc
 640               	.LFE114:
 642               		.section	.text.EVENT_USB_Device_Suspend,"ax",@progbits
 643               	.global	EVENT_USB_Device_Suspend
 645               	EVENT_USB_Device_Suspend:
 646               	.LFB115:
 348:./tmk_core/protocol/lufa/lufa.c **** {
 647               		.loc 1 348 0
 648               		.cfi_startproc
 649               	/* prologue: function */
 650               	/* frame size = 0 */
 651               	/* stack size = 0 */
 652               	.L__stack_usage = 0
 653 0000 0895      		ret
 654               		.cfi_endproc
 655               	.LFE115:
 657               		.section	.text.EVENT_USB_Device_WakeUp,"ax",@progbits
 658               	.global	EVENT_USB_Device_WakeUp
 660               	EVENT_USB_Device_WakeUp:
 661               	.LFB116:
 360:./tmk_core/protocol/lufa/lufa.c **** {
 662               		.loc 1 360 0
 663               		.cfi_startproc
 664               	/* prologue: function */
 665               	/* frame size = 0 */
 666               	/* stack size = 0 */
 667               	.L__stack_usage = 0
 362:./tmk_core/protocol/lufa/lufa.c ****     suspend_wakeup_init();
 668               		.loc 1 362 0
 669 0000 0C94 0000 		jmp suspend_wakeup_init
 670               	.LVL65:
 671               		.cfi_endproc
 672               	.LFE116:
 674               		.section	.text.EVENT_USB_Device_ConfigurationChanged,"ax",@progbits
 675               	.global	EVENT_USB_Device_ConfigurationChanged
 677               	EVENT_USB_Device_ConfigurationChanged:
 678               	.LFB117:
 407:./tmk_core/protocol/lufa/lufa.c **** {
 679               		.loc 1 407 0
 680               		.cfi_startproc
 681               	/* prologue: function */
 682               	/* frame size = 0 */
 683               	/* stack size = 0 */
 684               	.L__stack_usage = 0
 685               	.LVL66:
 686               	.LBB161:
 687               	.LBB162:
 210:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number,
 688               		.loc 2 210 0
 689 0000 42E0      		ldi r20,lo8(2)
 690 0002 61EC      		ldi r22,lo8(-63)
 691 0004 81E0      		ldi r24,lo8(1)
 692 0006 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 693               	.LVL67:
 694               	.LBE162:
 695               	.LBE161:
 696               	.LBB163:
 697               	.LBB164:
 698 000a 42E0      		ldi r20,lo8(2)
 699 000c 61EC      		ldi r22,lo8(-63)
 700 000e 82E0      		ldi r24,lo8(2)
 701 0010 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 702               	.LVL68:
 703               	.LBE164:
 704               	.LBE163:
 705               	.LBB165:
 706               	.LBB166:
 707 0014 42E0      		ldi r20,lo8(2)
 708 0016 61EC      		ldi r22,lo8(-63)
 709 0018 83E0      		ldi r24,lo8(3)
 710 001a 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 711               	.LVL69:
 712               	.LBE166:
 713               	.LBE165:
 714               	.LBB167:
 715               	.LBB168:
 716 001e 42E2      		ldi r20,lo8(34)
 717 0020 61EC      		ldi r22,lo8(-63)
 718 0022 84E0      		ldi r24,lo8(4)
 719 0024 0C94 0000 		jmp Endpoint_ConfigureEndpoint_Prv
 720               	.LVL70:
 721               	.LBE168:
 722               	.LBE167:
 723               		.cfi_endproc
 724               	.LFE117:
 726               		.section	.text.EVENT_USB_Device_ControlRequest,"ax",@progbits
 727               	.global	EVENT_USB_Device_ControlRequest
 729               	EVENT_USB_Device_ControlRequest:
 730               	.LFB118:
 480:./tmk_core/protocol/lufa/lufa.c **** {
 731               		.loc 1 480 0
 732               		.cfi_startproc
 733               	/* prologue: function */
 734               	/* frame size = 0 */
 735               	/* stack size = 0 */
 736               	.L__stack_usage = 0
 737               	.LVL71:
 485:./tmk_core/protocol/lufa/lufa.c ****     switch (USB_ControlRequest.bRequest)
 738               		.loc 1 485 0
 739 0000 8091 0000 		lds r24,USB_ControlRequest+1
 740 0004 8330      		cpi r24,lo8(3)
 741 0006 01F4      		brne .+2
 742 0008 00C0      		rjmp .L96
 743 000a 00F4      		brsh .L97
 744 000c 8130      		cpi r24,lo8(1)
 745 000e 01F0      		breq .L98
 746 0010 8230      		cpi r24,lo8(2)
 747 0012 01F4      		brne .+2
 748 0014 00C0      		rjmp .L99
 749 0016 0895      		ret
 750               	.L97:
 751 0018 8A30      		cpi r24,lo8(10)
 752 001a 01F4      		brne .+2
 753 001c 00C0      		rjmp .L100
 754 001e 8B30      		cpi r24,lo8(11)
 755 0020 01F4      		brne .+2
 756 0022 00C0      		rjmp .L101
 757 0024 8930      		cpi r24,lo8(9)
 758 0026 01F0      		breq .+2
 759 0028 00C0      		rjmp .L94
 760 002a 00C0      		rjmp .L126
 761               	.L98:
 488:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 762               		.loc 1 488 0
 763 002c 8091 0000 		lds r24,USB_ControlRequest
 764 0030 813A      		cpi r24,lo8(-95)
 765 0032 01F0      		breq .+2
 766 0034 00C0      		rjmp .L94
 767               	.LBB169:
 768               	.LBB170:
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 769               		.loc 2 444 0
 770 0036 8091 E800 		lds r24,232
 771 003a 877F      		andi r24,lo8(-9)
 772 003c 8093 E800 		sts 232,r24
 773               	.LBE170:
 774               	.LBE169:
 493:./tmk_core/protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 775               		.loc 1 493 0
 776 0040 8091 0000 		lds r24,USB_ControlRequest+4
 777 0044 9091 0000 		lds r25,USB_ControlRequest+4+1
 778 0048 892B      		or r24,r25
 779 004a 01F0      		breq .L114
 482:./tmk_core/protocol/lufa/lufa.c ****     uint8_t  ReportSize = 0;
 780               		.loc 1 482 0
 781 004c 60E0      		ldi r22,0
 481:./tmk_core/protocol/lufa/lufa.c ****     uint8_t* ReportData = NULL;
 782               		.loc 1 481 0
 783 004e 80E0      		ldi r24,0
 784 0050 90E0      		ldi r25,0
 785 0052 00C0      		rjmp .L105
 786               	.L114:
 497:./tmk_core/protocol/lufa/lufa.c ****                     ReportSize = sizeof(keyboard_report_sent);
 787               		.loc 1 497 0
 788 0054 60E2      		ldi r22,lo8(32)
 496:./tmk_core/protocol/lufa/lufa.c ****                     ReportData = (uint8_t*)&keyboard_report_sent;
 789               		.loc 1 496 0
 790 0056 80E0      		ldi r24,lo8(keyboard_report_sent)
 791 0058 90E0      		ldi r25,hi8(keyboard_report_sent)
 792               	.L105:
 793               	.LVL72:
 502:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
 794               		.loc 1 502 0
 795 005a 70E0      		ldi r23,0
 796 005c 0E94 0000 		call Endpoint_Write_Control_Stream_LE
 797               	.LVL73:
 798               	.LBB171:
 799               	.LBB172:
 457:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 458:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << TXINI);
 459:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 460:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 461:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 462:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Acknowledges an OUT packet to the host on the currently selected endpoint, freeing up the en
 463:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  for the next packet and switching to the alternative endpoint bank if double banked.
 464:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 465:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 466:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 467:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
 468:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void)
 469:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 470:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 471:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 800               		.loc 2 471 0
 801 0060 8091 E800 		lds r24,232
 802 0064 8B77      		andi r24,lo8(123)
 803 0066 8093 E800 		sts 232,r24
 804 006a 0895      		ret
 805               	.LVL74:
 806               	.L126:
 807               	.LBE172:
 808               	.LBE171:
 508:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 809               		.loc 1 508 0
 810 006c 8091 0000 		lds r24,USB_ControlRequest
 811 0070 8132      		cpi r24,lo8(33)
 812 0072 01F0      		breq .+2
 813 0074 00C0      		rjmp .L94
 512:./tmk_core/protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 814               		.loc 1 512 0
 815 0076 8091 0000 		lds r24,USB_ControlRequest+4
 816 007a 9091 0000 		lds r25,USB_ControlRequest+4+1
 817 007e 0097      		sbiw r24,0
 818 0080 01F0      		breq .L107
 819 0082 0397      		sbiw r24,3
 820 0084 01F0      		breq .+2
 821 0086 00C0      		rjmp .L94
 822               	.L107:
 823               	.LBB173:
 824               	.LBB174:
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 825               		.loc 2 444 0
 826 0088 8091 E800 		lds r24,232
 827 008c 877F      		andi r24,lo8(-9)
 828 008e 8093 E800 		sts 232,r24
 829               	.L108:
 830               	.LBE174:
 831               	.LBE173:
 832               	.LBB175:
 833               	.LBB176:
 419:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 834               		.loc 2 419 0 discriminator 1
 835 0092 8091 E800 		lds r24,232
 836               	.LBE176:
 837               	.LBE175:
 519:./tmk_core/protocol/lufa/lufa.c ****                     while (!(Endpoint_IsOUTReceived())) {
 838               		.loc 1 519 0 discriminator 1
 839 0096 82FD      		sbrc r24,2
 840 0098 00C0      		rjmp .L127
 520:./tmk_core/protocol/lufa/lufa.c ****                         if (USB_DeviceState == DEVICE_STATE_Unattached)
 841               		.loc 1 520 0
 842 009a 8091 0000 		lds r24,USB_DeviceState
 843 009e 8111      		cpse r24,__zero_reg__
 844 00a0 00C0      		rjmp .L108
 845 00a2 00C0      		rjmp .L94
 846               	.L127:
 847               	.LBB177:
 848               	.LBB178:
 472:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 473:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << RXOUTI);
 474:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 475:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 476:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 477:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Stalls the current endpoint, indicating to the host that a logical problem occurred with the
 478:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  indicated endpoint and that the current transfer sequence should be aborted. This provides a
 479:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  way for devices to indicate invalid commands to the host so that the current transfer can be
 480:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  aborted and the host can begin its own recovery sequence.
 481:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 482:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  The currently selected endpoint remains stalled until either the \ref Endpoint_ClearStall() 
 483:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is called, or the host issues a CLEAR FEATURE request to the device for the currently select
 484:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint.
 485:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 486:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 487:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 488:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
 489:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void)
 490:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 491:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQ);
 492:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 493:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 494:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears the STALL condition on the currently selected endpoint.
 495:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 496:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 497:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 498:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
 499:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void)
 500:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 501:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQC);
 502:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 503:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 504:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is stalled, \c false otherwise.
 505:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 506:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 507:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 508:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
 509:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 510:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 511:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void)
 512:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 513:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << STALLRQ)) ? true : false);
 514:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 515:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 516:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the data toggle of the currently selected endpoint. */
 517:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
 518:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void)
 519:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 520:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << RSTDT);
 521:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 522:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 523:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sets the direction of the currently selected endpoint.
 524:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 525:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
 526:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 527:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE
 528:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
 529:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 530:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
 531:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 532:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 533:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 534:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 535:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 536:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 537:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
 538:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 539:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 540:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void)
 541:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 542:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEDATX;
 849               		.loc 2 542 0
 850 00a4 8091 F100 		lds r24,241
 851               	.LBE178:
 852               	.LBE177:
 523:./tmk_core/protocol/lufa/lufa.c ****                     keyboard_led_stats = Endpoint_Read_8();
 853               		.loc 1 523 0
 854 00a8 8093 0000 		sts keyboard_led_stats,r24
 855               	.LBB179:
 856               	.LBB180:
 471:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 857               		.loc 2 471 0
 858 00ac 8091 E800 		lds r24,232
 859 00b0 8B77      		andi r24,lo8(123)
 860 00b2 00C0      		rjmp .L124
 861               	.L96:
 862               	.LBE180:
 863               	.LBE179:
 535:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 864               		.loc 1 535 0
 865 00b4 8091 0000 		lds r24,USB_ControlRequest
 866 00b8 813A      		cpi r24,lo8(-95)
 867 00ba 01F0      		breq .+2
 868 00bc 00C0      		rjmp .L94
 537:./tmk_core/protocol/lufa/lufa.c ****                 if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
 869               		.loc 1 537 0
 870 00be 8091 0000 		lds r24,USB_ControlRequest+4
 871 00c2 9091 0000 		lds r25,USB_ControlRequest+4+1
 872 00c6 892B      		or r24,r25
 873 00c8 01F0      		breq .+2
 874 00ca 00C0      		rjmp .L94
 875               	.LBB181:
 876               	.LBB182:
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 877               		.loc 2 444 0
 878 00cc 8091 E800 		lds r24,232
 879 00d0 877F      		andi r24,lo8(-9)
 880 00d2 8093 E800 		sts 232,r24
 881               	.L111:
 882               	.LBE182:
 883               	.LBE181:
 884               	.LBB183:
 885               	.LBB184:
 407:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 886               		.loc 2 407 0 discriminator 1
 887 00d6 8091 E800 		lds r24,232
 888               	.LBE184:
 889               	.LBE183:
 539:./tmk_core/protocol/lufa/lufa.c ****                     while (!(Endpoint_IsINReady()));
 890               		.loc 1 539 0 discriminator 1
 891 00da 80FF      		sbrs r24,0
 892 00dc 00C0      		rjmp .L111
 540:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_Write_8(keyboard_protocol);
 893               		.loc 1 540 0
 894 00de 8091 0000 		lds r24,keyboard_protocol
 895               	.LVL75:
 896 00e2 00C0      		rjmp .L125
 897               	.LVL76:
 898               	.L101:
 548:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 899               		.loc 1 548 0
 900 00e4 8091 0000 		lds r24,USB_ControlRequest
 901 00e8 8132      		cpi r24,lo8(33)
 902 00ea 01F4      		brne .L94
 550:./tmk_core/protocol/lufa/lufa.c ****                 if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
 903               		.loc 1 550 0
 904 00ec 8091 0000 		lds r24,USB_ControlRequest+4
 905 00f0 9091 0000 		lds r25,USB_ControlRequest+4+1
 906 00f4 892B      		or r24,r25
 907 00f6 01F4      		brne .L94
 908               	.LBB185:
 909               	.LBB186:
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 910               		.loc 2 444 0
 911 00f8 8091 E800 		lds r24,232
 912 00fc 877F      		andi r24,lo8(-9)
 913 00fe 8093 E800 		sts 232,r24
 914               	.LBE186:
 915               	.LBE185:
 552:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 916               		.loc 1 552 0
 917 0102 0E94 0000 		call Endpoint_ClearStatusStage
 918               	.LVL77:
 554:./tmk_core/protocol/lufa/lufa.c ****                     keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
 919               		.loc 1 554 0
 920 0106 8091 0000 		lds r24,USB_ControlRequest+2
 921 010a 8093 0000 		sts keyboard_protocol,r24
 555:./tmk_core/protocol/lufa/lufa.c ****                     clear_keyboard();
 922               		.loc 1 555 0
 923 010e 0C94 0000 		jmp clear_keyboard
 924               	.LVL78:
 925               	.L100:
 561:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 926               		.loc 1 561 0
 927 0112 8091 0000 		lds r24,USB_ControlRequest
 928 0116 8132      		cpi r24,lo8(33)
 929 0118 01F4      		brne .L94
 930               	.LBB187:
 931               	.LBB188:
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 932               		.loc 2 444 0
 933 011a 8091 E800 		lds r24,232
 934 011e 877F      		andi r24,lo8(-9)
 935 0120 8093 E800 		sts 232,r24
 936               	.LBE188:
 937               	.LBE187:
 564:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 938               		.loc 1 564 0
 939 0124 0E94 0000 		call Endpoint_ClearStatusStage
 940               	.LVL79:
 566:./tmk_core/protocol/lufa/lufa.c ****                 keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
 941               		.loc 1 566 0
 942 0128 8091 0000 		lds r24,USB_ControlRequest+3
 943 012c 8093 0000 		sts keyboard_idle,r24
 944 0130 0895      		ret
 945               	.L99:
 571:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 946               		.loc 1 571 0
 947 0132 8091 0000 		lds r24,USB_ControlRequest
 948 0136 813A      		cpi r24,lo8(-95)
 949 0138 01F4      		brne .L94
 950               	.LBB189:
 951               	.LBB190:
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 952               		.loc 2 444 0
 953 013a 8091 E800 		lds r24,232
 954 013e 877F      		andi r24,lo8(-9)
 955 0140 8093 E800 		sts 232,r24
 956               	.L113:
 957               	.LBE190:
 958               	.LBE189:
 959               	.LBB191:
 960               	.LBB192:
 407:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 961               		.loc 2 407 0 discriminator 1
 962 0144 8091 E800 		lds r24,232
 963               	.LBE192:
 964               	.LBE191:
 574:./tmk_core/protocol/lufa/lufa.c ****                 while (!(Endpoint_IsINReady()));
 965               		.loc 1 574 0 discriminator 1
 966 0148 80FF      		sbrs r24,0
 967 014a 00C0      		rjmp .L113
 575:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_8(keyboard_idle);
 968               		.loc 1 575 0
 969 014c 8091 0000 		lds r24,keyboard_idle
 970               	.L125:
 971               	.LVL80:
 972               	.LBB193:
 973               	.LBB194:
 543:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 544:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 545:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Writes one byte to the currently selected endpoint's bank, for IN direction endpoints.
 546:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 547:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 548:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 549:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
 550:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 551:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
 552:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data)
 553:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 554:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = Data;
 974               		.loc 2 554 0
 975 0150 8093 F100 		sts 241,r24
 976               	.LBE194:
 977               	.LBE193:
 978               	.LBB195:
 979               	.LBB196:
 456:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 980               		.loc 2 456 0
 981 0154 8091 E800 		lds r24,232
 982               	.LVL81:
 983 0158 8E77      		andi r24,lo8(126)
 984               	.LVL82:
 985               	.L124:
 986 015a 8093 E800 		sts 232,r24
 987               	.LBE196:
 988               	.LBE195:
 577:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 989               		.loc 1 577 0
 990 015e 0C94 0000 		jmp Endpoint_ClearStatusStage
 991               	.LVL83:
 992               	.L94:
 993 0162 0895      		ret
 994               		.cfi_endproc
 995               	.LFE118:
 997               		.section	.text.sendchar,"ax",@progbits
 998               	.global	sendchar
 1000               	sendchar:
 1001               	.LFB124:
 797:./tmk_core/protocol/lufa/lufa.c **** 
 798:./tmk_core/protocol/lufa/lufa.c **** 
 799:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 800:./tmk_core/protocol/lufa/lufa.c ****  * sendchar
 801:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 802:./tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 803:./tmk_core/protocol/lufa/lufa.c **** #define SEND_TIMEOUT 5
 804:./tmk_core/protocol/lufa/lufa.c **** /** \brief Send Char
 805:./tmk_core/protocol/lufa/lufa.c ****  *
 806:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 807:./tmk_core/protocol/lufa/lufa.c ****  */
 808:./tmk_core/protocol/lufa/lufa.c **** int8_t sendchar(uint8_t c)
 809:./tmk_core/protocol/lufa/lufa.c **** {
 810:./tmk_core/protocol/lufa/lufa.c ****     // Not wait once timeouted.
 811:./tmk_core/protocol/lufa/lufa.c ****     // Because sendchar() is called so many times, waiting each call causes big lag.
 812:./tmk_core/protocol/lufa/lufa.c ****     static bool timeouted = false;
 813:./tmk_core/protocol/lufa/lufa.c **** 
 814:./tmk_core/protocol/lufa/lufa.c ****     // prevents Console_Task() from running during sendchar() runs.
 815:./tmk_core/protocol/lufa/lufa.c ****     // or char will be lost. These two function is mutually exclusive.
 816:./tmk_core/protocol/lufa/lufa.c ****     CONSOLE_FLUSH_SET(false);
 817:./tmk_core/protocol/lufa/lufa.c **** 
 818:./tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 819:./tmk_core/protocol/lufa/lufa.c ****         return -1;
 820:./tmk_core/protocol/lufa/lufa.c **** 
 821:./tmk_core/protocol/lufa/lufa.c ****     uint8_t ep = Endpoint_GetCurrentEndpoint();
 822:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
 823:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 824:./tmk_core/protocol/lufa/lufa.c ****         goto ERROR_EXIT;
 825:./tmk_core/protocol/lufa/lufa.c ****     }
 826:./tmk_core/protocol/lufa/lufa.c **** 
 827:./tmk_core/protocol/lufa/lufa.c ****     if (timeouted && !Endpoint_IsReadWriteAllowed()) {
 828:./tmk_core/protocol/lufa/lufa.c ****         goto ERROR_EXIT;
 829:./tmk_core/protocol/lufa/lufa.c ****     }
 830:./tmk_core/protocol/lufa/lufa.c **** 
 831:./tmk_core/protocol/lufa/lufa.c ****     timeouted = false;
 832:./tmk_core/protocol/lufa/lufa.c **** 
 833:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = SEND_TIMEOUT;
 834:./tmk_core/protocol/lufa/lufa.c ****     while (!Endpoint_IsReadWriteAllowed()) {
 835:./tmk_core/protocol/lufa/lufa.c ****         if (USB_DeviceState != DEVICE_STATE_Configured) {
 836:./tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 837:./tmk_core/protocol/lufa/lufa.c ****         }
 838:./tmk_core/protocol/lufa/lufa.c ****         if (Endpoint_IsStalled()) {
 839:./tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 840:./tmk_core/protocol/lufa/lufa.c ****         }
 841:./tmk_core/protocol/lufa/lufa.c ****         if (!(timeout--)) {
 842:./tmk_core/protocol/lufa/lufa.c ****             timeouted = true;
 843:./tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 844:./tmk_core/protocol/lufa/lufa.c ****         }
 845:./tmk_core/protocol/lufa/lufa.c ****         _delay_ms(1);
 846:./tmk_core/protocol/lufa/lufa.c ****     }
 847:./tmk_core/protocol/lufa/lufa.c **** 
 848:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_8(c);
 849:./tmk_core/protocol/lufa/lufa.c **** 
 850:./tmk_core/protocol/lufa/lufa.c ****     // send when bank is full
 851:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) {
 852:./tmk_core/protocol/lufa/lufa.c ****         while (!(Endpoint_IsINReady()));
 853:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 854:./tmk_core/protocol/lufa/lufa.c ****     } else {
 855:./tmk_core/protocol/lufa/lufa.c ****         CONSOLE_FLUSH_SET(true);
 856:./tmk_core/protocol/lufa/lufa.c ****     }
 857:./tmk_core/protocol/lufa/lufa.c **** 
 858:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 859:./tmk_core/protocol/lufa/lufa.c ****     return 0;
 860:./tmk_core/protocol/lufa/lufa.c **** ERROR_EXIT:
 861:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 862:./tmk_core/protocol/lufa/lufa.c ****     return -1;
 863:./tmk_core/protocol/lufa/lufa.c **** }
 864:./tmk_core/protocol/lufa/lufa.c **** #else
 865:./tmk_core/protocol/lufa/lufa.c **** int8_t sendchar(uint8_t c)
 866:./tmk_core/protocol/lufa/lufa.c **** {
 1002               		.loc 1 866 0
 1003               		.cfi_startproc
 1004               	.LVL84:
 1005               	/* prologue: function */
 1006               	/* frame size = 0 */
 1007               	/* stack size = 0 */
 1008               	.L__stack_usage = 0
 867:./tmk_core/protocol/lufa/lufa.c ****     return 0;
 868:./tmk_core/protocol/lufa/lufa.c **** }
 1009               		.loc 1 868 0
 1010 0000 80E0      		ldi r24,0
 1011               	.LVL85:
 1012 0002 0895      		ret
 1013               		.cfi_endproc
 1014               	.LFE124:
 1016               		.section	.text.startup.main,"ax",@progbits
 1017               		.weak	main
 1019               	main:
 1020               	.LFB127:
 869:./tmk_core/protocol/lufa/lufa.c **** #endif
 870:./tmk_core/protocol/lufa/lufa.c **** 
 871:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 872:./tmk_core/protocol/lufa/lufa.c ****  * MIDI
 873:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 874:./tmk_core/protocol/lufa/lufa.c **** 
 875:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 876:./tmk_core/protocol/lufa/lufa.c **** USB_ClassInfo_MIDI_Device_t USB_MIDI_Interface =
 877:./tmk_core/protocol/lufa/lufa.c **** {
 878:./tmk_core/protocol/lufa/lufa.c ****   .Config =
 879:./tmk_core/protocol/lufa/lufa.c ****   {
 880:./tmk_core/protocol/lufa/lufa.c ****     .StreamingInterfaceNumber = AS_INTERFACE,
 881:./tmk_core/protocol/lufa/lufa.c ****     .DataINEndpoint           =
 882:./tmk_core/protocol/lufa/lufa.c ****     {
 883:./tmk_core/protocol/lufa/lufa.c ****       .Address          = MIDI_STREAM_IN_EPADDR,
 884:./tmk_core/protocol/lufa/lufa.c ****       .Size             = MIDI_STREAM_EPSIZE,
 885:./tmk_core/protocol/lufa/lufa.c ****       .Banks            = 1,
 886:./tmk_core/protocol/lufa/lufa.c ****     },
 887:./tmk_core/protocol/lufa/lufa.c ****     .DataOUTEndpoint          =
 888:./tmk_core/protocol/lufa/lufa.c ****     {
 889:./tmk_core/protocol/lufa/lufa.c ****       .Address          = MIDI_STREAM_OUT_EPADDR,
 890:./tmk_core/protocol/lufa/lufa.c ****       .Size             = MIDI_STREAM_EPSIZE,
 891:./tmk_core/protocol/lufa/lufa.c ****       .Banks            = 1,
 892:./tmk_core/protocol/lufa/lufa.c ****     },
 893:./tmk_core/protocol/lufa/lufa.c ****   },
 894:./tmk_core/protocol/lufa/lufa.c **** };
 895:./tmk_core/protocol/lufa/lufa.c **** 
 896:./tmk_core/protocol/lufa/lufa.c **** void send_midi_packet(MIDI_EventPacket_t* event) {
 897:./tmk_core/protocol/lufa/lufa.c ****   MIDI_Device_SendEventPacket(&USB_MIDI_Interface, event);
 898:./tmk_core/protocol/lufa/lufa.c **** }
 899:./tmk_core/protocol/lufa/lufa.c **** 
 900:./tmk_core/protocol/lufa/lufa.c **** bool recv_midi_packet(MIDI_EventPacket_t* const event) {
 901:./tmk_core/protocol/lufa/lufa.c ****   return MIDI_Device_ReceiveEventPacket(&USB_MIDI_Interface, event);
 902:./tmk_core/protocol/lufa/lufa.c **** }
 903:./tmk_core/protocol/lufa/lufa.c **** 
 904:./tmk_core/protocol/lufa/lufa.c **** #endif
 905:./tmk_core/protocol/lufa/lufa.c **** 
 906:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 907:./tmk_core/protocol/lufa/lufa.c ****  * VIRTUAL SERIAL
 908:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 909:./tmk_core/protocol/lufa/lufa.c **** 
 910:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 911:./tmk_core/protocol/lufa/lufa.c **** /** \brief Virtual Serial Init
 912:./tmk_core/protocol/lufa/lufa.c ****  *
 913:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 914:./tmk_core/protocol/lufa/lufa.c ****  */
 915:./tmk_core/protocol/lufa/lufa.c **** void virtser_init(void)
 916:./tmk_core/protocol/lufa/lufa.c **** {
 917:./tmk_core/protocol/lufa/lufa.c ****   cdc_device.State.ControlLineStates.DeviceToHost = CDC_CONTROL_LINE_IN_DSR ;
 918:./tmk_core/protocol/lufa/lufa.c ****   CDC_Device_SendControlLineStateChange(&cdc_device);
 919:./tmk_core/protocol/lufa/lufa.c **** }
 920:./tmk_core/protocol/lufa/lufa.c **** 
 921:./tmk_core/protocol/lufa/lufa.c **** /** \brief Virtual Serial Receive
 922:./tmk_core/protocol/lufa/lufa.c ****  *
 923:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 924:./tmk_core/protocol/lufa/lufa.c ****  */
 925:./tmk_core/protocol/lufa/lufa.c **** void virtser_recv(uint8_t c) __attribute__ ((weak));
 926:./tmk_core/protocol/lufa/lufa.c **** void virtser_recv(uint8_t c)
 927:./tmk_core/protocol/lufa/lufa.c **** {
 928:./tmk_core/protocol/lufa/lufa.c ****   // Ignore by default
 929:./tmk_core/protocol/lufa/lufa.c **** }
 930:./tmk_core/protocol/lufa/lufa.c **** 
 931:./tmk_core/protocol/lufa/lufa.c **** /** \brief Virtual Serial Task
 932:./tmk_core/protocol/lufa/lufa.c ****  *
 933:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 934:./tmk_core/protocol/lufa/lufa.c ****  */
 935:./tmk_core/protocol/lufa/lufa.c **** void virtser_task(void)
 936:./tmk_core/protocol/lufa/lufa.c **** {
 937:./tmk_core/protocol/lufa/lufa.c ****   uint16_t count = CDC_Device_BytesReceived(&cdc_device);
 938:./tmk_core/protocol/lufa/lufa.c ****   uint8_t ch;
 939:./tmk_core/protocol/lufa/lufa.c ****   if (count)
 940:./tmk_core/protocol/lufa/lufa.c ****   {
 941:./tmk_core/protocol/lufa/lufa.c ****     ch = CDC_Device_ReceiveByte(&cdc_device);
 942:./tmk_core/protocol/lufa/lufa.c ****     virtser_recv(ch);
 943:./tmk_core/protocol/lufa/lufa.c ****   }
 944:./tmk_core/protocol/lufa/lufa.c **** }
 945:./tmk_core/protocol/lufa/lufa.c **** /** \brief Virtual Serial Send
 946:./tmk_core/protocol/lufa/lufa.c ****  *
 947:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 948:./tmk_core/protocol/lufa/lufa.c ****  */
 949:./tmk_core/protocol/lufa/lufa.c **** void virtser_send(const uint8_t byte)
 950:./tmk_core/protocol/lufa/lufa.c **** {
 951:./tmk_core/protocol/lufa/lufa.c ****   uint8_t timeout = 255;
 952:./tmk_core/protocol/lufa/lufa.c ****   uint8_t ep = Endpoint_GetCurrentEndpoint();
 953:./tmk_core/protocol/lufa/lufa.c **** 
 954:./tmk_core/protocol/lufa/lufa.c ****   if (cdc_device.State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR)
 955:./tmk_core/protocol/lufa/lufa.c ****   {
 956:./tmk_core/protocol/lufa/lufa.c ****     /* IN packet */
 957:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(cdc_device.Config.DataINEndpoint.Address);
 958:./tmk_core/protocol/lufa/lufa.c **** 
 959:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 960:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
 961:./tmk_core/protocol/lufa/lufa.c ****         return;
 962:./tmk_core/protocol/lufa/lufa.c ****     }
 963:./tmk_core/protocol/lufa/lufa.c **** 
 964:./tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 965:./tmk_core/protocol/lufa/lufa.c **** 
 966:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_8(byte);
 967:./tmk_core/protocol/lufa/lufa.c ****     CDC_Device_Flush(&cdc_device);
 968:./tmk_core/protocol/lufa/lufa.c **** 
 969:./tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsINReady()) {
 970:./tmk_core/protocol/lufa/lufa.c ****       Endpoint_ClearIN();
 971:./tmk_core/protocol/lufa/lufa.c ****     }
 972:./tmk_core/protocol/lufa/lufa.c **** 
 973:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 974:./tmk_core/protocol/lufa/lufa.c ****   }
 975:./tmk_core/protocol/lufa/lufa.c **** }
 976:./tmk_core/protocol/lufa/lufa.c **** #endif
 977:./tmk_core/protocol/lufa/lufa.c **** 
 978:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 979:./tmk_core/protocol/lufa/lufa.c ****  * main
 980:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 981:./tmk_core/protocol/lufa/lufa.c **** /** \brief Setup MCU
 982:./tmk_core/protocol/lufa/lufa.c ****  *
 983:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 984:./tmk_core/protocol/lufa/lufa.c ****  */
 985:./tmk_core/protocol/lufa/lufa.c **** static void setup_mcu(void)
 986:./tmk_core/protocol/lufa/lufa.c **** {
 987:./tmk_core/protocol/lufa/lufa.c ****     /* Disable watchdog if enabled by bootloader/fuses */
 988:./tmk_core/protocol/lufa/lufa.c ****     MCUSR &= ~(1 << WDRF);
 989:./tmk_core/protocol/lufa/lufa.c ****     wdt_disable();
 990:./tmk_core/protocol/lufa/lufa.c **** 
 991:./tmk_core/protocol/lufa/lufa.c ****     /* Disable clock division */
 992:./tmk_core/protocol/lufa/lufa.c ****     // clock_prescale_set(clock_div_1);
 993:./tmk_core/protocol/lufa/lufa.c **** 
 994:./tmk_core/protocol/lufa/lufa.c ****     CLKPR = (1 << CLKPCE);
 995:./tmk_core/protocol/lufa/lufa.c ****     CLKPR = (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0);
 996:./tmk_core/protocol/lufa/lufa.c **** }
 997:./tmk_core/protocol/lufa/lufa.c **** 
 998:./tmk_core/protocol/lufa/lufa.c **** /** \brief Setup USB
 999:./tmk_core/protocol/lufa/lufa.c ****  *
1000:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
1001:./tmk_core/protocol/lufa/lufa.c ****  */
1002:./tmk_core/protocol/lufa/lufa.c **** static void setup_usb(void)
1003:./tmk_core/protocol/lufa/lufa.c **** {
1004:./tmk_core/protocol/lufa/lufa.c ****     // Leonardo needs. Without this USB device is not recognized.
1005:./tmk_core/protocol/lufa/lufa.c ****     USB_Disable();
1006:./tmk_core/protocol/lufa/lufa.c **** 
1007:./tmk_core/protocol/lufa/lufa.c ****     USB_Init();
1008:./tmk_core/protocol/lufa/lufa.c **** 
1009:./tmk_core/protocol/lufa/lufa.c ****     // for Console_Task
1010:./tmk_core/protocol/lufa/lufa.c ****     USB_Device_EnableSOFEvents();
1011:./tmk_core/protocol/lufa/lufa.c ****     print_set_sendchar(sendchar);
1012:./tmk_core/protocol/lufa/lufa.c **** }
1013:./tmk_core/protocol/lufa/lufa.c **** 
1014:./tmk_core/protocol/lufa/lufa.c **** /** \brief Main
1015:./tmk_core/protocol/lufa/lufa.c ****  *
1016:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
1017:./tmk_core/protocol/lufa/lufa.c ****  */
1018:./tmk_core/protocol/lufa/lufa.c **** int main(void)  __attribute__ ((weak));
1019:./tmk_core/protocol/lufa/lufa.c **** int main(void)
1020:./tmk_core/protocol/lufa/lufa.c **** {
 1021               		.loc 1 1020 0
 1022               		.cfi_startproc
 1023               	/* prologue: function */
 1024               	/* frame size = 0 */
 1025               	/* stack size = 0 */
 1026               	.L__stack_usage = 0
 1027               	.LBB204:
 1028               	.LBB205:
 988:./tmk_core/protocol/lufa/lufa.c ****     MCUSR &= ~(1 << WDRF);
 1029               		.loc 1 988 0
 1030 0000 84B7      		in r24,0x34
 1031 0002 877F      		andi r24,lo8(-9)
 1032 0004 84BF      		out 0x34,r24
 989:./tmk_core/protocol/lufa/lufa.c ****     wdt_disable();
 1033               		.loc 1 989 0
 1034 0006 88E1      		ldi r24,lo8(24)
 1035               	/* #APP */
 1036               	 ;  989 "./tmk_core/protocol/lufa/lufa.c" 1
 1037 0008 0FB6      		in __tmp_reg__, __SREG__
 1038 000a F894      		cli
 1039 000c 8093 6000 		sts 96, r24
 1040 0010 1092 6000 		sts 96, __zero_reg__
 1041 0014 0FBE      		out __SREG__,__tmp_reg__
 1042               		
 1043               	 ;  0 "" 2
 994:./tmk_core/protocol/lufa/lufa.c ****     CLKPR = (1 << CLKPCE);
 1044               		.loc 1 994 0
 1045               	/* #NOAPP */
 1046 0016 80E8      		ldi r24,lo8(-128)
 1047 0018 8093 6100 		sts 97,r24
 995:./tmk_core/protocol/lufa/lufa.c ****     CLKPR = (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0);
 1048               		.loc 1 995 0
 1049 001c 1092 6100 		sts 97,__zero_reg__
 1050               	.LBE205:
 1051               	.LBE204:
1021:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
1022:./tmk_core/protocol/lufa/lufa.c ****     setup_midi();
1023:./tmk_core/protocol/lufa/lufa.c **** #endif
1024:./tmk_core/protocol/lufa/lufa.c **** 
1025:./tmk_core/protocol/lufa/lufa.c ****     setup_mcu();
1026:./tmk_core/protocol/lufa/lufa.c ****     keyboard_setup();
 1052               		.loc 1 1026 0
 1053 0020 0E94 0000 		call keyboard_setup
 1054               	.LVL86:
 1055               	.LBB206:
 1056               	.LBB207:
1005:./tmk_core/protocol/lufa/lufa.c ****     USB_Disable();
 1057               		.loc 1 1005 0
 1058 0024 0E94 0000 		call USB_Disable
 1059               	.LVL87:
1007:./tmk_core/protocol/lufa/lufa.c ****     USB_Init();
 1060               		.loc 1 1007 0
 1061 0028 0E94 0000 		call USB_Init
 1062               	.LVL88:
 1063               	.LBB208:
 1064               	.LBB209:
 1065               	.LBB210:
 1066               		.loc 4 113 0
 1067 002c 8091 E200 		lds r24,226
 1068 0030 8460      		ori r24,lo8(4)
 1069 0032 8093 E200 		sts 226,r24
 1070               	.LBE210:
 1071               	.LBE209:
 1072               	.LBE208:
 1073               	.LBE207:
 1074               	.LBE206:
1027:./tmk_core/protocol/lufa/lufa.c ****     setup_usb();
1028:./tmk_core/protocol/lufa/lufa.c ****     sei();
 1075               		.loc 1 1028 0
 1076               	/* #APP */
 1077               	 ;  1028 "./tmk_core/protocol/lufa/lufa.c" 1
 1078 0036 7894      		sei
 1079               	 ;  0 "" 2
1029:./tmk_core/protocol/lufa/lufa.c **** 
1030:./tmk_core/protocol/lufa/lufa.c **** #if defined(MODULE_ADAFRUIT_EZKEY) || defined(MODULE_RN42)
1031:./tmk_core/protocol/lufa/lufa.c ****     serial_init();
1032:./tmk_core/protocol/lufa/lufa.c **** #endif
1033:./tmk_core/protocol/lufa/lufa.c **** 
1034:./tmk_core/protocol/lufa/lufa.c ****     /* wait for USB startup & debug output */
1035:./tmk_core/protocol/lufa/lufa.c **** 
1036:./tmk_core/protocol/lufa/lufa.c **** #ifdef WAIT_FOR_USB
1037:./tmk_core/protocol/lufa/lufa.c ****     while (USB_DeviceState != DEVICE_STATE_Configured) {
1038:./tmk_core/protocol/lufa/lufa.c ****     #if defined(INTERRUPT_CONTROL_ENDPOINT)
1039:./tmk_core/protocol/lufa/lufa.c ****             ;
1040:./tmk_core/protocol/lufa/lufa.c ****     #else
1041:./tmk_core/protocol/lufa/lufa.c ****             USB_USBTask();
1042:./tmk_core/protocol/lufa/lufa.c ****     #endif
1043:./tmk_core/protocol/lufa/lufa.c ****     }
1044:./tmk_core/protocol/lufa/lufa.c ****     print("USB configured.\n");
1045:./tmk_core/protocol/lufa/lufa.c **** #else
1046:./tmk_core/protocol/lufa/lufa.c ****     USB_USBTask();
 1080               		.loc 1 1046 0
 1081               	/* #NOAPP */
 1082 0038 0E94 0000 		call USB_USBTask
 1083               	.LVL89:
1047:./tmk_core/protocol/lufa/lufa.c **** #endif
1048:./tmk_core/protocol/lufa/lufa.c ****     /* init modules */
1049:./tmk_core/protocol/lufa/lufa.c ****     keyboard_init();
 1084               		.loc 1 1049 0
 1085 003c 0E94 0000 		call keyboard_init
 1086               	.LVL90:
1050:./tmk_core/protocol/lufa/lufa.c ****     host_set_driver(&lufa_driver);
 1087               		.loc 1 1050 0
 1088 0040 80E0      		ldi r24,lo8(lufa_driver)
 1089 0042 90E0      		ldi r25,hi8(lufa_driver)
 1090 0044 0E94 0000 		call host_set_driver
 1091               	.LVL91:
 1092               	.L130:
1051:./tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
1052:./tmk_core/protocol/lufa/lufa.c ****     sleep_led_init();
1053:./tmk_core/protocol/lufa/lufa.c **** #endif
1054:./tmk_core/protocol/lufa/lufa.c **** 
1055:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
1056:./tmk_core/protocol/lufa/lufa.c ****     virtser_init();
1057:./tmk_core/protocol/lufa/lufa.c **** #endif
1058:./tmk_core/protocol/lufa/lufa.c **** 
1059:./tmk_core/protocol/lufa/lufa.c ****     print("Keyboard start.\n");
1060:./tmk_core/protocol/lufa/lufa.c ****     while (1) {
1061:./tmk_core/protocol/lufa/lufa.c ****         #if !defined(NO_USB_STARTUP_CHECK)
1062:./tmk_core/protocol/lufa/lufa.c ****         while (USB_DeviceState == DEVICE_STATE_Suspended) {
 1093               		.loc 1 1062 0 discriminator 1
 1094 0048 8091 0000 		lds r24,USB_DeviceState
 1095 004c 8530      		cpi r24,lo8(5)
 1096 004e 01F4      		brne .L138
1063:./tmk_core/protocol/lufa/lufa.c ****             print("[s]");
1064:./tmk_core/protocol/lufa/lufa.c ****             suspend_power_down();
 1097               		.loc 1 1064 0
 1098 0050 0E94 0000 		call suspend_power_down
 1099               	.LVL92:
1065:./tmk_core/protocol/lufa/lufa.c ****             if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
 1100               		.loc 1 1065 0
 1101 0054 8091 0000 		lds r24,USB_Device_RemoteWakeupEnabled
 1102 0058 8823      		tst r24
 1103 005a 01F0      		breq .L130
 1104               		.loc 1 1065 0 is_stmt 0 discriminator 1
 1105 005c 0E94 0000 		call suspend_wakeup_condition
 1106               	.LVL93:
 1107 0060 8823      		tst r24
 1108 0062 01F0      		breq .L130
1066:./tmk_core/protocol/lufa/lufa.c ****                     USB_Device_SendRemoteWakeup();
 1109               		.loc 1 1066 0 is_stmt 1
 1110 0064 0E94 0000 		call USB_Device_SendRemoteWakeup
 1111               	.LVL94:
 1112 0068 00C0      		rjmp .L130
 1113               	.L138:
1067:./tmk_core/protocol/lufa/lufa.c ****             }
1068:./tmk_core/protocol/lufa/lufa.c ****         }
1069:./tmk_core/protocol/lufa/lufa.c ****         #endif
1070:./tmk_core/protocol/lufa/lufa.c **** 
1071:./tmk_core/protocol/lufa/lufa.c ****         keyboard_task();
 1114               		.loc 1 1071 0
 1115 006a 0E94 0000 		call keyboard_task
 1116               	.LVL95:
1072:./tmk_core/protocol/lufa/lufa.c **** 
1073:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
1074:./tmk_core/protocol/lufa/lufa.c ****         MIDI_Device_USBTask(&USB_MIDI_Interface);
1075:./tmk_core/protocol/lufa/lufa.c **** #endif
1076:./tmk_core/protocol/lufa/lufa.c **** 
1077:./tmk_core/protocol/lufa/lufa.c **** #if defined(RGBLIGHT_ANIMATIONS) & defined(RGBLIGHT_ENABLE)
1078:./tmk_core/protocol/lufa/lufa.c ****         rgblight_task();
 1117               		.loc 1 1078 0
 1118 006e 0E94 0000 		call rgblight_task
 1119               	.LVL96:
1079:./tmk_core/protocol/lufa/lufa.c **** #endif
1080:./tmk_core/protocol/lufa/lufa.c **** 
1081:./tmk_core/protocol/lufa/lufa.c **** #ifdef MODULE_ADAFRUIT_BLE
1082:./tmk_core/protocol/lufa/lufa.c ****         adafruit_ble_task();
1083:./tmk_core/protocol/lufa/lufa.c **** #endif
1084:./tmk_core/protocol/lufa/lufa.c **** 
1085:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
1086:./tmk_core/protocol/lufa/lufa.c ****         virtser_task();
1087:./tmk_core/protocol/lufa/lufa.c ****         CDC_Device_USBTask(&cdc_device);
1088:./tmk_core/protocol/lufa/lufa.c **** #endif
1089:./tmk_core/protocol/lufa/lufa.c **** 
1090:./tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
1091:./tmk_core/protocol/lufa/lufa.c ****         raw_hid_task();
1092:./tmk_core/protocol/lufa/lufa.c **** #endif
1093:./tmk_core/protocol/lufa/lufa.c **** 
1094:./tmk_core/protocol/lufa/lufa.c **** #if !defined(INTERRUPT_CONTROL_ENDPOINT)
1095:./tmk_core/protocol/lufa/lufa.c ****         USB_USBTask();
1096:./tmk_core/protocol/lufa/lufa.c **** #endif
1097:./tmk_core/protocol/lufa/lufa.c **** 
1098:./tmk_core/protocol/lufa/lufa.c ****     }
 1120               		.loc 1 1098 0
 1121 0072 00C0      		rjmp .L130
 1122               		.cfi_endproc
 1123               	.LFE127:
 1125               		.section	.text.CALLBACK_USB_GetDescriptor,"ax",@progbits
 1126               	.global	CALLBACK_USB_GetDescriptor
 1128               	CALLBACK_USB_GetDescriptor:
 1129               	.LFB128:
1099:./tmk_core/protocol/lufa/lufa.c **** }
1100:./tmk_core/protocol/lufa/lufa.c **** 
1101:./tmk_core/protocol/lufa/lufa.c **** uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
1102:./tmk_core/protocol/lufa/lufa.c ****                                     const uint16_t wIndex,
1103:./tmk_core/protocol/lufa/lufa.c ****                                     const void** const DescriptorAddress)
1104:./tmk_core/protocol/lufa/lufa.c **** {
 1130               		.loc 1 1104 0
 1131               		.cfi_startproc
 1132               	.LVL97:
 1133               	/* prologue: function */
 1134               	/* frame size = 0 */
 1135               	/* stack size = 0 */
 1136               	.L__stack_usage = 0
1105:./tmk_core/protocol/lufa/lufa.c ****   return get_usb_descriptor(wValue, wIndex, DescriptorAddress);
 1137               		.loc 1 1105 0
 1138 0000 0C94 0000 		jmp get_usb_descriptor
 1139               	.LVL98:
 1140               		.cfi_endproc
 1141               	.LFE128:
 1143               	.global	lufa_driver
 1144               		.section	.data.lufa_driver,"aw",@progbits
 1147               	lufa_driver:
 1148 0000 0000      		.word	gs(keyboard_leds)
 1149 0002 0000      		.word	gs(send_keyboard)
 1150 0004 0000      		.word	gs(send_mouse)
 1151 0006 0000      		.word	gs(send_system)
 1152 0008 0000      		.word	gs(send_consumer)
 1153               		.section	.bss.keyboard_report_sent,"aw",@nobits
 1156               	keyboard_report_sent:
 1157 0000 0000 0000 		.zero	32
 1157      0000 0000 
 1157      0000 0000 
 1157      0000 0000 
 1157      0000 0000 
 1158               		.section	.bss.keyboard_led_stats,"aw",@nobits
 1161               	keyboard_led_stats:
 1162 0000 00        		.zero	1
 1163               	.global	keyboard_protocol
 1164               		.section	.data.keyboard_protocol,"aw",@progbits
 1167               	keyboard_protocol:
 1168 0000 01        		.byte	1
 1169               	.global	keyboard_idle
 1170               		.section	.bss.keyboard_idle,"aw",@nobits
 1173               	keyboard_idle:
 1174 0000 00        		.zero	1
 1175               		.text
 1176               	.Letext0:
 1177               		.file 5 "/usr/lib/avr/include/stdint.h"
 1178               		.file 6 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../Device.h"
 1179               		.file 7 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 1180               		.file 8 "./lib/lufa/LUFA/Drivers/USB/Class/Device/../Common/HIDClassCommon.h"
 1181               		.file 9 "./tmk_core/common/report.h"
 1182               		.file 10 "./tmk_core/common/host_driver.h"
 1183               		.file 11 "./tmk_core/protocol/lufa/lufa.h"
 1184               		.file 12 "./quantum/keycode_config.h"
 1185               		.file 13 "./tmk_core/protocol/lufa/outputselect.h"
 1186               		.file 14 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h"
 1187               		.file 15 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 1188               		.file 16 "./lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 1189               		.file 17 "./tmk_core/common/action_util.h"
 1190               		.file 18 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h"
 1191               		.file 19 "./tmk_core/common/suspend.h"
 1192               		.file 20 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/EndpointStream_AVR8.h"
 1193               		.file 21 "./tmk_core/common/action.h"
 1194               		.file 22 "./tmk_core/common/keyboard.h"
 1195               		.file 23 "./quantum/rgblight.h"
 1196               		.file 24 "./tmk_core/common/host.h"
 1197               		.file 25 "./tmk_core/protocol/usb_descriptor.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 lufa.c
     /tmp/ccXKFd7a.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccXKFd7a.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccXKFd7a.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccXKFd7a.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccXKFd7a.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccXKFd7a.s:12     .text.keyboard_leds:0000000000000000 keyboard_leds
     /tmp/ccXKFd7a.s:1161   .bss.keyboard_led_stats:0000000000000000 keyboard_led_stats
     /tmp/ccXKFd7a.s:29     .text.send_consumer:0000000000000000 send_consumer
     /tmp/ccXKFd7a.s:164    .text.send_system:0000000000000000 send_system
     /tmp/ccXKFd7a.s:285    .text.send_mouse:0000000000000000 send_mouse
     /tmp/ccXKFd7a.s:392    .text.send_keyboard:0000000000000000 send_keyboard
     /tmp/ccXKFd7a.s:1167   .data.keyboard_protocol:0000000000000000 keyboard_protocol
     /tmp/ccXKFd7a.s:1156   .bss.keyboard_report_sent:0000000000000000 keyboard_report_sent
     /tmp/ccXKFd7a.s:575    .text.EVENT_USB_Device_Connect:0000000000000000 EVENT_USB_Device_Connect
     /tmp/ccXKFd7a.s:613    .text.EVENT_USB_Device_Disconnect:0000000000000000 EVENT_USB_Device_Disconnect
     /tmp/ccXKFd7a.s:630    .text.EVENT_USB_Device_Reset:0000000000000000 EVENT_USB_Device_Reset
     /tmp/ccXKFd7a.s:645    .text.EVENT_USB_Device_Suspend:0000000000000000 EVENT_USB_Device_Suspend
     /tmp/ccXKFd7a.s:660    .text.EVENT_USB_Device_WakeUp:0000000000000000 EVENT_USB_Device_WakeUp
     /tmp/ccXKFd7a.s:677    .text.EVENT_USB_Device_ConfigurationChanged:0000000000000000 EVENT_USB_Device_ConfigurationChanged
     /tmp/ccXKFd7a.s:729    .text.EVENT_USB_Device_ControlRequest:0000000000000000 EVENT_USB_Device_ControlRequest
     /tmp/ccXKFd7a.s:1173   .bss.keyboard_idle:0000000000000000 keyboard_idle
     /tmp/ccXKFd7a.s:1000   .text.sendchar:0000000000000000 sendchar
     /tmp/ccXKFd7a.s:1019   .text.startup.main:0000000000000000 main
     /tmp/ccXKFd7a.s:1147   .data.lufa_driver:0000000000000000 lufa_driver
     /tmp/ccXKFd7a.s:1128   .text.CALLBACK_USB_GetDescriptor:0000000000000000 CALLBACK_USB_GetDescriptor

UNDEFINED SYMBOLS
where_to_send
Endpoint_Write_Stream_LE
USB_DeviceState
keymap_config
USB_IsInitialized
USB_Disable
USB_Init
suspend_wakeup_init
Endpoint_ConfigureEndpoint_Prv
USB_ControlRequest
Endpoint_Write_Control_Stream_LE
Endpoint_ClearStatusStage
clear_keyboard
keyboard_setup
USB_USBTask
keyboard_init
host_set_driver
suspend_power_down
USB_Device_RemoteWakeupEnabled
suspend_wakeup_condition
USB_Device_SendRemoteWakeup
keyboard_task
rgblight_task
get_usb_descriptor
__do_copy_data
__do_clear_bss
