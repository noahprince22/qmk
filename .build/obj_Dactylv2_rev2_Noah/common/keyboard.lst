   1               		.file	"keyboard.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.matrix_setup,"ax",@progbits
  11               		.weak	matrix_setup
  13               	matrix_setup:
  14               	.LFB4:
  15               		.file 1 "./tmk_core/common/keyboard.c"
   1:./tmk_core/common/keyboard.c **** /*
   2:./tmk_core/common/keyboard.c **** Copyright 2011, 2012, 2013 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/keyboard.c **** 
   4:./tmk_core/common/keyboard.c **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/keyboard.c **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/keyboard.c **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/keyboard.c **** (at your option) any later version.
   8:./tmk_core/common/keyboard.c **** 
   9:./tmk_core/common/keyboard.c **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/keyboard.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/keyboard.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/keyboard.c **** GNU General Public License for more details.
  13:./tmk_core/common/keyboard.c **** 
  14:./tmk_core/common/keyboard.c **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/keyboard.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/keyboard.c **** */
  17:./tmk_core/common/keyboard.c **** 
  18:./tmk_core/common/keyboard.c **** #include <stdint.h>
  19:./tmk_core/common/keyboard.c **** #include "keyboard.h"
  20:./tmk_core/common/keyboard.c **** #include "matrix.h"
  21:./tmk_core/common/keyboard.c **** #include "keymap.h"
  22:./tmk_core/common/keyboard.c **** #include "host.h"
  23:./tmk_core/common/keyboard.c **** #include "led.h"
  24:./tmk_core/common/keyboard.c **** #include "keycode.h"
  25:./tmk_core/common/keyboard.c **** #include "timer.h"
  26:./tmk_core/common/keyboard.c **** #include "print.h"
  27:./tmk_core/common/keyboard.c **** #include "debug.h"
  28:./tmk_core/common/keyboard.c **** #include "command.h"
  29:./tmk_core/common/keyboard.c **** #include "util.h"
  30:./tmk_core/common/keyboard.c **** #include "sendchar.h"
  31:./tmk_core/common/keyboard.c **** #include "eeconfig.h"
  32:./tmk_core/common/keyboard.c **** #include "backlight.h"
  33:./tmk_core/common/keyboard.c **** #include "action_layer.h"
  34:./tmk_core/common/keyboard.c **** #ifdef BOOTMAGIC_ENABLE
  35:./tmk_core/common/keyboard.c **** #   include "bootmagic.h"
  36:./tmk_core/common/keyboard.c **** #else
  37:./tmk_core/common/keyboard.c **** #   include "magic.h"
  38:./tmk_core/common/keyboard.c **** #endif
  39:./tmk_core/common/keyboard.c **** #ifdef MOUSEKEY_ENABLE
  40:./tmk_core/common/keyboard.c **** #   include "mousekey.h"
  41:./tmk_core/common/keyboard.c **** #endif
  42:./tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
  43:./tmk_core/common/keyboard.c **** #   include "ps2_mouse.h"
  44:./tmk_core/common/keyboard.c **** #endif
  45:./tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
  46:./tmk_core/common/keyboard.c **** #   include "serial_mouse.h"
  47:./tmk_core/common/keyboard.c **** #endif
  48:./tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
  49:./tmk_core/common/keyboard.c **** #   include "adb.h"
  50:./tmk_core/common/keyboard.c **** #endif
  51:./tmk_core/common/keyboard.c **** #ifdef RGBLIGHT_ENABLE
  52:./tmk_core/common/keyboard.c **** #   include "rgblight.h"
  53:./tmk_core/common/keyboard.c **** #endif
  54:./tmk_core/common/keyboard.c **** #ifdef STENO_ENABLE
  55:./tmk_core/common/keyboard.c **** #   include "process_steno.h"
  56:./tmk_core/common/keyboard.c **** #endif
  57:./tmk_core/common/keyboard.c **** #ifdef FAUXCLICKY_ENABLE
  58:./tmk_core/common/keyboard.c **** #   include "fauxclicky.h"
  59:./tmk_core/common/keyboard.c **** #endif
  60:./tmk_core/common/keyboard.c **** #ifdef SERIAL_LINK_ENABLE
  61:./tmk_core/common/keyboard.c **** #   include "serial_link/system/serial_link.h"
  62:./tmk_core/common/keyboard.c **** #endif
  63:./tmk_core/common/keyboard.c **** #ifdef VISUALIZER_ENABLE
  64:./tmk_core/common/keyboard.c **** #   include "visualizer/visualizer.h"
  65:./tmk_core/common/keyboard.c **** #endif
  66:./tmk_core/common/keyboard.c **** #ifdef POINTING_DEVICE_ENABLE
  67:./tmk_core/common/keyboard.c **** #   include "pointing_device.h"
  68:./tmk_core/common/keyboard.c **** #endif
  69:./tmk_core/common/keyboard.c **** #ifdef MIDI_ENABLE
  70:./tmk_core/common/keyboard.c **** #   include "process_midi.h"
  71:./tmk_core/common/keyboard.c **** #endif
  72:./tmk_core/common/keyboard.c **** 
  73:./tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
  74:./tmk_core/common/keyboard.c **** extern const uint16_t keymaps[][MATRIX_ROWS][MATRIX_COLS];
  75:./tmk_core/common/keyboard.c **** static matrix_row_t get_real_keys(uint8_t row, matrix_row_t rowdata){
  76:./tmk_core/common/keyboard.c ****     matrix_row_t out = 0;
  77:./tmk_core/common/keyboard.c ****     for (uint8_t col = 0; col < MATRIX_COLS; col++) {
  78:./tmk_core/common/keyboard.c ****         //read each key in the row data and check if the keymap defines it as a real key
  79:./tmk_core/common/keyboard.c ****         if (pgm_read_byte(&keymaps[0][row][col]) && (rowdata & (1<<col))){
  80:./tmk_core/common/keyboard.c ****             //this creates new row data, if a key is defined in the keymap, it will be set here
  81:./tmk_core/common/keyboard.c ****             out |= 1<<col;
  82:./tmk_core/common/keyboard.c ****         }
  83:./tmk_core/common/keyboard.c ****     }
  84:./tmk_core/common/keyboard.c ****     return out;
  85:./tmk_core/common/keyboard.c **** }
  86:./tmk_core/common/keyboard.c **** 
  87:./tmk_core/common/keyboard.c **** static inline bool popcount_more_than_one(matrix_row_t rowdata)
  88:./tmk_core/common/keyboard.c **** {
  89:./tmk_core/common/keyboard.c ****     rowdata &= rowdata-1; //if there are less than two bits (keys) set, rowdata will become zero
  90:./tmk_core/common/keyboard.c ****     return rowdata;
  91:./tmk_core/common/keyboard.c **** }
  92:./tmk_core/common/keyboard.c **** 
  93:./tmk_core/common/keyboard.c **** static inline bool has_ghost_in_row(uint8_t row, matrix_row_t rowdata)
  94:./tmk_core/common/keyboard.c **** {
  95:./tmk_core/common/keyboard.c ****     /* No ghost exists when less than 2 keys are down on the row.
  96:./tmk_core/common/keyboard.c ****     If there are "active" blanks in the matrix, the key can't be pressed by the user,
  97:./tmk_core/common/keyboard.c ****     there is no doubt as to which keys are really being pressed.
  98:./tmk_core/common/keyboard.c ****     The ghosts will be ignored, they are KC_NO.   */
  99:./tmk_core/common/keyboard.c ****     rowdata = get_real_keys(row, rowdata);
 100:./tmk_core/common/keyboard.c ****     if ((popcount_more_than_one(rowdata)) == 0){
 101:./tmk_core/common/keyboard.c ****         return false;
 102:./tmk_core/common/keyboard.c ****     }
 103:./tmk_core/common/keyboard.c ****     /* Ghost occurs when the row shares a column line with other row,
 104:./tmk_core/common/keyboard.c ****     and two columns are read on each row. Blanks in the matrix don't matter,
 105:./tmk_core/common/keyboard.c ****     so they are filtered out.
 106:./tmk_core/common/keyboard.c ****     If there are two or more real keys pressed and they match columns with
 107:./tmk_core/common/keyboard.c ****     at least two of another row's real keys, the row will be ignored. Keep in mind,
 108:./tmk_core/common/keyboard.c ****     we are checking one row at a time, not all of them at once.
 109:./tmk_core/common/keyboard.c ****     */
 110:./tmk_core/common/keyboard.c ****     for (uint8_t i=0; i < MATRIX_ROWS; i++) {
 111:./tmk_core/common/keyboard.c ****         if (i != row && popcount_more_than_one(get_real_keys(i, matrix_get_row(i)) & rowdata)){
 112:./tmk_core/common/keyboard.c ****             return true;
 113:./tmk_core/common/keyboard.c ****         }
 114:./tmk_core/common/keyboard.c ****     }
 115:./tmk_core/common/keyboard.c ****     return false;
 116:./tmk_core/common/keyboard.c **** }
 117:./tmk_core/common/keyboard.c **** 
 118:./tmk_core/common/keyboard.c **** #endif
 119:./tmk_core/common/keyboard.c **** 
 120:./tmk_core/common/keyboard.c **** /** \brief matrix_setup
 121:./tmk_core/common/keyboard.c ****  *
 122:./tmk_core/common/keyboard.c ****  * FIXME: needs doc
 123:./tmk_core/common/keyboard.c ****  */
 124:./tmk_core/common/keyboard.c **** __attribute__ ((weak))
 125:./tmk_core/common/keyboard.c **** void matrix_setup(void) {
  16               		.loc 1 125 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22 0000 0895      		ret
  23               		.cfi_endproc
  24               	.LFE4:
  26               		.section	.text.keyboard_setup,"ax",@progbits
  27               	.global	keyboard_setup
  29               	keyboard_setup:
  30               	.LFB5:
 126:./tmk_core/common/keyboard.c **** }
 127:./tmk_core/common/keyboard.c **** 
 128:./tmk_core/common/keyboard.c **** /** \brief keyboard_setup
 129:./tmk_core/common/keyboard.c ****  *
 130:./tmk_core/common/keyboard.c ****  * FIXME: needs doc
 131:./tmk_core/common/keyboard.c ****  */
 132:./tmk_core/common/keyboard.c **** void keyboard_setup(void) {
  31               		.loc 1 132 0
  32               		.cfi_startproc
  33               	/* prologue: function */
  34               	/* frame size = 0 */
  35               	/* stack size = 0 */
  36               	.L__stack_usage = 0
 133:./tmk_core/common/keyboard.c ****     matrix_setup();
  37               		.loc 1 133 0
  38 0000 0C94 0000 		jmp matrix_setup
  39               	.LVL0:
  40               		.cfi_endproc
  41               	.LFE5:
  43               		.section	.text.is_keyboard_master,"ax",@progbits
  44               		.weak	is_keyboard_master
  46               	is_keyboard_master:
  47               	.LFB6:
 134:./tmk_core/common/keyboard.c **** }
 135:./tmk_core/common/keyboard.c **** 
 136:./tmk_core/common/keyboard.c **** /** \brief is_keyboard_master
 137:./tmk_core/common/keyboard.c ****  *
 138:./tmk_core/common/keyboard.c ****  * FIXME: needs doc
 139:./tmk_core/common/keyboard.c ****  */
 140:./tmk_core/common/keyboard.c **** __attribute__((weak))
 141:./tmk_core/common/keyboard.c **** bool is_keyboard_master(void) {
  48               		.loc 1 141 0
  49               		.cfi_startproc
  50               	/* prologue: function */
  51               	/* frame size = 0 */
  52               	/* stack size = 0 */
  53               	.L__stack_usage = 0
 142:./tmk_core/common/keyboard.c ****     return true;
 143:./tmk_core/common/keyboard.c **** }
  54               		.loc 1 143 0
  55 0000 81E0      		ldi r24,lo8(1)
  56 0002 0895      		ret
  57               		.cfi_endproc
  58               	.LFE6:
  60               		.section	.text.keyboard_init,"ax",@progbits
  61               	.global	keyboard_init
  63               	keyboard_init:
  64               	.LFB7:
 144:./tmk_core/common/keyboard.c **** 
 145:./tmk_core/common/keyboard.c **** /** \brief keyboard_init
 146:./tmk_core/common/keyboard.c ****  *
 147:./tmk_core/common/keyboard.c ****  * FIXME: needs doc
 148:./tmk_core/common/keyboard.c ****  */
 149:./tmk_core/common/keyboard.c **** void keyboard_init(void) {
  65               		.loc 1 149 0
  66               		.cfi_startproc
  67               	/* prologue: function */
  68               	/* frame size = 0 */
  69               	/* stack size = 0 */
  70               	.L__stack_usage = 0
 150:./tmk_core/common/keyboard.c ****     timer_init();
  71               		.loc 1 150 0
  72 0000 0E94 0000 		call timer_init
  73               	.LVL1:
 151:./tmk_core/common/keyboard.c ****     matrix_init();
  74               		.loc 1 151 0
  75 0004 0E94 0000 		call matrix_init
  76               	.LVL2:
 152:./tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
 153:./tmk_core/common/keyboard.c ****     ps2_mouse_init();
 154:./tmk_core/common/keyboard.c **** #endif
 155:./tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
 156:./tmk_core/common/keyboard.c ****     serial_mouse_init();
 157:./tmk_core/common/keyboard.c **** #endif
 158:./tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
 159:./tmk_core/common/keyboard.c ****     adb_mouse_init();
 160:./tmk_core/common/keyboard.c **** #endif
 161:./tmk_core/common/keyboard.c **** #ifdef BOOTMAGIC_ENABLE
 162:./tmk_core/common/keyboard.c ****     bootmagic();
 163:./tmk_core/common/keyboard.c **** #else
 164:./tmk_core/common/keyboard.c ****     magic();
  77               		.loc 1 164 0
  78 0008 0C94 0000 		jmp magic
  79               	.LVL3:
  80               		.cfi_endproc
  81               	.LFE7:
  83               		.section	.text.keyboard_task,"ax",@progbits
  84               	.global	keyboard_task
  86               	keyboard_task:
  87               	.LFB8:
 165:./tmk_core/common/keyboard.c **** #endif
 166:./tmk_core/common/keyboard.c **** #ifdef BACKLIGHT_ENABLE
 167:./tmk_core/common/keyboard.c ****     backlight_init();
 168:./tmk_core/common/keyboard.c **** #endif
 169:./tmk_core/common/keyboard.c **** #ifdef RGBLIGHT_ENABLE
 170:./tmk_core/common/keyboard.c ****     rgblight_init();
 171:./tmk_core/common/keyboard.c **** #endif
 172:./tmk_core/common/keyboard.c **** #ifdef STENO_ENABLE
 173:./tmk_core/common/keyboard.c ****     steno_init();
 174:./tmk_core/common/keyboard.c **** #endif
 175:./tmk_core/common/keyboard.c **** #ifdef FAUXCLICKY_ENABLE
 176:./tmk_core/common/keyboard.c ****     fauxclicky_init();
 177:./tmk_core/common/keyboard.c **** #endif
 178:./tmk_core/common/keyboard.c **** #ifdef POINTING_DEVICE_ENABLE
 179:./tmk_core/common/keyboard.c ****     pointing_device_init();
 180:./tmk_core/common/keyboard.c **** #endif
 181:./tmk_core/common/keyboard.c **** #if defined(NKRO_ENABLE) && defined(FORCE_NKRO)
 182:./tmk_core/common/keyboard.c ****     keymap_config.nkro = 1;
 183:./tmk_core/common/keyboard.c **** #endif
 184:./tmk_core/common/keyboard.c **** }
 185:./tmk_core/common/keyboard.c **** 
 186:./tmk_core/common/keyboard.c **** /** \brief Keyboard task: Do keyboard routine jobs
 187:./tmk_core/common/keyboard.c ****  *
 188:./tmk_core/common/keyboard.c ****  * Do routine keyboard jobs: 
 189:./tmk_core/common/keyboard.c ****  *
 190:./tmk_core/common/keyboard.c ****  * * scan matrix
 191:./tmk_core/common/keyboard.c ****  * * handle mouse movements
 192:./tmk_core/common/keyboard.c ****  * * run visualizer code
 193:./tmk_core/common/keyboard.c ****  * * handle midi commands
 194:./tmk_core/common/keyboard.c ****  * * light LEDs
 195:./tmk_core/common/keyboard.c ****  *
 196:./tmk_core/common/keyboard.c ****  * This is repeatedly called as fast as possible.
 197:./tmk_core/common/keyboard.c ****  */
 198:./tmk_core/common/keyboard.c **** void keyboard_task(void)
 199:./tmk_core/common/keyboard.c **** {
  88               		.loc 1 199 0
  89               		.cfi_startproc
  90 0000 BF92      		push r11
  91               	.LCFI0:
  92               		.cfi_def_cfa_offset 3
  93               		.cfi_offset 11, -2
  94 0002 CF92      		push r12
  95               	.LCFI1:
  96               		.cfi_def_cfa_offset 4
  97               		.cfi_offset 12, -3
  98 0004 DF92      		push r13
  99               	.LCFI2:
 100               		.cfi_def_cfa_offset 5
 101               		.cfi_offset 13, -4
 102 0006 EF92      		push r14
 103               	.LCFI3:
 104               		.cfi_def_cfa_offset 6
 105               		.cfi_offset 14, -5
 106 0008 FF92      		push r15
 107               	.LCFI4:
 108               		.cfi_def_cfa_offset 7
 109               		.cfi_offset 15, -6
 110 000a 0F93      		push r16
 111               	.LCFI5:
 112               		.cfi_def_cfa_offset 8
 113               		.cfi_offset 16, -7
 114 000c 1F93      		push r17
 115               	.LCFI6:
 116               		.cfi_def_cfa_offset 9
 117               		.cfi_offset 17, -8
 118 000e CF93      		push r28
 119               	.LCFI7:
 120               		.cfi_def_cfa_offset 10
 121               		.cfi_offset 28, -9
 122 0010 DF93      		push r29
 123               	.LCFI8:
 124               		.cfi_def_cfa_offset 11
 125               		.cfi_offset 29, -10
 126 0012 CDB7      		in r28,__SP_L__
 127 0014 DEB7      		in r29,__SP_H__
 128               	.LCFI9:
 129               		.cfi_def_cfa_register 28
 130 0016 2A97      		sbiw r28,10
 131               	.LCFI10:
 132               		.cfi_def_cfa_offset 21
 133 0018 0FB6      		in __tmp_reg__,__SREG__
 134 001a F894      		cli
 135 001c DEBF      		out __SP_H__,r29
 136 001e 0FBE      		out __SREG__,__tmp_reg__
 137 0020 CDBF      		out __SP_L__,r28
 138               	/* prologue: function */
 139               	/* frame size = 10 */
 140               	/* stack size = 19 */
 141               	.L__stack_usage = 19
 142               	.LVL4:
 200:./tmk_core/common/keyboard.c ****     static matrix_row_t matrix_prev[MATRIX_ROWS];
 201:./tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 202:./tmk_core/common/keyboard.c ****   //  static matrix_row_t matrix_ghost[MATRIX_ROWS];
 203:./tmk_core/common/keyboard.c **** #endif
 204:./tmk_core/common/keyboard.c ****     static uint8_t led_status = 0;
 205:./tmk_core/common/keyboard.c ****     matrix_row_t matrix_row = 0;
 206:./tmk_core/common/keyboard.c ****     matrix_row_t matrix_change = 0;
 207:./tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 208:./tmk_core/common/keyboard.c ****     uint8_t keys_processed = 0;
 209:./tmk_core/common/keyboard.c **** #endif
 210:./tmk_core/common/keyboard.c **** 
 211:./tmk_core/common/keyboard.c ****     matrix_scan();
 143               		.loc 1 211 0
 144 0022 0E94 0000 		call matrix_scan
 145               	.LVL5:
 212:./tmk_core/common/keyboard.c ****     if (is_keyboard_master()) {
 146               		.loc 1 212 0
 147 0026 0E94 0000 		call is_keyboard_master
 148               	.LVL6:
 149 002a 8111      		cpse r24,__zero_reg__
 150 002c 00C0      		rjmp .L6
 151               	.LVL7:
 152               	.L10:
 213:./tmk_core/common/keyboard.c ****         for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 214:./tmk_core/common/keyboard.c ****             matrix_row = matrix_get_row(r);
 215:./tmk_core/common/keyboard.c ****             matrix_change = matrix_row ^ matrix_prev[r];
 216:./tmk_core/common/keyboard.c ****             if (matrix_change) {
 217:./tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 218:./tmk_core/common/keyboard.c ****                 if (has_ghost_in_row(r, matrix_row)) {
 219:./tmk_core/common/keyboard.c ****                     /* Keep track of whether ghosted status has changed for
 220:./tmk_core/common/keyboard.c ****                     * debugging. But don't update matrix_prev until un-ghosted, or
 221:./tmk_core/common/keyboard.c ****                     * the last key would be lost.
 222:./tmk_core/common/keyboard.c ****                     */
 223:./tmk_core/common/keyboard.c ****                     //if (debug_matrix && matrix_ghost[r] != matrix_row) {
 224:./tmk_core/common/keyboard.c ****                     //    matrix_print();
 225:./tmk_core/common/keyboard.c ****                     //}
 226:./tmk_core/common/keyboard.c ****                     //matrix_ghost[r] = matrix_row;
 227:./tmk_core/common/keyboard.c ****                     continue;
 228:./tmk_core/common/keyboard.c ****                 }
 229:./tmk_core/common/keyboard.c ****                 //matrix_ghost[r] = matrix_row;
 230:./tmk_core/common/keyboard.c **** #endif
 231:./tmk_core/common/keyboard.c ****                 if (debug_matrix) matrix_print();
 232:./tmk_core/common/keyboard.c ****                 for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 233:./tmk_core/common/keyboard.c ****                     if (matrix_change & ((matrix_row_t)1<<c)) {
 234:./tmk_core/common/keyboard.c ****                         action_exec((keyevent_t){
 235:./tmk_core/common/keyboard.c ****                             .key = (keypos_t){ .row = r, .col = c },
 236:./tmk_core/common/keyboard.c ****                             .pressed = (matrix_row & ((matrix_row_t)1<<c)),
 237:./tmk_core/common/keyboard.c ****                             .time = (timer_read() | 1) /* time should not be 0 */
 238:./tmk_core/common/keyboard.c ****                         });
 239:./tmk_core/common/keyboard.c ****                         // record a processed key
 240:./tmk_core/common/keyboard.c ****                         matrix_prev[r] ^= ((matrix_row_t)1<<c);
 241:./tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 242:./tmk_core/common/keyboard.c ****                         // only jump out if we have processed "enough" keys.
 243:./tmk_core/common/keyboard.c ****                         if (++keys_processed >= QMK_KEYS_PER_SCAN)
 244:./tmk_core/common/keyboard.c **** #endif
 245:./tmk_core/common/keyboard.c ****                         // process a key per task call
 246:./tmk_core/common/keyboard.c ****                         goto MATRIX_LOOP_END;
 247:./tmk_core/common/keyboard.c ****                     }
 248:./tmk_core/common/keyboard.c ****                 }
 249:./tmk_core/common/keyboard.c ****             }
 250:./tmk_core/common/keyboard.c ****         }
 251:./tmk_core/common/keyboard.c ****     }
 252:./tmk_core/common/keyboard.c ****     // call with pseudo tick event when no real key event.
 253:./tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 254:./tmk_core/common/keyboard.c ****     // we can get here with some keys processed now.
 255:./tmk_core/common/keyboard.c ****     if (!keys_processed)
 256:./tmk_core/common/keyboard.c **** #endif
 257:./tmk_core/common/keyboard.c ****     action_exec(TICK);
 153               		.loc 1 257 0
 154 002e 8FEF      		ldi r24,lo8(-1)
 155 0030 8983      		std Y+1,r24
 156 0032 8A83      		std Y+2,r24
 157 0034 1B82      		std Y+3,__zero_reg__
 158 0036 0E94 0000 		call timer_read
 159               	.LVL8:
 160 003a 8160      		ori r24,1
 161 003c 782F      		mov r23,r24
 162 003e 9D83      		std Y+5,r25
 163 0040 8C83      		std Y+4,r24
 164 0042 4981      		ldd r20,Y+1
 165 0044 5A81      		ldd r21,Y+2
 166 0046 6B81      		ldd r22,Y+3
 167 0048 8D81      		ldd r24,Y+5
 168 004a 0E94 0000 		call action_exec
 169               	.LVL9:
 170 004e 00C0      		rjmp .L7
 171               	.LVL10:
 172               	.L6:
 173 0050 80E0      		ldi r24,lo8(matrix_prev.2836)
 174 0052 C82E      		mov r12,r24
 175 0054 80E0      		ldi r24,hi8(matrix_prev.2836)
 176 0056 D82E      		mov r13,r24
 212:./tmk_core/common/keyboard.c ****     if (is_keyboard_master()) {
 177               		.loc 1 212 0
 178 0058 00E0      		ldi r16,0
 179 005a 10E0      		ldi r17,0
 180               	.LVL11:
 181               	.L9:
 182 005c B02E      		mov r11,r16
 183               	.LVL12:
 184               	.LBB6:
 214:./tmk_core/common/keyboard.c ****             matrix_change = matrix_row ^ matrix_prev[r];
 185               		.loc 1 214 0
 186 005e 802F      		mov r24,r16
 187 0060 0E94 0000 		call matrix_get_row
 188               	.LVL13:
 189 0064 E82E      		mov r14,r24
 190               	.LVL14:
 215:./tmk_core/common/keyboard.c ****             if (matrix_change) {
 191               		.loc 1 215 0
 192 0066 F601      		movw r30,r12
 193 0068 2191      		ld r18,Z+
 194 006a 6F01      		movw r12,r30
 195 006c F82E      		mov r15,r24
 196 006e F226      		eor r15,r18
 197               	.LVL15:
 216:./tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 198               		.loc 1 216 0
 199 0070 01F4      		brne .L8
 200               	.L15:
 201               	.LVL16:
 202 0072 0F5F      		subi r16,-1
 203 0074 1F4F      		sbci r17,-1
 204               	.LVL17:
 213:./tmk_core/common/keyboard.c ****             matrix_row = matrix_get_row(r);
 205               		.loc 1 213 0
 206 0076 0E30      		cpi r16,14
 207 0078 1105      		cpc r17,__zero_reg__
 208 007a 01F4      		brne .L9
 209 007c 00C0      		rjmp .L10
 210               	.L8:
 231:./tmk_core/common/keyboard.c ****                 for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 211               		.loc 1 231 0
 212 007e 8091 0000 		lds r24,debug_config
 213 0082 81FD      		sbrc r24,1
 231:./tmk_core/common/keyboard.c ****                 for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 214               		.loc 1 231 0 is_stmt 0 discriminator 1
 215 0084 0E94 0000 		call matrix_print
 216               	.LVL18:
 217               	.L11:
 218               	.LBE6:
 212:./tmk_core/common/keyboard.c ****         for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 219               		.loc 1 212 0 is_stmt 1
 220 0088 80E0      		ldi r24,0
 221 008a 90E0      		ldi r25,0
 222               	.LBB8:
 223               	.LBB7:
 233:./tmk_core/common/keyboard.c ****                         action_exec((keyevent_t){
 224               		.loc 1 233 0
 225 008c 2F2D      		mov r18,r15
 226 008e 30E0      		ldi r19,0
 227               	.LVL19:
 228               	.L14:
 229 0090 482F      		mov r20,r24
 230               	.LVL20:
 231 0092 B901      		movw r22,r18
 232 0094 082E      		mov r0,r24
 233 0096 00C0      		rjmp 2f
 234               		1:
 235 0098 7595      		asr r23
 236 009a 6795      		ror r22
 237               		2:
 238 009c 0A94      		dec r0
 239 009e 02F4      		brpl 1b
 240 00a0 60FF      		sbrs r22,0
 241 00a2 00C0      		rjmp .L12
 234:./tmk_core/common/keyboard.c ****                             .key = (keypos_t){ .row = r, .col = c },
 242               		.loc 1 234 0
 243 00a4 8E83      		std Y+6,r24
 244 00a6 BF82      		std Y+7,r11
 236:./tmk_core/common/keyboard.c ****                             .time = (timer_read() | 1) /* time should not be 0 */
 245               		.loc 1 236 0
 246 00a8 81E0      		ldi r24,lo8(1)
 247 00aa 90E0      		ldi r25,0
 248               	.LVL21:
 249 00ac 6C01      		movw r12,r24
 250 00ae 00C0      		rjmp 2f
 251               		1:
 252 00b0 CC0C      		lsl r12
 253 00b2 DD1C      		rol r13
 254               		2:
 255 00b4 4A95      		dec r20
 256 00b6 02F4      		brpl 1b
 234:./tmk_core/common/keyboard.c ****                             .key = (keypos_t){ .row = r, .col = c },
 257               		.loc 1 234 0
 258 00b8 2E2D      		mov r18,r14
 259 00ba 30E0      		ldi r19,0
 260 00bc 2C21      		and r18,r12
 261 00be 3D21      		and r19,r13
 262 00c0 232B      		or r18,r19
 263 00c2 01F4      		brne .L13
 264 00c4 80E0      		ldi r24,0
 265               	.L13:
 266 00c6 8887      		std Y+8,r24
 237:./tmk_core/common/keyboard.c ****                         });
 267               		.loc 1 237 0
 268 00c8 0E94 0000 		call timer_read
 269               	.LVL22:
 234:./tmk_core/common/keyboard.c ****                             .key = (keypos_t){ .row = r, .col = c },
 270               		.loc 1 234 0
 271 00cc 8160      		ori r24,1
 272 00ce 782F      		mov r23,r24
 273 00d0 9A87      		std Y+10,r25
 274 00d2 8987      		std Y+9,r24
 275 00d4 4E81      		ldd r20,Y+6
 276 00d6 5F81      		ldd r21,Y+7
 277 00d8 6885      		ldd r22,Y+8
 278 00da 8A85      		ldd r24,Y+10
 279 00dc 0E94 0000 		call action_exec
 280               	.LVL23:
 240:./tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 281               		.loc 1 240 0
 282 00e0 F801      		movw r30,r16
 283 00e2 E050      		subi r30,lo8(-(matrix_prev.2836))
 284 00e4 F040      		sbci r31,hi8(-(matrix_prev.2836))
 285 00e6 8081      		ld r24,Z
 286 00e8 8C25      		eor r24,r12
 287 00ea 8083      		st Z,r24
 246:./tmk_core/common/keyboard.c ****                     }
 288               		.loc 1 246 0
 289 00ec 00C0      		rjmp .L7
 290               	.LVL24:
 291               	.L12:
 292 00ee 0196      		adiw r24,1
 293               	.LVL25:
 232:./tmk_core/common/keyboard.c ****                     if (matrix_change & ((matrix_row_t)1<<c)) {
 294               		.loc 1 232 0 discriminator 2
 295 00f0 8630      		cpi r24,6
 296 00f2 9105      		cpc r25,__zero_reg__
 297 00f4 01F4      		brne .L14
 298 00f6 00C0      		rjmp .L15
 299               	.LVL26:
 300               	.L7:
 301               	.LBE7:
 302               	.LBE8:
 258:./tmk_core/common/keyboard.c **** 
 259:./tmk_core/common/keyboard.c **** MATRIX_LOOP_END:
 260:./tmk_core/common/keyboard.c **** 
 261:./tmk_core/common/keyboard.c **** #ifdef MOUSEKEY_ENABLE
 262:./tmk_core/common/keyboard.c ****     // mousekey repeat & acceleration
 263:./tmk_core/common/keyboard.c ****     mousekey_task();
 303               		.loc 1 263 0
 304 00f8 0E94 0000 		call mousekey_task
 305               	.LVL27:
 264:./tmk_core/common/keyboard.c **** #endif
 265:./tmk_core/common/keyboard.c **** 
 266:./tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
 267:./tmk_core/common/keyboard.c ****     ps2_mouse_task();
 268:./tmk_core/common/keyboard.c **** #endif
 269:./tmk_core/common/keyboard.c **** 
 270:./tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
 271:./tmk_core/common/keyboard.c ****     serial_mouse_task();
 272:./tmk_core/common/keyboard.c **** #endif
 273:./tmk_core/common/keyboard.c **** 
 274:./tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
 275:./tmk_core/common/keyboard.c ****     adb_mouse_task();
 276:./tmk_core/common/keyboard.c **** #endif
 277:./tmk_core/common/keyboard.c **** 
 278:./tmk_core/common/keyboard.c **** #ifdef SERIAL_LINK_ENABLE
 279:./tmk_core/common/keyboard.c **** 	serial_link_update();
 280:./tmk_core/common/keyboard.c **** #endif
 281:./tmk_core/common/keyboard.c **** 
 282:./tmk_core/common/keyboard.c **** #ifdef VISUALIZER_ENABLE
 283:./tmk_core/common/keyboard.c ****     visualizer_update(default_layer_state, layer_state, visualizer_get_mods(), host_keyboard_leds()
 284:./tmk_core/common/keyboard.c **** #endif
 285:./tmk_core/common/keyboard.c **** 
 286:./tmk_core/common/keyboard.c **** #ifdef POINTING_DEVICE_ENABLE
 287:./tmk_core/common/keyboard.c ****     pointing_device_task();
 288:./tmk_core/common/keyboard.c **** #endif
 289:./tmk_core/common/keyboard.c **** 
 290:./tmk_core/common/keyboard.c **** #ifdef MIDI_ENABLE
 291:./tmk_core/common/keyboard.c ****     midi_task();
 292:./tmk_core/common/keyboard.c **** #endif
 293:./tmk_core/common/keyboard.c **** 
 294:./tmk_core/common/keyboard.c ****     // update LED
 295:./tmk_core/common/keyboard.c ****     if (led_status != host_keyboard_leds()) {
 306               		.loc 1 295 0
 307 00fc 0E94 0000 		call host_keyboard_leds
 308               	.LVL28:
 309 0100 9091 0000 		lds r25,led_status.2837
 310 0104 8917      		cp r24,r25
 311 0106 01F0      		breq .L5
 296:./tmk_core/common/keyboard.c ****         led_status = host_keyboard_leds();
 312               		.loc 1 296 0
 313 0108 0E94 0000 		call host_keyboard_leds
 314               	.LVL29:
 315 010c 8093 0000 		sts led_status.2837,r24
 316               	.LVL30:
 317               	/* epilogue start */
 297:./tmk_core/common/keyboard.c ****         keyboard_set_leds(led_status);
 298:./tmk_core/common/keyboard.c ****     }
 299:./tmk_core/common/keyboard.c **** }
 318               		.loc 1 299 0
 319 0110 2A96      		adiw r28,10
 320 0112 0FB6      		in __tmp_reg__,__SREG__
 321 0114 F894      		cli
 322 0116 DEBF      		out __SP_H__,r29
 323 0118 0FBE      		out __SREG__,__tmp_reg__
 324 011a CDBF      		out __SP_L__,r28
 325 011c DF91      		pop r29
 326 011e CF91      		pop r28
 327 0120 1F91      		pop r17
 328 0122 0F91      		pop r16
 329 0124 FF90      		pop r15
 330 0126 EF90      		pop r14
 331 0128 DF90      		pop r13
 332 012a CF90      		pop r12
 333 012c BF90      		pop r11
 334               	.LBB9:
 335               	.LBB10:
 300:./tmk_core/common/keyboard.c **** 
 301:./tmk_core/common/keyboard.c **** /** \brief keyboard set leds
 302:./tmk_core/common/keyboard.c ****  *
 303:./tmk_core/common/keyboard.c ****  * FIXME: needs doc
 304:./tmk_core/common/keyboard.c ****  */
 305:./tmk_core/common/keyboard.c **** void keyboard_set_leds(uint8_t leds)
 306:./tmk_core/common/keyboard.c **** {
 307:./tmk_core/common/keyboard.c ****     if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
 308:./tmk_core/common/keyboard.c ****     led_set(leds);
 336               		.loc 1 308 0
 337 012e 0C94 0000 		jmp led_set
 338               	.LVL31:
 339               	.L5:
 340               	/* epilogue start */
 341               	.LBE10:
 342               	.LBE9:
 299:./tmk_core/common/keyboard.c **** 
 343               		.loc 1 299 0
 344 0132 2A96      		adiw r28,10
 345 0134 0FB6      		in __tmp_reg__,__SREG__
 346 0136 F894      		cli
 347 0138 DEBF      		out __SP_H__,r29
 348 013a 0FBE      		out __SREG__,__tmp_reg__
 349 013c CDBF      		out __SP_L__,r28
 350 013e DF91      		pop r29
 351 0140 CF91      		pop r28
 352 0142 1F91      		pop r17
 353 0144 0F91      		pop r16
 354 0146 FF90      		pop r15
 355 0148 EF90      		pop r14
 356 014a DF90      		pop r13
 357 014c CF90      		pop r12
 358 014e BF90      		pop r11
 359 0150 0895      		ret
 360               		.cfi_endproc
 361               	.LFE8:
 363               		.section	.text.keyboard_set_leds,"ax",@progbits
 364               	.global	keyboard_set_leds
 366               	keyboard_set_leds:
 367               	.LFB9:
 306:./tmk_core/common/keyboard.c ****     if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
 368               		.loc 1 306 0
 369               		.cfi_startproc
 370               	.LVL32:
 371               	/* prologue: function */
 372               	/* frame size = 0 */
 373               	/* stack size = 0 */
 374               	.L__stack_usage = 0
 375               		.loc 1 308 0
 376 0000 0C94 0000 		jmp led_set
 377               	.LVL33:
 378               		.cfi_endproc
 379               	.LFE9:
 381               		.section	.bss.led_status.2837,"aw",@nobits
 384               	led_status.2837:
 385 0000 00        		.zero	1
 386               		.section	.bss.matrix_prev.2836,"aw",@nobits
 389               	matrix_prev.2836:
 390 0000 0000 0000 		.zero	14
 390      0000 0000 
 390      0000 0000 
 390      0000 
 391               		.text
 392               	.Letext0:
 393               		.file 2 "/usr/lib/avr/include/stdint.h"
 394               		.file 3 "./tmk_core/common/keyboard.h"
 395               		.file 4 "./tmk_core/common/matrix.h"
 396               		.file 5 "./tmk_core/common/debug.h"
 397               		.file 6 "./tmk_core/common/timer.h"
 398               		.file 7 "./tmk_core/common/magic.h"
 399               		.file 8 "./tmk_core/common/action.h"
 400               		.file 9 "./tmk_core/common/led.h"
 401               		.file 10 "./tmk_core/common/mousekey.h"
 402               		.file 11 "./tmk_core/common/host.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 keyboard.c
     /tmp/cc3p8dh8.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc3p8dh8.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc3p8dh8.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc3p8dh8.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc3p8dh8.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc3p8dh8.s:13     .text.matrix_setup:0000000000000000 matrix_setup
     /tmp/cc3p8dh8.s:29     .text.keyboard_setup:0000000000000000 keyboard_setup
     /tmp/cc3p8dh8.s:46     .text.is_keyboard_master:0000000000000000 is_keyboard_master
     /tmp/cc3p8dh8.s:63     .text.keyboard_init:0000000000000000 keyboard_init
     /tmp/cc3p8dh8.s:86     .text.keyboard_task:0000000000000000 keyboard_task
     /tmp/cc3p8dh8.s:389    .bss.matrix_prev.2836:0000000000000000 matrix_prev.2836
     /tmp/cc3p8dh8.s:384    .bss.led_status.2837:0000000000000000 led_status.2837
     /tmp/cc3p8dh8.s:366    .text.keyboard_set_leds:0000000000000000 keyboard_set_leds

UNDEFINED SYMBOLS
timer_init
matrix_init
magic
matrix_scan
timer_read
action_exec
matrix_get_row
debug_config
matrix_print
mousekey_task
host_keyboard_leds
led_set
__do_clear_bss
