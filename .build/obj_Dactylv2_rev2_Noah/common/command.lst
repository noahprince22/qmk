   1               		.file	"command.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.mousekey_param_inc,"ax",@progbits
  12               	mousekey_param_inc:
  13               	.LFB38:
  14               		.file 1 "./tmk_core/common/command.c"
   1:./tmk_core/common/command.c **** /*
   2:./tmk_core/common/command.c **** Copyright 2011 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/command.c **** 
   4:./tmk_core/common/command.c **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/command.c **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/command.c **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/command.c **** (at your option) any later version.
   8:./tmk_core/common/command.c **** 
   9:./tmk_core/common/command.c **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/command.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/command.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/command.c **** GNU General Public License for more details.
  13:./tmk_core/common/command.c **** 
  14:./tmk_core/common/command.c **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/command.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/command.c **** */
  17:./tmk_core/common/command.c **** #include <stdint.h>
  18:./tmk_core/common/command.c **** #include <stdbool.h>
  19:./tmk_core/common/command.c **** #include "wait.h"
  20:./tmk_core/common/command.c **** #include "keycode.h"
  21:./tmk_core/common/command.c **** #include "host.h"
  22:./tmk_core/common/command.c **** #include "keymap.h"
  23:./tmk_core/common/command.c **** #include "print.h"
  24:./tmk_core/common/command.c **** #include "debug.h"
  25:./tmk_core/common/command.c **** #include "util.h"
  26:./tmk_core/common/command.c **** #include "timer.h"
  27:./tmk_core/common/command.c **** #include "keyboard.h"
  28:./tmk_core/common/command.c **** #include "bootloader.h"
  29:./tmk_core/common/command.c **** #include "action_layer.h"
  30:./tmk_core/common/command.c **** #include "action_util.h"
  31:./tmk_core/common/command.c **** #include "eeconfig.h"
  32:./tmk_core/common/command.c **** #include "sleep_led.h"
  33:./tmk_core/common/command.c **** #include "led.h"
  34:./tmk_core/common/command.c **** #include "command.h"
  35:./tmk_core/common/command.c **** #include "backlight.h"
  36:./tmk_core/common/command.c **** #include "quantum.h"
  37:./tmk_core/common/command.c **** #include "version.h"
  38:./tmk_core/common/command.c **** 
  39:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  40:./tmk_core/common/command.c **** #include "mousekey.h"
  41:./tmk_core/common/command.c **** #endif
  42:./tmk_core/common/command.c **** 
  43:./tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
  44:./tmk_core/common/command.c **** 	#include "usb_keyboard.h"
  45:./tmk_core/common/command.c **** 		#ifdef EXTRAKEY_ENABLE
  46:./tmk_core/common/command.c **** 		#include "usb_extra.h"
  47:./tmk_core/common/command.c **** 	#endif
  48:./tmk_core/common/command.c **** #endif
  49:./tmk_core/common/command.c **** 
  50:./tmk_core/common/command.c **** #ifdef PROTOCOL_VUSB
  51:./tmk_core/common/command.c **** 	#include "usbdrv.h"
  52:./tmk_core/common/command.c **** #endif
  53:./tmk_core/common/command.c **** 
  54:./tmk_core/common/command.c **** #ifdef AUDIO_ENABLE
  55:./tmk_core/common/command.c ****     #include "audio.h"
  56:./tmk_core/common/command.c **** #endif /* AUDIO_ENABLE */
  57:./tmk_core/common/command.c **** 
  58:./tmk_core/common/command.c **** 
  59:./tmk_core/common/command.c **** static bool command_common(uint8_t code);
  60:./tmk_core/common/command.c **** static void command_common_help(void);
  61:./tmk_core/common/command.c **** static void print_version(void);
  62:./tmk_core/common/command.c **** static void print_status(void);
  63:./tmk_core/common/command.c **** static bool command_console(uint8_t code);
  64:./tmk_core/common/command.c **** static void command_console_help(void);
  65:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  66:./tmk_core/common/command.c **** static bool mousekey_console(uint8_t code);
  67:./tmk_core/common/command.c **** static void mousekey_console_help(void);
  68:./tmk_core/common/command.c **** #endif
  69:./tmk_core/common/command.c **** 
  70:./tmk_core/common/command.c **** static void switch_default_layer(uint8_t layer);
  71:./tmk_core/common/command.c **** 
  72:./tmk_core/common/command.c **** 
  73:./tmk_core/common/command.c **** command_state_t command_state = ONESHOT;
  74:./tmk_core/common/command.c **** 
  75:./tmk_core/common/command.c **** 
  76:./tmk_core/common/command.c **** bool command_proc(uint8_t code)
  77:./tmk_core/common/command.c **** {
  78:./tmk_core/common/command.c ****     switch (command_state) {
  79:./tmk_core/common/command.c ****         case ONESHOT:
  80:./tmk_core/common/command.c ****             if (!IS_COMMAND())
  81:./tmk_core/common/command.c ****                 return false;
  82:./tmk_core/common/command.c ****             return (command_extra(code) || command_common(code));
  83:./tmk_core/common/command.c ****             break;
  84:./tmk_core/common/command.c ****         case CONSOLE:
  85:./tmk_core/common/command.c ****             if (IS_COMMAND())
  86:./tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
  87:./tmk_core/common/command.c ****             else
  88:./tmk_core/common/command.c ****                 return (command_console_extra(code) || command_console(code));
  89:./tmk_core/common/command.c ****             break;
  90:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  91:./tmk_core/common/command.c ****         case MOUSEKEY:
  92:./tmk_core/common/command.c ****             mousekey_console(code);
  93:./tmk_core/common/command.c ****             break;
  94:./tmk_core/common/command.c **** #endif
  95:./tmk_core/common/command.c ****         default:
  96:./tmk_core/common/command.c ****             command_state = ONESHOT;
  97:./tmk_core/common/command.c ****             return false;
  98:./tmk_core/common/command.c ****     }
  99:./tmk_core/common/command.c ****     return true;
 100:./tmk_core/common/command.c **** }
 101:./tmk_core/common/command.c **** 
 102:./tmk_core/common/command.c **** /* TODO: Refactoring is needed. */
 103:./tmk_core/common/command.c **** /* This allows to define extra commands. return false when not processed. */
 104:./tmk_core/common/command.c **** bool command_extra(uint8_t code) __attribute__ ((weak));
 105:./tmk_core/common/command.c **** bool command_extra(uint8_t code)
 106:./tmk_core/common/command.c **** {
 107:./tmk_core/common/command.c ****     (void)code;
 108:./tmk_core/common/command.c ****     return false;
 109:./tmk_core/common/command.c **** }
 110:./tmk_core/common/command.c **** 
 111:./tmk_core/common/command.c **** bool command_console_extra(uint8_t code) __attribute__ ((weak));
 112:./tmk_core/common/command.c **** bool command_console_extra(uint8_t code)
 113:./tmk_core/common/command.c **** {
 114:./tmk_core/common/command.c ****     (void)code;
 115:./tmk_core/common/command.c ****     return false;
 116:./tmk_core/common/command.c **** }
 117:./tmk_core/common/command.c **** 
 118:./tmk_core/common/command.c **** 
 119:./tmk_core/common/command.c **** /***********************************************************
 120:./tmk_core/common/command.c ****  * Command common
 121:./tmk_core/common/command.c ****  ***********************************************************/
 122:./tmk_core/common/command.c **** static void command_common_help(void)
 123:./tmk_core/common/command.c **** {
 124:./tmk_core/common/command.c **** 	print(                            "\n\t- Magic -\n"
 125:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG       ) ":	Debug Message Toggle\n"
 126:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG_MATRIX) ":	Matrix Debug Mode Toggle - Show keypresses in matrix grid\n"
 127:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG_KBD   ) ":	Keyboard Debug Toggle - Show keypress report\n"
 128:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG_MOUSE ) ":	Debug Mouse Toggle\n"
 129:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_VERSION     ) ":	Version\n"
 130:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_STATUS      ) ":	Status\n"
 131:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_CONSOLE     ) ":	Activate Console Mode\n"
 132:./tmk_core/common/command.c **** 
 133:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_CUSTOM
 134:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER0      ) ":	Switch to Layer 0\n"
 135:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER1      ) ":	Switch to Layer 1\n"
 136:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER2      ) ":	Switch to Layer 2\n"
 137:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER3      ) ":	Switch to Layer 3\n"
 138:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER4      ) ":	Switch to Layer 4\n"
 139:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER5      ) ":	Switch to Layer 5\n"
 140:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER6      ) ":	Switch to Layer 6\n"
 141:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER7      ) ":	Switch to Layer 7\n"
 142:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER8      ) ":	Switch to Layer 8\n"
 143:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER9      ) ":	Switch to Layer 9\n"
 144:./tmk_core/common/command.c **** #endif
 145:./tmk_core/common/command.c **** 
 146:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_FKEYS
 147:./tmk_core/common/command.c **** 		                            "F1-F10:	Switch to Layer 0-9 (F10 = L0)\n"
 148:./tmk_core/common/command.c **** #endif
 149:./tmk_core/common/command.c **** 
 150:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_NKEYS
 151:./tmk_core/common/command.c **** 		                            "0-9:	Switch to Layer 0-9\n"
 152:./tmk_core/common/command.c **** #endif
 153:./tmk_core/common/command.c **** 
 154:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER0_ALT1 ) ":	Switch to Layer 0 (alternate key 1)\n"
 155:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER0_ALT2 ) ":	Switch to Layer 0 (alternate key 2)\n"
 156:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_BOOTLOADER  ) ":	Jump to Bootloader (Reset)\n"
 157:./tmk_core/common/command.c **** 
 158:./tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 159:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LOCK        ) ":	Lock\n"
 160:./tmk_core/common/command.c **** #endif
 161:./tmk_core/common/command.c **** 
 162:./tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 163:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_EEPROM      ) ":	Print EEPROM Settings\n"
 164:./tmk_core/common/command.c **** #endif
 165:./tmk_core/common/command.c **** 
 166:./tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 167:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_NKRO        ) ":	NKRO Toggle\n"
 168:./tmk_core/common/command.c **** #endif
 169:./tmk_core/common/command.c **** 
 170:./tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 171:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_SLEEP_LED   ) ":	Sleep LED Test\n"
 172:./tmk_core/common/command.c **** #endif
 173:./tmk_core/common/command.c ****     );
 174:./tmk_core/common/command.c **** }
 175:./tmk_core/common/command.c **** 
 176:./tmk_core/common/command.c **** static void print_version(void)
 177:./tmk_core/common/command.c **** {
 178:./tmk_core/common/command.c **** 	// print version & information
 179:./tmk_core/common/command.c ****     print("\n\t- Version -\n");
 180:./tmk_core/common/command.c ****     print("DESC: " STR(DESCRIPTION) "\n");
 181:./tmk_core/common/command.c ****     print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
 182:./tmk_core/common/command.c ****           "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
 183:./tmk_core/common/command.c ****           "VER: " STR(DEVICE_VER) "\n");
 184:./tmk_core/common/command.c ****     print("BUILD: " STR(QMK_VERSION) " (" __TIME__ " " __DATE__ ")\n");
 185:./tmk_core/common/command.c **** 
 186:./tmk_core/common/command.c ****     /* build options */
 187:./tmk_core/common/command.c ****     print("OPTIONS:"
 188:./tmk_core/common/command.c **** 
 189:./tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 190:./tmk_core/common/command.c **** 	    " PJRC"
 191:./tmk_core/common/command.c **** #endif
 192:./tmk_core/common/command.c **** #ifdef PROTOCOL_LUFA
 193:./tmk_core/common/command.c **** 	    " LUFA"
 194:./tmk_core/common/command.c **** #endif
 195:./tmk_core/common/command.c **** #ifdef PROTOCOL_VUSB
 196:./tmk_core/common/command.c **** 	    " VUSB"
 197:./tmk_core/common/command.c **** #endif
 198:./tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 199:./tmk_core/common/command.c **** 	    " BOOTMAGIC"
 200:./tmk_core/common/command.c **** #endif
 201:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 202:./tmk_core/common/command.c **** 	    " MOUSEKEY"
 203:./tmk_core/common/command.c **** #endif
 204:./tmk_core/common/command.c **** #ifdef EXTRAKEY_ENABLE
 205:./tmk_core/common/command.c **** 	    " EXTRAKEY"
 206:./tmk_core/common/command.c **** #endif
 207:./tmk_core/common/command.c **** #ifdef CONSOLE_ENABLE
 208:./tmk_core/common/command.c **** 	    " CONSOLE"
 209:./tmk_core/common/command.c **** #endif
 210:./tmk_core/common/command.c **** #ifdef COMMAND_ENABLE
 211:./tmk_core/common/command.c **** 	    " COMMAND"
 212:./tmk_core/common/command.c **** #endif
 213:./tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 214:./tmk_core/common/command.c **** 	    " NKRO"
 215:./tmk_core/common/command.c **** #endif
 216:./tmk_core/common/command.c **** #ifdef KEYMAP_SECTION_ENABLE
 217:./tmk_core/common/command.c **** 	    " KEYMAP_SECTION"
 218:./tmk_core/common/command.c **** #endif
 219:./tmk_core/common/command.c **** 
 220:./tmk_core/common/command.c **** 	    " " STR(BOOTLOADER_SIZE) "\n");
 221:./tmk_core/common/command.c **** 
 222:./tmk_core/common/command.c ****     print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
 223:./tmk_core/common/command.c **** #if defined(__AVR__)
 224:./tmk_core/common/command.c ****           " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
 225:./tmk_core/common/command.c ****           " AVR_ARCH: avr" STR(__AVR_ARCH__)
 226:./tmk_core/common/command.c **** #endif
 227:./tmk_core/common/command.c **** 		  "\n");
 228:./tmk_core/common/command.c **** 
 229:./tmk_core/common/command.c **** 	return;
 230:./tmk_core/common/command.c **** }
 231:./tmk_core/common/command.c **** 
 232:./tmk_core/common/command.c **** static void print_status(void)
 233:./tmk_core/common/command.c **** {
 234:./tmk_core/common/command.c **** 
 235:./tmk_core/common/command.c ****     print("\n\t- Status -\n");
 236:./tmk_core/common/command.c **** 
 237:./tmk_core/common/command.c ****     print_val_hex8(host_keyboard_leds());
 238:./tmk_core/common/command.c **** #ifndef PROTOCOL_VUSB
 239:./tmk_core/common/command.c ****     // these aren't set on the V-USB protocol, so we just ignore them for now
 240:./tmk_core/common/command.c ****     print_val_hex8(keyboard_protocol);
 241:./tmk_core/common/command.c ****     print_val_hex8(keyboard_idle);
 242:./tmk_core/common/command.c **** #endif
 243:./tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 244:./tmk_core/common/command.c ****     print_val_hex8(keymap_config.nkro);
 245:./tmk_core/common/command.c **** #endif
 246:./tmk_core/common/command.c ****     print_val_hex32(timer_read32());
 247:./tmk_core/common/command.c **** 
 248:./tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 249:./tmk_core/common/command.c ****     print_val_hex8(UDCON);
 250:./tmk_core/common/command.c ****     print_val_hex8(UDIEN);
 251:./tmk_core/common/command.c ****     print_val_hex8(UDINT);
 252:./tmk_core/common/command.c ****     print_val_hex8(usb_keyboard_leds);
 253:./tmk_core/common/command.c ****     print_val_hex8(usb_keyboard_idle_count);
 254:./tmk_core/common/command.c **** #endif
 255:./tmk_core/common/command.c **** 
 256:./tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 257:./tmk_core/common/command.c **** #   if USB_COUNT_SOF
 258:./tmk_core/common/command.c ****     print_val_hex8(usbSofCount);
 259:./tmk_core/common/command.c **** #   endif
 260:./tmk_core/common/command.c **** #endif
 261:./tmk_core/common/command.c **** 	return;
 262:./tmk_core/common/command.c **** }
 263:./tmk_core/common/command.c **** 
 264:./tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 265:./tmk_core/common/command.c **** static void print_eeconfig(void)
 266:./tmk_core/common/command.c **** {
 267:./tmk_core/common/command.c **** 
 268:./tmk_core/common/command.c **** // Print these variables if NO_PRINT or USER_PRINT are not defined.
 269:./tmk_core/common/command.c **** #if !defined(NO_PRINT) && !defined(USER_PRINT)
 270:./tmk_core/common/command.c **** 
 271:./tmk_core/common/command.c ****     print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
 272:./tmk_core/common/command.c **** 
 273:./tmk_core/common/command.c ****     debug_config_t dc;
 274:./tmk_core/common/command.c ****     dc.raw = eeconfig_read_debug();
 275:./tmk_core/common/command.c ****     print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
 276:./tmk_core/common/command.c ****     print(".enable: "); print_dec(dc.enable); print("\n");
 277:./tmk_core/common/command.c ****     print(".matrix: "); print_dec(dc.matrix); print("\n");
 278:./tmk_core/common/command.c ****     print(".keyboard: "); print_dec(dc.keyboard); print("\n");
 279:./tmk_core/common/command.c ****     print(".mouse: "); print_dec(dc.mouse); print("\n");
 280:./tmk_core/common/command.c **** 
 281:./tmk_core/common/command.c ****     keymap_config_t kc;
 282:./tmk_core/common/command.c ****     kc.raw = eeconfig_read_keymap();
 283:./tmk_core/common/command.c ****     print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
 284:./tmk_core/common/command.c ****     print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
 285:./tmk_core/common/command.c ****     print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
 286:./tmk_core/common/command.c ****     print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
 287:./tmk_core/common/command.c ****     print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
 288:./tmk_core/common/command.c ****     print(".no_gui: "); print_dec(kc.no_gui); print("\n");
 289:./tmk_core/common/command.c ****     print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
 290:./tmk_core/common/command.c ****     print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
 291:./tmk_core/common/command.c ****     print(".nkro: "); print_dec(kc.nkro); print("\n");
 292:./tmk_core/common/command.c **** 
 293:./tmk_core/common/command.c **** #ifdef BACKLIGHT_ENABLE
 294:./tmk_core/common/command.c ****     backlight_config_t bc;
 295:./tmk_core/common/command.c ****     bc.raw = eeconfig_read_backlight();
 296:./tmk_core/common/command.c ****     print("backlight_config.raw: "); print_hex8(bc.raw); print("\n");
 297:./tmk_core/common/command.c ****     print(".enable: "); print_dec(bc.enable); print("\n");
 298:./tmk_core/common/command.c ****     print(".level: "); print_dec(bc.level); print("\n");
 299:./tmk_core/common/command.c **** #endif /* BACKLIGHT_ENABLE */
 300:./tmk_core/common/command.c **** 
 301:./tmk_core/common/command.c **** #endif /* !NO_PRINT */
 302:./tmk_core/common/command.c **** 
 303:./tmk_core/common/command.c **** }
 304:./tmk_core/common/command.c **** #endif /* BOOTMAGIC_ENABLE */
 305:./tmk_core/common/command.c **** 
 306:./tmk_core/common/command.c **** static bool command_common(uint8_t code)
 307:./tmk_core/common/command.c **** {
 308:./tmk_core/common/command.c **** 
 309:./tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 310:./tmk_core/common/command.c ****     static host_driver_t *host_driver = 0;
 311:./tmk_core/common/command.c **** #endif
 312:./tmk_core/common/command.c **** 
 313:./tmk_core/common/command.c ****     switch (code) {
 314:./tmk_core/common/command.c **** 
 315:./tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 316:./tmk_core/common/command.c **** 
 317:./tmk_core/common/command.c **** 		// test breathing sleep LED
 318:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_SLEEP_LED):
 319:./tmk_core/common/command.c ****             print("Sleep LED Test\n");
 320:./tmk_core/common/command.c ****             sleep_led_toggle();
 321:./tmk_core/common/command.c ****             led_set(host_keyboard_leds());
 322:./tmk_core/common/command.c ****             break;
 323:./tmk_core/common/command.c **** #endif
 324:./tmk_core/common/command.c **** 
 325:./tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 326:./tmk_core/common/command.c **** 
 327:./tmk_core/common/command.c **** 		// print stored eeprom config
 328:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_EEPROM):
 329:./tmk_core/common/command.c ****             print("eeconfig:\n");
 330:./tmk_core/common/command.c ****             print_eeconfig();
 331:./tmk_core/common/command.c ****             break;
 332:./tmk_core/common/command.c **** #endif
 333:./tmk_core/common/command.c **** 
 334:./tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 335:./tmk_core/common/command.c **** 
 336:./tmk_core/common/command.c **** 		// lock/unlock keyboard
 337:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_LOCK):
 338:./tmk_core/common/command.c ****             if (host_get_driver()) {
 339:./tmk_core/common/command.c ****                 host_driver = host_get_driver();
 340:./tmk_core/common/command.c ****                 clear_keyboard();
 341:./tmk_core/common/command.c ****                 host_set_driver(0);
 342:./tmk_core/common/command.c ****                 print("Locked.\n");
 343:./tmk_core/common/command.c ****             } else {
 344:./tmk_core/common/command.c ****                 host_set_driver(host_driver);
 345:./tmk_core/common/command.c ****                 print("Unlocked.\n");
 346:./tmk_core/common/command.c ****             }
 347:./tmk_core/common/command.c ****             break;
 348:./tmk_core/common/command.c **** #endif
 349:./tmk_core/common/command.c **** 
 350:./tmk_core/common/command.c **** 		// print help
 351:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_HELP1):
 352:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_HELP2):
 353:./tmk_core/common/command.c ****             command_common_help();
 354:./tmk_core/common/command.c ****             break;
 355:./tmk_core/common/command.c **** 
 356:./tmk_core/common/command.c **** 		// activate console
 357:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_CONSOLE):
 358:./tmk_core/common/command.c ****             debug_matrix   = false;
 359:./tmk_core/common/command.c ****             debug_keyboard = false;
 360:./tmk_core/common/command.c ****             debug_mouse    = false;
 361:./tmk_core/common/command.c ****             debug_enable   = false;
 362:./tmk_core/common/command.c ****             command_console_help();
 363:./tmk_core/common/command.c ****             print("C> ");
 364:./tmk_core/common/command.c ****             command_state = CONSOLE;
 365:./tmk_core/common/command.c ****             break;
 366:./tmk_core/common/command.c **** 
 367:./tmk_core/common/command.c ****         // jump to bootloader
 368:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_BOOTLOADER):
 369:./tmk_core/common/command.c ****             clear_keyboard(); // clear to prevent stuck keys
 370:./tmk_core/common/command.c ****             print("\n\nJumping to bootloader... ");
 371:./tmk_core/common/command.c ****             #ifdef AUDIO_ENABLE
 372:./tmk_core/common/command.c **** 	            stop_all_notes();
 373:./tmk_core/common/command.c ****                 shutdown_user();
 374:./tmk_core/common/command.c ****             #else
 375:./tmk_core/common/command.c **** 	            wait_ms(1000);
 376:./tmk_core/common/command.c ****             #endif
 377:./tmk_core/common/command.c ****             bootloader_jump(); // not return
 378:./tmk_core/common/command.c ****             break;
 379:./tmk_core/common/command.c **** 
 380:./tmk_core/common/command.c ****         // debug toggle
 381:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG):
 382:./tmk_core/common/command.c ****             debug_enable = !debug_enable;
 383:./tmk_core/common/command.c ****             if (debug_enable) {
 384:./tmk_core/common/command.c ****                 print("\ndebug: on\n");
 385:./tmk_core/common/command.c ****             } else {
 386:./tmk_core/common/command.c ****                 print("\ndebug: off\n");
 387:./tmk_core/common/command.c ****                 debug_matrix   = false;
 388:./tmk_core/common/command.c ****                 debug_keyboard = false;
 389:./tmk_core/common/command.c ****                 debug_mouse    = false;
 390:./tmk_core/common/command.c ****             }
 391:./tmk_core/common/command.c ****             break;
 392:./tmk_core/common/command.c **** 
 393:./tmk_core/common/command.c ****         // debug matrix toggle
 394:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_MATRIX):
 395:./tmk_core/common/command.c ****             debug_matrix = !debug_matrix;
 396:./tmk_core/common/command.c ****             if (debug_matrix) {
 397:./tmk_core/common/command.c ****                 print("\nmatrix: on\n");
 398:./tmk_core/common/command.c ****                 debug_enable = true;
 399:./tmk_core/common/command.c ****             } else {
 400:./tmk_core/common/command.c ****                 print("\nmatrix: off\n");
 401:./tmk_core/common/command.c ****             }
 402:./tmk_core/common/command.c ****             break;
 403:./tmk_core/common/command.c **** 
 404:./tmk_core/common/command.c ****         // debug keyboard toggle
 405:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_KBD):
 406:./tmk_core/common/command.c ****             debug_keyboard = !debug_keyboard;
 407:./tmk_core/common/command.c ****             if (debug_keyboard) {
 408:./tmk_core/common/command.c ****                 print("\nkeyboard: on\n");
 409:./tmk_core/common/command.c ****                 debug_enable = true;
 410:./tmk_core/common/command.c ****             } else {
 411:./tmk_core/common/command.c ****                 print("\nkeyboard: off\n");
 412:./tmk_core/common/command.c ****             }
 413:./tmk_core/common/command.c ****             break;
 414:./tmk_core/common/command.c **** 
 415:./tmk_core/common/command.c ****         // debug mouse toggle
 416:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_MOUSE):
 417:./tmk_core/common/command.c ****             debug_mouse = !debug_mouse;
 418:./tmk_core/common/command.c ****             if (debug_mouse) {
 419:./tmk_core/common/command.c ****                 print("\nmouse: on\n");
 420:./tmk_core/common/command.c ****                 debug_enable = true;
 421:./tmk_core/common/command.c ****             } else {
 422:./tmk_core/common/command.c **** 				print("\nmouse: off\n");
 423:./tmk_core/common/command.c ****             }
 424:./tmk_core/common/command.c ****             break;
 425:./tmk_core/common/command.c **** 
 426:./tmk_core/common/command.c **** 		// print version
 427:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_VERSION):
 428:./tmk_core/common/command.c ****         	print_version();
 429:./tmk_core/common/command.c **** 		    break;
 430:./tmk_core/common/command.c **** 
 431:./tmk_core/common/command.c **** 		// print status
 432:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_STATUS):
 433:./tmk_core/common/command.c **** 			print_status();
 434:./tmk_core/common/command.c ****             break;
 435:./tmk_core/common/command.c **** 
 436:./tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 437:./tmk_core/common/command.c **** 
 438:./tmk_core/common/command.c **** 		// NKRO toggle
 439:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_NKRO):
 440:./tmk_core/common/command.c ****             clear_keyboard(); // clear to prevent stuck keys
 441:./tmk_core/common/command.c ****             keymap_config.nkro = !keymap_config.nkro;
 442:./tmk_core/common/command.c ****             if (keymap_config.nkro) {
 443:./tmk_core/common/command.c ****                 print("NKRO: on\n");
 444:./tmk_core/common/command.c ****             } else {
 445:./tmk_core/common/command.c ****                 print("NKRO: off\n");
 446:./tmk_core/common/command.c ****             }
 447:./tmk_core/common/command.c ****             break;
 448:./tmk_core/common/command.c **** #endif
 449:./tmk_core/common/command.c **** 
 450:./tmk_core/common/command.c **** 		// switch layers
 451:./tmk_core/common/command.c **** 
 452:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER0_ALT1):
 453:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER0_ALT2):
 454:./tmk_core/common/command.c ****             switch_default_layer(0);
 455:./tmk_core/common/command.c ****             break;
 456:./tmk_core/common/command.c **** 
 457:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_CUSTOM
 458:./tmk_core/common/command.c **** 
 459:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER0):
 460:./tmk_core/common/command.c ****             switch_default_layer(0);
 461:./tmk_core/common/command.c ****             break;
 462:./tmk_core/common/command.c **** 
 463:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER1):
 464:./tmk_core/common/command.c ****             switch_default_layer(1);
 465:./tmk_core/common/command.c ****             break;
 466:./tmk_core/common/command.c **** 
 467:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER2):
 468:./tmk_core/common/command.c ****             switch_default_layer(2);
 469:./tmk_core/common/command.c ****             break;
 470:./tmk_core/common/command.c **** 
 471:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER3):
 472:./tmk_core/common/command.c ****             switch_default_layer(3);
 473:./tmk_core/common/command.c ****             break;
 474:./tmk_core/common/command.c **** 
 475:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER4):
 476:./tmk_core/common/command.c ****             switch_default_layer(4);
 477:./tmk_core/common/command.c ****             break;
 478:./tmk_core/common/command.c **** 
 479:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER5):
 480:./tmk_core/common/command.c ****             switch_default_layer(5);
 481:./tmk_core/common/command.c ****             break;
 482:./tmk_core/common/command.c **** 
 483:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER6):
 484:./tmk_core/common/command.c ****             switch_default_layer(6);
 485:./tmk_core/common/command.c ****             break;
 486:./tmk_core/common/command.c **** 
 487:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER7):
 488:./tmk_core/common/command.c ****             switch_default_layer(7);
 489:./tmk_core/common/command.c ****             break;
 490:./tmk_core/common/command.c **** 
 491:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER8):
 492:./tmk_core/common/command.c ****             switch_default_layer(8);
 493:./tmk_core/common/command.c ****             break;
 494:./tmk_core/common/command.c **** 
 495:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER9):
 496:./tmk_core/common/command.c ****             switch_default_layer(9);
 497:./tmk_core/common/command.c ****             break;
 498:./tmk_core/common/command.c **** #endif
 499:./tmk_core/common/command.c **** 
 500:./tmk_core/common/command.c **** 
 501:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_FKEYS
 502:./tmk_core/common/command.c **** 
 503:./tmk_core/common/command.c ****         case KC_F1 ... KC_F9:
 504:./tmk_core/common/command.c ****             switch_default_layer((code - KC_F1) + 1);
 505:./tmk_core/common/command.c ****             break;
 506:./tmk_core/common/command.c ****         case KC_F10:
 507:./tmk_core/common/command.c ****             switch_default_layer(0);
 508:./tmk_core/common/command.c ****             break;
 509:./tmk_core/common/command.c **** #endif
 510:./tmk_core/common/command.c **** 
 511:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_NKEYS
 512:./tmk_core/common/command.c **** 
 513:./tmk_core/common/command.c ****         case KC_1 ... KC_9:
 514:./tmk_core/common/command.c ****             switch_default_layer((code - KC_1) + 1);
 515:./tmk_core/common/command.c ****             break;
 516:./tmk_core/common/command.c ****         case KC_0:
 517:./tmk_core/common/command.c ****             switch_default_layer(0);
 518:./tmk_core/common/command.c ****             break;
 519:./tmk_core/common/command.c **** #endif
 520:./tmk_core/common/command.c **** 
 521:./tmk_core/common/command.c ****         default:
 522:./tmk_core/common/command.c ****             print("?");
 523:./tmk_core/common/command.c ****             return false;
 524:./tmk_core/common/command.c ****     }
 525:./tmk_core/common/command.c ****     return true;
 526:./tmk_core/common/command.c **** }
 527:./tmk_core/common/command.c **** 
 528:./tmk_core/common/command.c **** 
 529:./tmk_core/common/command.c **** /***********************************************************
 530:./tmk_core/common/command.c ****  * Command console
 531:./tmk_core/common/command.c ****  ***********************************************************/
 532:./tmk_core/common/command.c **** static void command_console_help(void)
 533:./tmk_core/common/command.c **** {
 534:./tmk_core/common/command.c ****     print("\n\t- Console -\n"
 535:./tmk_core/common/command.c ****           "ESC/q:	quit\n"
 536:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 537:./tmk_core/common/command.c ****           "m:	mousekey\n"
 538:./tmk_core/common/command.c **** #endif
 539:./tmk_core/common/command.c ****     );
 540:./tmk_core/common/command.c **** }
 541:./tmk_core/common/command.c **** 
 542:./tmk_core/common/command.c **** static bool command_console(uint8_t code)
 543:./tmk_core/common/command.c **** {
 544:./tmk_core/common/command.c ****     switch (code) {
 545:./tmk_core/common/command.c ****         case KC_H:
 546:./tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 547:./tmk_core/common/command.c ****             command_console_help();
 548:./tmk_core/common/command.c ****             break;
 549:./tmk_core/common/command.c ****         case KC_Q:
 550:./tmk_core/common/command.c ****         case KC_ESC:
 551:./tmk_core/common/command.c ****             command_state = ONESHOT;
 552:./tmk_core/common/command.c ****             return false;
 553:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 554:./tmk_core/common/command.c ****         case KC_M:
 555:./tmk_core/common/command.c ****             mousekey_console_help();
 556:./tmk_core/common/command.c ****             print("M> ");
 557:./tmk_core/common/command.c ****             command_state = MOUSEKEY;
 558:./tmk_core/common/command.c ****             return true;
 559:./tmk_core/common/command.c **** #endif
 560:./tmk_core/common/command.c ****         default:
 561:./tmk_core/common/command.c ****             print("?");
 562:./tmk_core/common/command.c ****             return false;
 563:./tmk_core/common/command.c ****     }
 564:./tmk_core/common/command.c ****     print("C> ");
 565:./tmk_core/common/command.c ****     return true;
 566:./tmk_core/common/command.c **** }
 567:./tmk_core/common/command.c **** 
 568:./tmk_core/common/command.c **** 
 569:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 570:./tmk_core/common/command.c **** /***********************************************************
 571:./tmk_core/common/command.c ****  * Mousekey console
 572:./tmk_core/common/command.c ****  ***********************************************************/
 573:./tmk_core/common/command.c **** static uint8_t mousekey_param = 0;
 574:./tmk_core/common/command.c **** 
 575:./tmk_core/common/command.c **** static void mousekey_param_print(void)
 576:./tmk_core/common/command.c **** {
 577:./tmk_core/common/command.c **** // Print these variables if NO_PRINT or USER_PRINT are not defined.
 578:./tmk_core/common/command.c **** #if !defined(NO_PRINT) && !defined(USER_PRINT)
 579:./tmk_core/common/command.c ****     print("\n\t- Values -\n");
 580:./tmk_core/common/command.c ****     print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
 581:./tmk_core/common/command.c ****     print("2: interval(ms): "); pdec(mk_interval); print("\n");
 582:./tmk_core/common/command.c ****     print("3: max_speed: "); pdec(mk_max_speed); print("\n");
 583:./tmk_core/common/command.c ****     print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
 584:./tmk_core/common/command.c ****     print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
 585:./tmk_core/common/command.c ****     print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
 586:./tmk_core/common/command.c **** #endif /* !NO_PRINT */
 587:./tmk_core/common/command.c **** 
 588:./tmk_core/common/command.c **** }
 589:./tmk_core/common/command.c **** 
 590:./tmk_core/common/command.c **** //#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
 591:./tmk_core/common/command.c **** #define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
 592:./tmk_core/common/command.c **** static void mousekey_param_inc(uint8_t param, uint8_t inc)
 593:./tmk_core/common/command.c **** {
  15               		.loc 1 593 0
  16               		.cfi_startproc
  17               	.LVL0:
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
 594:./tmk_core/common/command.c ****     switch (param) {
  22               		.loc 1 594 0
  23 0000 8330      		cpi r24,lo8(3)
  24 0002 01F0      		breq .L3
  25 0004 00F4      		brsh .L4
  26 0006 8130      		cpi r24,lo8(1)
  27 0008 01F0      		breq .L5
  28 000a 8230      		cpi r24,lo8(2)
  29 000c 01F0      		breq .L6
  30 000e 0895      		ret
  31               	.L4:
  32 0010 8530      		cpi r24,lo8(5)
  33 0012 01F4      		brne .+2
  34 0014 00C0      		rjmp .L7
  35 0016 00F0      		brlo .L8
  36 0018 8630      		cpi r24,lo8(6)
  37 001a 01F4      		brne .+2
  38 001c 00C0      		rjmp .L9
  39 001e 0895      		ret
  40               	.L5:
 595:./tmk_core/common/command.c ****         case 1:
 596:./tmk_core/common/command.c ****             if (mk_delay + inc < UINT8_MAX)
  41               		.loc 1 596 0
  42 0020 8091 0000 		lds r24,mk_delay
  43               	.LVL1:
  44 0024 482F      		mov r20,r24
  45 0026 460F      		add r20,r22
  46 0028 5527      		clr r21
  47 002a 551F      		rol r21
  48 002c 4F3F      		cpi r20,-1
  49 002e 5105      		cpc r21,__zero_reg__
  50 0030 04F4      		brge .L10
 597:./tmk_core/common/command.c ****                 mk_delay += inc;
  51               		.loc 1 597 0
  52 0032 680F      		add r22,r24
  53               	.LVL2:
  54 0034 6093 0000 		sts mk_delay,r22
  55 0038 0895      		ret
  56               	.LVL3:
  57               	.L10:
 598:./tmk_core/common/command.c ****             else
 599:./tmk_core/common/command.c ****                 mk_delay = UINT8_MAX;
  58               		.loc 1 599 0
  59 003a 8FEF      		ldi r24,lo8(-1)
  60 003c 8093 0000 		sts mk_delay,r24
  61 0040 0895      		ret
  62               	.LVL4:
  63               	.L6:
 600:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 601:./tmk_core/common/command.c ****             break;
 602:./tmk_core/common/command.c ****         case 2:
 603:./tmk_core/common/command.c ****             if (mk_interval + inc < UINT8_MAX)
  64               		.loc 1 603 0
  65 0042 8091 0000 		lds r24,mk_interval
  66               	.LVL5:
  67 0046 482F      		mov r20,r24
  68 0048 460F      		add r20,r22
  69 004a 5527      		clr r21
  70 004c 551F      		rol r21
  71 004e 4F3F      		cpi r20,-1
  72 0050 5105      		cpc r21,__zero_reg__
  73 0052 04F4      		brge .L11
 604:./tmk_core/common/command.c ****                 mk_interval += inc;
  74               		.loc 1 604 0
  75 0054 680F      		add r22,r24
  76               	.LVL6:
  77 0056 6093 0000 		sts mk_interval,r22
  78 005a 0895      		ret
  79               	.LVL7:
  80               	.L11:
 605:./tmk_core/common/command.c ****             else
 606:./tmk_core/common/command.c ****                 mk_interval = UINT8_MAX;
  81               		.loc 1 606 0
  82 005c 8FEF      		ldi r24,lo8(-1)
  83 005e 8093 0000 		sts mk_interval,r24
  84 0062 0895      		ret
  85               	.LVL8:
  86               	.L3:
 607:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 608:./tmk_core/common/command.c ****             break;
 609:./tmk_core/common/command.c ****         case 3:
 610:./tmk_core/common/command.c ****             if (mk_max_speed + inc < UINT8_MAX)
  87               		.loc 1 610 0
  88 0064 8091 0000 		lds r24,mk_max_speed
  89               	.LVL9:
  90 0068 482F      		mov r20,r24
  91 006a 460F      		add r20,r22
  92 006c 5527      		clr r21
  93 006e 551F      		rol r21
  94 0070 4F3F      		cpi r20,-1
  95 0072 5105      		cpc r21,__zero_reg__
  96 0074 04F4      		brge .L12
 611:./tmk_core/common/command.c ****                 mk_max_speed += inc;
  97               		.loc 1 611 0
  98 0076 680F      		add r22,r24
  99               	.LVL10:
 100 0078 6093 0000 		sts mk_max_speed,r22
 101 007c 0895      		ret
 102               	.LVL11:
 103               	.L12:
 612:./tmk_core/common/command.c ****             else
 613:./tmk_core/common/command.c ****                 mk_max_speed = UINT8_MAX;
 104               		.loc 1 613 0
 105 007e 8FEF      		ldi r24,lo8(-1)
 106 0080 8093 0000 		sts mk_max_speed,r24
 107 0084 0895      		ret
 108               	.LVL12:
 109               	.L8:
 614:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 615:./tmk_core/common/command.c ****             break;
 616:./tmk_core/common/command.c ****         case 4:
 617:./tmk_core/common/command.c ****             if (mk_time_to_max + inc < UINT8_MAX)
 110               		.loc 1 617 0
 111 0086 8091 0000 		lds r24,mk_time_to_max
 112               	.LVL13:
 113 008a 482F      		mov r20,r24
 114 008c 460F      		add r20,r22
 115 008e 5527      		clr r21
 116 0090 551F      		rol r21
 117 0092 4F3F      		cpi r20,-1
 118 0094 5105      		cpc r21,__zero_reg__
 119 0096 04F4      		brge .L13
 618:./tmk_core/common/command.c ****                 mk_time_to_max += inc;
 120               		.loc 1 618 0
 121 0098 680F      		add r22,r24
 122               	.LVL14:
 123 009a 6093 0000 		sts mk_time_to_max,r22
 124 009e 0895      		ret
 125               	.LVL15:
 126               	.L13:
 619:./tmk_core/common/command.c ****             else
 620:./tmk_core/common/command.c ****                 mk_time_to_max = UINT8_MAX;
 127               		.loc 1 620 0
 128 00a0 8FEF      		ldi r24,lo8(-1)
 129 00a2 8093 0000 		sts mk_time_to_max,r24
 130 00a6 0895      		ret
 131               	.LVL16:
 132               	.L7:
 621:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 622:./tmk_core/common/command.c ****             break;
 623:./tmk_core/common/command.c ****         case 5:
 624:./tmk_core/common/command.c ****             if (mk_wheel_max_speed + inc < UINT8_MAX)
 133               		.loc 1 624 0
 134 00a8 8091 0000 		lds r24,mk_wheel_max_speed
 135               	.LVL17:
 136 00ac 482F      		mov r20,r24
 137 00ae 460F      		add r20,r22
 138 00b0 5527      		clr r21
 139 00b2 551F      		rol r21
 140 00b4 4F3F      		cpi r20,-1
 141 00b6 5105      		cpc r21,__zero_reg__
 142 00b8 04F4      		brge .L14
 625:./tmk_core/common/command.c ****                 mk_wheel_max_speed += inc;
 143               		.loc 1 625 0
 144 00ba 680F      		add r22,r24
 145               	.LVL18:
 146 00bc 6093 0000 		sts mk_wheel_max_speed,r22
 147 00c0 0895      		ret
 148               	.LVL19:
 149               	.L14:
 626:./tmk_core/common/command.c ****             else
 627:./tmk_core/common/command.c ****                 mk_wheel_max_speed = UINT8_MAX;
 150               		.loc 1 627 0
 151 00c2 8FEF      		ldi r24,lo8(-1)
 152 00c4 8093 0000 		sts mk_wheel_max_speed,r24
 153 00c8 0895      		ret
 154               	.LVL20:
 155               	.L9:
 628:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 629:./tmk_core/common/command.c ****             break;
 630:./tmk_core/common/command.c ****         case 6:
 631:./tmk_core/common/command.c ****             if (mk_wheel_time_to_max + inc < UINT8_MAX)
 156               		.loc 1 631 0
 157 00ca 8091 0000 		lds r24,mk_wheel_time_to_max
 158               	.LVL21:
 159 00ce 482F      		mov r20,r24
 160 00d0 460F      		add r20,r22
 161 00d2 5527      		clr r21
 162 00d4 551F      		rol r21
 163 00d6 4F3F      		cpi r20,-1
 164 00d8 5105      		cpc r21,__zero_reg__
 165 00da 04F4      		brge .L15
 632:./tmk_core/common/command.c ****                 mk_wheel_time_to_max += inc;
 166               		.loc 1 632 0
 167 00dc 680F      		add r22,r24
 168               	.LVL22:
 169 00de 6093 0000 		sts mk_wheel_time_to_max,r22
 170 00e2 0895      		ret
 171               	.LVL23:
 172               	.L15:
 633:./tmk_core/common/command.c ****             else
 634:./tmk_core/common/command.c ****                 mk_wheel_time_to_max = UINT8_MAX;
 173               		.loc 1 634 0
 174 00e4 8FEF      		ldi r24,lo8(-1)
 175 00e6 8093 0000 		sts mk_wheel_time_to_max,r24
 176               	/* epilogue start */
 635:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 636:./tmk_core/common/command.c ****             break;
 637:./tmk_core/common/command.c ****     }
 638:./tmk_core/common/command.c **** }
 177               		.loc 1 638 0
 178 00ea 0895      		ret
 179               		.cfi_endproc
 180               	.LFE38:
 182               		.section	.text.mousekey_param_dec,"ax",@progbits
 184               	mousekey_param_dec:
 185               	.LFB39:
 639:./tmk_core/common/command.c **** 
 640:./tmk_core/common/command.c **** static void mousekey_param_dec(uint8_t param, uint8_t dec)
 641:./tmk_core/common/command.c **** {
 186               		.loc 1 641 0
 187               		.cfi_startproc
 188               	.LVL24:
 189               	/* prologue: function */
 190               	/* frame size = 0 */
 191               	/* stack size = 0 */
 192               	.L__stack_usage = 0
 642:./tmk_core/common/command.c ****     switch (param) {
 193               		.loc 1 642 0
 194 0000 8330      		cpi r24,lo8(3)
 195 0002 01F0      		breq .L18
 196 0004 00F4      		brsh .L19
 197 0006 8130      		cpi r24,lo8(1)
 198 0008 01F0      		breq .L20
 199 000a 8230      		cpi r24,lo8(2)
 200 000c 01F0      		breq .L21
 201 000e 0895      		ret
 202               	.L19:
 203 0010 8530      		cpi r24,lo8(5)
 204 0012 01F0      		breq .L22
 205 0014 00F0      		brlo .L23
 206 0016 8630      		cpi r24,lo8(6)
 207 0018 01F0      		breq .L24
 208 001a 0895      		ret
 209               	.L20:
 643:./tmk_core/common/command.c ****         case 1:
 644:./tmk_core/common/command.c ****             if (mk_delay > dec)
 210               		.loc 1 644 0
 211 001c 8091 0000 		lds r24,mk_delay
 212               	.LVL25:
 213 0020 6817      		cp r22,r24
 214 0022 00F4      		brsh .L25
 645:./tmk_core/common/command.c ****                 mk_delay -= dec;
 215               		.loc 1 645 0
 216 0024 861B      		sub r24,r22
 217 0026 8093 0000 		sts mk_delay,r24
 218 002a 0895      		ret
 219               	.L25:
 646:./tmk_core/common/command.c ****             else
 647:./tmk_core/common/command.c ****                 mk_delay = 0;
 220               		.loc 1 647 0
 221 002c 1092 0000 		sts mk_delay,__zero_reg__
 222 0030 0895      		ret
 223               	.LVL26:
 224               	.L21:
 648:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 649:./tmk_core/common/command.c ****             break;
 650:./tmk_core/common/command.c ****         case 2:
 651:./tmk_core/common/command.c ****             if (mk_interval > dec)
 225               		.loc 1 651 0
 226 0032 8091 0000 		lds r24,mk_interval
 227               	.LVL27:
 228 0036 6817      		cp r22,r24
 229 0038 00F4      		brsh .L26
 652:./tmk_core/common/command.c ****                 mk_interval -= dec;
 230               		.loc 1 652 0
 231 003a 861B      		sub r24,r22
 232 003c 8093 0000 		sts mk_interval,r24
 233 0040 0895      		ret
 234               	.L26:
 653:./tmk_core/common/command.c ****             else
 654:./tmk_core/common/command.c ****                 mk_interval = 0;
 235               		.loc 1 654 0
 236 0042 1092 0000 		sts mk_interval,__zero_reg__
 237 0046 0895      		ret
 238               	.LVL28:
 239               	.L18:
 655:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 656:./tmk_core/common/command.c ****             break;
 657:./tmk_core/common/command.c ****         case 3:
 658:./tmk_core/common/command.c ****             if (mk_max_speed > dec)
 240               		.loc 1 658 0
 241 0048 8091 0000 		lds r24,mk_max_speed
 242               	.LVL29:
 243 004c 6817      		cp r22,r24
 244 004e 00F4      		brsh .L27
 659:./tmk_core/common/command.c ****                 mk_max_speed -= dec;
 245               		.loc 1 659 0
 246 0050 861B      		sub r24,r22
 247 0052 8093 0000 		sts mk_max_speed,r24
 248 0056 0895      		ret
 249               	.L27:
 660:./tmk_core/common/command.c ****             else
 661:./tmk_core/common/command.c ****                 mk_max_speed = 0;
 250               		.loc 1 661 0
 251 0058 1092 0000 		sts mk_max_speed,__zero_reg__
 252 005c 0895      		ret
 253               	.LVL30:
 254               	.L23:
 662:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 663:./tmk_core/common/command.c ****             break;
 664:./tmk_core/common/command.c ****         case 4:
 665:./tmk_core/common/command.c ****             if (mk_time_to_max > dec)
 255               		.loc 1 665 0
 256 005e 8091 0000 		lds r24,mk_time_to_max
 257               	.LVL31:
 258 0062 6817      		cp r22,r24
 259 0064 00F4      		brsh .L28
 666:./tmk_core/common/command.c ****                 mk_time_to_max -= dec;
 260               		.loc 1 666 0
 261 0066 861B      		sub r24,r22
 262 0068 8093 0000 		sts mk_time_to_max,r24
 263 006c 0895      		ret
 264               	.L28:
 667:./tmk_core/common/command.c ****             else
 668:./tmk_core/common/command.c ****                 mk_time_to_max = 0;
 265               		.loc 1 668 0
 266 006e 1092 0000 		sts mk_time_to_max,__zero_reg__
 267 0072 0895      		ret
 268               	.LVL32:
 269               	.L22:
 669:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 670:./tmk_core/common/command.c ****             break;
 671:./tmk_core/common/command.c ****         case 5:
 672:./tmk_core/common/command.c ****             if (mk_wheel_max_speed > dec)
 270               		.loc 1 672 0
 271 0074 8091 0000 		lds r24,mk_wheel_max_speed
 272               	.LVL33:
 273 0078 6817      		cp r22,r24
 274 007a 00F4      		brsh .L29
 673:./tmk_core/common/command.c ****                 mk_wheel_max_speed -= dec;
 275               		.loc 1 673 0
 276 007c 861B      		sub r24,r22
 277 007e 8093 0000 		sts mk_wheel_max_speed,r24
 278 0082 0895      		ret
 279               	.L29:
 674:./tmk_core/common/command.c ****             else
 675:./tmk_core/common/command.c ****                 mk_wheel_max_speed = 0;
 280               		.loc 1 675 0
 281 0084 1092 0000 		sts mk_wheel_max_speed,__zero_reg__
 282 0088 0895      		ret
 283               	.LVL34:
 284               	.L24:
 676:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 677:./tmk_core/common/command.c ****             break;
 678:./tmk_core/common/command.c ****         case 6:
 679:./tmk_core/common/command.c ****             if (mk_wheel_time_to_max > dec)
 285               		.loc 1 679 0
 286 008a 8091 0000 		lds r24,mk_wheel_time_to_max
 287               	.LVL35:
 288 008e 6817      		cp r22,r24
 289 0090 00F4      		brsh .L30
 680:./tmk_core/common/command.c ****                 mk_wheel_time_to_max -= dec;
 290               		.loc 1 680 0
 291 0092 861B      		sub r24,r22
 292 0094 8093 0000 		sts mk_wheel_time_to_max,r24
 293 0098 0895      		ret
 294               	.L30:
 681:./tmk_core/common/command.c ****             else
 682:./tmk_core/common/command.c ****                 mk_wheel_time_to_max = 0;
 295               		.loc 1 682 0
 296 009a 1092 0000 		sts mk_wheel_time_to_max,__zero_reg__
 297               	/* epilogue start */
 683:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 684:./tmk_core/common/command.c ****             break;
 685:./tmk_core/common/command.c ****     }
 686:./tmk_core/common/command.c **** }
 298               		.loc 1 686 0
 299 009e 0895      		ret
 300               		.cfi_endproc
 301               	.LFE39:
 303               		.section	.text.switch_default_layer,"ax",@progbits
 305               	switch_default_layer:
 306               	.LFB43:
 687:./tmk_core/common/command.c **** 
 688:./tmk_core/common/command.c **** static void mousekey_console_help(void)
 689:./tmk_core/common/command.c **** {
 690:./tmk_core/common/command.c ****     print("\n\t- Mousekey -\n"
 691:./tmk_core/common/command.c ****           "ESC/q:	quit\n"
 692:./tmk_core/common/command.c ****           "1:	delay(*10ms)\n"
 693:./tmk_core/common/command.c ****           "2:	interval(ms)\n"
 694:./tmk_core/common/command.c ****           "3:	max_speed\n"
 695:./tmk_core/common/command.c ****           "4:	time_to_max\n"
 696:./tmk_core/common/command.c ****           "5:	wheel_max_speed\n"
 697:./tmk_core/common/command.c ****           "6:	wheel_time_to_max\n"
 698:./tmk_core/common/command.c ****           "\n"
 699:./tmk_core/common/command.c ****           "p:	print values\n"
 700:./tmk_core/common/command.c ****           "d:	set defaults\n"
 701:./tmk_core/common/command.c ****           "up:	+1\n"
 702:./tmk_core/common/command.c ****           "down:	-1\n"
 703:./tmk_core/common/command.c ****           "pgup:	+10\n"
 704:./tmk_core/common/command.c ****           "pgdown:	-10\n"
 705:./tmk_core/common/command.c ****           "\n"
 706:./tmk_core/common/command.c ****           "speed = delta * max_speed * (repeat / time_to_max)\n");
 707:./tmk_core/common/command.c ****     xprintf("where delta: cursor=%d, wheel=%d\n"
 708:./tmk_core/common/command.c ****             "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_D
 709:./tmk_core/common/command.c **** }
 710:./tmk_core/common/command.c **** 
 711:./tmk_core/common/command.c **** static bool mousekey_console(uint8_t code)
 712:./tmk_core/common/command.c **** {
 713:./tmk_core/common/command.c ****     switch (code) {
 714:./tmk_core/common/command.c ****         case KC_H:
 715:./tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 716:./tmk_core/common/command.c ****             mousekey_console_help();
 717:./tmk_core/common/command.c ****             break;
 718:./tmk_core/common/command.c ****         case KC_Q:
 719:./tmk_core/common/command.c ****         case KC_ESC:
 720:./tmk_core/common/command.c ****             if (mousekey_param) {
 721:./tmk_core/common/command.c ****                 mousekey_param = 0;
 722:./tmk_core/common/command.c ****             } else {
 723:./tmk_core/common/command.c ****                 print("C> ");
 724:./tmk_core/common/command.c ****                 command_state = CONSOLE;
 725:./tmk_core/common/command.c ****                 return false;
 726:./tmk_core/common/command.c ****             }
 727:./tmk_core/common/command.c ****             break;
 728:./tmk_core/common/command.c ****         case KC_P:
 729:./tmk_core/common/command.c ****             mousekey_param_print();
 730:./tmk_core/common/command.c ****             break;
 731:./tmk_core/common/command.c ****         case KC_1:
 732:./tmk_core/common/command.c ****         case KC_2:
 733:./tmk_core/common/command.c ****         case KC_3:
 734:./tmk_core/common/command.c ****         case KC_4:
 735:./tmk_core/common/command.c ****         case KC_5:
 736:./tmk_core/common/command.c ****         case KC_6:
 737:./tmk_core/common/command.c ****             mousekey_param = numkey2num(code);
 738:./tmk_core/common/command.c ****             break;
 739:./tmk_core/common/command.c ****         case KC_UP:
 740:./tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 1);
 741:./tmk_core/common/command.c ****             break;
 742:./tmk_core/common/command.c ****         case KC_DOWN:
 743:./tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 1);
 744:./tmk_core/common/command.c ****             break;
 745:./tmk_core/common/command.c ****         case KC_PGUP:
 746:./tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 10);
 747:./tmk_core/common/command.c ****             break;
 748:./tmk_core/common/command.c ****         case KC_PGDN:
 749:./tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 10);
 750:./tmk_core/common/command.c ****             break;
 751:./tmk_core/common/command.c ****         case KC_D:
 752:./tmk_core/common/command.c ****             mk_delay = MOUSEKEY_DELAY/10;
 753:./tmk_core/common/command.c ****             mk_interval = MOUSEKEY_INTERVAL;
 754:./tmk_core/common/command.c ****             mk_max_speed = MOUSEKEY_MAX_SPEED;
 755:./tmk_core/common/command.c ****             mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 756:./tmk_core/common/command.c ****             mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 757:./tmk_core/common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 758:./tmk_core/common/command.c ****             print("set default\n");
 759:./tmk_core/common/command.c ****             break;
 760:./tmk_core/common/command.c ****         default:
 761:./tmk_core/common/command.c ****             print("?");
 762:./tmk_core/common/command.c ****             return false;
 763:./tmk_core/common/command.c ****     }
 764:./tmk_core/common/command.c ****     if (mousekey_param) {
 765:./tmk_core/common/command.c ****         xprintf("M%d> ", mousekey_param);
 766:./tmk_core/common/command.c ****     } else {
 767:./tmk_core/common/command.c ****         print("M>" );
 768:./tmk_core/common/command.c ****     }
 769:./tmk_core/common/command.c ****     return true;
 770:./tmk_core/common/command.c **** }
 771:./tmk_core/common/command.c **** #endif
 772:./tmk_core/common/command.c **** 
 773:./tmk_core/common/command.c **** 
 774:./tmk_core/common/command.c **** /***********************************************************
 775:./tmk_core/common/command.c ****  * Utilities
 776:./tmk_core/common/command.c ****  ***********************************************************/
 777:./tmk_core/common/command.c **** uint8_t numkey2num(uint8_t code)
 778:./tmk_core/common/command.c **** {
 779:./tmk_core/common/command.c ****     switch (code) {
 780:./tmk_core/common/command.c ****         case KC_1: return 1;
 781:./tmk_core/common/command.c ****         case KC_2: return 2;
 782:./tmk_core/common/command.c ****         case KC_3: return 3;
 783:./tmk_core/common/command.c ****         case KC_4: return 4;
 784:./tmk_core/common/command.c ****         case KC_5: return 5;
 785:./tmk_core/common/command.c ****         case KC_6: return 6;
 786:./tmk_core/common/command.c ****         case KC_7: return 7;
 787:./tmk_core/common/command.c ****         case KC_8: return 8;
 788:./tmk_core/common/command.c ****         case KC_9: return 9;
 789:./tmk_core/common/command.c ****         case KC_0: return 0;
 790:./tmk_core/common/command.c ****     }
 791:./tmk_core/common/command.c ****     return 0;
 792:./tmk_core/common/command.c **** }
 793:./tmk_core/common/command.c **** 
 794:./tmk_core/common/command.c **** static void switch_default_layer(uint8_t layer)
 795:./tmk_core/common/command.c **** {
 307               		.loc 1 795 0
 308               		.cfi_startproc
 309               	.LVL36:
 310 0000 0F93      		push r16
 311               	.LCFI0:
 312               		.cfi_def_cfa_offset 3
 313               		.cfi_offset 16, -2
 314 0002 1F93      		push r17
 315               	.LCFI1:
 316               		.cfi_def_cfa_offset 4
 317               		.cfi_offset 17, -3
 318               	/* prologue: function */
 319               	/* frame size = 0 */
 320               	/* stack size = 2 */
 321               	.L__stack_usage = 2
 796:./tmk_core/common/command.c ****     xprintf("L%d\n", layer);
 797:./tmk_core/common/command.c ****     default_layer_set(1UL<<layer);
 322               		.loc 1 797 0
 323 0004 41E0      		ldi r20,lo8(1)
 324 0006 50E0      		ldi r21,0
 325 0008 60E0      		ldi r22,0
 326 000a 70E0      		ldi r23,0
 327 000c 8A01      		movw r16,r20
 328 000e 9B01      		movw r18,r22
 329 0010 00C0      		rjmp 2f
 330               		1:
 331 0012 000F      		lsl r16
 332 0014 111F      		rol r17
 333 0016 221F      		rol r18
 334 0018 331F      		rol r19
 335               		2:
 336 001a 8A95      		dec r24
 337 001c 02F4      		brpl 1b
 338 001e C901      		movw r24,r18
 339               	.LVL37:
 340 0020 B801      		movw r22,r16
 341 0022 0E94 0000 		call default_layer_set
 342               	.LVL38:
 343               	/* epilogue start */
 798:./tmk_core/common/command.c ****     clear_keyboard();
 799:./tmk_core/common/command.c **** }
 344               		.loc 1 799 0
 345 0026 1F91      		pop r17
 346 0028 0F91      		pop r16
 798:./tmk_core/common/command.c ****     clear_keyboard();
 347               		.loc 1 798 0
 348 002a 0C94 0000 		jmp clear_keyboard
 349               	.LVL39:
 350               		.cfi_endproc
 351               	.LFE43:
 353               		.section	.text.command_common,"ax",@progbits
 355               	command_common:
 356               	.LFB34:
 307:./tmk_core/common/command.c **** 
 357               		.loc 1 307 0
 358               		.cfi_startproc
 359               	.LVL40:
 360               	/* prologue: function */
 361               	/* frame size = 0 */
 362               	/* stack size = 0 */
 363               	.L__stack_usage = 0
 313:./tmk_core/common/command.c **** 
 364               		.loc 1 313 0
 365 0000 8732      		cpi r24,lo8(39)
 366 0002 00F4      		brsh .L34
 367 0004 8E31      		cpi r24,lo8(30)
 368 0006 00F0      		brlo .+2
 369 0008 00C0      		rjmp .L35
 370 000a 8E30      		cpi r24,lo8(14)
 371 000c 01F4      		brne .+2
 372 000e 00C0      		rjmp .L36
 373 0010 00F4      		brsh .L37
 374 0012 8730      		cpi r24,lo8(7)
 375 0014 01F4      		brne .+2
 376 0016 00C0      		rjmp .L38
 377 0018 8B30      		cpi r24,lo8(11)
 378 001a 01F4      		brne .+2
 379 001c 00C0      		rjmp .L81
 380 001e 8630      		cpi r24,lo8(6)
 381 0020 01F4      		brne .+2
 382 0022 00C0      		rjmp .L40
 383               	.L52:
 523:./tmk_core/common/command.c ****     }
 384               		.loc 1 523 0
 385 0024 80E0      		ldi r24,0
 386               	.LVL41:
 387               	/* epilogue start */
 526:./tmk_core/common/command.c **** 
 388               		.loc 1 526 0
 389 0026 0895      		ret
 390               	.LVL42:
 391               	.L37:
 313:./tmk_core/common/command.c **** 
 392               		.loc 1 313 0
 393 0028 8631      		cpi r24,lo8(22)
 394 002a 01F4      		brne .+2
 395 002c 00C0      		rjmp .L81
 396 002e 00F4      		brsh .L41
 397 0030 8031      		cpi r24,lo8(16)
 398 0032 01F4      		brne .L52
 417:./tmk_core/common/command.c ****             if (debug_mouse) {
 399               		.loc 1 417 0
 400 0034 9091 0000 		lds r25,debug_config
 401 0038 892F      		mov r24,r25
 402               	.LVL43:
 403 003a 877F      		andi r24,~(1<<3)
 404 003c 93FF      		sbrs r25,3
 405 003e 8860      		ori r24,1<<3
 406 0040 8093 0000 		sts debug_config,r24
 418:./tmk_core/common/command.c ****                 print("\nmouse: on\n");
 407               		.loc 1 418 0
 408 0044 83FD      		sbrc r24,3
 409 0046 00C0      		rjmp .L51
 410 0048 00C0      		rjmp .L81
 411               	.LVL44:
 412               	.L41:
 313:./tmk_core/common/command.c **** 
 413               		.loc 1 313 0
 414 004a 8931      		cpi r24,lo8(25)
 415 004c 01F0      		breq .L81
 416 004e 8B31      		cpi r24,lo8(27)
 417 0050 01F4      		brne .L52
 395:./tmk_core/common/command.c ****             if (debug_matrix) {
 418               		.loc 1 395 0
 419 0052 9091 0000 		lds r25,debug_config
 420 0056 892F      		mov r24,r25
 421               	.LVL45:
 422 0058 8D7F      		andi r24,~(1<<1)
 423 005a 91FF      		sbrs r25,1
 424 005c 8260      		ori r24,1<<1
 425 005e 8093 0000 		sts debug_config,r24
 396:./tmk_core/common/command.c ****                 print("\nmatrix: on\n");
 426               		.loc 1 396 0
 427 0062 81FF      		sbrs r24,1
 428 0064 00C0      		rjmp .L81
 429               	.L51:
 398:./tmk_core/common/command.c ****             } else {
 430               		.loc 1 398 0
 431 0066 8091 0000 		lds r24,debug_config
 432 006a 8160      		ori r24,lo8(1<<0)
 433 006c 00C0      		rjmp .L83
 434               	.LVL46:
 435               	.L34:
 313:./tmk_core/common/command.c **** 
 436               		.loc 1 313 0
 437 006e 8833      		cpi r24,lo8(56)
 438 0070 01F0      		breq .L81
 439 0072 00F4      		brsh .L44
 440 0074 8932      		cpi r24,lo8(41)
 441 0076 01F0      		breq .L45
 442 0078 8533      		cpi r24,lo8(53)
 443 007a 01F0      		breq .L45
 444 007c 8732      		cpi r24,lo8(39)
 445 007e 01F4      		brne .L52
 446               	.L45:
 454:./tmk_core/common/command.c ****             break;
 447               		.loc 1 454 0
 448 0080 80E0      		ldi r24,0
 449               	.LVL47:
 450               	.L82:
 514:./tmk_core/common/command.c ****             break;
 451               		.loc 1 514 0
 452 0082 0E94 0000 		call switch_default_layer
 453               	.LVL48:
 454 0086 00C0      		rjmp .L81
 455               	.LVL49:
 456               	.L44:
 313:./tmk_core/common/command.c **** 
 457               		.loc 1 313 0
 458 0088 8334      		cpi r24,lo8(67)
 459 008a 01F0      		breq .L45
 460 008c 00F4      		brsh .L46
 461 008e 8A33      		cpi r24,lo8(58)
 462 0090 00F0      		brlo .L52
 504:./tmk_core/common/command.c ****             break;
 463               		.loc 1 504 0
 464 0092 8953      		subi r24,lo8(-(-57))
 465               	.LVL50:
 466 0094 00C0      		rjmp .L82
 467               	.LVL51:
 468               	.L46:
 313:./tmk_core/common/command.c **** 
 469               		.loc 1 313 0
 470 0096 8834      		cpi r24,lo8(72)
 471 0098 01F4      		brne .L52
 369:./tmk_core/common/command.c ****             print("\n\nJumping to bootloader... ");
 472               		.loc 1 369 0
 473 009a 0E94 0000 		call clear_keyboard
 474               	.LVL52:
 475               	.LBB4:
 476               	.LBB5:
 477               		.file 2 "/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 478               		.loc 2 187 0
 479 009e 2FEF      		ldi r18,lo8(3199999)
 480 00a0 83ED      		ldi r24,hi8(3199999)
 481 00a2 90E3      		ldi r25,hlo8(3199999)
 482 00a4 2150      	1:	subi r18,1
 483 00a6 8040      		sbci r24,0
 484 00a8 9040      		sbci r25,0
 485 00aa 01F4      		brne 1b
 486 00ac 00C0      		rjmp .
 487 00ae 0000      		nop
 488               	.LVL53:
 489               	.LBE5:
 490               	.LBE4:
 377:./tmk_core/common/command.c ****             break;
 491               		.loc 1 377 0
 492 00b0 0E94 0000 		call bootloader_jump
 493               	.LVL54:
 494               	.L81:
 525:./tmk_core/common/command.c **** }
 495               		.loc 1 525 0
 496 00b4 81E0      		ldi r24,lo8(1)
 378:./tmk_core/common/command.c **** 
 497               		.loc 1 378 0
 498 00b6 0895      		ret
 499               	.LVL55:
 500               	.L40:
 358:./tmk_core/common/command.c ****             debug_keyboard = false;
 501               		.loc 1 358 0
 502 00b8 8091 0000 		lds r24,debug_config
 503               	.LVL56:
 361:./tmk_core/common/command.c ****             command_console_help();
 504               		.loc 1 361 0
 505 00bc 817F      		andi r24,lo8(-15)
 506 00be 8E7F      		andi r24,lo8(~(1<<0))
 507 00c0 8093 0000 		sts debug_config,r24
 364:./tmk_core/common/command.c ****             break;
 508               		.loc 1 364 0
 509 00c4 81E0      		ldi r24,lo8(1)
 510 00c6 8093 0000 		sts command_state,r24
 365:./tmk_core/common/command.c **** 
 511               		.loc 1 365 0
 512 00ca 0895      		ret
 513               	.LVL57:
 514               	.L38:
 382:./tmk_core/common/command.c ****             if (debug_enable) {
 515               		.loc 1 382 0
 516 00cc 9091 0000 		lds r25,debug_config
 517 00d0 892F      		mov r24,r25
 518               	.LVL58:
 519 00d2 8E7F      		andi r24,~(1<<0)
 520 00d4 90FF      		sbrs r25,0
 521 00d6 8160      		ori r24,1<<0
 522 00d8 8093 0000 		sts debug_config,r24
 383:./tmk_core/common/command.c ****                 print("\ndebug: on\n");
 523               		.loc 1 383 0
 524 00dc 80FD      		sbrc r24,0
 525 00de 00C0      		rjmp .L81
 389:./tmk_core/common/command.c ****             }
 526               		.loc 1 389 0
 527 00e0 897F      		andi r24,lo8(-7)
 528 00e2 877F      		andi r24,lo8(~(1<<3))
 529               	.L83:
 398:./tmk_core/common/command.c ****             } else {
 530               		.loc 1 398 0
 531 00e4 8093 0000 		sts debug_config,r24
 532 00e8 00C0      		rjmp .L81
 533               	.LVL59:
 534               	.L36:
 406:./tmk_core/common/command.c ****             if (debug_keyboard) {
 535               		.loc 1 406 0
 536 00ea 9091 0000 		lds r25,debug_config
 537 00ee 892F      		mov r24,r25
 538               	.LVL60:
 539 00f0 8B7F      		andi r24,~(1<<2)
 540 00f2 92FF      		sbrs r25,2
 541 00f4 8460      		ori r24,1<<2
 542 00f6 8093 0000 		sts debug_config,r24
 407:./tmk_core/common/command.c ****                 print("\nkeyboard: on\n");
 543               		.loc 1 407 0
 544 00fa 82FD      		sbrc r24,2
 545 00fc 00C0      		rjmp .L51
 546 00fe 00C0      		rjmp .L81
 547               	.LVL61:
 548               	.L35:
 514:./tmk_core/common/command.c ****             break;
 549               		.loc 1 514 0
 550 0100 8D51      		subi r24,lo8(-(-29))
 551               	.LVL62:
 552 0102 00C0      		rjmp .L82
 553               		.cfi_endproc
 554               	.LFE34:
 556               		.section	.text.rgblight_toggle,"ax",@progbits
 557               		.weak	rgblight_toggle
 559               	rgblight_toggle:
 560               	.LFB13:
 561               		.file 3 "./quantum/rgb.h"
   1:./quantum/rgb.h **** /* Copyright 2017 Jack Humbert
   2:./quantum/rgb.h ****  *
   3:./quantum/rgb.h ****  * This program is free software: you can redistribute it and/or modify
   4:./quantum/rgb.h ****  * it under the terms of the GNU General Public License as published by
   5:./quantum/rgb.h ****  * the Free Software Foundation, either version 2 of the License, or
   6:./quantum/rgb.h ****  * (at your option) any later version.
   7:./quantum/rgb.h ****  *
   8:./quantum/rgb.h ****  * This program is distributed in the hope that it will be useful,
   9:./quantum/rgb.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:./quantum/rgb.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:./quantum/rgb.h ****  * GNU General Public License for more details.
  12:./quantum/rgb.h ****  *
  13:./quantum/rgb.h ****  * You should have received a copy of the GNU General Public License
  14:./quantum/rgb.h ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15:./quantum/rgb.h ****  */
  16:./quantum/rgb.h **** 
  17:./quantum/rgb.h **** #ifndef RGB_H
  18:./quantum/rgb.h **** #define RGB_H
  19:./quantum/rgb.h **** 
  20:./quantum/rgb.h **** __attribute__((weak))
  21:./quantum/rgb.h **** void rgblight_toggle(void) {};
 562               		.loc 3 21 0
 563               		.cfi_startproc
 564               	/* prologue: function */
 565               	/* frame size = 0 */
 566               	/* stack size = 0 */
 567               	.L__stack_usage = 0
 568               	/* epilogue start */
 569               		.loc 3 21 0
 570 0000 0895      		ret
 571               		.cfi_endproc
 572               	.LFE13:
 574               		.section	.text.rgblight_step,"ax",@progbits
 575               		.weak	rgblight_step
 577               	rgblight_step:
 578               	.LFB47:
 579               		.cfi_startproc
 580               	/* prologue: function */
 581               	/* frame size = 0 */
 582               	/* stack size = 0 */
 583               	.L__stack_usage = 0
 584               	/* epilogue start */
 585 0000 0895      		ret
 586               		.cfi_endproc
 587               	.LFE47:
 589               		.section	.text.rgblight_step_reverse,"ax",@progbits
 590               		.weak	rgblight_step_reverse
 592               	rgblight_step_reverse:
 593               	.LFB49:
 594               		.cfi_startproc
 595               	/* prologue: function */
 596               	/* frame size = 0 */
 597               	/* stack size = 0 */
 598               	.L__stack_usage = 0
 599               	/* epilogue start */
 600 0000 0895      		ret
 601               		.cfi_endproc
 602               	.LFE49:
 604               		.section	.text.rgblight_increase_hue,"ax",@progbits
 605               		.weak	rgblight_increase_hue
 607               	rgblight_increase_hue:
 608               	.LFB51:
 609               		.cfi_startproc
 610               	/* prologue: function */
 611               	/* frame size = 0 */
 612               	/* stack size = 0 */
 613               	.L__stack_usage = 0
 614               	/* epilogue start */
 615 0000 0895      		ret
 616               		.cfi_endproc
 617               	.LFE51:
 619               		.section	.text.rgblight_decrease_hue,"ax",@progbits
 620               		.weak	rgblight_decrease_hue
 622               	rgblight_decrease_hue:
 623               	.LFB53:
 624               		.cfi_startproc
 625               	/* prologue: function */
 626               	/* frame size = 0 */
 627               	/* stack size = 0 */
 628               	.L__stack_usage = 0
 629               	/* epilogue start */
 630 0000 0895      		ret
 631               		.cfi_endproc
 632               	.LFE53:
 634               		.section	.text.rgblight_increase_sat,"ax",@progbits
 635               		.weak	rgblight_increase_sat
 637               	rgblight_increase_sat:
 638               	.LFB55:
 639               		.cfi_startproc
 640               	/* prologue: function */
 641               	/* frame size = 0 */
 642               	/* stack size = 0 */
 643               	.L__stack_usage = 0
 644               	/* epilogue start */
 645 0000 0895      		ret
 646               		.cfi_endproc
 647               	.LFE55:
 649               		.section	.text.rgblight_decrease_sat,"ax",@progbits
 650               		.weak	rgblight_decrease_sat
 652               	rgblight_decrease_sat:
 653               	.LFB57:
 654               		.cfi_startproc
 655               	/* prologue: function */
 656               	/* frame size = 0 */
 657               	/* stack size = 0 */
 658               	.L__stack_usage = 0
 659               	/* epilogue start */
 660 0000 0895      		ret
 661               		.cfi_endproc
 662               	.LFE57:
 664               		.section	.text.rgblight_increase_val,"ax",@progbits
 665               		.weak	rgblight_increase_val
 667               	rgblight_increase_val:
 668               	.LFB59:
 669               		.cfi_startproc
 670               	/* prologue: function */
 671               	/* frame size = 0 */
 672               	/* stack size = 0 */
 673               	.L__stack_usage = 0
 674               	/* epilogue start */
 675 0000 0895      		ret
 676               		.cfi_endproc
 677               	.LFE59:
 679               		.section	.text.rgblight_decrease_val,"ax",@progbits
 680               		.weak	rgblight_decrease_val
 682               	rgblight_decrease_val:
 683               	.LFB61:
 684               		.cfi_startproc
 685               	/* prologue: function */
 686               	/* frame size = 0 */
 687               	/* stack size = 0 */
 688               	.L__stack_usage = 0
 689               	/* epilogue start */
 690 0000 0895      		ret
 691               		.cfi_endproc
 692               	.LFE61:
 694               		.section	.text.rgblight_increase_speed,"ax",@progbits
 695               		.weak	rgblight_increase_speed
 697               	rgblight_increase_speed:
 698               	.LFB63:
 699               		.cfi_startproc
 700               	/* prologue: function */
 701               	/* frame size = 0 */
 702               	/* stack size = 0 */
 703               	.L__stack_usage = 0
 704               	/* epilogue start */
 705 0000 0895      		ret
 706               		.cfi_endproc
 707               	.LFE63:
 709               		.section	.text.rgblight_decrease_speed,"ax",@progbits
 710               		.weak	rgblight_decrease_speed
 712               	rgblight_decrease_speed:
 713               	.LFB65:
 714               		.cfi_startproc
 715               	/* prologue: function */
 716               	/* frame size = 0 */
 717               	/* stack size = 0 */
 718               	.L__stack_usage = 0
 719               	/* epilogue start */
 720 0000 0895      		ret
 721               		.cfi_endproc
 722               	.LFE65:
 724               		.section	.text.command_extra,"ax",@progbits
 725               		.weak	command_extra
 727               	command_extra:
 728               	.LFB29:
 106:./tmk_core/common/command.c ****     (void)code;
 729               		.loc 1 106 0
 730               		.cfi_startproc
 731               	.LVL63:
 732               	/* prologue: function */
 733               	/* frame size = 0 */
 734               	/* stack size = 0 */
 735               	.L__stack_usage = 0
 109:./tmk_core/common/command.c **** 
 736               		.loc 1 109 0
 737 0000 80E0      		ldi r24,0
 738               	.LVL64:
 739               	/* epilogue start */
 740 0002 0895      		ret
 741               		.cfi_endproc
 742               	.LFE29:
 744               		.set	command_extra.localalias.0,command_extra
 745               		.section	.text.command_console_extra,"ax",@progbits
 746               		.weak	command_console_extra
 748               	command_console_extra:
 749               	.LFB45:
 750               		.cfi_startproc
 751               	/* prologue: function */
 752               	/* frame size = 0 */
 753               	/* stack size = 0 */
 754               	.L__stack_usage = 0
 755 0000 0C94 0000 		jmp command_extra.localalias.0
 756               		.cfi_endproc
 757               	.LFE45:
 759               		.section	.text.numkey2num,"ax",@progbits
 760               	.global	numkey2num
 762               	numkey2num:
 763               	.LFB42:
 778:./tmk_core/common/command.c ****     switch (code) {
 764               		.loc 1 778 0
 765               		.cfi_startproc
 766               	.LVL65:
 767               	/* prologue: function */
 768               	/* frame size = 0 */
 769               	/* stack size = 0 */
 770               	.L__stack_usage = 0
 771 0000 8E51      		subi r24,lo8(-(-30))
 772               	.LVL66:
 773 0002 8A30      		cpi r24,lo8(10)
 774 0004 00F4      		brsh .L99
 775 0006 E82F      		mov r30,r24
 776 0008 F0E0      		ldi r31,0
 777 000a E050      		subi r30,lo8(-(CSWTCH.62))
 778 000c F040      		sbci r31,hi8(-(CSWTCH.62))
 779 000e 8081      		ld r24,Z
 780               	.LVL67:
 781 0010 0895      		ret
 782               	.L99:
 778:./tmk_core/common/command.c ****     switch (code) {
 783               		.loc 1 778 0
 784 0012 80E0      		ldi r24,0
 785               	/* epilogue start */
 792:./tmk_core/common/command.c **** 
 786               		.loc 1 792 0
 787 0014 0895      		ret
 788               		.cfi_endproc
 789               	.LFE42:
 791               		.section	.text.command_proc,"ax",@progbits
 792               	.global	command_proc
 794               	command_proc:
 795               	.LFB28:
  77:./tmk_core/common/command.c ****     switch (command_state) {
 796               		.loc 1 77 0
 797               		.cfi_startproc
 798               	.LVL68:
 799 0000 CF93      		push r28
 800               	.LCFI2:
 801               		.cfi_def_cfa_offset 3
 802               		.cfi_offset 28, -2
 803               	/* prologue: function */
 804               	/* frame size = 0 */
 805               	/* stack size = 1 */
 806               	.L__stack_usage = 1
 807 0002 C82F      		mov r28,r24
  78:./tmk_core/common/command.c ****         case ONESHOT:
 808               		.loc 1 78 0
 809 0004 8091 0000 		lds r24,command_state
 810               	.LVL69:
 811 0008 8130      		cpi r24,lo8(1)
 812 000a 01F0      		breq .L102
 813 000c 00F0      		brlo .L103
 814 000e 8230      		cpi r24,lo8(2)
 815 0010 01F0      		breq .L104
  96:./tmk_core/common/command.c ****             return false;
 816               		.loc 1 96 0
 817 0012 1092 0000 		sts command_state,__zero_reg__
 818               	.L125:
  81:./tmk_core/common/command.c ****             return (command_extra(code) || command_common(code));
 819               		.loc 1 81 0
 820 0016 80E0      		ldi r24,0
 821 0018 00C0      		rjmp .L100
 822               	.L103:
  80:./tmk_core/common/command.c ****                 return false;
 823               		.loc 1 80 0
 824 001a E091 0000 		lds r30,keyboard_report
 825 001e F091 0000 		lds r31,keyboard_report+1
 826 0022 8081      		ld r24,Z
 827 0024 8232      		cpi r24,lo8(34)
 828 0026 01F4      		brne .L125
 829               	.L155:
  86:./tmk_core/common/command.c ****             else
 830               		.loc 1 86 0
 831 0028 8C2F      		mov r24,r28
 832 002a 0E94 0000 		call command_extra
 833               	.LVL70:
 834 002e 8111      		cpse r24,__zero_reg__
 835 0030 00C0      		rjmp .L127
  86:./tmk_core/common/command.c ****             else
 836               		.loc 1 86 0 is_stmt 0 discriminator 2
 837 0032 8C2F      		mov r24,r28
 838 0034 0E94 0000 		call command_common
 839               	.LVL71:
 840               	.L109:
  88:./tmk_core/common/command.c ****             break;
 841               		.loc 1 88 0 is_stmt 1 discriminator 6
 842 0038 8170      		andi r24,lo8(1)
 843               	.L100:
 844               	/* epilogue start */
 100:./tmk_core/common/command.c **** 
 845               		.loc 1 100 0
 846 003a CF91      		pop r28
 847               	.LVL72:
 848 003c 0895      		ret
 849               	.LVL73:
 850               	.L102:
  85:./tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
 851               		.loc 1 85 0
 852 003e E091 0000 		lds r30,keyboard_report
 853 0042 F091 0000 		lds r31,keyboard_report+1
 854 0046 8081      		ld r24,Z
 855 0048 8232      		cpi r24,lo8(34)
 856 004a 01F0      		breq .L155
  88:./tmk_core/common/command.c ****             break;
 857               		.loc 1 88 0
 858 004c 8C2F      		mov r24,r28
 859 004e 0E94 0000 		call command_console_extra
 860               	.LVL74:
 861 0052 8111      		cpse r24,__zero_reg__
 862 0054 00C0      		rjmp .L128
 863               	.LVL75:
 864               	.LBB10:
 865               	.LBB11:
 544:./tmk_core/common/command.c ****         case KC_H:
 866               		.loc 1 544 0
 867 0056 C431      		cpi r28,lo8(20)
 868 0058 01F0      		breq .L110
 869 005a 00F4      		brsh .L111
 870 005c CB30      		cpi r28,lo8(11)
 871 005e 01F0      		breq .L128
 872 0060 C031      		cpi r28,lo8(16)
 873 0062 01F0      		breq .L113
 874               	.LVL76:
 875               	.L129:
 876               	.LBE11:
 877               	.LBE10:
  88:./tmk_core/common/command.c ****             break;
 878               		.loc 1 88 0
 879 0064 80E0      		ldi r24,0
 880 0066 00C0      		rjmp .L109
 881               	.L127:
  86:./tmk_core/common/command.c ****             else
 882               		.loc 1 86 0
 883 0068 81E0      		ldi r24,lo8(1)
 884 006a 90E0      		ldi r25,0
 885 006c 00C0      		rjmp .L109
 886               	.LVL77:
 887               	.L111:
 888               	.LBB14:
 889               	.LBB12:
 544:./tmk_core/common/command.c ****         case KC_H:
 890               		.loc 1 544 0
 891 006e C932      		cpi r28,lo8(41)
 892 0070 01F0      		breq .L110
 893 0072 C833      		cpi r28,lo8(56)
 894 0074 01F4      		brne .L129
 895               	.LVL78:
 896               	.L128:
 897               	.LBE12:
 898               	.LBE14:
  88:./tmk_core/common/command.c ****             break;
 899               		.loc 1 88 0
 900 0076 81E0      		ldi r24,lo8(1)
 901 0078 00C0      		rjmp .L109
 902               	.LVL79:
 903               	.L110:
 904               	.LBB15:
 905               	.LBB13:
 551:./tmk_core/common/command.c ****             return false;
 906               		.loc 1 551 0
 907 007a 1092 0000 		sts command_state,__zero_reg__
 908               	.LVL80:
 909 007e 00C0      		rjmp .L129
 910               	.LVL81:
 911               	.L113:
 557:./tmk_core/common/command.c ****             return true;
 912               		.loc 1 557 0
 913 0080 82E0      		ldi r24,lo8(2)
 914 0082 8093 0000 		sts command_state,r24
 915               	.LVL82:
 916 0086 00C0      		rjmp .L128
 917               	.L104:
 918               	.LVL83:
 919               	.LBE13:
 920               	.LBE15:
 921               	.LBB16:
 922               	.LBB17:
 713:./tmk_core/common/command.c ****         case KC_H:
 923               		.loc 1 713 0
 924 0088 C932      		cpi r28,lo8(41)
 925 008a 01F0      		breq .L114
 926 008c 00F4      		brsh .L115
 927 008e C431      		cpi r28,lo8(20)
 928 0090 01F0      		breq .L114
 929 0092 00F4      		brsh .L116
 930 0094 C730      		cpi r28,lo8(7)
 931 0096 01F0      		breq .L117
 932               	.L130:
 933               	.LBE17:
 934               	.LBE16:
  99:./tmk_core/common/command.c **** }
 935               		.loc 1 99 0
 936 0098 81E0      		ldi r24,lo8(1)
 937 009a 00C0      		rjmp .L100
 938               	.L116:
 939               	.LBB19:
 940               	.LBB18:
 713:./tmk_core/common/command.c ****         case KC_H:
 941               		.loc 1 713 0
 942 009c 82EE      		ldi r24,lo8(-30)
 943 009e 8C0F      		add r24,r28
 944 00a0 8630      		cpi r24,lo8(6)
 945 00a2 00F4      		brsh .L130
 737:./tmk_core/common/command.c ****             break;
 946               		.loc 1 737 0
 947 00a4 8C2F      		mov r24,r28
 948 00a6 0E94 0000 		call numkey2num
 949               	.LVL84:
 950 00aa 8093 0000 		sts mousekey_param,r24
 951 00ae 00C0      		rjmp .L130
 952               	.L115:
 713:./tmk_core/common/command.c ****         case KC_H:
 953               		.loc 1 713 0
 954 00b0 CE34      		cpi r28,lo8(78)
 955 00b2 01F0      		breq .L119
 956 00b4 00F4      		brsh .L120
 746:./tmk_core/common/command.c ****             break;
 957               		.loc 1 746 0
 958 00b6 6AE0      		ldi r22,lo8(10)
 713:./tmk_core/common/command.c ****         case KC_H:
 959               		.loc 1 713 0
 960 00b8 CB34      		cpi r28,lo8(75)
 961 00ba 01F4      		brne .L130
 962               	.L153:
 746:./tmk_core/common/command.c ****             break;
 963               		.loc 1 746 0
 964 00bc 8091 0000 		lds r24,mousekey_param
 965 00c0 0E94 0000 		call mousekey_param_inc
 966               	.LVL85:
 967 00c4 00C0      		rjmp .L130
 968               	.L120:
 713:./tmk_core/common/command.c ****         case KC_H:
 969               		.loc 1 713 0
 970 00c6 C135      		cpi r28,lo8(81)
 971 00c8 01F0      		breq .L122
 740:./tmk_core/common/command.c ****             break;
 972               		.loc 1 740 0
 973 00ca 61E0      		ldi r22,lo8(1)
 713:./tmk_core/common/command.c ****         case KC_H:
 974               		.loc 1 713 0
 975 00cc C235      		cpi r28,lo8(82)
 976 00ce 01F0      		breq .L153
 977 00d0 00C0      		rjmp .L130
 978               	.L114:
 720:./tmk_core/common/command.c ****                 mousekey_param = 0;
 979               		.loc 1 720 0
 980 00d2 8091 0000 		lds r24,mousekey_param
 981 00d6 8823      		tst r24
 982 00d8 01F0      		breq .L124
 721:./tmk_core/common/command.c ****             } else {
 983               		.loc 1 721 0
 984 00da 1092 0000 		sts mousekey_param,__zero_reg__
 985 00de 00C0      		rjmp .L130
 986               	.L124:
 724:./tmk_core/common/command.c ****                 return false;
 987               		.loc 1 724 0
 988 00e0 81E0      		ldi r24,lo8(1)
 989 00e2 8093 0000 		sts command_state,r24
 990 00e6 00C0      		rjmp .L100
 991               	.L122:
 743:./tmk_core/common/command.c ****             break;
 992               		.loc 1 743 0
 993 00e8 61E0      		ldi r22,lo8(1)
 994               	.L152:
 749:./tmk_core/common/command.c ****             break;
 995               		.loc 1 749 0
 996 00ea 8091 0000 		lds r24,mousekey_param
 997 00ee 0E94 0000 		call mousekey_param_dec
 998               	.LVL86:
 999 00f2 00C0      		rjmp .L130
 1000               	.L119:
 1001 00f4 6AE0      		ldi r22,lo8(10)
 1002 00f6 00C0      		rjmp .L152
 1003               	.L117:
 752:./tmk_core/common/command.c ****             mk_interval = MOUSEKEY_INTERVAL;
 1004               		.loc 1 752 0
 1005 00f8 8EE1      		ldi r24,lo8(30)
 1006 00fa 8093 0000 		sts mk_delay,r24
 753:./tmk_core/common/command.c ****             mk_max_speed = MOUSEKEY_MAX_SPEED;
 1007               		.loc 1 753 0
 1008 00fe 82E3      		ldi r24,lo8(50)
 1009 0100 8093 0000 		sts mk_interval,r24
 754:./tmk_core/common/command.c ****             mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 1010               		.loc 1 754 0
 1011 0104 8AE0      		ldi r24,lo8(10)
 1012 0106 8093 0000 		sts mk_max_speed,r24
 755:./tmk_core/common/command.c ****             mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 1013               		.loc 1 755 0
 1014 010a 84E1      		ldi r24,lo8(20)
 1015 010c 8093 0000 		sts mk_time_to_max,r24
 756:./tmk_core/common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 1016               		.loc 1 756 0
 1017 0110 88E0      		ldi r24,lo8(8)
 1018 0112 8093 0000 		sts mk_wheel_max_speed,r24
 757:./tmk_core/common/command.c ****             print("set default\n");
 1019               		.loc 1 757 0
 1020 0116 88E2      		ldi r24,lo8(40)
 1021 0118 8093 0000 		sts mk_wheel_time_to_max,r24
 1022 011c 00C0      		rjmp .L130
 1023               	.LBE18:
 1024               	.LBE19:
 1025               		.cfi_endproc
 1026               	.LFE28:
 1028               		.section	.rodata.CSWTCH.62,"a",@progbits
 1031               	CSWTCH.62:
 1032 0000 01        		.byte	1
 1033 0001 02        		.byte	2
 1034 0002 03        		.byte	3
 1035 0003 04        		.byte	4
 1036 0004 05        		.byte	5
 1037 0005 06        		.byte	6
 1038 0006 07        		.byte	7
 1039 0007 08        		.byte	8
 1040 0008 09        		.byte	9
 1041 0009 00        		.byte	0
 1042               		.section	.bss.mousekey_param,"aw",@nobits
 1045               	mousekey_param:
 1046 0000 00        		.zero	1
 1047               	.global	command_state
 1048               		.section	.bss.command_state,"aw",@nobits
 1051               	command_state:
 1052 0000 00        		.zero	1
 1053               		.text
 1054               	.Letext0:
 1055               		.file 4 "/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/stdint.h"
 1056               		.file 5 "./tmk_core/common/report.h"
 1057               		.file 6 "./tmk_core/common/host.h"
 1058               		.file 7 "/usr/local/Cellar/avr-gcc@7/7.3.0/lib/avr-gcc/7/gcc/avr/7.3.0/include/stddef.h"
 1059               		.file 8 "./tmk_core/common/debug.h"
 1060               		.file 9 "./quantum/keycode_config.h"
 1061               		.file 10 "./quantum/keymap.h"
 1062               		.file 11 "./tmk_core/common/timer.h"
 1063               		.file 12 "./tmk_core/common/action_layer.h"
 1064               		.file 13 "./tmk_core/common/action_util.h"
 1065               		.file 14 "./tmk_core/common/command.h"
 1066               		.file 15 "/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/stdlib.h"
 1067               		.file 16 "./quantum/process_keycode/process_tap_dance.h"
 1068               		.file 17 "./quantum/quantum.h"
 1069               		.file 18 "./tmk_core/common/mousekey.h"
 1070               		.file 19 "./tmk_core/common/action.h"
 1071               		.file 20 "./tmk_core/common/bootloader.h"
 1072               		.file 21 "./tmk_core/common/keycode.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 command.c
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccpPhweH.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccpPhweH.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccpPhweH.s:4      *ABS*:000000000000003f __SREG__
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccpPhweH.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccpPhweH.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccpPhweH.s:12     .text.mousekey_param_inc:0000000000000000 mousekey_param_inc
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccpPhweH.s:184    .text.mousekey_param_dec:0000000000000000 mousekey_param_dec
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccpPhweH.s:305    .text.switch_default_layer:0000000000000000 switch_default_layer
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccpPhweH.s:355    .text.command_common:0000000000000000 command_common
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccpPhweH.s:1051   .bss.command_state:0000000000000000 command_state
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccpPhweH.s:559    .text.rgblight_toggle:0000000000000000 rgblight_toggle
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccpPhweH.s:577    .text.rgblight_step:0000000000000000 rgblight_step
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccpPhweH.s:592    .text.rgblight_step_reverse:0000000000000000 rgblight_step_reverse
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccpPhweH.s:607    .text.rgblight_increase_hue:0000000000000000 rgblight_increase_hue
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccpPhweH.s:622    .text.rgblight_decrease_hue:0000000000000000 rgblight_decrease_hue
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccpPhweH.s:637    .text.rgblight_increase_sat:0000000000000000 rgblight_increase_sat
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccpPhweH.s:652    .text.rgblight_decrease_sat:0000000000000000 rgblight_decrease_sat
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccpPhweH.s:667    .text.rgblight_increase_val:0000000000000000 rgblight_increase_val
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccpPhweH.s:682    .text.rgblight_decrease_val:0000000000000000 rgblight_decrease_val
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccpPhweH.s:697    .text.rgblight_increase_speed:0000000000000000 rgblight_increase_speed
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccpPhweH.s:712    .text.rgblight_decrease_speed:0000000000000000 rgblight_decrease_speed
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccpPhweH.s:727    .text.command_extra:0000000000000000 command_extra
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccpPhweH.s:727    .text.command_extra:0000000000000000 command_extra.localalias.0
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccpPhweH.s:748    .text.command_console_extra:0000000000000000 command_console_extra
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccpPhweH.s:762    .text.numkey2num:0000000000000000 numkey2num
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccpPhweH.s:1031   .rodata.CSWTCH.62:0000000000000000 CSWTCH.62
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccpPhweH.s:794    .text.command_proc:0000000000000000 command_proc
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccpPhweH.s:1045   .bss.mousekey_param:0000000000000000 mousekey_param

UNDEFINED SYMBOLS
mk_delay
mk_interval
mk_max_speed
mk_time_to_max
mk_wheel_max_speed
mk_wheel_time_to_max
default_layer_set
clear_keyboard
debug_config
bootloader_jump
keyboard_report
__do_copy_data
__do_clear_bss
