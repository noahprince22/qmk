   1               		.file	"command.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.mousekey_param_inc,"ax",@progbits
  12               	mousekey_param_inc:
  13               	.LFB38:
  14               		.file 1 "./tmk_core/common/command.c"
   1:./tmk_core/common/command.c **** /*
   2:./tmk_core/common/command.c **** Copyright 2011 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/command.c **** 
   4:./tmk_core/common/command.c **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/command.c **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/command.c **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/command.c **** (at your option) any later version.
   8:./tmk_core/common/command.c **** 
   9:./tmk_core/common/command.c **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/command.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/command.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/command.c **** GNU General Public License for more details.
  13:./tmk_core/common/command.c **** 
  14:./tmk_core/common/command.c **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/command.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/command.c **** */
  17:./tmk_core/common/command.c **** #include <stdint.h>
  18:./tmk_core/common/command.c **** #include <stdbool.h>
  19:./tmk_core/common/command.c **** #include "wait.h"
  20:./tmk_core/common/command.c **** #include "keycode.h"
  21:./tmk_core/common/command.c **** #include "host.h"
  22:./tmk_core/common/command.c **** #include "keymap.h"
  23:./tmk_core/common/command.c **** #include "print.h"
  24:./tmk_core/common/command.c **** #include "debug.h"
  25:./tmk_core/common/command.c **** #include "util.h"
  26:./tmk_core/common/command.c **** #include "timer.h"
  27:./tmk_core/common/command.c **** #include "keyboard.h"
  28:./tmk_core/common/command.c **** #include "bootloader.h"
  29:./tmk_core/common/command.c **** #include "action_layer.h"
  30:./tmk_core/common/command.c **** #include "action_util.h"
  31:./tmk_core/common/command.c **** #include "eeconfig.h"
  32:./tmk_core/common/command.c **** #include "sleep_led.h"
  33:./tmk_core/common/command.c **** #include "led.h"
  34:./tmk_core/common/command.c **** #include "command.h"
  35:./tmk_core/common/command.c **** #include "backlight.h"
  36:./tmk_core/common/command.c **** #include "quantum.h"
  37:./tmk_core/common/command.c **** #include "version.h"
  38:./tmk_core/common/command.c **** 
  39:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  40:./tmk_core/common/command.c **** #include "mousekey.h"
  41:./tmk_core/common/command.c **** #endif
  42:./tmk_core/common/command.c **** 
  43:./tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
  44:./tmk_core/common/command.c **** 	#include "usb_keyboard.h"
  45:./tmk_core/common/command.c **** 		#ifdef EXTRAKEY_ENABLE
  46:./tmk_core/common/command.c **** 		#include "usb_extra.h"
  47:./tmk_core/common/command.c **** 	#endif
  48:./tmk_core/common/command.c **** #endif
  49:./tmk_core/common/command.c **** 
  50:./tmk_core/common/command.c **** #ifdef PROTOCOL_VUSB
  51:./tmk_core/common/command.c **** 	#include "usbdrv.h"
  52:./tmk_core/common/command.c **** #endif
  53:./tmk_core/common/command.c **** 
  54:./tmk_core/common/command.c **** #ifdef AUDIO_ENABLE
  55:./tmk_core/common/command.c ****     #include "audio.h"
  56:./tmk_core/common/command.c **** #endif /* AUDIO_ENABLE */
  57:./tmk_core/common/command.c **** 
  58:./tmk_core/common/command.c **** 
  59:./tmk_core/common/command.c **** static bool command_common(uint8_t code);
  60:./tmk_core/common/command.c **** static void command_common_help(void);
  61:./tmk_core/common/command.c **** static void print_version(void);
  62:./tmk_core/common/command.c **** static void print_status(void);
  63:./tmk_core/common/command.c **** static bool command_console(uint8_t code);
  64:./tmk_core/common/command.c **** static void command_console_help(void);
  65:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  66:./tmk_core/common/command.c **** static bool mousekey_console(uint8_t code);
  67:./tmk_core/common/command.c **** static void mousekey_console_help(void);
  68:./tmk_core/common/command.c **** #endif
  69:./tmk_core/common/command.c **** 
  70:./tmk_core/common/command.c **** static void switch_default_layer(uint8_t layer);
  71:./tmk_core/common/command.c **** 
  72:./tmk_core/common/command.c **** 
  73:./tmk_core/common/command.c **** command_state_t command_state = ONESHOT;
  74:./tmk_core/common/command.c **** 
  75:./tmk_core/common/command.c **** 
  76:./tmk_core/common/command.c **** bool command_proc(uint8_t code)
  77:./tmk_core/common/command.c **** {
  78:./tmk_core/common/command.c ****     switch (command_state) {
  79:./tmk_core/common/command.c ****         case ONESHOT:
  80:./tmk_core/common/command.c ****             if (!IS_COMMAND())
  81:./tmk_core/common/command.c ****                 return false;
  82:./tmk_core/common/command.c ****             return (command_extra(code) || command_common(code));
  83:./tmk_core/common/command.c ****             break;
  84:./tmk_core/common/command.c ****         case CONSOLE:
  85:./tmk_core/common/command.c ****             if (IS_COMMAND())
  86:./tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
  87:./tmk_core/common/command.c ****             else
  88:./tmk_core/common/command.c ****                 return (command_console_extra(code) || command_console(code));
  89:./tmk_core/common/command.c ****             break;
  90:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  91:./tmk_core/common/command.c ****         case MOUSEKEY:
  92:./tmk_core/common/command.c ****             mousekey_console(code);
  93:./tmk_core/common/command.c ****             break;
  94:./tmk_core/common/command.c **** #endif
  95:./tmk_core/common/command.c ****         default:
  96:./tmk_core/common/command.c ****             command_state = ONESHOT;
  97:./tmk_core/common/command.c ****             return false;
  98:./tmk_core/common/command.c ****     }
  99:./tmk_core/common/command.c ****     return true;
 100:./tmk_core/common/command.c **** }
 101:./tmk_core/common/command.c **** 
 102:./tmk_core/common/command.c **** /* TODO: Refactoring is needed. */
 103:./tmk_core/common/command.c **** /* This allows to define extra commands. return false when not processed. */
 104:./tmk_core/common/command.c **** bool command_extra(uint8_t code) __attribute__ ((weak));
 105:./tmk_core/common/command.c **** bool command_extra(uint8_t code)
 106:./tmk_core/common/command.c **** {
 107:./tmk_core/common/command.c ****     (void)code;
 108:./tmk_core/common/command.c ****     return false;
 109:./tmk_core/common/command.c **** }
 110:./tmk_core/common/command.c **** 
 111:./tmk_core/common/command.c **** bool command_console_extra(uint8_t code) __attribute__ ((weak));
 112:./tmk_core/common/command.c **** bool command_console_extra(uint8_t code)
 113:./tmk_core/common/command.c **** {
 114:./tmk_core/common/command.c ****     (void)code;
 115:./tmk_core/common/command.c ****     return false;
 116:./tmk_core/common/command.c **** }
 117:./tmk_core/common/command.c **** 
 118:./tmk_core/common/command.c **** 
 119:./tmk_core/common/command.c **** /***********************************************************
 120:./tmk_core/common/command.c ****  * Command common
 121:./tmk_core/common/command.c ****  ***********************************************************/
 122:./tmk_core/common/command.c **** static void command_common_help(void)
 123:./tmk_core/common/command.c **** {
 124:./tmk_core/common/command.c **** 	print(                            "\n\t- Magic -\n"
 125:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG       ) ":	Debug Message Toggle\n"
 126:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG_MATRIX) ":	Matrix Debug Mode Toggle - Show keypresses in matrix grid\n"
 127:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG_KBD   ) ":	Keyboard Debug Toggle - Show keypress report\n"
 128:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG_MOUSE ) ":	Debug Mouse Toggle\n"
 129:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_VERSION     ) ":	Version\n"
 130:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_STATUS      ) ":	Status\n"
 131:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_CONSOLE     ) ":	Activate Console Mode\n"
 132:./tmk_core/common/command.c **** 
 133:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_CUSTOM
 134:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER0      ) ":	Switch to Layer 0\n"
 135:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER1      ) ":	Switch to Layer 1\n"
 136:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER2      ) ":	Switch to Layer 2\n"
 137:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER3      ) ":	Switch to Layer 3\n"
 138:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER4      ) ":	Switch to Layer 4\n"
 139:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER5      ) ":	Switch to Layer 5\n"
 140:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER6      ) ":	Switch to Layer 6\n"
 141:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER7      ) ":	Switch to Layer 7\n"
 142:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER8      ) ":	Switch to Layer 8\n"
 143:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER9      ) ":	Switch to Layer 9\n"
 144:./tmk_core/common/command.c **** #endif
 145:./tmk_core/common/command.c **** 
 146:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_FKEYS
 147:./tmk_core/common/command.c **** 		                            "F1-F10:	Switch to Layer 0-9 (F10 = L0)\n"
 148:./tmk_core/common/command.c **** #endif
 149:./tmk_core/common/command.c **** 
 150:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_NKEYS
 151:./tmk_core/common/command.c **** 		                            "0-9:	Switch to Layer 0-9\n"
 152:./tmk_core/common/command.c **** #endif
 153:./tmk_core/common/command.c **** 
 154:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER0_ALT1 ) ":	Switch to Layer 0 (alternate key 1)\n"
 155:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER0_ALT2 ) ":	Switch to Layer 0 (alternate key 2)\n"
 156:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_BOOTLOADER  ) ":	Jump to Bootloader (Reset)\n"
 157:./tmk_core/common/command.c **** 
 158:./tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 159:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LOCK        ) ":	Lock\n"
 160:./tmk_core/common/command.c **** #endif
 161:./tmk_core/common/command.c **** 
 162:./tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 163:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_EEPROM      ) ":	Print EEPROM Settings\n"
 164:./tmk_core/common/command.c **** #endif
 165:./tmk_core/common/command.c **** 
 166:./tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 167:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_NKRO        ) ":	NKRO Toggle\n"
 168:./tmk_core/common/command.c **** #endif
 169:./tmk_core/common/command.c **** 
 170:./tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 171:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_SLEEP_LED   ) ":	Sleep LED Test\n"
 172:./tmk_core/common/command.c **** #endif
 173:./tmk_core/common/command.c ****     );
 174:./tmk_core/common/command.c **** }
 175:./tmk_core/common/command.c **** 
 176:./tmk_core/common/command.c **** static void print_version(void)
 177:./tmk_core/common/command.c **** {
 178:./tmk_core/common/command.c **** 	// print version & information
 179:./tmk_core/common/command.c ****     print("\n\t- Version -\n");
 180:./tmk_core/common/command.c ****     print("DESC: " STR(DESCRIPTION) "\n");
 181:./tmk_core/common/command.c ****     print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
 182:./tmk_core/common/command.c ****           "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
 183:./tmk_core/common/command.c ****           "VER: " STR(DEVICE_VER) "\n");
 184:./tmk_core/common/command.c ****     print("BUILD: " STR(QMK_VERSION) " (" __TIME__ " " __DATE__ ")\n");
 185:./tmk_core/common/command.c **** 
 186:./tmk_core/common/command.c ****     /* build options */
 187:./tmk_core/common/command.c ****     print("OPTIONS:"
 188:./tmk_core/common/command.c **** 
 189:./tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 190:./tmk_core/common/command.c **** 	    " PJRC"
 191:./tmk_core/common/command.c **** #endif
 192:./tmk_core/common/command.c **** #ifdef PROTOCOL_LUFA
 193:./tmk_core/common/command.c **** 	    " LUFA"
 194:./tmk_core/common/command.c **** #endif
 195:./tmk_core/common/command.c **** #ifdef PROTOCOL_VUSB
 196:./tmk_core/common/command.c **** 	    " VUSB"
 197:./tmk_core/common/command.c **** #endif
 198:./tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 199:./tmk_core/common/command.c **** 	    " BOOTMAGIC"
 200:./tmk_core/common/command.c **** #endif
 201:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 202:./tmk_core/common/command.c **** 	    " MOUSEKEY"
 203:./tmk_core/common/command.c **** #endif
 204:./tmk_core/common/command.c **** #ifdef EXTRAKEY_ENABLE
 205:./tmk_core/common/command.c **** 	    " EXTRAKEY"
 206:./tmk_core/common/command.c **** #endif
 207:./tmk_core/common/command.c **** #ifdef CONSOLE_ENABLE
 208:./tmk_core/common/command.c **** 	    " CONSOLE"
 209:./tmk_core/common/command.c **** #endif
 210:./tmk_core/common/command.c **** #ifdef COMMAND_ENABLE
 211:./tmk_core/common/command.c **** 	    " COMMAND"
 212:./tmk_core/common/command.c **** #endif
 213:./tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 214:./tmk_core/common/command.c **** 	    " NKRO"
 215:./tmk_core/common/command.c **** #endif
 216:./tmk_core/common/command.c **** #ifdef KEYMAP_SECTION_ENABLE
 217:./tmk_core/common/command.c **** 	    " KEYMAP_SECTION"
 218:./tmk_core/common/command.c **** #endif
 219:./tmk_core/common/command.c **** 
 220:./tmk_core/common/command.c **** 	    " " STR(BOOTLOADER_SIZE) "\n");
 221:./tmk_core/common/command.c **** 
 222:./tmk_core/common/command.c ****     print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
 223:./tmk_core/common/command.c **** #if defined(__AVR__)
 224:./tmk_core/common/command.c ****           " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
 225:./tmk_core/common/command.c ****           " AVR_ARCH: avr" STR(__AVR_ARCH__)
 226:./tmk_core/common/command.c **** #endif
 227:./tmk_core/common/command.c **** 		  "\n");
 228:./tmk_core/common/command.c **** 
 229:./tmk_core/common/command.c **** 	return;
 230:./tmk_core/common/command.c **** }
 231:./tmk_core/common/command.c **** 
 232:./tmk_core/common/command.c **** static void print_status(void)
 233:./tmk_core/common/command.c **** {
 234:./tmk_core/common/command.c **** 
 235:./tmk_core/common/command.c ****     print("\n\t- Status -\n");
 236:./tmk_core/common/command.c **** 
 237:./tmk_core/common/command.c ****     print_val_hex8(host_keyboard_leds());
 238:./tmk_core/common/command.c **** #ifndef PROTOCOL_VUSB
 239:./tmk_core/common/command.c ****     // these aren't set on the V-USB protocol, so we just ignore them for now
 240:./tmk_core/common/command.c ****     print_val_hex8(keyboard_protocol);
 241:./tmk_core/common/command.c ****     print_val_hex8(keyboard_idle);
 242:./tmk_core/common/command.c **** #endif
 243:./tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 244:./tmk_core/common/command.c ****     print_val_hex8(keymap_config.nkro);
 245:./tmk_core/common/command.c **** #endif
 246:./tmk_core/common/command.c ****     print_val_hex32(timer_read32());
 247:./tmk_core/common/command.c **** 
 248:./tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 249:./tmk_core/common/command.c ****     print_val_hex8(UDCON);
 250:./tmk_core/common/command.c ****     print_val_hex8(UDIEN);
 251:./tmk_core/common/command.c ****     print_val_hex8(UDINT);
 252:./tmk_core/common/command.c ****     print_val_hex8(usb_keyboard_leds);
 253:./tmk_core/common/command.c ****     print_val_hex8(usb_keyboard_idle_count);
 254:./tmk_core/common/command.c **** #endif
 255:./tmk_core/common/command.c **** 
 256:./tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 257:./tmk_core/common/command.c **** #   if USB_COUNT_SOF
 258:./tmk_core/common/command.c ****     print_val_hex8(usbSofCount);
 259:./tmk_core/common/command.c **** #   endif
 260:./tmk_core/common/command.c **** #endif
 261:./tmk_core/common/command.c **** 	return;
 262:./tmk_core/common/command.c **** }
 263:./tmk_core/common/command.c **** 
 264:./tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 265:./tmk_core/common/command.c **** static void print_eeconfig(void)
 266:./tmk_core/common/command.c **** {
 267:./tmk_core/common/command.c **** 
 268:./tmk_core/common/command.c **** // Print these variables if NO_PRINT or USER_PRINT are not defined.
 269:./tmk_core/common/command.c **** #if !defined(NO_PRINT) && !defined(USER_PRINT)
 270:./tmk_core/common/command.c **** 
 271:./tmk_core/common/command.c ****     print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
 272:./tmk_core/common/command.c **** 
 273:./tmk_core/common/command.c ****     debug_config_t dc;
 274:./tmk_core/common/command.c ****     dc.raw = eeconfig_read_debug();
 275:./tmk_core/common/command.c ****     print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
 276:./tmk_core/common/command.c ****     print(".enable: "); print_dec(dc.enable); print("\n");
 277:./tmk_core/common/command.c ****     print(".matrix: "); print_dec(dc.matrix); print("\n");
 278:./tmk_core/common/command.c ****     print(".keyboard: "); print_dec(dc.keyboard); print("\n");
 279:./tmk_core/common/command.c ****     print(".mouse: "); print_dec(dc.mouse); print("\n");
 280:./tmk_core/common/command.c **** 
 281:./tmk_core/common/command.c ****     keymap_config_t kc;
 282:./tmk_core/common/command.c ****     kc.raw = eeconfig_read_keymap();
 283:./tmk_core/common/command.c ****     print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
 284:./tmk_core/common/command.c ****     print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
 285:./tmk_core/common/command.c ****     print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
 286:./tmk_core/common/command.c ****     print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
 287:./tmk_core/common/command.c ****     print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
 288:./tmk_core/common/command.c ****     print(".no_gui: "); print_dec(kc.no_gui); print("\n");
 289:./tmk_core/common/command.c ****     print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
 290:./tmk_core/common/command.c ****     print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
 291:./tmk_core/common/command.c ****     print(".nkro: "); print_dec(kc.nkro); print("\n");
 292:./tmk_core/common/command.c **** 
 293:./tmk_core/common/command.c **** #ifdef BACKLIGHT_ENABLE
 294:./tmk_core/common/command.c ****     backlight_config_t bc;
 295:./tmk_core/common/command.c ****     bc.raw = eeconfig_read_backlight();
 296:./tmk_core/common/command.c ****     print("backlight_config.raw: "); print_hex8(bc.raw); print("\n");
 297:./tmk_core/common/command.c ****     print(".enable: "); print_dec(bc.enable); print("\n");
 298:./tmk_core/common/command.c ****     print(".level: "); print_dec(bc.level); print("\n");
 299:./tmk_core/common/command.c **** #endif /* BACKLIGHT_ENABLE */
 300:./tmk_core/common/command.c **** 
 301:./tmk_core/common/command.c **** #endif /* !NO_PRINT */
 302:./tmk_core/common/command.c **** 
 303:./tmk_core/common/command.c **** }
 304:./tmk_core/common/command.c **** #endif /* BOOTMAGIC_ENABLE */
 305:./tmk_core/common/command.c **** 
 306:./tmk_core/common/command.c **** static bool command_common(uint8_t code)
 307:./tmk_core/common/command.c **** {
 308:./tmk_core/common/command.c **** 
 309:./tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 310:./tmk_core/common/command.c ****     static host_driver_t *host_driver = 0;
 311:./tmk_core/common/command.c **** #endif
 312:./tmk_core/common/command.c **** 
 313:./tmk_core/common/command.c ****     switch (code) {
 314:./tmk_core/common/command.c **** 
 315:./tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 316:./tmk_core/common/command.c **** 
 317:./tmk_core/common/command.c **** 		// test breathing sleep LED
 318:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_SLEEP_LED):
 319:./tmk_core/common/command.c ****             print("Sleep LED Test\n");
 320:./tmk_core/common/command.c ****             sleep_led_toggle();
 321:./tmk_core/common/command.c ****             led_set(host_keyboard_leds());
 322:./tmk_core/common/command.c ****             break;
 323:./tmk_core/common/command.c **** #endif
 324:./tmk_core/common/command.c **** 
 325:./tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 326:./tmk_core/common/command.c **** 
 327:./tmk_core/common/command.c **** 		// print stored eeprom config
 328:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_EEPROM):
 329:./tmk_core/common/command.c ****             print("eeconfig:\n");
 330:./tmk_core/common/command.c ****             print_eeconfig();
 331:./tmk_core/common/command.c ****             break;
 332:./tmk_core/common/command.c **** #endif
 333:./tmk_core/common/command.c **** 
 334:./tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 335:./tmk_core/common/command.c **** 
 336:./tmk_core/common/command.c **** 		// lock/unlock keyboard
 337:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_LOCK):
 338:./tmk_core/common/command.c ****             if (host_get_driver()) {
 339:./tmk_core/common/command.c ****                 host_driver = host_get_driver();
 340:./tmk_core/common/command.c ****                 clear_keyboard();
 341:./tmk_core/common/command.c ****                 host_set_driver(0);
 342:./tmk_core/common/command.c ****                 print("Locked.\n");
 343:./tmk_core/common/command.c ****             } else {
 344:./tmk_core/common/command.c ****                 host_set_driver(host_driver);
 345:./tmk_core/common/command.c ****                 print("Unlocked.\n");
 346:./tmk_core/common/command.c ****             }
 347:./tmk_core/common/command.c ****             break;
 348:./tmk_core/common/command.c **** #endif
 349:./tmk_core/common/command.c **** 
 350:./tmk_core/common/command.c **** 		// print help
 351:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_HELP1):
 352:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_HELP2):
 353:./tmk_core/common/command.c ****             command_common_help();
 354:./tmk_core/common/command.c ****             break;
 355:./tmk_core/common/command.c **** 
 356:./tmk_core/common/command.c **** 		// activate console
 357:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_CONSOLE):
 358:./tmk_core/common/command.c ****             debug_matrix   = false;
 359:./tmk_core/common/command.c ****             debug_keyboard = false;
 360:./tmk_core/common/command.c ****             debug_mouse    = false;
 361:./tmk_core/common/command.c ****             debug_enable   = false;
 362:./tmk_core/common/command.c ****             command_console_help();
 363:./tmk_core/common/command.c ****             print("C> ");
 364:./tmk_core/common/command.c ****             command_state = CONSOLE;
 365:./tmk_core/common/command.c ****             break;
 366:./tmk_core/common/command.c **** 
 367:./tmk_core/common/command.c ****         // jump to bootloader
 368:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_BOOTLOADER):
 369:./tmk_core/common/command.c ****             clear_keyboard(); // clear to prevent stuck keys
 370:./tmk_core/common/command.c ****             print("\n\nJumping to bootloader... ");
 371:./tmk_core/common/command.c ****             #ifdef AUDIO_ENABLE
 372:./tmk_core/common/command.c **** 	            stop_all_notes();
 373:./tmk_core/common/command.c ****                 shutdown_user();
 374:./tmk_core/common/command.c ****             #else
 375:./tmk_core/common/command.c **** 	            wait_ms(1000);
 376:./tmk_core/common/command.c ****             #endif
 377:./tmk_core/common/command.c ****             bootloader_jump(); // not return
 378:./tmk_core/common/command.c ****             break;
 379:./tmk_core/common/command.c **** 
 380:./tmk_core/common/command.c ****         // debug toggle
 381:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG):
 382:./tmk_core/common/command.c ****             debug_enable = !debug_enable;
 383:./tmk_core/common/command.c ****             if (debug_enable) {
 384:./tmk_core/common/command.c ****                 print("\ndebug: on\n");
 385:./tmk_core/common/command.c ****             } else {
 386:./tmk_core/common/command.c ****                 print("\ndebug: off\n");
 387:./tmk_core/common/command.c ****                 debug_matrix   = false;
 388:./tmk_core/common/command.c ****                 debug_keyboard = false;
 389:./tmk_core/common/command.c ****                 debug_mouse    = false;
 390:./tmk_core/common/command.c ****             }
 391:./tmk_core/common/command.c ****             break;
 392:./tmk_core/common/command.c **** 
 393:./tmk_core/common/command.c ****         // debug matrix toggle
 394:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_MATRIX):
 395:./tmk_core/common/command.c ****             debug_matrix = !debug_matrix;
 396:./tmk_core/common/command.c ****             if (debug_matrix) {
 397:./tmk_core/common/command.c ****                 print("\nmatrix: on\n");
 398:./tmk_core/common/command.c ****                 debug_enable = true;
 399:./tmk_core/common/command.c ****             } else {
 400:./tmk_core/common/command.c ****                 print("\nmatrix: off\n");
 401:./tmk_core/common/command.c ****             }
 402:./tmk_core/common/command.c ****             break;
 403:./tmk_core/common/command.c **** 
 404:./tmk_core/common/command.c ****         // debug keyboard toggle
 405:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_KBD):
 406:./tmk_core/common/command.c ****             debug_keyboard = !debug_keyboard;
 407:./tmk_core/common/command.c ****             if (debug_keyboard) {
 408:./tmk_core/common/command.c ****                 print("\nkeyboard: on\n");
 409:./tmk_core/common/command.c ****                 debug_enable = true;
 410:./tmk_core/common/command.c ****             } else {
 411:./tmk_core/common/command.c ****                 print("\nkeyboard: off\n");
 412:./tmk_core/common/command.c ****             }
 413:./tmk_core/common/command.c ****             break;
 414:./tmk_core/common/command.c **** 
 415:./tmk_core/common/command.c ****         // debug mouse toggle
 416:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_MOUSE):
 417:./tmk_core/common/command.c ****             debug_mouse = !debug_mouse;
 418:./tmk_core/common/command.c ****             if (debug_mouse) {
 419:./tmk_core/common/command.c ****                 print("\nmouse: on\n");
 420:./tmk_core/common/command.c ****                 debug_enable = true;
 421:./tmk_core/common/command.c ****             } else {
 422:./tmk_core/common/command.c **** 				print("\nmouse: off\n");
 423:./tmk_core/common/command.c ****             }
 424:./tmk_core/common/command.c ****             break;
 425:./tmk_core/common/command.c **** 
 426:./tmk_core/common/command.c **** 		// print version
 427:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_VERSION):
 428:./tmk_core/common/command.c ****         	print_version();
 429:./tmk_core/common/command.c **** 		    break;
 430:./tmk_core/common/command.c **** 
 431:./tmk_core/common/command.c **** 		// print status
 432:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_STATUS):
 433:./tmk_core/common/command.c **** 			print_status();
 434:./tmk_core/common/command.c ****             break;
 435:./tmk_core/common/command.c **** 
 436:./tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 437:./tmk_core/common/command.c **** 
 438:./tmk_core/common/command.c **** 		// NKRO toggle
 439:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_NKRO):
 440:./tmk_core/common/command.c ****             clear_keyboard(); // clear to prevent stuck keys
 441:./tmk_core/common/command.c ****             keymap_config.nkro = !keymap_config.nkro;
 442:./tmk_core/common/command.c ****             if (keymap_config.nkro) {
 443:./tmk_core/common/command.c ****                 print("NKRO: on\n");
 444:./tmk_core/common/command.c ****             } else {
 445:./tmk_core/common/command.c ****                 print("NKRO: off\n");
 446:./tmk_core/common/command.c ****             }
 447:./tmk_core/common/command.c ****             break;
 448:./tmk_core/common/command.c **** #endif
 449:./tmk_core/common/command.c **** 
 450:./tmk_core/common/command.c **** 		// switch layers
 451:./tmk_core/common/command.c **** 
 452:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER0_ALT1):
 453:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER0_ALT2):
 454:./tmk_core/common/command.c ****             switch_default_layer(0);
 455:./tmk_core/common/command.c ****             break;
 456:./tmk_core/common/command.c **** 
 457:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_CUSTOM
 458:./tmk_core/common/command.c **** 
 459:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER0):
 460:./tmk_core/common/command.c ****             switch_default_layer(0);
 461:./tmk_core/common/command.c ****             break;
 462:./tmk_core/common/command.c **** 
 463:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER1):
 464:./tmk_core/common/command.c ****             switch_default_layer(1);
 465:./tmk_core/common/command.c ****             break;
 466:./tmk_core/common/command.c **** 
 467:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER2):
 468:./tmk_core/common/command.c ****             switch_default_layer(2);
 469:./tmk_core/common/command.c ****             break;
 470:./tmk_core/common/command.c **** 
 471:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER3):
 472:./tmk_core/common/command.c ****             switch_default_layer(3);
 473:./tmk_core/common/command.c ****             break;
 474:./tmk_core/common/command.c **** 
 475:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER4):
 476:./tmk_core/common/command.c ****             switch_default_layer(4);
 477:./tmk_core/common/command.c ****             break;
 478:./tmk_core/common/command.c **** 
 479:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER5):
 480:./tmk_core/common/command.c ****             switch_default_layer(5);
 481:./tmk_core/common/command.c ****             break;
 482:./tmk_core/common/command.c **** 
 483:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER6):
 484:./tmk_core/common/command.c ****             switch_default_layer(6);
 485:./tmk_core/common/command.c ****             break;
 486:./tmk_core/common/command.c **** 
 487:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER7):
 488:./tmk_core/common/command.c ****             switch_default_layer(7);
 489:./tmk_core/common/command.c ****             break;
 490:./tmk_core/common/command.c **** 
 491:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER8):
 492:./tmk_core/common/command.c ****             switch_default_layer(8);
 493:./tmk_core/common/command.c ****             break;
 494:./tmk_core/common/command.c **** 
 495:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER9):
 496:./tmk_core/common/command.c ****             switch_default_layer(9);
 497:./tmk_core/common/command.c ****             break;
 498:./tmk_core/common/command.c **** #endif
 499:./tmk_core/common/command.c **** 
 500:./tmk_core/common/command.c **** 
 501:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_FKEYS
 502:./tmk_core/common/command.c **** 
 503:./tmk_core/common/command.c ****         case KC_F1 ... KC_F9:
 504:./tmk_core/common/command.c ****             switch_default_layer((code - KC_F1) + 1);
 505:./tmk_core/common/command.c ****             break;
 506:./tmk_core/common/command.c ****         case KC_F10:
 507:./tmk_core/common/command.c ****             switch_default_layer(0);
 508:./tmk_core/common/command.c ****             break;
 509:./tmk_core/common/command.c **** #endif
 510:./tmk_core/common/command.c **** 
 511:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_NKEYS
 512:./tmk_core/common/command.c **** 
 513:./tmk_core/common/command.c ****         case KC_1 ... KC_9:
 514:./tmk_core/common/command.c ****             switch_default_layer((code - KC_1) + 1);
 515:./tmk_core/common/command.c ****             break;
 516:./tmk_core/common/command.c ****         case KC_0:
 517:./tmk_core/common/command.c ****             switch_default_layer(0);
 518:./tmk_core/common/command.c ****             break;
 519:./tmk_core/common/command.c **** #endif
 520:./tmk_core/common/command.c **** 
 521:./tmk_core/common/command.c ****         default:
 522:./tmk_core/common/command.c ****             print("?");
 523:./tmk_core/common/command.c ****             return false;
 524:./tmk_core/common/command.c ****     }
 525:./tmk_core/common/command.c ****     return true;
 526:./tmk_core/common/command.c **** }
 527:./tmk_core/common/command.c **** 
 528:./tmk_core/common/command.c **** 
 529:./tmk_core/common/command.c **** /***********************************************************
 530:./tmk_core/common/command.c ****  * Command console
 531:./tmk_core/common/command.c ****  ***********************************************************/
 532:./tmk_core/common/command.c **** static void command_console_help(void)
 533:./tmk_core/common/command.c **** {
 534:./tmk_core/common/command.c ****     print("\n\t- Console -\n"
 535:./tmk_core/common/command.c ****           "ESC/q:	quit\n"
 536:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 537:./tmk_core/common/command.c ****           "m:	mousekey\n"
 538:./tmk_core/common/command.c **** #endif
 539:./tmk_core/common/command.c ****     );
 540:./tmk_core/common/command.c **** }
 541:./tmk_core/common/command.c **** 
 542:./tmk_core/common/command.c **** static bool command_console(uint8_t code)
 543:./tmk_core/common/command.c **** {
 544:./tmk_core/common/command.c ****     switch (code) {
 545:./tmk_core/common/command.c ****         case KC_H:
 546:./tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 547:./tmk_core/common/command.c ****             command_console_help();
 548:./tmk_core/common/command.c ****             break;
 549:./tmk_core/common/command.c ****         case KC_Q:
 550:./tmk_core/common/command.c ****         case KC_ESC:
 551:./tmk_core/common/command.c ****             command_state = ONESHOT;
 552:./tmk_core/common/command.c ****             return false;
 553:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 554:./tmk_core/common/command.c ****         case KC_M:
 555:./tmk_core/common/command.c ****             mousekey_console_help();
 556:./tmk_core/common/command.c ****             print("M> ");
 557:./tmk_core/common/command.c ****             command_state = MOUSEKEY;
 558:./tmk_core/common/command.c ****             return true;
 559:./tmk_core/common/command.c **** #endif
 560:./tmk_core/common/command.c ****         default:
 561:./tmk_core/common/command.c ****             print("?");
 562:./tmk_core/common/command.c ****             return false;
 563:./tmk_core/common/command.c ****     }
 564:./tmk_core/common/command.c ****     print("C> ");
 565:./tmk_core/common/command.c ****     return true;
 566:./tmk_core/common/command.c **** }
 567:./tmk_core/common/command.c **** 
 568:./tmk_core/common/command.c **** 
 569:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 570:./tmk_core/common/command.c **** /***********************************************************
 571:./tmk_core/common/command.c ****  * Mousekey console
 572:./tmk_core/common/command.c ****  ***********************************************************/
 573:./tmk_core/common/command.c **** static uint8_t mousekey_param = 0;
 574:./tmk_core/common/command.c **** 
 575:./tmk_core/common/command.c **** static void mousekey_param_print(void)
 576:./tmk_core/common/command.c **** {
 577:./tmk_core/common/command.c **** // Print these variables if NO_PRINT or USER_PRINT are not defined.
 578:./tmk_core/common/command.c **** #if !defined(NO_PRINT) && !defined(USER_PRINT)
 579:./tmk_core/common/command.c ****     print("\n\t- Values -\n");
 580:./tmk_core/common/command.c ****     print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
 581:./tmk_core/common/command.c ****     print("2: interval(ms): "); pdec(mk_interval); print("\n");
 582:./tmk_core/common/command.c ****     print("3: max_speed: "); pdec(mk_max_speed); print("\n");
 583:./tmk_core/common/command.c ****     print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
 584:./tmk_core/common/command.c ****     print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
 585:./tmk_core/common/command.c ****     print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
 586:./tmk_core/common/command.c **** #endif /* !NO_PRINT */
 587:./tmk_core/common/command.c **** 
 588:./tmk_core/common/command.c **** }
 589:./tmk_core/common/command.c **** 
 590:./tmk_core/common/command.c **** //#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
 591:./tmk_core/common/command.c **** #define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
 592:./tmk_core/common/command.c **** static void mousekey_param_inc(uint8_t param, uint8_t inc)
 593:./tmk_core/common/command.c **** {
  15               		.loc 1 593 0
  16               		.cfi_startproc
  17               	.LVL0:
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
 594:./tmk_core/common/command.c ****     switch (param) {
  22               		.loc 1 594 0
  23 0000 8330      		cpi r24,lo8(3)
  24 0002 01F0      		breq .L3
  25 0004 00F4      		brsh .L4
  26 0006 8130      		cpi r24,lo8(1)
  27 0008 01F0      		breq .L5
  28 000a 8230      		cpi r24,lo8(2)
  29 000c 01F0      		breq .L6
  30 000e 0895      		ret
  31               	.L4:
  32 0010 8530      		cpi r24,lo8(5)
  33 0012 01F4      		brne .+2
  34 0014 00C0      		rjmp .L7
  35 0016 00F0      		brlo .L8
  36 0018 8630      		cpi r24,lo8(6)
  37 001a 01F4      		brne .+2
  38 001c 00C0      		rjmp .L9
  39 001e 0895      		ret
  40               	.L5:
 595:./tmk_core/common/command.c ****         case 1:
 596:./tmk_core/common/command.c ****             if (mk_delay + inc < UINT8_MAX)
  41               		.loc 1 596 0
  42 0020 8091 0000 		lds r24,mk_delay
  43               	.LVL1:
  44 0024 262F      		mov r18,r22
  45 0026 30E0      		ldi r19,0
  46 0028 280F      		add r18,r24
  47 002a 311D      		adc r19,__zero_reg__
  48 002c 2F3F      		cpi r18,-1
  49 002e 3105      		cpc r19,__zero_reg__
  50 0030 04F4      		brge .L10
 597:./tmk_core/common/command.c ****                 mk_delay += inc;
  51               		.loc 1 597 0
  52 0032 680F      		add r22,r24
  53               	.LVL2:
  54 0034 6093 0000 		sts mk_delay,r22
  55 0038 0895      		ret
  56               	.LVL3:
  57               	.L10:
 598:./tmk_core/common/command.c ****             else
 599:./tmk_core/common/command.c ****                 mk_delay = UINT8_MAX;
  58               		.loc 1 599 0
  59 003a 8FEF      		ldi r24,lo8(-1)
  60 003c 8093 0000 		sts mk_delay,r24
  61 0040 0895      		ret
  62               	.LVL4:
  63               	.L6:
 600:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 601:./tmk_core/common/command.c ****             break;
 602:./tmk_core/common/command.c ****         case 2:
 603:./tmk_core/common/command.c ****             if (mk_interval + inc < UINT8_MAX)
  64               		.loc 1 603 0
  65 0042 8091 0000 		lds r24,mk_interval
  66               	.LVL5:
  67 0046 262F      		mov r18,r22
  68 0048 30E0      		ldi r19,0
  69 004a 280F      		add r18,r24
  70 004c 311D      		adc r19,__zero_reg__
  71 004e 2F3F      		cpi r18,-1
  72 0050 3105      		cpc r19,__zero_reg__
  73 0052 04F4      		brge .L11
 604:./tmk_core/common/command.c ****                 mk_interval += inc;
  74               		.loc 1 604 0
  75 0054 680F      		add r22,r24
  76               	.LVL6:
  77 0056 6093 0000 		sts mk_interval,r22
  78 005a 0895      		ret
  79               	.LVL7:
  80               	.L11:
 605:./tmk_core/common/command.c ****             else
 606:./tmk_core/common/command.c ****                 mk_interval = UINT8_MAX;
  81               		.loc 1 606 0
  82 005c 8FEF      		ldi r24,lo8(-1)
  83 005e 8093 0000 		sts mk_interval,r24
  84 0062 0895      		ret
  85               	.LVL8:
  86               	.L3:
 607:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 608:./tmk_core/common/command.c ****             break;
 609:./tmk_core/common/command.c ****         case 3:
 610:./tmk_core/common/command.c ****             if (mk_max_speed + inc < UINT8_MAX)
  87               		.loc 1 610 0
  88 0064 8091 0000 		lds r24,mk_max_speed
  89               	.LVL9:
  90 0068 262F      		mov r18,r22
  91 006a 30E0      		ldi r19,0
  92 006c 280F      		add r18,r24
  93 006e 311D      		adc r19,__zero_reg__
  94 0070 2F3F      		cpi r18,-1
  95 0072 3105      		cpc r19,__zero_reg__
  96 0074 04F4      		brge .L12
 611:./tmk_core/common/command.c ****                 mk_max_speed += inc;
  97               		.loc 1 611 0
  98 0076 680F      		add r22,r24
  99               	.LVL10:
 100 0078 6093 0000 		sts mk_max_speed,r22
 101 007c 0895      		ret
 102               	.LVL11:
 103               	.L12:
 612:./tmk_core/common/command.c ****             else
 613:./tmk_core/common/command.c ****                 mk_max_speed = UINT8_MAX;
 104               		.loc 1 613 0
 105 007e 8FEF      		ldi r24,lo8(-1)
 106 0080 8093 0000 		sts mk_max_speed,r24
 107 0084 0895      		ret
 108               	.LVL12:
 109               	.L8:
 614:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 615:./tmk_core/common/command.c ****             break;
 616:./tmk_core/common/command.c ****         case 4:
 617:./tmk_core/common/command.c ****             if (mk_time_to_max + inc < UINT8_MAX)
 110               		.loc 1 617 0
 111 0086 8091 0000 		lds r24,mk_time_to_max
 112               	.LVL13:
 113 008a 262F      		mov r18,r22
 114 008c 30E0      		ldi r19,0
 115 008e 280F      		add r18,r24
 116 0090 311D      		adc r19,__zero_reg__
 117 0092 2F3F      		cpi r18,-1
 118 0094 3105      		cpc r19,__zero_reg__
 119 0096 04F4      		brge .L13
 618:./tmk_core/common/command.c ****                 mk_time_to_max += inc;
 120               		.loc 1 618 0
 121 0098 680F      		add r22,r24
 122               	.LVL14:
 123 009a 6093 0000 		sts mk_time_to_max,r22
 124 009e 0895      		ret
 125               	.LVL15:
 126               	.L13:
 619:./tmk_core/common/command.c ****             else
 620:./tmk_core/common/command.c ****                 mk_time_to_max = UINT8_MAX;
 127               		.loc 1 620 0
 128 00a0 8FEF      		ldi r24,lo8(-1)
 129 00a2 8093 0000 		sts mk_time_to_max,r24
 130 00a6 0895      		ret
 131               	.LVL16:
 132               	.L7:
 621:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 622:./tmk_core/common/command.c ****             break;
 623:./tmk_core/common/command.c ****         case 5:
 624:./tmk_core/common/command.c ****             if (mk_wheel_max_speed + inc < UINT8_MAX)
 133               		.loc 1 624 0
 134 00a8 8091 0000 		lds r24,mk_wheel_max_speed
 135               	.LVL17:
 136 00ac 262F      		mov r18,r22
 137 00ae 30E0      		ldi r19,0
 138 00b0 280F      		add r18,r24
 139 00b2 311D      		adc r19,__zero_reg__
 140 00b4 2F3F      		cpi r18,-1
 141 00b6 3105      		cpc r19,__zero_reg__
 142 00b8 04F4      		brge .L14
 625:./tmk_core/common/command.c ****                 mk_wheel_max_speed += inc;
 143               		.loc 1 625 0
 144 00ba 680F      		add r22,r24
 145               	.LVL18:
 146 00bc 6093 0000 		sts mk_wheel_max_speed,r22
 147 00c0 0895      		ret
 148               	.LVL19:
 149               	.L14:
 626:./tmk_core/common/command.c ****             else
 627:./tmk_core/common/command.c ****                 mk_wheel_max_speed = UINT8_MAX;
 150               		.loc 1 627 0
 151 00c2 8FEF      		ldi r24,lo8(-1)
 152 00c4 8093 0000 		sts mk_wheel_max_speed,r24
 153 00c8 0895      		ret
 154               	.LVL20:
 155               	.L9:
 628:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 629:./tmk_core/common/command.c ****             break;
 630:./tmk_core/common/command.c ****         case 6:
 631:./tmk_core/common/command.c ****             if (mk_wheel_time_to_max + inc < UINT8_MAX)
 156               		.loc 1 631 0
 157 00ca 8091 0000 		lds r24,mk_wheel_time_to_max
 158               	.LVL21:
 159 00ce 262F      		mov r18,r22
 160 00d0 30E0      		ldi r19,0
 161 00d2 280F      		add r18,r24
 162 00d4 311D      		adc r19,__zero_reg__
 163 00d6 2F3F      		cpi r18,-1
 164 00d8 3105      		cpc r19,__zero_reg__
 165 00da 04F4      		brge .L15
 632:./tmk_core/common/command.c ****                 mk_wheel_time_to_max += inc;
 166               		.loc 1 632 0
 167 00dc 680F      		add r22,r24
 168               	.LVL22:
 169 00de 6093 0000 		sts mk_wheel_time_to_max,r22
 170 00e2 0895      		ret
 171               	.LVL23:
 172               	.L15:
 633:./tmk_core/common/command.c ****             else
 634:./tmk_core/common/command.c ****                 mk_wheel_time_to_max = UINT8_MAX;
 173               		.loc 1 634 0
 174 00e4 8FEF      		ldi r24,lo8(-1)
 175 00e6 8093 0000 		sts mk_wheel_time_to_max,r24
 176 00ea 0895      		ret
 177               		.cfi_endproc
 178               	.LFE38:
 180               		.section	.text.mousekey_param_dec,"ax",@progbits
 182               	mousekey_param_dec:
 183               	.LFB39:
 635:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 636:./tmk_core/common/command.c ****             break;
 637:./tmk_core/common/command.c ****     }
 638:./tmk_core/common/command.c **** }
 639:./tmk_core/common/command.c **** 
 640:./tmk_core/common/command.c **** static void mousekey_param_dec(uint8_t param, uint8_t dec)
 641:./tmk_core/common/command.c **** {
 184               		.loc 1 641 0
 185               		.cfi_startproc
 186               	.LVL24:
 187               	/* prologue: function */
 188               	/* frame size = 0 */
 189               	/* stack size = 0 */
 190               	.L__stack_usage = 0
 642:./tmk_core/common/command.c ****     switch (param) {
 191               		.loc 1 642 0
 192 0000 8330      		cpi r24,lo8(3)
 193 0002 01F0      		breq .L19
 194 0004 00F4      		brsh .L20
 195 0006 8130      		cpi r24,lo8(1)
 196 0008 01F0      		breq .L21
 197 000a 8230      		cpi r24,lo8(2)
 198 000c 01F0      		breq .L22
 199 000e 0895      		ret
 200               	.L20:
 201 0010 8530      		cpi r24,lo8(5)
 202 0012 01F0      		breq .L23
 203 0014 00F0      		brlo .L24
 204 0016 8630      		cpi r24,lo8(6)
 205 0018 01F0      		breq .L25
 206 001a 0895      		ret
 207               	.L21:
 643:./tmk_core/common/command.c ****         case 1:
 644:./tmk_core/common/command.c ****             if (mk_delay > dec)
 208               		.loc 1 644 0
 209 001c 8091 0000 		lds r24,mk_delay
 210               	.LVL25:
 211 0020 6817      		cp r22,r24
 212 0022 00F4      		brsh .L26
 645:./tmk_core/common/command.c ****                 mk_delay -= dec;
 213               		.loc 1 645 0
 214 0024 861B      		sub r24,r22
 215 0026 8093 0000 		sts mk_delay,r24
 216 002a 0895      		ret
 217               	.L26:
 646:./tmk_core/common/command.c ****             else
 647:./tmk_core/common/command.c ****                 mk_delay = 0;
 218               		.loc 1 647 0
 219 002c 1092 0000 		sts mk_delay,__zero_reg__
 220 0030 0895      		ret
 221               	.LVL26:
 222               	.L22:
 648:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 649:./tmk_core/common/command.c ****             break;
 650:./tmk_core/common/command.c ****         case 2:
 651:./tmk_core/common/command.c ****             if (mk_interval > dec)
 223               		.loc 1 651 0
 224 0032 8091 0000 		lds r24,mk_interval
 225               	.LVL27:
 226 0036 6817      		cp r22,r24
 227 0038 00F4      		brsh .L27
 652:./tmk_core/common/command.c ****                 mk_interval -= dec;
 228               		.loc 1 652 0
 229 003a 861B      		sub r24,r22
 230 003c 8093 0000 		sts mk_interval,r24
 231 0040 0895      		ret
 232               	.L27:
 653:./tmk_core/common/command.c ****             else
 654:./tmk_core/common/command.c ****                 mk_interval = 0;
 233               		.loc 1 654 0
 234 0042 1092 0000 		sts mk_interval,__zero_reg__
 235 0046 0895      		ret
 236               	.LVL28:
 237               	.L19:
 655:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 656:./tmk_core/common/command.c ****             break;
 657:./tmk_core/common/command.c ****         case 3:
 658:./tmk_core/common/command.c ****             if (mk_max_speed > dec)
 238               		.loc 1 658 0
 239 0048 8091 0000 		lds r24,mk_max_speed
 240               	.LVL29:
 241 004c 6817      		cp r22,r24
 242 004e 00F4      		brsh .L28
 659:./tmk_core/common/command.c ****                 mk_max_speed -= dec;
 243               		.loc 1 659 0
 244 0050 861B      		sub r24,r22
 245 0052 8093 0000 		sts mk_max_speed,r24
 246 0056 0895      		ret
 247               	.L28:
 660:./tmk_core/common/command.c ****             else
 661:./tmk_core/common/command.c ****                 mk_max_speed = 0;
 248               		.loc 1 661 0
 249 0058 1092 0000 		sts mk_max_speed,__zero_reg__
 250 005c 0895      		ret
 251               	.LVL30:
 252               	.L24:
 662:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 663:./tmk_core/common/command.c ****             break;
 664:./tmk_core/common/command.c ****         case 4:
 665:./tmk_core/common/command.c ****             if (mk_time_to_max > dec)
 253               		.loc 1 665 0
 254 005e 8091 0000 		lds r24,mk_time_to_max
 255               	.LVL31:
 256 0062 6817      		cp r22,r24
 257 0064 00F4      		brsh .L29
 666:./tmk_core/common/command.c ****                 mk_time_to_max -= dec;
 258               		.loc 1 666 0
 259 0066 861B      		sub r24,r22
 260 0068 8093 0000 		sts mk_time_to_max,r24
 261 006c 0895      		ret
 262               	.L29:
 667:./tmk_core/common/command.c ****             else
 668:./tmk_core/common/command.c ****                 mk_time_to_max = 0;
 263               		.loc 1 668 0
 264 006e 1092 0000 		sts mk_time_to_max,__zero_reg__
 265 0072 0895      		ret
 266               	.LVL32:
 267               	.L23:
 669:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 670:./tmk_core/common/command.c ****             break;
 671:./tmk_core/common/command.c ****         case 5:
 672:./tmk_core/common/command.c ****             if (mk_wheel_max_speed > dec)
 268               		.loc 1 672 0
 269 0074 8091 0000 		lds r24,mk_wheel_max_speed
 270               	.LVL33:
 271 0078 6817      		cp r22,r24
 272 007a 00F4      		brsh .L30
 673:./tmk_core/common/command.c ****                 mk_wheel_max_speed -= dec;
 273               		.loc 1 673 0
 274 007c 861B      		sub r24,r22
 275 007e 8093 0000 		sts mk_wheel_max_speed,r24
 276 0082 0895      		ret
 277               	.L30:
 674:./tmk_core/common/command.c ****             else
 675:./tmk_core/common/command.c ****                 mk_wheel_max_speed = 0;
 278               		.loc 1 675 0
 279 0084 1092 0000 		sts mk_wheel_max_speed,__zero_reg__
 280 0088 0895      		ret
 281               	.LVL34:
 282               	.L25:
 676:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 677:./tmk_core/common/command.c ****             break;
 678:./tmk_core/common/command.c ****         case 6:
 679:./tmk_core/common/command.c ****             if (mk_wheel_time_to_max > dec)
 283               		.loc 1 679 0
 284 008a 8091 0000 		lds r24,mk_wheel_time_to_max
 285               	.LVL35:
 286 008e 6817      		cp r22,r24
 287 0090 00F4      		brsh .L31
 680:./tmk_core/common/command.c ****                 mk_wheel_time_to_max -= dec;
 288               		.loc 1 680 0
 289 0092 861B      		sub r24,r22
 290 0094 8093 0000 		sts mk_wheel_time_to_max,r24
 291 0098 0895      		ret
 292               	.L31:
 681:./tmk_core/common/command.c ****             else
 682:./tmk_core/common/command.c ****                 mk_wheel_time_to_max = 0;
 293               		.loc 1 682 0
 294 009a 1092 0000 		sts mk_wheel_time_to_max,__zero_reg__
 295 009e 0895      		ret
 296               		.cfi_endproc
 297               	.LFE39:
 299               		.section	.text.switch_default_layer,"ax",@progbits
 301               	switch_default_layer:
 302               	.LFB43:
 683:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 684:./tmk_core/common/command.c ****             break;
 685:./tmk_core/common/command.c ****     }
 686:./tmk_core/common/command.c **** }
 687:./tmk_core/common/command.c **** 
 688:./tmk_core/common/command.c **** static void mousekey_console_help(void)
 689:./tmk_core/common/command.c **** {
 690:./tmk_core/common/command.c ****     print("\n\t- Mousekey -\n"
 691:./tmk_core/common/command.c ****           "ESC/q:	quit\n"
 692:./tmk_core/common/command.c ****           "1:	delay(*10ms)\n"
 693:./tmk_core/common/command.c ****           "2:	interval(ms)\n"
 694:./tmk_core/common/command.c ****           "3:	max_speed\n"
 695:./tmk_core/common/command.c ****           "4:	time_to_max\n"
 696:./tmk_core/common/command.c ****           "5:	wheel_max_speed\n"
 697:./tmk_core/common/command.c ****           "6:	wheel_time_to_max\n"
 698:./tmk_core/common/command.c ****           "\n"
 699:./tmk_core/common/command.c ****           "p:	print values\n"
 700:./tmk_core/common/command.c ****           "d:	set defaults\n"
 701:./tmk_core/common/command.c ****           "up:	+1\n"
 702:./tmk_core/common/command.c ****           "down:	-1\n"
 703:./tmk_core/common/command.c ****           "pgup:	+10\n"
 704:./tmk_core/common/command.c ****           "pgdown:	-10\n"
 705:./tmk_core/common/command.c ****           "\n"
 706:./tmk_core/common/command.c ****           "speed = delta * max_speed * (repeat / time_to_max)\n");
 707:./tmk_core/common/command.c ****     xprintf("where delta: cursor=%d, wheel=%d\n"
 708:./tmk_core/common/command.c ****             "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_D
 709:./tmk_core/common/command.c **** }
 710:./tmk_core/common/command.c **** 
 711:./tmk_core/common/command.c **** static bool mousekey_console(uint8_t code)
 712:./tmk_core/common/command.c **** {
 713:./tmk_core/common/command.c ****     switch (code) {
 714:./tmk_core/common/command.c ****         case KC_H:
 715:./tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 716:./tmk_core/common/command.c ****             mousekey_console_help();
 717:./tmk_core/common/command.c ****             break;
 718:./tmk_core/common/command.c ****         case KC_Q:
 719:./tmk_core/common/command.c ****         case KC_ESC:
 720:./tmk_core/common/command.c ****             if (mousekey_param) {
 721:./tmk_core/common/command.c ****                 mousekey_param = 0;
 722:./tmk_core/common/command.c ****             } else {
 723:./tmk_core/common/command.c ****                 print("C> ");
 724:./tmk_core/common/command.c ****                 command_state = CONSOLE;
 725:./tmk_core/common/command.c ****                 return false;
 726:./tmk_core/common/command.c ****             }
 727:./tmk_core/common/command.c ****             break;
 728:./tmk_core/common/command.c ****         case KC_P:
 729:./tmk_core/common/command.c ****             mousekey_param_print();
 730:./tmk_core/common/command.c ****             break;
 731:./tmk_core/common/command.c ****         case KC_1:
 732:./tmk_core/common/command.c ****         case KC_2:
 733:./tmk_core/common/command.c ****         case KC_3:
 734:./tmk_core/common/command.c ****         case KC_4:
 735:./tmk_core/common/command.c ****         case KC_5:
 736:./tmk_core/common/command.c ****         case KC_6:
 737:./tmk_core/common/command.c ****             mousekey_param = numkey2num(code);
 738:./tmk_core/common/command.c ****             break;
 739:./tmk_core/common/command.c ****         case KC_UP:
 740:./tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 1);
 741:./tmk_core/common/command.c ****             break;
 742:./tmk_core/common/command.c ****         case KC_DOWN:
 743:./tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 1);
 744:./tmk_core/common/command.c ****             break;
 745:./tmk_core/common/command.c ****         case KC_PGUP:
 746:./tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 10);
 747:./tmk_core/common/command.c ****             break;
 748:./tmk_core/common/command.c ****         case KC_PGDN:
 749:./tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 10);
 750:./tmk_core/common/command.c ****             break;
 751:./tmk_core/common/command.c ****         case KC_D:
 752:./tmk_core/common/command.c ****             mk_delay = MOUSEKEY_DELAY/10;
 753:./tmk_core/common/command.c ****             mk_interval = MOUSEKEY_INTERVAL;
 754:./tmk_core/common/command.c ****             mk_max_speed = MOUSEKEY_MAX_SPEED;
 755:./tmk_core/common/command.c ****             mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 756:./tmk_core/common/command.c ****             mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 757:./tmk_core/common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 758:./tmk_core/common/command.c ****             print("set default\n");
 759:./tmk_core/common/command.c ****             break;
 760:./tmk_core/common/command.c ****         default:
 761:./tmk_core/common/command.c ****             print("?");
 762:./tmk_core/common/command.c ****             return false;
 763:./tmk_core/common/command.c ****     }
 764:./tmk_core/common/command.c ****     if (mousekey_param) {
 765:./tmk_core/common/command.c ****         xprintf("M%d> ", mousekey_param);
 766:./tmk_core/common/command.c ****     } else {
 767:./tmk_core/common/command.c ****         print("M>" );
 768:./tmk_core/common/command.c ****     }
 769:./tmk_core/common/command.c ****     return true;
 770:./tmk_core/common/command.c **** }
 771:./tmk_core/common/command.c **** #endif
 772:./tmk_core/common/command.c **** 
 773:./tmk_core/common/command.c **** 
 774:./tmk_core/common/command.c **** /***********************************************************
 775:./tmk_core/common/command.c ****  * Utilities
 776:./tmk_core/common/command.c ****  ***********************************************************/
 777:./tmk_core/common/command.c **** uint8_t numkey2num(uint8_t code)
 778:./tmk_core/common/command.c **** {
 779:./tmk_core/common/command.c ****     switch (code) {
 780:./tmk_core/common/command.c ****         case KC_1: return 1;
 781:./tmk_core/common/command.c ****         case KC_2: return 2;
 782:./tmk_core/common/command.c ****         case KC_3: return 3;
 783:./tmk_core/common/command.c ****         case KC_4: return 4;
 784:./tmk_core/common/command.c ****         case KC_5: return 5;
 785:./tmk_core/common/command.c ****         case KC_6: return 6;
 786:./tmk_core/common/command.c ****         case KC_7: return 7;
 787:./tmk_core/common/command.c ****         case KC_8: return 8;
 788:./tmk_core/common/command.c ****         case KC_9: return 9;
 789:./tmk_core/common/command.c ****         case KC_0: return 0;
 790:./tmk_core/common/command.c ****     }
 791:./tmk_core/common/command.c ****     return 0;
 792:./tmk_core/common/command.c **** }
 793:./tmk_core/common/command.c **** 
 794:./tmk_core/common/command.c **** static void switch_default_layer(uint8_t layer)
 795:./tmk_core/common/command.c **** {
 303               		.loc 1 795 0
 304               		.cfi_startproc
 305               	.LVL36:
 306 0000 0F93      		push r16
 307               	.LCFI0:
 308               		.cfi_def_cfa_offset 3
 309               		.cfi_offset 16, -2
 310 0002 1F93      		push r17
 311               	.LCFI1:
 312               		.cfi_def_cfa_offset 4
 313               		.cfi_offset 17, -3
 314               	/* prologue: function */
 315               	/* frame size = 0 */
 316               	/* stack size = 2 */
 317               	.L__stack_usage = 2
 796:./tmk_core/common/command.c ****     xprintf("L%d\n", layer);
 797:./tmk_core/common/command.c ****     default_layer_set(1UL<<layer);
 318               		.loc 1 797 0
 319 0004 41E0      		ldi r20,lo8(1)
 320 0006 50E0      		ldi r21,0
 321 0008 60E0      		ldi r22,0
 322 000a 70E0      		ldi r23,0
 323 000c 8A01      		movw r16,r20
 324 000e 9B01      		movw r18,r22
 325 0010 00C0      		rjmp 2f
 326               		1:
 327 0012 000F      		lsl r16
 328 0014 111F      		rol r17
 329 0016 221F      		rol r18
 330 0018 331F      		rol r19
 331               		2:
 332 001a 8A95      		dec r24
 333 001c 02F4      		brpl 1b
 334 001e C901      		movw r24,r18
 335 0020 B801      		movw r22,r16
 336 0022 0E94 0000 		call default_layer_set
 337               	.LVL37:
 338               	/* epilogue start */
 798:./tmk_core/common/command.c ****     clear_keyboard();
 799:./tmk_core/common/command.c **** }
 339               		.loc 1 799 0
 340 0026 1F91      		pop r17
 341 0028 0F91      		pop r16
 798:./tmk_core/common/command.c ****     clear_keyboard();
 342               		.loc 1 798 0
 343 002a 0C94 0000 		jmp clear_keyboard
 344               	.LVL38:
 345               		.cfi_endproc
 346               	.LFE43:
 348               		.section	.text.command_common,"ax",@progbits
 350               	command_common:
 351               	.LFB34:
 307:./tmk_core/common/command.c **** 
 352               		.loc 1 307 0
 353               		.cfi_startproc
 354               	.LVL39:
 355               	/* prologue: function */
 356               	/* frame size = 0 */
 357               	/* stack size = 0 */
 358               	.L__stack_usage = 0
 313:./tmk_core/common/command.c **** 
 359               		.loc 1 313 0
 360 0000 8732      		cpi r24,lo8(39)
 361 0002 00F4      		brsh .L35
 362 0004 8E31      		cpi r24,lo8(30)
 363 0006 00F0      		brlo .+2
 364 0008 00C0      		rjmp .L36
 365 000a 8E30      		cpi r24,lo8(14)
 366 000c 01F4      		brne .+2
 367 000e 00C0      		rjmp .L37
 368 0010 00F4      		brsh .L38
 369 0012 8730      		cpi r24,lo8(7)
 370 0014 01F4      		brne .+2
 371 0016 00C0      		rjmp .L39
 372 0018 8B30      		cpi r24,lo8(11)
 373 001a 01F4      		brne .+2
 374 001c 00C0      		rjmp .L78
 375 001e 8630      		cpi r24,lo8(6)
 376 0020 01F0      		breq .+2
 377 0022 00C0      		rjmp .L55
 358:./tmk_core/common/command.c ****             debug_keyboard = false;
 378               		.loc 1 358 0
 379 0024 8091 0000 		lds r24,debug_config
 380               	.LVL40:
 361:./tmk_core/common/command.c ****             command_console_help();
 381               		.loc 1 361 0
 382 0028 817F      		andi r24,lo8(-15)
 383 002a 8E7F      		andi r24,lo8(~(1<<0))
 384 002c 8093 0000 		sts debug_config,r24
 364:./tmk_core/common/command.c ****             break;
 385               		.loc 1 364 0
 386 0030 81E0      		ldi r24,lo8(1)
 387 0032 8093 0000 		sts command_state,r24
 365:./tmk_core/common/command.c **** 
 388               		.loc 1 365 0
 389 0036 0895      		ret
 390               	.LVL41:
 391               	.L38:
 313:./tmk_core/common/command.c **** 
 392               		.loc 1 313 0
 393 0038 8631      		cpi r24,lo8(22)
 394 003a 01F4      		brne .+2
 395 003c 00C0      		rjmp .L78
 396 003e 00F4      		brsh .L42
 397 0040 8031      		cpi r24,lo8(16)
 398 0042 01F0      		breq .+2
 399 0044 00C0      		rjmp .L55
 417:./tmk_core/common/command.c ****             if (debug_mouse) {
 400               		.loc 1 417 0
 401 0046 8091 0000 		lds r24,debug_config
 402               	.LVL42:
 403 004a 83FB      		bst r24,3
 404 004c 2227      		clr r18
 405 004e 20F9      		bld r18,0
 406 0050 91E0      		ldi r25,lo8(1)
 407 0052 9227      		eor r25,r18
 408 0054 90FB      		bst r25,0
 409 0056 83F9      		bld r24,3
 410 0058 00C0      		rjmp .L77
 411               	.LVL43:
 412               	.L42:
 313:./tmk_core/common/command.c **** 
 413               		.loc 1 313 0
 414 005a 8931      		cpi r24,lo8(25)
 415 005c 01F4      		brne .+2
 416 005e 00C0      		rjmp .L78
 417 0060 8B31      		cpi r24,lo8(27)
 418 0062 01F0      		breq .+2
 419 0064 00C0      		rjmp .L55
 395:./tmk_core/common/command.c ****             if (debug_matrix) {
 420               		.loc 1 395 0
 421 0066 8091 0000 		lds r24,debug_config
 422               	.LVL44:
 423 006a 81FB      		bst r24,1
 424 006c 2227      		clr r18
 425 006e 20F9      		bld r18,0
 426 0070 91E0      		ldi r25,lo8(1)
 427 0072 9227      		eor r25,r18
 428 0074 90FB      		bst r25,0
 429 0076 81F9      		bld r24,1
 430 0078 00C0      		rjmp .L77
 431               	.LVL45:
 432               	.L35:
 313:./tmk_core/common/command.c **** 
 433               		.loc 1 313 0
 434 007a 8833      		cpi r24,lo8(56)
 435 007c 01F4      		brne .+2
 436 007e 00C0      		rjmp .L78
 437 0080 00F4      		brsh .L45
 438 0082 8932      		cpi r24,lo8(41)
 439 0084 01F4      		brne .+2
 440 0086 00C0      		rjmp .L47
 441 0088 8533      		cpi r24,lo8(53)
 442 008a 01F4      		brne .+2
 443 008c 00C0      		rjmp .L47
 444 008e 8732      		cpi r24,lo8(39)
 445 0090 01F0      		breq .L47
 446 0092 00C0      		rjmp .L55
 447               	.L45:
 448 0094 8334      		cpi r24,lo8(67)
 449 0096 01F0      		breq .L47
 450 0098 00F4      		brsh .L49
 451 009a 8A33      		cpi r24,lo8(58)
 452 009c 00F0      		brlo .L55
 504:./tmk_core/common/command.c ****             break;
 453               		.loc 1 504 0
 454 009e 8953      		subi r24,lo8(-(-57))
 455               	.LVL46:
 456 00a0 00C0      		rjmp .L79
 457               	.LVL47:
 458               	.L49:
 313:./tmk_core/common/command.c **** 
 459               		.loc 1 313 0
 460 00a2 8834      		cpi r24,lo8(72)
 461 00a4 01F4      		brne .L55
 369:./tmk_core/common/command.c ****             print("\n\nJumping to bootloader... ");
 462               		.loc 1 369 0
 463 00a6 0E94 0000 		call clear_keyboard
 464               	.LVL48:
 465               	.LBB4:
 466               	.LBB5:
 467               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 468               		.loc 2 187 0
 469 00aa 2FEF      		ldi r18,lo8(3199999)
 470 00ac 83ED      		ldi r24,hi8(3199999)
 471 00ae 90E3      		ldi r25,hlo8(3199999)
 472 00b0 2150      	1:	subi r18,1
 473 00b2 8040      		sbci r24,0
 474 00b4 9040      		sbci r25,0
 475 00b6 01F4      		brne 1b
 476 00b8 00C0      		rjmp .
 477 00ba 0000      		nop
 478               	.LVL49:
 479               	.LBE5:
 480               	.LBE4:
 377:./tmk_core/common/command.c ****             break;
 481               		.loc 1 377 0
 482 00bc 0E94 0000 		call bootloader_jump
 483               	.LVL50:
 484 00c0 00C0      		rjmp .L78
 485               	.LVL51:
 486               	.L39:
 382:./tmk_core/common/command.c ****             if (debug_enable) {
 487               		.loc 1 382 0
 488 00c2 8091 0000 		lds r24,debug_config
 489               	.LVL52:
 490 00c6 982F      		mov r25,r24
 491 00c8 9095      		com r25
 492 00ca 9170      		andi r25,lo8(1)
 493 00cc 90FB      		bst r25,0
 494 00ce 80F9      		bld r24,0
 495 00d0 8093 0000 		sts debug_config,r24
 383:./tmk_core/common/command.c ****                 print("\ndebug: on\n");
 496               		.loc 1 383 0
 497 00d4 9111      		cpse r25,__zero_reg__
 498 00d6 00C0      		rjmp .L78
 389:./tmk_core/common/command.c ****             }
 499               		.loc 1 389 0
 500 00d8 897F      		andi r24,lo8(-7)
 501 00da 877F      		andi r24,lo8(~(1<<3))
 502 00dc 00C0      		rjmp .L80
 503               	.LVL53:
 504               	.L37:
 406:./tmk_core/common/command.c ****             if (debug_keyboard) {
 505               		.loc 1 406 0
 506 00de 8091 0000 		lds r24,debug_config
 507               	.LVL54:
 508 00e2 82FB      		bst r24,2
 509 00e4 2227      		clr r18
 510 00e6 20F9      		bld r18,0
 511 00e8 91E0      		ldi r25,lo8(1)
 512 00ea 9227      		eor r25,r18
 513 00ec 90FB      		bst r25,0
 514 00ee 82F9      		bld r24,2
 515               	.L77:
 395:./tmk_core/common/command.c ****             if (debug_matrix) {
 516               		.loc 1 395 0
 517 00f0 8093 0000 		sts debug_config,r24
 396:./tmk_core/common/command.c ****                 print("\nmatrix: on\n");
 518               		.loc 1 396 0
 519 00f4 9923      		tst r25
 520 00f6 01F0      		breq .L78
 398:./tmk_core/common/command.c ****             } else {
 521               		.loc 1 398 0
 522 00f8 8091 0000 		lds r24,debug_config
 523 00fc 8160      		ori r24,lo8(1<<0)
 524               	.L80:
 525 00fe 8093 0000 		sts debug_config,r24
 526 0102 00C0      		rjmp .L78
 527               	.LVL55:
 528               	.L36:
 514:./tmk_core/common/command.c ****             break;
 529               		.loc 1 514 0
 530 0104 8D51      		subi r24,lo8(-(-29))
 531               	.LVL56:
 532               	.L79:
 533 0106 0E94 0000 		call switch_default_layer
 534               	.LVL57:
 535               	.L78:
 525:./tmk_core/common/command.c **** }
 536               		.loc 1 525 0
 537 010a 81E0      		ldi r24,lo8(1)
 515:./tmk_core/common/command.c ****         case KC_0:
 538               		.loc 1 515 0
 539 010c 0895      		ret
 540               	.LVL58:
 541               	.L47:
 517:./tmk_core/common/command.c ****             break;
 542               		.loc 1 517 0
 543 010e 80E0      		ldi r24,0
 544               	.LVL59:
 545 0110 00C0      		rjmp .L79
 546               	.LVL60:
 547               	.L55:
 523:./tmk_core/common/command.c ****     }
 548               		.loc 1 523 0
 549 0112 80E0      		ldi r24,0
 550               	.LVL61:
 526:./tmk_core/common/command.c **** 
 551               		.loc 1 526 0
 552 0114 0895      		ret
 553               		.cfi_endproc
 554               	.LFE34:
 556               		.section	.text.rgblight_toggle,"ax",@progbits
 557               		.weak	rgblight_toggle
 559               	rgblight_toggle:
 560               	.LFB65:
 561               		.cfi_startproc
 562               	/* prologue: function */
 563               	/* frame size = 0 */
 564               	/* stack size = 0 */
 565               	.L__stack_usage = 0
 566 0000 0895      		ret
 567               		.cfi_endproc
 568               	.LFE65:
 570               		.section	.text.rgblight_step,"ax",@progbits
 571               		.weak	rgblight_step
 573               	rgblight_step:
 574               	.LFB63:
 575               		.cfi_startproc
 576               	/* prologue: function */
 577               	/* frame size = 0 */
 578               	/* stack size = 0 */
 579               	.L__stack_usage = 0
 580 0000 0895      		ret
 581               		.cfi_endproc
 582               	.LFE63:
 584               		.section	.text.rgblight_step_reverse,"ax",@progbits
 585               		.weak	rgblight_step_reverse
 587               	rgblight_step_reverse:
 588               	.LFB61:
 589               		.cfi_startproc
 590               	/* prologue: function */
 591               	/* frame size = 0 */
 592               	/* stack size = 0 */
 593               	.L__stack_usage = 0
 594 0000 0895      		ret
 595               		.cfi_endproc
 596               	.LFE61:
 598               		.section	.text.rgblight_increase_hue,"ax",@progbits
 599               		.weak	rgblight_increase_hue
 601               	rgblight_increase_hue:
 602               	.LFB59:
 603               		.cfi_startproc
 604               	/* prologue: function */
 605               	/* frame size = 0 */
 606               	/* stack size = 0 */
 607               	.L__stack_usage = 0
 608 0000 0895      		ret
 609               		.cfi_endproc
 610               	.LFE59:
 612               		.section	.text.rgblight_decrease_hue,"ax",@progbits
 613               		.weak	rgblight_decrease_hue
 615               	rgblight_decrease_hue:
 616               	.LFB57:
 617               		.cfi_startproc
 618               	/* prologue: function */
 619               	/* frame size = 0 */
 620               	/* stack size = 0 */
 621               	.L__stack_usage = 0
 622 0000 0895      		ret
 623               		.cfi_endproc
 624               	.LFE57:
 626               		.section	.text.rgblight_increase_sat,"ax",@progbits
 627               		.weak	rgblight_increase_sat
 629               	rgblight_increase_sat:
 630               	.LFB55:
 631               		.cfi_startproc
 632               	/* prologue: function */
 633               	/* frame size = 0 */
 634               	/* stack size = 0 */
 635               	.L__stack_usage = 0
 636 0000 0895      		ret
 637               		.cfi_endproc
 638               	.LFE55:
 640               		.section	.text.rgblight_decrease_sat,"ax",@progbits
 641               		.weak	rgblight_decrease_sat
 643               	rgblight_decrease_sat:
 644               	.LFB53:
 645               		.cfi_startproc
 646               	/* prologue: function */
 647               	/* frame size = 0 */
 648               	/* stack size = 0 */
 649               	.L__stack_usage = 0
 650 0000 0895      		ret
 651               		.cfi_endproc
 652               	.LFE53:
 654               		.section	.text.rgblight_increase_val,"ax",@progbits
 655               		.weak	rgblight_increase_val
 657               	rgblight_increase_val:
 658               	.LFB51:
 659               		.cfi_startproc
 660               	/* prologue: function */
 661               	/* frame size = 0 */
 662               	/* stack size = 0 */
 663               	.L__stack_usage = 0
 664 0000 0895      		ret
 665               		.cfi_endproc
 666               	.LFE51:
 668               		.section	.text.rgblight_decrease_val,"ax",@progbits
 669               		.weak	rgblight_decrease_val
 671               	rgblight_decrease_val:
 672               	.LFB49:
 673               		.cfi_startproc
 674               	/* prologue: function */
 675               	/* frame size = 0 */
 676               	/* stack size = 0 */
 677               	.L__stack_usage = 0
 678 0000 0895      		ret
 679               		.cfi_endproc
 680               	.LFE49:
 682               		.section	.text.rgblight_increase_speed,"ax",@progbits
 683               		.weak	rgblight_increase_speed
 685               	rgblight_increase_speed:
 686               	.LFB47:
 687               		.cfi_startproc
 688               	/* prologue: function */
 689               	/* frame size = 0 */
 690               	/* stack size = 0 */
 691               	.L__stack_usage = 0
 692 0000 0895      		ret
 693               		.cfi_endproc
 694               	.LFE47:
 696               		.section	.text.rgblight_decrease_speed,"ax",@progbits
 697               		.weak	rgblight_decrease_speed
 699               	rgblight_decrease_speed:
 700               	.LFB23:
 701               		.file 3 "./quantum/rgb.h"
   1:./quantum/rgb.h **** /* Copyright 2017 Jack Humbert
   2:./quantum/rgb.h ****  *
   3:./quantum/rgb.h ****  * This program is free software: you can redistribute it and/or modify
   4:./quantum/rgb.h ****  * it under the terms of the GNU General Public License as published by
   5:./quantum/rgb.h ****  * the Free Software Foundation, either version 2 of the License, or
   6:./quantum/rgb.h ****  * (at your option) any later version.
   7:./quantum/rgb.h ****  *
   8:./quantum/rgb.h ****  * This program is distributed in the hope that it will be useful,
   9:./quantum/rgb.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:./quantum/rgb.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:./quantum/rgb.h ****  * GNU General Public License for more details.
  12:./quantum/rgb.h ****  *
  13:./quantum/rgb.h ****  * You should have received a copy of the GNU General Public License
  14:./quantum/rgb.h ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15:./quantum/rgb.h ****  */
  16:./quantum/rgb.h **** 
  17:./quantum/rgb.h **** #ifndef RGB_H
  18:./quantum/rgb.h **** #define RGB_H
  19:./quantum/rgb.h **** 
  20:./quantum/rgb.h **** __attribute__((weak))
  21:./quantum/rgb.h **** void rgblight_toggle(void) {};
  22:./quantum/rgb.h **** 
  23:./quantum/rgb.h **** __attribute__((weak))
  24:./quantum/rgb.h **** void rgblight_step(void) {};
  25:./quantum/rgb.h **** 
  26:./quantum/rgb.h **** __attribute__((weak))
  27:./quantum/rgb.h **** void rgblight_step_reverse(void) {};
  28:./quantum/rgb.h **** 
  29:./quantum/rgb.h **** __attribute__((weak))
  30:./quantum/rgb.h **** void rgblight_increase_hue(void) {};
  31:./quantum/rgb.h **** 
  32:./quantum/rgb.h **** __attribute__((weak))
  33:./quantum/rgb.h **** void rgblight_decrease_hue(void) {};
  34:./quantum/rgb.h **** 
  35:./quantum/rgb.h **** __attribute__((weak))
  36:./quantum/rgb.h **** void rgblight_increase_sat(void) {};
  37:./quantum/rgb.h **** 
  38:./quantum/rgb.h **** __attribute__((weak))
  39:./quantum/rgb.h **** void rgblight_decrease_sat(void) {};
  40:./quantum/rgb.h **** 
  41:./quantum/rgb.h **** __attribute__((weak))
  42:./quantum/rgb.h **** void rgblight_increase_val(void) {};
  43:./quantum/rgb.h **** 
  44:./quantum/rgb.h **** __attribute__((weak))
  45:./quantum/rgb.h **** void rgblight_decrease_val(void) {};
  46:./quantum/rgb.h **** 
  47:./quantum/rgb.h **** __attribute__((weak))
  48:./quantum/rgb.h **** void rgblight_increase_speed(void) {};
  49:./quantum/rgb.h **** 
  50:./quantum/rgb.h **** __attribute__((weak))
  51:./quantum/rgb.h **** void rgblight_decrease_speed(void) {};
 702               		.loc 3 51 0
 703               		.cfi_startproc
 704               	/* prologue: function */
 705               	/* frame size = 0 */
 706               	/* stack size = 0 */
 707               	.L__stack_usage = 0
 708 0000 0895      		ret
 709               		.cfi_endproc
 710               	.LFE23:
 712               		.section	.text.command_console_extra,"ax",@progbits
 713               		.weak	command_console_extra
 715               	command_console_extra:
 716               	.LFB30:
 113:./tmk_core/common/command.c ****     (void)code;
 717               		.loc 1 113 0
 718               		.cfi_startproc
 719               	.LVL62:
 720               	/* prologue: function */
 721               	/* frame size = 0 */
 722               	/* stack size = 0 */
 723               	.L__stack_usage = 0
 116:./tmk_core/common/command.c **** 
 724               		.loc 1 116 0
 725 0000 80E0      		ldi r24,0
 726               	.LVL63:
 727 0002 0895      		ret
 728               		.cfi_endproc
 729               	.LFE30:
 731               		.set	command_console_extra.localalias.0,command_console_extra
 732               		.section	.text.command_extra,"ax",@progbits
 733               		.weak	command_extra
 735               	command_extra:
 736               	.LFB45:
 737               		.cfi_startproc
 738               	/* prologue: function */
 739               	/* frame size = 0 */
 740               	/* stack size = 0 */
 741               	.L__stack_usage = 0
 742 0000 0C94 0000 		jmp command_console_extra.localalias.0
 743               		.cfi_endproc
 744               	.LFE45:
 746               		.section	.text.numkey2num,"ax",@progbits
 747               	.global	numkey2num
 749               	numkey2num:
 750               	.LFB42:
 778:./tmk_core/common/command.c ****     switch (code) {
 751               		.loc 1 778 0
 752               		.cfi_startproc
 753               	.LVL64:
 754               	/* prologue: function */
 755               	/* frame size = 0 */
 756               	/* stack size = 0 */
 757               	.L__stack_usage = 0
 758 0000 8E51      		subi r24,lo8(-(-30))
 759               	.LVL65:
 760 0002 8A30      		cpi r24,lo8(10)
 761 0004 00F4      		brsh .L96
 762 0006 E82F      		mov r30,r24
 763 0008 F0E0      		ldi r31,0
 764 000a E050      		subi r30,lo8(-(CSWTCH.57))
 765 000c F040      		sbci r31,hi8(-(CSWTCH.57))
 766 000e 8081      		ld r24,Z
 767               	.LVL66:
 768 0010 0895      		ret
 769               	.L96:
 778:./tmk_core/common/command.c ****     switch (code) {
 770               		.loc 1 778 0
 771 0012 80E0      		ldi r24,0
 792:./tmk_core/common/command.c **** 
 772               		.loc 1 792 0
 773 0014 0895      		ret
 774               		.cfi_endproc
 775               	.LFE42:
 777               		.section	.text.command_proc,"ax",@progbits
 778               	.global	command_proc
 780               	command_proc:
 781               	.LFB28:
  77:./tmk_core/common/command.c ****     switch (command_state) {
 782               		.loc 1 77 0
 783               		.cfi_startproc
 784               	.LVL67:
 785 0000 CF93      		push r28
 786               	.LCFI2:
 787               		.cfi_def_cfa_offset 3
 788               		.cfi_offset 28, -2
 789               	/* prologue: function */
 790               	/* frame size = 0 */
 791               	/* stack size = 1 */
 792               	.L__stack_usage = 1
 793 0002 C82F      		mov r28,r24
  78:./tmk_core/common/command.c ****         case ONESHOT:
 794               		.loc 1 78 0
 795 0004 8091 0000 		lds r24,command_state
 796               	.LVL68:
 797 0008 8130      		cpi r24,lo8(1)
 798 000a 01F0      		breq .L99
 799 000c 00F0      		brlo .L100
 800 000e 8230      		cpi r24,lo8(2)
 801 0010 01F0      		breq .L101
 802 0012 00C0      		rjmp .L154
 803               	.L100:
  80:./tmk_core/common/command.c ****                 return false;
 804               		.loc 1 80 0
 805 0014 E091 0000 		lds r30,keyboard_report
 806 0018 F091 0000 		lds r31,keyboard_report+1
 807 001c 8081      		ld r24,Z
 808 001e 8232      		cpi r24,lo8(34)
 809 0020 01F0      		breq .+2
 810 0022 00C0      		rjmp .L123
 811 0024 00C0      		rjmp .L153
 812               	.L99:
  85:./tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
 813               		.loc 1 85 0
 814 0026 E091 0000 		lds r30,keyboard_report
 815 002a F091 0000 		lds r31,keyboard_report+1
 816 002e 8081      		ld r24,Z
 817 0030 8232      		cpi r24,lo8(34)
 818 0032 01F4      		brne .L104
 819               	.L153:
  86:./tmk_core/common/command.c ****             else
 820               		.loc 1 86 0
 821 0034 8C2F      		mov r24,r28
 822 0036 0E94 0000 		call command_extra
 823               	.LVL69:
 824 003a 8111      		cpse r24,__zero_reg__
 825 003c 00C0      		rjmp .L125
  86:./tmk_core/common/command.c ****             else
 826               		.loc 1 86 0 is_stmt 0 discriminator 2
 827 003e 8C2F      		mov r24,r28
 828 0040 0E94 0000 		call command_common
 829               	.LVL70:
 830 0044 00C0      		rjmp .L106
 831               	.L125:
  86:./tmk_core/common/command.c ****             else
 832               		.loc 1 86 0
 833 0046 81E0      		ldi r24,lo8(1)
 834 0048 90E0      		ldi r25,0
 835 004a 00C0      		rjmp .L106
 836               	.L104:
  88:./tmk_core/common/command.c ****             break;
 837               		.loc 1 88 0 is_stmt 1
 838 004c 8C2F      		mov r24,r28
 839 004e 0E94 0000 		call command_console_extra
 840               	.LVL71:
 841 0052 8111      		cpse r24,__zero_reg__
 842 0054 00C0      		rjmp .L126
 843               	.LVL72:
 844               	.LBB10:
 845               	.LBB11:
 544:./tmk_core/common/command.c ****         case KC_H:
 846               		.loc 1 544 0
 847 0056 C431      		cpi r28,lo8(20)
 848 0058 01F0      		breq .L108
 849 005a 00F4      		brsh .L109
 850 005c CB30      		cpi r28,lo8(11)
 851 005e 01F0      		breq .L126
 852 0060 C031      		cpi r28,lo8(16)
 853 0062 01F0      		breq .+2
 854 0064 00C0      		rjmp .L107
 557:./tmk_core/common/command.c ****             return true;
 855               		.loc 1 557 0
 856 0066 82E0      		ldi r24,lo8(2)
 857 0068 8093 0000 		sts command_state,r24
 858 006c 00C0      		rjmp .L126
 859               	.L109:
 544:./tmk_core/common/command.c ****         case KC_H:
 860               		.loc 1 544 0
 861 006e C932      		cpi r28,lo8(41)
 862 0070 01F0      		breq .L108
 863 0072 C833      		cpi r28,lo8(56)
 864 0074 01F0      		breq .L126
 865 0076 00C0      		rjmp .L107
 866               	.L108:
 551:./tmk_core/common/command.c ****             return false;
 867               		.loc 1 551 0
 868 0078 1092 0000 		sts command_state,__zero_reg__
 869 007c 00C0      		rjmp .L107
 870               	.LVL73:
 871               	.L126:
 872               	.LBE11:
 873               	.LBE10:
  88:./tmk_core/common/command.c ****             break;
 874               		.loc 1 88 0
 875 007e 81E0      		ldi r24,lo8(1)
 876               	.L106:
  88:./tmk_core/common/command.c ****             break;
 877               		.loc 1 88 0 is_stmt 0 discriminator 6
 878 0080 8170      		andi r24,lo8(1)
 879 0082 00C0      		rjmp .L147
 880               	.L101:
 881               	.LVL74:
 882               	.LBB12:
 883               	.LBB13:
 713:./tmk_core/common/command.c ****         case KC_H:
 884               		.loc 1 713 0 is_stmt 1
 885 0084 C932      		cpi r28,lo8(41)
 886 0086 01F0      		breq .L112
 887 0088 00F4      		brsh .L113
 888 008a C431      		cpi r28,lo8(20)
 889 008c 01F0      		breq .L112
 890 008e 00F4      		brsh .L114
 891 0090 C730      		cpi r28,lo8(7)
 892 0092 01F0      		breq .+2
 893 0094 00C0      		rjmp .L127
 752:./tmk_core/common/command.c ****             mk_interval = MOUSEKEY_INTERVAL;
 894               		.loc 1 752 0
 895 0096 8EE1      		ldi r24,lo8(30)
 896 0098 8093 0000 		sts mk_delay,r24
 753:./tmk_core/common/command.c ****             mk_max_speed = MOUSEKEY_MAX_SPEED;
 897               		.loc 1 753 0
 898 009c 82E3      		ldi r24,lo8(50)
 899 009e 8093 0000 		sts mk_interval,r24
 754:./tmk_core/common/command.c ****             mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 900               		.loc 1 754 0
 901 00a2 8AE0      		ldi r24,lo8(10)
 902 00a4 8093 0000 		sts mk_max_speed,r24
 755:./tmk_core/common/command.c ****             mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 903               		.loc 1 755 0
 904 00a8 84E1      		ldi r24,lo8(20)
 905 00aa 8093 0000 		sts mk_time_to_max,r24
 756:./tmk_core/common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 906               		.loc 1 756 0
 907 00ae 88E0      		ldi r24,lo8(8)
 908 00b0 8093 0000 		sts mk_wheel_max_speed,r24
 757:./tmk_core/common/command.c ****             print("set default\n");
 909               		.loc 1 757 0
 910 00b4 88E2      		ldi r24,lo8(40)
 911 00b6 8093 0000 		sts mk_wheel_time_to_max,r24
 912 00ba 00C0      		rjmp .L127
 913               	.L114:
 713:./tmk_core/common/command.c ****         case KC_H:
 914               		.loc 1 713 0
 915 00bc 82EE      		ldi r24,lo8(-30)
 916 00be 8C0F      		add r24,r28
 917 00c0 8630      		cpi r24,lo8(6)
 918 00c2 00F4      		brsh .L127
 737:./tmk_core/common/command.c ****             break;
 919               		.loc 1 737 0
 920 00c4 8C2F      		mov r24,r28
 921 00c6 0E94 0000 		call numkey2num
 922               	.LVL75:
 923 00ca 8093 0000 		sts mousekey_param,r24
 924 00ce 00C0      		rjmp .L127
 925               	.L113:
 713:./tmk_core/common/command.c ****         case KC_H:
 926               		.loc 1 713 0
 927 00d0 CE34      		cpi r28,lo8(78)
 928 00d2 01F0      		breq .L117
 929 00d4 00F4      		brsh .L118
 930 00d6 CB34      		cpi r28,lo8(75)
 931 00d8 01F4      		brne .L127
 746:./tmk_core/common/command.c ****             break;
 932               		.loc 1 746 0
 933 00da 6AE0      		ldi r22,lo8(10)
 934 00dc 00C0      		rjmp .L151
 935               	.L118:
 713:./tmk_core/common/command.c ****         case KC_H:
 936               		.loc 1 713 0
 937 00de C135      		cpi r28,lo8(81)
 938 00e0 01F0      		breq .L120
 939 00e2 C235      		cpi r28,lo8(82)
 940 00e4 01F4      		brne .L127
 740:./tmk_core/common/command.c ****             break;
 941               		.loc 1 740 0
 942 00e6 61E0      		ldi r22,lo8(1)
 943 00e8 00C0      		rjmp .L151
 944               	.L112:
 720:./tmk_core/common/command.c ****                 mousekey_param = 0;
 945               		.loc 1 720 0
 946 00ea 8091 0000 		lds r24,mousekey_param
 947 00ee 8823      		tst r24
 948 00f0 01F0      		breq .L122
 721:./tmk_core/common/command.c ****             } else {
 949               		.loc 1 721 0
 950 00f2 1092 0000 		sts mousekey_param,__zero_reg__
 951 00f6 00C0      		rjmp .L127
 952               	.L122:
 724:./tmk_core/common/command.c ****                 return false;
 953               		.loc 1 724 0
 954 00f8 81E0      		ldi r24,lo8(1)
 955 00fa 8093 0000 		sts command_state,r24
 956 00fe 00C0      		rjmp .L147
 957               	.L120:
 743:./tmk_core/common/command.c ****             break;
 958               		.loc 1 743 0
 959 0100 61E0      		ldi r22,lo8(1)
 960 0102 00C0      		rjmp .L150
 961               	.L151:
 746:./tmk_core/common/command.c ****             break;
 962               		.loc 1 746 0
 963 0104 8091 0000 		lds r24,mousekey_param
 964 0108 0E94 0000 		call mousekey_param_inc
 965               	.LVL76:
 966 010c 00C0      		rjmp .L127
 967               	.L117:
 749:./tmk_core/common/command.c ****             break;
 968               		.loc 1 749 0
 969 010e 6AE0      		ldi r22,lo8(10)
 970               	.L150:
 971 0110 8091 0000 		lds r24,mousekey_param
 972 0114 0E94 0000 		call mousekey_param_dec
 973               	.LVL77:
 974 0118 00C0      		rjmp .L127
 975               	.LVL78:
 976               	.L154:
 977               	.LBE13:
 978               	.LBE12:
  96:./tmk_core/common/command.c ****             return false;
 979               		.loc 1 96 0
 980 011a 1092 0000 		sts command_state,__zero_reg__
 981               	.L123:
  81:./tmk_core/common/command.c ****             return (command_extra(code) || command_common(code));
 982               		.loc 1 81 0
 983 011e 80E0      		ldi r24,0
 984 0120 00C0      		rjmp .L147
 985               	.LVL79:
 986               	.L127:
  99:./tmk_core/common/command.c **** }
 987               		.loc 1 99 0
 988 0122 81E0      		ldi r24,lo8(1)
 989 0124 00C0      		rjmp .L147
 990               	.LVL80:
 991               	.L107:
  88:./tmk_core/common/command.c ****             break;
 992               		.loc 1 88 0
 993 0126 80E0      		ldi r24,0
 994 0128 00C0      		rjmp .L106
 995               	.L147:
 996               	/* epilogue start */
 100:./tmk_core/common/command.c **** 
 997               		.loc 1 100 0
 998 012a CF91      		pop r28
 999               	.LVL81:
 1000 012c 0895      		ret
 1001               		.cfi_endproc
 1002               	.LFE28:
 1004               		.section	.rodata.CSWTCH.57,"a",@progbits
 1007               	CSWTCH.57:
 1008 0000 01        		.byte	1
 1009 0001 02        		.byte	2
 1010 0002 03        		.byte	3
 1011 0003 04        		.byte	4
 1012 0004 05        		.byte	5
 1013 0005 06        		.byte	6
 1014 0006 07        		.byte	7
 1015 0007 08        		.byte	8
 1016 0008 09        		.byte	9
 1017 0009 00        		.byte	0
 1018               		.section	.bss.mousekey_param,"aw",@nobits
 1021               	mousekey_param:
 1022 0000 00        		.zero	1
 1023               	.global	command_state
 1024               		.section	.bss.command_state,"aw",@nobits
 1027               	command_state:
 1028 0000 00        		.zero	1
 1029               		.text
 1030               	.Letext0:
 1031               		.file 4 "/usr/lib/avr/include/stdint.h"
 1032               		.file 5 "./tmk_core/common/report.h"
 1033               		.file 6 "./tmk_core/common/debug.h"
 1034               		.file 7 "./tmk_core/common/command.h"
 1035               		.file 8 "./tmk_core/common/action_util.h"
 1036               		.file 9 "./tmk_core/common/mousekey.h"
 1037               		.file 10 "./tmk_core/common/action_layer.h"
 1038               		.file 11 "./tmk_core/common/action.h"
 1039               		.file 12 "./tmk_core/common/bootloader.h"
 1040               		.file 13 "./tmk_core/common/keycode.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 command.c
     /tmp/ccSPSA6m.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccSPSA6m.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccSPSA6m.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccSPSA6m.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccSPSA6m.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccSPSA6m.s:12     .text.mousekey_param_inc:0000000000000000 mousekey_param_inc
     /tmp/ccSPSA6m.s:182    .text.mousekey_param_dec:0000000000000000 mousekey_param_dec
     /tmp/ccSPSA6m.s:301    .text.switch_default_layer:0000000000000000 switch_default_layer
     /tmp/ccSPSA6m.s:350    .text.command_common:0000000000000000 command_common
     /tmp/ccSPSA6m.s:1027   .bss.command_state:0000000000000000 command_state
     /tmp/ccSPSA6m.s:559    .text.rgblight_toggle:0000000000000000 rgblight_toggle
     /tmp/ccSPSA6m.s:573    .text.rgblight_step:0000000000000000 rgblight_step
     /tmp/ccSPSA6m.s:587    .text.rgblight_step_reverse:0000000000000000 rgblight_step_reverse
     /tmp/ccSPSA6m.s:601    .text.rgblight_increase_hue:0000000000000000 rgblight_increase_hue
     /tmp/ccSPSA6m.s:615    .text.rgblight_decrease_hue:0000000000000000 rgblight_decrease_hue
     /tmp/ccSPSA6m.s:629    .text.rgblight_increase_sat:0000000000000000 rgblight_increase_sat
     /tmp/ccSPSA6m.s:643    .text.rgblight_decrease_sat:0000000000000000 rgblight_decrease_sat
     /tmp/ccSPSA6m.s:657    .text.rgblight_increase_val:0000000000000000 rgblight_increase_val
     /tmp/ccSPSA6m.s:671    .text.rgblight_decrease_val:0000000000000000 rgblight_decrease_val
     /tmp/ccSPSA6m.s:685    .text.rgblight_increase_speed:0000000000000000 rgblight_increase_speed
     /tmp/ccSPSA6m.s:699    .text.rgblight_decrease_speed:0000000000000000 rgblight_decrease_speed
     /tmp/ccSPSA6m.s:715    .text.command_console_extra:0000000000000000 command_console_extra
     /tmp/ccSPSA6m.s:715    .text.command_console_extra:0000000000000000 command_console_extra.localalias.0
     /tmp/ccSPSA6m.s:735    .text.command_extra:0000000000000000 command_extra
     /tmp/ccSPSA6m.s:749    .text.numkey2num:0000000000000000 numkey2num
     /tmp/ccSPSA6m.s:1007   .rodata.CSWTCH.57:0000000000000000 CSWTCH.57
     /tmp/ccSPSA6m.s:780    .text.command_proc:0000000000000000 command_proc
     /tmp/ccSPSA6m.s:1021   .bss.mousekey_param:0000000000000000 mousekey_param

UNDEFINED SYMBOLS
mk_delay
mk_interval
mk_max_speed
mk_time_to_max
mk_wheel_max_speed
mk_wheel_time_to_max
default_layer_set
clear_keyboard
debug_config
bootloader_jump
keyboard_report
__do_copy_data
__do_clear_bss
