   1               		.file	"action_layer.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.default_layer_debug,"ax",@progbits
  11               	.global	default_layer_debug
  13               	default_layer_debug:
  14               	.LFB31:
  15               		.cfi_startproc
  16               	/* prologue: function */
  17               	/* frame size = 0 */
  18               	/* stack size = 0 */
  19               	.L__stack_usage = 0
  20 0000 0895      		ret
  21               		.cfi_endproc
  22               	.LFE31:
  24               		.section	.text.layer_state_set_user,"ax",@progbits
  25               		.weak	layer_state_set_user
  27               	layer_state_set_user:
  28               	.LFB11:
  29               		.file 1 "./tmk_core/common/action_layer.c"
   1:./tmk_core/common/action_layer.c **** #include <stdint.h>
   2:./tmk_core/common/action_layer.c **** #include "keyboard.h"
   3:./tmk_core/common/action_layer.c **** #include "action.h"
   4:./tmk_core/common/action_layer.c **** #include "util.h"
   5:./tmk_core/common/action_layer.c **** #include "action_layer.h"
   6:./tmk_core/common/action_layer.c **** 
   7:./tmk_core/common/action_layer.c **** #ifdef DEBUG_ACTION
   8:./tmk_core/common/action_layer.c **** #include "debug.h"
   9:./tmk_core/common/action_layer.c **** #else
  10:./tmk_core/common/action_layer.c **** #include "nodebug.h"
  11:./tmk_core/common/action_layer.c **** #endif
  12:./tmk_core/common/action_layer.c **** 
  13:./tmk_core/common/action_layer.c **** 
  14:./tmk_core/common/action_layer.c **** /** \brief Default Layer State
  15:./tmk_core/common/action_layer.c ****  */
  16:./tmk_core/common/action_layer.c **** uint32_t default_layer_state = 0;
  17:./tmk_core/common/action_layer.c **** 
  18:./tmk_core/common/action_layer.c **** /** \brief Default Layer State Set At Keyboard Level
  19:./tmk_core/common/action_layer.c ****  *
  20:./tmk_core/common/action_layer.c ****  * FIXME: Needs docs
  21:./tmk_core/common/action_layer.c ****  */
  22:./tmk_core/common/action_layer.c **** __attribute__((weak))
  23:./tmk_core/common/action_layer.c **** uint32_t default_layer_state_set_kb(uint32_t state) {
  24:./tmk_core/common/action_layer.c ****     return state;
  25:./tmk_core/common/action_layer.c **** }
  26:./tmk_core/common/action_layer.c **** 
  27:./tmk_core/common/action_layer.c **** /** \brief Default Layer State Set
  28:./tmk_core/common/action_layer.c ****  *
  29:./tmk_core/common/action_layer.c ****  * FIXME: Needs docs
  30:./tmk_core/common/action_layer.c ****  */
  31:./tmk_core/common/action_layer.c **** static void default_layer_state_set(uint32_t state)
  32:./tmk_core/common/action_layer.c **** {
  33:./tmk_core/common/action_layer.c ****     state = default_layer_state_set_kb(state);
  34:./tmk_core/common/action_layer.c ****     debug("default_layer_state: ");
  35:./tmk_core/common/action_layer.c ****     default_layer_debug(); debug(" to ");
  36:./tmk_core/common/action_layer.c ****     default_layer_state = state;
  37:./tmk_core/common/action_layer.c ****     default_layer_debug(); debug("\n");
  38:./tmk_core/common/action_layer.c ****     clear_keyboard_but_mods(); // To avoid stuck keys
  39:./tmk_core/common/action_layer.c **** }
  40:./tmk_core/common/action_layer.c **** 
  41:./tmk_core/common/action_layer.c **** /** \brief Default Layer Print
  42:./tmk_core/common/action_layer.c ****  *
  43:./tmk_core/common/action_layer.c ****  * FIXME: Needs docs
  44:./tmk_core/common/action_layer.c ****  */
  45:./tmk_core/common/action_layer.c **** void default_layer_debug(void)
  46:./tmk_core/common/action_layer.c **** {
  47:./tmk_core/common/action_layer.c ****     dprintf("%08lX(%u)", default_layer_state, biton32(default_layer_state));
  48:./tmk_core/common/action_layer.c **** }
  49:./tmk_core/common/action_layer.c **** 
  50:./tmk_core/common/action_layer.c **** /** \brief Default Layer Set
  51:./tmk_core/common/action_layer.c ****  *
  52:./tmk_core/common/action_layer.c ****  * FIXME: Needs docs
  53:./tmk_core/common/action_layer.c ****  */
  54:./tmk_core/common/action_layer.c **** void default_layer_set(uint32_t state)
  55:./tmk_core/common/action_layer.c **** {
  56:./tmk_core/common/action_layer.c ****     default_layer_state_set(state);
  57:./tmk_core/common/action_layer.c **** }
  58:./tmk_core/common/action_layer.c **** 
  59:./tmk_core/common/action_layer.c **** #ifndef NO_ACTION_LAYER
  60:./tmk_core/common/action_layer.c **** /** \brief Default Layer Or
  61:./tmk_core/common/action_layer.c ****  *
  62:./tmk_core/common/action_layer.c ****  * FIXME: Needs docs
  63:./tmk_core/common/action_layer.c ****  */
  64:./tmk_core/common/action_layer.c **** void default_layer_or(uint32_t state)
  65:./tmk_core/common/action_layer.c **** {
  66:./tmk_core/common/action_layer.c ****     default_layer_state_set(default_layer_state | state);
  67:./tmk_core/common/action_layer.c **** }
  68:./tmk_core/common/action_layer.c **** /** \brief Default Layer And
  69:./tmk_core/common/action_layer.c ****  *
  70:./tmk_core/common/action_layer.c ****  * FIXME: Needs docs
  71:./tmk_core/common/action_layer.c ****  */
  72:./tmk_core/common/action_layer.c **** void default_layer_and(uint32_t state)
  73:./tmk_core/common/action_layer.c **** {
  74:./tmk_core/common/action_layer.c ****     default_layer_state_set(default_layer_state & state);
  75:./tmk_core/common/action_layer.c **** }
  76:./tmk_core/common/action_layer.c **** /** \brief Default Layer Xor
  77:./tmk_core/common/action_layer.c ****  *
  78:./tmk_core/common/action_layer.c ****  * FIXME: Needs docs
  79:./tmk_core/common/action_layer.c ****  */
  80:./tmk_core/common/action_layer.c **** void default_layer_xor(uint32_t state)
  81:./tmk_core/common/action_layer.c **** {
  82:./tmk_core/common/action_layer.c ****     default_layer_state_set(default_layer_state ^ state);
  83:./tmk_core/common/action_layer.c **** }
  84:./tmk_core/common/action_layer.c **** #endif
  85:./tmk_core/common/action_layer.c **** 
  86:./tmk_core/common/action_layer.c **** 
  87:./tmk_core/common/action_layer.c **** #ifndef NO_ACTION_LAYER
  88:./tmk_core/common/action_layer.c **** /** \brief Keymap Layer State
  89:./tmk_core/common/action_layer.c ****  */
  90:./tmk_core/common/action_layer.c **** uint32_t layer_state = 0;
  91:./tmk_core/common/action_layer.c **** 
  92:./tmk_core/common/action_layer.c **** /** \brief Layer state set user
  93:./tmk_core/common/action_layer.c ****  *
  94:./tmk_core/common/action_layer.c ****  * FIXME: Needs docs
  95:./tmk_core/common/action_layer.c ****  */
  96:./tmk_core/common/action_layer.c **** __attribute__((weak))
  97:./tmk_core/common/action_layer.c **** uint32_t layer_state_set_user(uint32_t state) {
  30               		.loc 1 97 0
  31               		.cfi_startproc
  32               	.LVL0:
  33               	/* prologue: function */
  34               	/* frame size = 0 */
  35               	/* stack size = 0 */
  36               	.L__stack_usage = 0
  98:./tmk_core/common/action_layer.c ****     return state;
  99:./tmk_core/common/action_layer.c **** }
  37               		.loc 1 99 0
  38 0000 0895      		ret
  39               		.cfi_endproc
  40               	.LFE11:
  42               		.set	layer_state_set_user.localalias.0,layer_state_set_user
  43               		.section	.text.default_layer_state_set_kb,"ax",@progbits
  44               		.weak	default_layer_state_set_kb
  46               	default_layer_state_set_kb:
  47               	.LFB33:
  48               		.cfi_startproc
  49               	/* prologue: function */
  50               	/* frame size = 0 */
  51               	/* stack size = 0 */
  52               	.L__stack_usage = 0
  53 0000 0C94 0000 		jmp layer_state_set_user.localalias.0
  54               		.cfi_endproc
  55               	.LFE33:
  57               		.section	.text.default_layer_state_set,"ax",@progbits
  59               	default_layer_state_set:
  60               	.LFB5:
  32:./tmk_core/common/action_layer.c ****     state = default_layer_state_set_kb(state);
  61               		.loc 1 32 0
  62               		.cfi_startproc
  63               	.LVL1:
  64               	/* prologue: function */
  65               	/* frame size = 0 */
  66               	/* stack size = 0 */
  67               	.L__stack_usage = 0
  33:./tmk_core/common/action_layer.c ****     debug("default_layer_state: ");
  68               		.loc 1 33 0
  69 0000 0E94 0000 		call default_layer_state_set_kb
  70               	.LVL2:
  36:./tmk_core/common/action_layer.c ****     default_layer_debug(); debug("\n");
  71               		.loc 1 36 0
  72 0004 6093 0000 		sts default_layer_state,r22
  73 0008 7093 0000 		sts default_layer_state+1,r23
  74 000c 8093 0000 		sts default_layer_state+2,r24
  75 0010 9093 0000 		sts default_layer_state+3,r25
  38:./tmk_core/common/action_layer.c **** }
  76               		.loc 1 38 0
  77 0014 0C94 0000 		jmp clear_keyboard_but_mods
  78               	.LVL3:
  79               		.cfi_endproc
  80               	.LFE5:
  82               		.section	.text.default_layer_set,"ax",@progbits
  83               	.global	default_layer_set
  85               	default_layer_set:
  86               	.LFB7:
  55:./tmk_core/common/action_layer.c ****     default_layer_state_set(state);
  87               		.loc 1 55 0
  88               		.cfi_startproc
  89               	.LVL4:
  90               	/* prologue: function */
  91               	/* frame size = 0 */
  92               	/* stack size = 0 */
  93               	.L__stack_usage = 0
  56:./tmk_core/common/action_layer.c **** }
  94               		.loc 1 56 0
  95 0000 0C94 0000 		jmp default_layer_state_set
  96               	.LVL5:
  97               		.cfi_endproc
  98               	.LFE7:
 100               		.section	.text.default_layer_or,"ax",@progbits
 101               	.global	default_layer_or
 103               	default_layer_or:
 104               	.LFB8:
  65:./tmk_core/common/action_layer.c ****     default_layer_state_set(default_layer_state | state);
 105               		.loc 1 65 0
 106               		.cfi_startproc
 107               	.LVL6:
 108 0000 0F93      		push r16
 109               	.LCFI0:
 110               		.cfi_def_cfa_offset 3
 111               		.cfi_offset 16, -2
 112 0002 1F93      		push r17
 113               	.LCFI1:
 114               		.cfi_def_cfa_offset 4
 115               		.cfi_offset 17, -3
 116               	/* prologue: function */
 117               	/* frame size = 0 */
 118               	/* stack size = 2 */
 119               	.L__stack_usage = 2
  66:./tmk_core/common/action_layer.c **** }
 120               		.loc 1 66 0
 121 0004 0091 0000 		lds r16,default_layer_state
 122 0008 1091 0000 		lds r17,default_layer_state+1
 123 000c 2091 0000 		lds r18,default_layer_state+2
 124 0010 3091 0000 		lds r19,default_layer_state+3
 125 0014 602B      		or r22,r16
 126 0016 712B      		or r23,r17
 127 0018 822B      		or r24,r18
 128 001a 932B      		or r25,r19
 129               	.LVL7:
 130               	/* epilogue start */
  67:./tmk_core/common/action_layer.c **** /** \brief Default Layer And
 131               		.loc 1 67 0
 132 001c 1F91      		pop r17
 133 001e 0F91      		pop r16
  66:./tmk_core/common/action_layer.c **** }
 134               		.loc 1 66 0
 135 0020 0C94 0000 		jmp default_layer_state_set
 136               	.LVL8:
 137               		.cfi_endproc
 138               	.LFE8:
 140               		.section	.text.default_layer_and,"ax",@progbits
 141               	.global	default_layer_and
 143               	default_layer_and:
 144               	.LFB9:
  73:./tmk_core/common/action_layer.c ****     default_layer_state_set(default_layer_state & state);
 145               		.loc 1 73 0
 146               		.cfi_startproc
 147               	.LVL9:
 148 0000 0F93      		push r16
 149               	.LCFI2:
 150               		.cfi_def_cfa_offset 3
 151               		.cfi_offset 16, -2
 152 0002 1F93      		push r17
 153               	.LCFI3:
 154               		.cfi_def_cfa_offset 4
 155               		.cfi_offset 17, -3
 156               	/* prologue: function */
 157               	/* frame size = 0 */
 158               	/* stack size = 2 */
 159               	.L__stack_usage = 2
  74:./tmk_core/common/action_layer.c **** }
 160               		.loc 1 74 0
 161 0004 0091 0000 		lds r16,default_layer_state
 162 0008 1091 0000 		lds r17,default_layer_state+1
 163 000c 2091 0000 		lds r18,default_layer_state+2
 164 0010 3091 0000 		lds r19,default_layer_state+3
 165 0014 6023      		and r22,r16
 166 0016 7123      		and r23,r17
 167 0018 8223      		and r24,r18
 168 001a 9323      		and r25,r19
 169               	.LVL10:
 170               	/* epilogue start */
  75:./tmk_core/common/action_layer.c **** /** \brief Default Layer Xor
 171               		.loc 1 75 0
 172 001c 1F91      		pop r17
 173 001e 0F91      		pop r16
  74:./tmk_core/common/action_layer.c **** }
 174               		.loc 1 74 0
 175 0020 0C94 0000 		jmp default_layer_state_set
 176               	.LVL11:
 177               		.cfi_endproc
 178               	.LFE9:
 180               		.section	.text.default_layer_xor,"ax",@progbits
 181               	.global	default_layer_xor
 183               	default_layer_xor:
 184               	.LFB10:
  81:./tmk_core/common/action_layer.c ****     default_layer_state_set(default_layer_state ^ state);
 185               		.loc 1 81 0
 186               		.cfi_startproc
 187               	.LVL12:
 188 0000 0F93      		push r16
 189               	.LCFI4:
 190               		.cfi_def_cfa_offset 3
 191               		.cfi_offset 16, -2
 192 0002 1F93      		push r17
 193               	.LCFI5:
 194               		.cfi_def_cfa_offset 4
 195               		.cfi_offset 17, -3
 196               	/* prologue: function */
 197               	/* frame size = 0 */
 198               	/* stack size = 2 */
 199               	.L__stack_usage = 2
  82:./tmk_core/common/action_layer.c **** }
 200               		.loc 1 82 0
 201 0004 0091 0000 		lds r16,default_layer_state
 202 0008 1091 0000 		lds r17,default_layer_state+1
 203 000c 2091 0000 		lds r18,default_layer_state+2
 204 0010 3091 0000 		lds r19,default_layer_state+3
 205 0014 6027      		eor r22,r16
 206 0016 7127      		eor r23,r17
 207 0018 8227      		eor r24,r18
 208 001a 9327      		eor r25,r19
 209               	.LVL13:
 210               	/* epilogue start */
  83:./tmk_core/common/action_layer.c **** #endif
 211               		.loc 1 83 0
 212 001c 1F91      		pop r17
 213 001e 0F91      		pop r16
  82:./tmk_core/common/action_layer.c **** }
 214               		.loc 1 82 0
 215 0020 0C94 0000 		jmp default_layer_state_set
 216               	.LVL14:
 217               		.cfi_endproc
 218               	.LFE10:
 220               		.section	.text.layer_state_set_kb,"ax",@progbits
 221               		.weak	layer_state_set_kb
 223               	layer_state_set_kb:
 224               	.LFB12:
 100:./tmk_core/common/action_layer.c **** 
 101:./tmk_core/common/action_layer.c **** /** \brief Layer state set keyboard
 102:./tmk_core/common/action_layer.c ****  *
 103:./tmk_core/common/action_layer.c ****  * FIXME: Needs docs
 104:./tmk_core/common/action_layer.c ****  */
 105:./tmk_core/common/action_layer.c **** __attribute__((weak))
 106:./tmk_core/common/action_layer.c **** uint32_t layer_state_set_kb(uint32_t state) {
 225               		.loc 1 106 0
 226               		.cfi_startproc
 227               	.LVL15:
 228               	/* prologue: function */
 229               	/* frame size = 0 */
 230               	/* stack size = 0 */
 231               	.L__stack_usage = 0
 107:./tmk_core/common/action_layer.c ****     return layer_state_set_user(state);
 232               		.loc 1 107 0
 233 0000 0C94 0000 		jmp layer_state_set_user
 234               	.LVL16:
 235               		.cfi_endproc
 236               	.LFE12:
 238               		.section	.text.layer_state_set,"ax",@progbits
 239               	.global	layer_state_set
 241               	layer_state_set:
 242               	.LFB13:
 108:./tmk_core/common/action_layer.c **** }
 109:./tmk_core/common/action_layer.c **** 
 110:./tmk_core/common/action_layer.c **** /** \brief Layer state set
 111:./tmk_core/common/action_layer.c ****  *
 112:./tmk_core/common/action_layer.c ****  * FIXME: Needs docs
 113:./tmk_core/common/action_layer.c ****  */
 114:./tmk_core/common/action_layer.c **** void layer_state_set(uint32_t state)
 115:./tmk_core/common/action_layer.c **** {
 243               		.loc 1 115 0
 244               		.cfi_startproc
 245               	.LVL17:
 246               	/* prologue: function */
 247               	/* frame size = 0 */
 248               	/* stack size = 0 */
 249               	.L__stack_usage = 0
 116:./tmk_core/common/action_layer.c ****     state = layer_state_set_kb(state);
 250               		.loc 1 116 0
 251 0000 0E94 0000 		call layer_state_set_kb
 252               	.LVL18:
 117:./tmk_core/common/action_layer.c ****     dprint("layer_state: ");
 118:./tmk_core/common/action_layer.c ****     layer_debug(); dprint(" to ");
 119:./tmk_core/common/action_layer.c ****     layer_state = state;
 253               		.loc 1 119 0
 254 0004 6093 0000 		sts layer_state,r22
 255 0008 7093 0000 		sts layer_state+1,r23
 256 000c 8093 0000 		sts layer_state+2,r24
 257 0010 9093 0000 		sts layer_state+3,r25
 120:./tmk_core/common/action_layer.c ****     layer_debug(); dprintln();
 121:./tmk_core/common/action_layer.c ****     clear_keyboard_but_mods(); // To avoid stuck keys
 258               		.loc 1 121 0
 259 0014 0C94 0000 		jmp clear_keyboard_but_mods
 260               	.LVL19:
 261               		.cfi_endproc
 262               	.LFE13:
 264               		.section	.text.layer_clear,"ax",@progbits
 265               	.global	layer_clear
 267               	layer_clear:
 268               	.LFB14:
 122:./tmk_core/common/action_layer.c **** }
 123:./tmk_core/common/action_layer.c **** 
 124:./tmk_core/common/action_layer.c **** /** \brief Layer clear
 125:./tmk_core/common/action_layer.c ****  *
 126:./tmk_core/common/action_layer.c ****  * FIXME: Needs docs
 127:./tmk_core/common/action_layer.c ****  */
 128:./tmk_core/common/action_layer.c **** void layer_clear(void)
 129:./tmk_core/common/action_layer.c **** {
 269               		.loc 1 129 0
 270               		.cfi_startproc
 271               	/* prologue: function */
 272               	/* frame size = 0 */
 273               	/* stack size = 0 */
 274               	.L__stack_usage = 0
 130:./tmk_core/common/action_layer.c ****     layer_state_set(0);
 275               		.loc 1 130 0
 276 0000 60E0      		ldi r22,0
 277 0002 70E0      		ldi r23,0
 278 0004 CB01      		movw r24,r22
 279 0006 0C94 0000 		jmp layer_state_set
 280               	.LVL20:
 281               		.cfi_endproc
 282               	.LFE14:
 284               		.section	.text.layer_state_cmp,"ax",@progbits
 285               	.global	layer_state_cmp
 287               	layer_state_cmp:
 288               	.LFB16:
 131:./tmk_core/common/action_layer.c **** }
 132:./tmk_core/common/action_layer.c **** 
 133:./tmk_core/common/action_layer.c **** /** \brief Layer state is
 134:./tmk_core/common/action_layer.c ****  *
 135:./tmk_core/common/action_layer.c ****  * FIXME: Needs docs
 136:./tmk_core/common/action_layer.c ****  */
 137:./tmk_core/common/action_layer.c **** bool layer_state_is(uint8_t layer)
 138:./tmk_core/common/action_layer.c **** {
 139:./tmk_core/common/action_layer.c ****     return layer_state_cmp(layer_state, layer);
 140:./tmk_core/common/action_layer.c **** }
 141:./tmk_core/common/action_layer.c **** 
 142:./tmk_core/common/action_layer.c **** /** \brief Layer state compare
 143:./tmk_core/common/action_layer.c ****  *
 144:./tmk_core/common/action_layer.c ****  * FIXME: Needs docs
 145:./tmk_core/common/action_layer.c ****  */
 146:./tmk_core/common/action_layer.c **** bool layer_state_cmp(uint32_t cmp_layer_state, uint8_t layer) {
 289               		.loc 1 146 0
 290               		.cfi_startproc
 291               	.LVL21:
 292               	/* prologue: function */
 293               	/* frame size = 0 */
 294               	/* stack size = 0 */
 295               	.L__stack_usage = 0
 147:./tmk_core/common/action_layer.c ****     if (!cmp_layer_state) { return layer == 0; }
 296               		.loc 1 147 0
 297 0000 6115      		cp r22,__zero_reg__
 298 0002 7105      		cpc r23,__zero_reg__
 299 0004 8105      		cpc r24,__zero_reg__
 300 0006 9105      		cpc r25,__zero_reg__
 301 0008 01F4      		brne .L13
 302               		.loc 1 147 0 is_stmt 0 discriminator 1
 303 000a 81E0      		ldi r24,lo8(1)
 304 000c 4423      		tst r20
 305 000e 01F0      		breq .L15
 306 0010 80E0      		ldi r24,0
 307 0012 0895      		ret
 308               	.L13:
 148:./tmk_core/common/action_layer.c ****     return (cmp_layer_state & (1UL<<layer)) != 0;
 309               		.loc 1 148 0 is_stmt 1
 310 0014 DC01      		movw r26,r24
 311 0016 CB01      		movw r24,r22
 312 0018 00C0      		rjmp 2f
 313               		1:
 314 001a B695      		lsr r27
 315 001c A795      		ror r26
 316 001e 9795      		ror r25
 317 0020 8795      		ror r24
 318               		2:
 319 0022 4A95      		dec r20
 320 0024 02F4      		brpl 1b
 321 0026 8170      		andi r24,lo8(1)
 322               	.L15:
 149:./tmk_core/common/action_layer.c **** }
 323               		.loc 1 149 0
 324 0028 0895      		ret
 325               		.cfi_endproc
 326               	.LFE16:
 328               		.section	.text.layer_state_is,"ax",@progbits
 329               	.global	layer_state_is
 331               	layer_state_is:
 332               	.LFB15:
 138:./tmk_core/common/action_layer.c ****     return layer_state_cmp(layer_state, layer);
 333               		.loc 1 138 0
 334               		.cfi_startproc
 335               	.LVL22:
 336               	/* prologue: function */
 337               	/* frame size = 0 */
 338               	/* stack size = 0 */
 339               	.L__stack_usage = 0
 340 0000 482F      		mov r20,r24
 139:./tmk_core/common/action_layer.c **** }
 341               		.loc 1 139 0
 342 0002 6091 0000 		lds r22,layer_state
 343 0006 7091 0000 		lds r23,layer_state+1
 344 000a 8091 0000 		lds r24,layer_state+2
 345 000e 9091 0000 		lds r25,layer_state+3
 346 0012 0C94 0000 		jmp layer_state_cmp
 347               	.LVL23:
 348               		.cfi_endproc
 349               	.LFE15:
 351               		.section	.text.layer_move,"ax",@progbits
 352               	.global	layer_move
 354               	layer_move:
 355               	.LFB17:
 150:./tmk_core/common/action_layer.c **** 
 151:./tmk_core/common/action_layer.c **** /** \brief Layer move
 152:./tmk_core/common/action_layer.c ****  *
 153:./tmk_core/common/action_layer.c ****  * FIXME: Needs docs
 154:./tmk_core/common/action_layer.c ****  */
 155:./tmk_core/common/action_layer.c **** void layer_move(uint8_t layer)
 156:./tmk_core/common/action_layer.c **** {
 356               		.loc 1 156 0
 357               		.cfi_startproc
 358               	.LVL24:
 359 0000 0F93      		push r16
 360               	.LCFI6:
 361               		.cfi_def_cfa_offset 3
 362               		.cfi_offset 16, -2
 363 0002 1F93      		push r17
 364               	.LCFI7:
 365               		.cfi_def_cfa_offset 4
 366               		.cfi_offset 17, -3
 367               	/* prologue: function */
 368               	/* frame size = 0 */
 369               	/* stack size = 2 */
 370               	.L__stack_usage = 2
 157:./tmk_core/common/action_layer.c ****     layer_state_set(1UL<<layer);
 371               		.loc 1 157 0
 372 0004 41E0      		ldi r20,lo8(1)
 373 0006 50E0      		ldi r21,0
 374 0008 60E0      		ldi r22,0
 375 000a 70E0      		ldi r23,0
 376 000c 8A01      		movw r16,r20
 377 000e 9B01      		movw r18,r22
 378 0010 00C0      		rjmp 2f
 379               		1:
 380 0012 000F      		lsl r16
 381 0014 111F      		rol r17
 382 0016 221F      		rol r18
 383 0018 331F      		rol r19
 384               		2:
 385 001a 8A95      		dec r24
 386 001c 02F4      		brpl 1b
 387 001e C901      		movw r24,r18
 388 0020 B801      		movw r22,r16
 389               	/* epilogue start */
 158:./tmk_core/common/action_layer.c **** }
 390               		.loc 1 158 0
 391 0022 1F91      		pop r17
 392 0024 0F91      		pop r16
 157:./tmk_core/common/action_layer.c ****     layer_state_set(1UL<<layer);
 393               		.loc 1 157 0
 394 0026 0C94 0000 		jmp layer_state_set
 395               	.LVL25:
 396               		.cfi_endproc
 397               	.LFE17:
 399               		.section	.text.layer_on,"ax",@progbits
 400               	.global	layer_on
 402               	layer_on:
 403               	.LFB18:
 159:./tmk_core/common/action_layer.c **** 
 160:./tmk_core/common/action_layer.c **** /** \brief Layer on
 161:./tmk_core/common/action_layer.c ****  *
 162:./tmk_core/common/action_layer.c ****  * FIXME: Needs docs
 163:./tmk_core/common/action_layer.c ****  */
 164:./tmk_core/common/action_layer.c **** void layer_on(uint8_t layer)
 165:./tmk_core/common/action_layer.c **** {
 404               		.loc 1 165 0
 405               		.cfi_startproc
 406               	.LVL26:
 407 0000 0F93      		push r16
 408               	.LCFI8:
 409               		.cfi_def_cfa_offset 3
 410               		.cfi_offset 16, -2
 411 0002 1F93      		push r17
 412               	.LCFI9:
 413               		.cfi_def_cfa_offset 4
 414               		.cfi_offset 17, -3
 415               	/* prologue: function */
 416               	/* frame size = 0 */
 417               	/* stack size = 2 */
 418               	.L__stack_usage = 2
 166:./tmk_core/common/action_layer.c ****     layer_state_set(layer_state | (1UL<<layer));
 419               		.loc 1 166 0
 420 0004 41E0      		ldi r20,lo8(1)
 421 0006 50E0      		ldi r21,0
 422 0008 60E0      		ldi r22,0
 423 000a 70E0      		ldi r23,0
 424 000c 00C0      		rjmp 2f
 425               		1:
 426 000e 440F      		lsl r20
 427 0010 551F      		rol r21
 428 0012 661F      		rol r22
 429 0014 771F      		rol r23
 430               		2:
 431 0016 8A95      		dec r24
 432 0018 02F4      		brpl 1b
 433 001a 8091 0000 		lds r24,layer_state
 434 001e 9091 0000 		lds r25,layer_state+1
 435 0022 A091 0000 		lds r26,layer_state+2
 436 0026 B091 0000 		lds r27,layer_state+3
 437               	.LVL27:
 438 002a 8A01      		movw r16,r20
 439 002c 9B01      		movw r18,r22
 440 002e 082B      		or r16,r24
 441 0030 192B      		or r17,r25
 442 0032 2A2B      		or r18,r26
 443 0034 3B2B      		or r19,r27
 444 0036 C901      		movw r24,r18
 445 0038 B801      		movw r22,r16
 446               	/* epilogue start */
 167:./tmk_core/common/action_layer.c **** }
 447               		.loc 1 167 0
 448 003a 1F91      		pop r17
 449 003c 0F91      		pop r16
 166:./tmk_core/common/action_layer.c ****     layer_state_set(layer_state | (1UL<<layer));
 450               		.loc 1 166 0
 451 003e 0C94 0000 		jmp layer_state_set
 452               	.LVL28:
 453               		.cfi_endproc
 454               	.LFE18:
 456               		.section	.text.layer_off,"ax",@progbits
 457               	.global	layer_off
 459               	layer_off:
 460               	.LFB19:
 168:./tmk_core/common/action_layer.c **** 
 169:./tmk_core/common/action_layer.c **** /** \brief Layer off
 170:./tmk_core/common/action_layer.c ****  *
 171:./tmk_core/common/action_layer.c ****  * FIXME: Needs docs
 172:./tmk_core/common/action_layer.c ****  */
 173:./tmk_core/common/action_layer.c **** void layer_off(uint8_t layer)
 174:./tmk_core/common/action_layer.c **** {
 461               		.loc 1 174 0
 462               		.cfi_startproc
 463               	.LVL29:
 464 0000 0F93      		push r16
 465               	.LCFI10:
 466               		.cfi_def_cfa_offset 3
 467               		.cfi_offset 16, -2
 468 0002 1F93      		push r17
 469               	.LCFI11:
 470               		.cfi_def_cfa_offset 4
 471               		.cfi_offset 17, -3
 472               	/* prologue: function */
 473               	/* frame size = 0 */
 474               	/* stack size = 2 */
 475               	.L__stack_usage = 2
 175:./tmk_core/common/action_layer.c ****     layer_state_set(layer_state & ~(1UL<<layer));
 476               		.loc 1 175 0
 477 0004 41E0      		ldi r20,lo8(1)
 478 0006 50E0      		ldi r21,0
 479 0008 60E0      		ldi r22,0
 480 000a 70E0      		ldi r23,0
 481 000c 00C0      		rjmp 2f
 482               		1:
 483 000e 440F      		lsl r20
 484 0010 551F      		rol r21
 485 0012 661F      		rol r22
 486 0014 771F      		rol r23
 487               		2:
 488 0016 8A95      		dec r24
 489 0018 02F4      		brpl 1b
 490 001a 4095      		com r20
 491 001c 5095      		com r21
 492 001e 6095      		com r22
 493 0020 7095      		com r23
 494 0022 8091 0000 		lds r24,layer_state
 495 0026 9091 0000 		lds r25,layer_state+1
 496 002a A091 0000 		lds r26,layer_state+2
 497 002e B091 0000 		lds r27,layer_state+3
 498               	.LVL30:
 499 0032 8A01      		movw r16,r20
 500 0034 9B01      		movw r18,r22
 501 0036 0823      		and r16,r24
 502 0038 1923      		and r17,r25
 503 003a 2A23      		and r18,r26
 504 003c 3B23      		and r19,r27
 505 003e C901      		movw r24,r18
 506 0040 B801      		movw r22,r16
 507               	/* epilogue start */
 176:./tmk_core/common/action_layer.c **** }
 508               		.loc 1 176 0
 509 0042 1F91      		pop r17
 510 0044 0F91      		pop r16
 175:./tmk_core/common/action_layer.c ****     layer_state_set(layer_state & ~(1UL<<layer));
 511               		.loc 1 175 0
 512 0046 0C94 0000 		jmp layer_state_set
 513               	.LVL31:
 514               		.cfi_endproc
 515               	.LFE19:
 517               		.section	.text.layer_invert,"ax",@progbits
 518               	.global	layer_invert
 520               	layer_invert:
 521               	.LFB20:
 177:./tmk_core/common/action_layer.c **** 
 178:./tmk_core/common/action_layer.c **** /** \brief Layer invert
 179:./tmk_core/common/action_layer.c ****  *
 180:./tmk_core/common/action_layer.c ****  * FIXME: Needs docs
 181:./tmk_core/common/action_layer.c ****  */
 182:./tmk_core/common/action_layer.c **** void layer_invert(uint8_t layer)
 183:./tmk_core/common/action_layer.c **** {
 522               		.loc 1 183 0
 523               		.cfi_startproc
 524               	.LVL32:
 525 0000 0F93      		push r16
 526               	.LCFI12:
 527               		.cfi_def_cfa_offset 3
 528               		.cfi_offset 16, -2
 529 0002 1F93      		push r17
 530               	.LCFI13:
 531               		.cfi_def_cfa_offset 4
 532               		.cfi_offset 17, -3
 533               	/* prologue: function */
 534               	/* frame size = 0 */
 535               	/* stack size = 2 */
 536               	.L__stack_usage = 2
 184:./tmk_core/common/action_layer.c ****     layer_state_set(layer_state ^ (1UL<<layer));
 537               		.loc 1 184 0
 538 0004 41E0      		ldi r20,lo8(1)
 539 0006 50E0      		ldi r21,0
 540 0008 60E0      		ldi r22,0
 541 000a 70E0      		ldi r23,0
 542 000c 00C0      		rjmp 2f
 543               		1:
 544 000e 440F      		lsl r20
 545 0010 551F      		rol r21
 546 0012 661F      		rol r22
 547 0014 771F      		rol r23
 548               		2:
 549 0016 8A95      		dec r24
 550 0018 02F4      		brpl 1b
 551 001a 8091 0000 		lds r24,layer_state
 552 001e 9091 0000 		lds r25,layer_state+1
 553 0022 A091 0000 		lds r26,layer_state+2
 554 0026 B091 0000 		lds r27,layer_state+3
 555               	.LVL33:
 556 002a 8A01      		movw r16,r20
 557 002c 9B01      		movw r18,r22
 558 002e 0827      		eor r16,r24
 559 0030 1927      		eor r17,r25
 560 0032 2A27      		eor r18,r26
 561 0034 3B27      		eor r19,r27
 562 0036 C901      		movw r24,r18
 563 0038 B801      		movw r22,r16
 564               	/* epilogue start */
 185:./tmk_core/common/action_layer.c **** }
 565               		.loc 1 185 0
 566 003a 1F91      		pop r17
 567 003c 0F91      		pop r16
 184:./tmk_core/common/action_layer.c ****     layer_state_set(layer_state ^ (1UL<<layer));
 568               		.loc 1 184 0
 569 003e 0C94 0000 		jmp layer_state_set
 570               	.LVL34:
 571               		.cfi_endproc
 572               	.LFE20:
 574               		.section	.text.layer_or,"ax",@progbits
 575               	.global	layer_or
 577               	layer_or:
 578               	.LFB21:
 186:./tmk_core/common/action_layer.c **** 
 187:./tmk_core/common/action_layer.c **** /** \brief Layer or
 188:./tmk_core/common/action_layer.c ****  *
 189:./tmk_core/common/action_layer.c ****  * FIXME: Needs docs
 190:./tmk_core/common/action_layer.c ****  */
 191:./tmk_core/common/action_layer.c **** void layer_or(uint32_t state)
 192:./tmk_core/common/action_layer.c **** {
 579               		.loc 1 192 0
 580               		.cfi_startproc
 581               	.LVL35:
 582 0000 0F93      		push r16
 583               	.LCFI14:
 584               		.cfi_def_cfa_offset 3
 585               		.cfi_offset 16, -2
 586 0002 1F93      		push r17
 587               	.LCFI15:
 588               		.cfi_def_cfa_offset 4
 589               		.cfi_offset 17, -3
 590               	/* prologue: function */
 591               	/* frame size = 0 */
 592               	/* stack size = 2 */
 593               	.L__stack_usage = 2
 193:./tmk_core/common/action_layer.c ****     layer_state_set(layer_state | state);
 594               		.loc 1 193 0
 595 0004 0091 0000 		lds r16,layer_state
 596 0008 1091 0000 		lds r17,layer_state+1
 597 000c 2091 0000 		lds r18,layer_state+2
 598 0010 3091 0000 		lds r19,layer_state+3
 599 0014 602B      		or r22,r16
 600 0016 712B      		or r23,r17
 601 0018 822B      		or r24,r18
 602 001a 932B      		or r25,r19
 603               	.LVL36:
 604               	/* epilogue start */
 194:./tmk_core/common/action_layer.c **** }
 605               		.loc 1 194 0
 606 001c 1F91      		pop r17
 607 001e 0F91      		pop r16
 193:./tmk_core/common/action_layer.c ****     layer_state_set(layer_state | state);
 608               		.loc 1 193 0
 609 0020 0C94 0000 		jmp layer_state_set
 610               	.LVL37:
 611               		.cfi_endproc
 612               	.LFE21:
 614               		.section	.text.layer_and,"ax",@progbits
 615               	.global	layer_and
 617               	layer_and:
 618               	.LFB22:
 195:./tmk_core/common/action_layer.c **** /** \brief Layer and
 196:./tmk_core/common/action_layer.c ****  *
 197:./tmk_core/common/action_layer.c ****  * FIXME: Needs docs
 198:./tmk_core/common/action_layer.c ****  */
 199:./tmk_core/common/action_layer.c **** void layer_and(uint32_t state)
 200:./tmk_core/common/action_layer.c **** {
 619               		.loc 1 200 0
 620               		.cfi_startproc
 621               	.LVL38:
 622 0000 0F93      		push r16
 623               	.LCFI16:
 624               		.cfi_def_cfa_offset 3
 625               		.cfi_offset 16, -2
 626 0002 1F93      		push r17
 627               	.LCFI17:
 628               		.cfi_def_cfa_offset 4
 629               		.cfi_offset 17, -3
 630               	/* prologue: function */
 631               	/* frame size = 0 */
 632               	/* stack size = 2 */
 633               	.L__stack_usage = 2
 201:./tmk_core/common/action_layer.c ****     layer_state_set(layer_state & state);
 634               		.loc 1 201 0
 635 0004 0091 0000 		lds r16,layer_state
 636 0008 1091 0000 		lds r17,layer_state+1
 637 000c 2091 0000 		lds r18,layer_state+2
 638 0010 3091 0000 		lds r19,layer_state+3
 639 0014 6023      		and r22,r16
 640 0016 7123      		and r23,r17
 641 0018 8223      		and r24,r18
 642 001a 9323      		and r25,r19
 643               	.LVL39:
 644               	/* epilogue start */
 202:./tmk_core/common/action_layer.c **** }
 645               		.loc 1 202 0
 646 001c 1F91      		pop r17
 647 001e 0F91      		pop r16
 201:./tmk_core/common/action_layer.c ****     layer_state_set(layer_state & state);
 648               		.loc 1 201 0
 649 0020 0C94 0000 		jmp layer_state_set
 650               	.LVL40:
 651               		.cfi_endproc
 652               	.LFE22:
 654               		.section	.text.layer_xor,"ax",@progbits
 655               	.global	layer_xor
 657               	layer_xor:
 658               	.LFB23:
 203:./tmk_core/common/action_layer.c **** /** \brief Layer xor
 204:./tmk_core/common/action_layer.c ****  *
 205:./tmk_core/common/action_layer.c ****  * FIXME: Needs docs
 206:./tmk_core/common/action_layer.c ****  */
 207:./tmk_core/common/action_layer.c **** void layer_xor(uint32_t state)
 208:./tmk_core/common/action_layer.c **** {
 659               		.loc 1 208 0
 660               		.cfi_startproc
 661               	.LVL41:
 662 0000 0F93      		push r16
 663               	.LCFI18:
 664               		.cfi_def_cfa_offset 3
 665               		.cfi_offset 16, -2
 666 0002 1F93      		push r17
 667               	.LCFI19:
 668               		.cfi_def_cfa_offset 4
 669               		.cfi_offset 17, -3
 670               	/* prologue: function */
 671               	/* frame size = 0 */
 672               	/* stack size = 2 */
 673               	.L__stack_usage = 2
 209:./tmk_core/common/action_layer.c ****     layer_state_set(layer_state ^ state);
 674               		.loc 1 209 0
 675 0004 0091 0000 		lds r16,layer_state
 676 0008 1091 0000 		lds r17,layer_state+1
 677 000c 2091 0000 		lds r18,layer_state+2
 678 0010 3091 0000 		lds r19,layer_state+3
 679 0014 6027      		eor r22,r16
 680 0016 7127      		eor r23,r17
 681 0018 8227      		eor r24,r18
 682 001a 9327      		eor r25,r19
 683               	.LVL42:
 684               	/* epilogue start */
 210:./tmk_core/common/action_layer.c **** }
 685               		.loc 1 210 0
 686 001c 1F91      		pop r17
 687 001e 0F91      		pop r16
 209:./tmk_core/common/action_layer.c ****     layer_state_set(layer_state ^ state);
 688               		.loc 1 209 0
 689 0020 0C94 0000 		jmp layer_state_set
 690               	.LVL43:
 691               		.cfi_endproc
 692               	.LFE23:
 694               		.section	.text.layer_debug,"ax",@progbits
 695               	.global	layer_debug
 697               	layer_debug:
 698               	.LFB24:
 211:./tmk_core/common/action_layer.c **** 
 212:./tmk_core/common/action_layer.c **** /** \brief Layer debug printing
 213:./tmk_core/common/action_layer.c ****  *
 214:./tmk_core/common/action_layer.c ****  * FIXME: Needs docs
 215:./tmk_core/common/action_layer.c ****  */
 216:./tmk_core/common/action_layer.c **** void layer_debug(void)
 217:./tmk_core/common/action_layer.c **** {
 699               		.loc 1 217 0
 700               		.cfi_startproc
 701               	/* prologue: function */
 702               	/* frame size = 0 */
 703               	/* stack size = 0 */
 704               	.L__stack_usage = 0
 705 0000 0895      		ret
 706               		.cfi_endproc
 707               	.LFE24:
 709               		.section	.text.update_source_layers_cache,"ax",@progbits
 710               	.global	update_source_layers_cache
 712               	update_source_layers_cache:
 713               	.LFB25:
 218:./tmk_core/common/action_layer.c ****     dprintf("%08lX(%u)", layer_state, biton32(layer_state));
 219:./tmk_core/common/action_layer.c **** }
 220:./tmk_core/common/action_layer.c **** #endif
 221:./tmk_core/common/action_layer.c **** 
 222:./tmk_core/common/action_layer.c **** #if !defined(NO_ACTION_LAYER) && defined(PREVENT_STUCK_MODIFIERS)
 223:./tmk_core/common/action_layer.c **** uint8_t source_layers_cache[(MATRIX_ROWS * MATRIX_COLS + 7) / 8][MAX_LAYER_BITS] = {{0}};
 224:./tmk_core/common/action_layer.c **** 
 225:./tmk_core/common/action_layer.c **** void update_source_layers_cache(keypos_t key, uint8_t layer)
 226:./tmk_core/common/action_layer.c **** {
 714               		.loc 1 226 0
 715               		.cfi_startproc
 716               	.LVL44:
 717               	/* prologue: function */
 718               	/* frame size = 0 */
 719               	/* stack size = 0 */
 720               	.L__stack_usage = 0
 227:./tmk_core/common/action_layer.c ****     const uint8_t key_number = key.col + (key.row * MATRIX_COLS);
 721               		.loc 1 227 0
 722 0000 292F      		mov r18,r25
 723 0002 220F      		lsl r18
 724 0004 920F      		add r25,r18
 725 0006 990F      		lsl r25
 726 0008 890F      		add r24,r25
 727               	.LVL45:
 228:./tmk_core/common/action_layer.c ****     const uint8_t storage_row = key_number / 8;
 728               		.loc 1 228 0
 729 000a E82F      		mov r30,r24
 730 000c E695      		lsr r30
 731 000e E695      		lsr r30
 732 0010 E695      		lsr r30
 733               	.LVL46:
 734               	.LBB2:
 229:./tmk_core/common/action_layer.c ****     const uint8_t storage_bit = key_number % 8;
 230:./tmk_core/common/action_layer.c **** 
 231:./tmk_core/common/action_layer.c ****     for (uint8_t bit_number = 0; bit_number < MAX_LAYER_BITS; bit_number++) {
 232:./tmk_core/common/action_layer.c ****         source_layers_cache[storage_row][bit_number] ^=
 735               		.loc 1 232 0
 736 0012 8770      		andi r24,lo8(7)
 737               	.LVL47:
 738 0014 51E0      		ldi r21,lo8(1)
 739 0016 00C0      		rjmp 2f
 740               		1:
 741 0018 550F      		lsl r21
 742               		2:
 743 001a 8A95      		dec r24
 744 001c 02F4      		brpl 1b
 745 001e 85E0      		ldi r24,lo8(5)
 746               	.LVL48:
 747 0020 E89F      		mul r30,r24
 748 0022 F001      		movw r30,r0
 749 0024 1124      		clr __zero_reg__
 750               	.LVL49:
 751 0026 E050      		subi r30,lo8(-(source_layers_cache))
 752 0028 F040      		sbci r31,hi8(-(source_layers_cache))
 753 002a 20E0      		ldi r18,0
 754 002c 30E0      		ldi r19,0
 755 002e 70E0      		ldi r23,0
 756               	.LVL50:
 757               	.L30:
 233:./tmk_core/common/action_layer.c ****             (-((layer & (1U << bit_number)) != 0)
 234:./tmk_core/common/action_layer.c ****              ^ source_layers_cache[storage_row][bit_number])
 758               		.loc 1 234 0 discriminator 3
 759 0030 4081      		ld r20,Z
 232:./tmk_core/common/action_layer.c ****             (-((layer & (1U << bit_number)) != 0)
 760               		.loc 1 232 0 discriminator 3
 761 0032 CB01      		movw r24,r22
 762 0034 022E      		mov r0,r18
 763 0036 00C0      		rjmp 2f
 764               		1:
 765 0038 9695      		lsr r25
 766 003a 8795      		ror r24
 767               		2:
 768 003c 0A94      		dec r0
 769 003e 02F4      		brpl 1b
 770 0040 8170      		andi r24,lo8(1)
 771 0042 8195      		neg r24
 772 0044 8427      		eor r24,r20
 773 0046 8523      		and r24,r21
 774 0048 8427      		eor r24,r20
 775 004a 8193      		st Z+,r24
 776               	.LVL51:
 777 004c 2F5F      		subi r18,-1
 778 004e 3F4F      		sbci r19,-1
 779               	.LVL52:
 231:./tmk_core/common/action_layer.c ****         source_layers_cache[storage_row][bit_number] ^=
 780               		.loc 1 231 0 discriminator 3
 781 0050 2530      		cpi r18,5
 782 0052 3105      		cpc r19,__zero_reg__
 783 0054 01F4      		brne .L30
 784               	/* epilogue start */
 785               	.LBE2:
 235:./tmk_core/common/action_layer.c ****             & (1U << storage_bit);
 236:./tmk_core/common/action_layer.c ****     }
 237:./tmk_core/common/action_layer.c **** }
 786               		.loc 1 237 0
 787 0056 0895      		ret
 788               		.cfi_endproc
 789               	.LFE25:
 791               		.section	.text.read_source_layers_cache,"ax",@progbits
 792               	.global	read_source_layers_cache
 794               	read_source_layers_cache:
 795               	.LFB26:
 238:./tmk_core/common/action_layer.c **** 
 239:./tmk_core/common/action_layer.c **** uint8_t read_source_layers_cache(keypos_t key)
 240:./tmk_core/common/action_layer.c **** {
 796               		.loc 1 240 0
 797               		.cfi_startproc
 798               	.LVL53:
 799               	/* prologue: function */
 800               	/* frame size = 0 */
 801               	/* stack size = 0 */
 802               	.L__stack_usage = 0
 241:./tmk_core/common/action_layer.c ****     const uint8_t key_number = key.col + (key.row * MATRIX_COLS);
 803               		.loc 1 241 0
 804 0000 292F      		mov r18,r25
 805 0002 220F      		lsl r18
 806 0004 920F      		add r25,r18
 807 0006 990F      		lsl r25
 808 0008 890F      		add r24,r25
 809               	.LVL54:
 242:./tmk_core/common/action_layer.c ****     const uint8_t storage_row = key_number / 8;
 810               		.loc 1 242 0
 811 000a 682F      		mov r22,r24
 812 000c 6695      		lsr r22
 813 000e 6695      		lsr r22
 814 0010 6695      		lsr r22
 815               	.LVL55:
 243:./tmk_core/common/action_layer.c ****     const uint8_t storage_bit = key_number % 8;
 816               		.loc 1 243 0
 817 0012 982F      		mov r25,r24
 818 0014 9770      		andi r25,lo8(7)
 819               	.LVL56:
 820 0016 85E0      		ldi r24,lo8(5)
 821               	.LVL57:
 822 0018 689F      		mul r22,r24
 823 001a B001      		movw r22,r0
 824 001c 1124      		clr __zero_reg__
 825               	.LVL58:
 826 001e 40E0      		ldi r20,0
 827 0020 50E0      		ldi r21,0
 244:./tmk_core/common/action_layer.c ****     uint8_t layer = 0;
 828               		.loc 1 244 0
 829 0022 80E0      		ldi r24,0
 830               	.LVL59:
 831               	.L33:
 832               	.LBB3:
 245:./tmk_core/common/action_layer.c **** 
 246:./tmk_core/common/action_layer.c ****     for (uint8_t bit_number = 0; bit_number < MAX_LAYER_BITS; bit_number++) {
 247:./tmk_core/common/action_layer.c ****         layer |=
 248:./tmk_core/common/action_layer.c ****             ((source_layers_cache[storage_row][bit_number]
 833               		.loc 1 248 0 discriminator 3
 834 0024 FB01      		movw r30,r22
 835 0026 E40F      		add r30,r20
 836 0028 F51F      		adc r31,r21
 837 002a E050      		subi r30,lo8(-(source_layers_cache))
 838 002c F040      		sbci r31,hi8(-(source_layers_cache))
 247:./tmk_core/common/action_layer.c ****             ((source_layers_cache[storage_row][bit_number]
 839               		.loc 1 247 0 discriminator 3
 840 002e 2081      		ld r18,Z
 841 0030 30E0      		ldi r19,0
 842 0032 092E      		mov r0,r25
 843 0034 00C0      		rjmp 2f
 844               		1:
 845 0036 3695      		lsr r19
 846 0038 2795      		ror r18
 847               		2:
 848 003a 0A94      		dec r0
 849 003c 02F4      		brpl 1b
 850 003e 2170      		andi r18,1
 851 0040 3327      		clr r19
 852 0042 042E      		mov r0,r20
 853 0044 00C0      		rjmp 2f
 854               		1:
 855 0046 220F      		lsl r18
 856               		2:
 857 0048 0A94      		dec r0
 858 004a 02F4      		brpl 1b
 859 004c 822B      		or r24,r18
 860               	.LVL60:
 861 004e 4F5F      		subi r20,-1
 862 0050 5F4F      		sbci r21,-1
 863               	.LVL61:
 246:./tmk_core/common/action_layer.c ****         layer |=
 864               		.loc 1 246 0 discriminator 3
 865 0052 4530      		cpi r20,5
 866 0054 5105      		cpc r21,__zero_reg__
 867 0056 01F4      		brne .L33
 868               	/* epilogue start */
 869               	.LBE3:
 249:./tmk_core/common/action_layer.c ****               & (1U << storage_bit)) != 0)
 250:./tmk_core/common/action_layer.c ****             << bit_number;
 251:./tmk_core/common/action_layer.c ****     }
 252:./tmk_core/common/action_layer.c **** 
 253:./tmk_core/common/action_layer.c ****     return layer;
 254:./tmk_core/common/action_layer.c **** }
 870               		.loc 1 254 0
 871 0058 0895      		ret
 872               		.cfi_endproc
 873               	.LFE26:
 875               		.section	.text.layer_switch_get_layer,"ax",@progbits
 876               	.global	layer_switch_get_layer
 878               	layer_switch_get_layer:
 879               	.LFB28:
 255:./tmk_core/common/action_layer.c **** #endif
 256:./tmk_core/common/action_layer.c **** 
 257:./tmk_core/common/action_layer.c **** /** \brief Store or get action (FIXME: Needs better summary)
 258:./tmk_core/common/action_layer.c ****  *
 259:./tmk_core/common/action_layer.c ****  * Make sure the action triggered when the key is released is the same
 260:./tmk_core/common/action_layer.c ****  * one as the one triggered on press. It's important for the mod keys
 261:./tmk_core/common/action_layer.c ****  * when the layer is switched after the down event but before the up
 262:./tmk_core/common/action_layer.c ****  * event as they may get stuck otherwise.
 263:./tmk_core/common/action_layer.c ****  */
 264:./tmk_core/common/action_layer.c **** action_t store_or_get_action(bool pressed, keypos_t key)
 265:./tmk_core/common/action_layer.c **** {
 266:./tmk_core/common/action_layer.c **** #if !defined(NO_ACTION_LAYER) && defined(PREVENT_STUCK_MODIFIERS)
 267:./tmk_core/common/action_layer.c ****     if (disable_action_cache) {
 268:./tmk_core/common/action_layer.c ****         return layer_switch_get_action(key);
 269:./tmk_core/common/action_layer.c ****     }
 270:./tmk_core/common/action_layer.c **** 
 271:./tmk_core/common/action_layer.c ****     uint8_t layer;
 272:./tmk_core/common/action_layer.c **** 
 273:./tmk_core/common/action_layer.c ****     if (pressed) {
 274:./tmk_core/common/action_layer.c ****         layer = layer_switch_get_layer(key);
 275:./tmk_core/common/action_layer.c ****         update_source_layers_cache(key, layer);
 276:./tmk_core/common/action_layer.c ****     }
 277:./tmk_core/common/action_layer.c ****     else {
 278:./tmk_core/common/action_layer.c ****         layer = read_source_layers_cache(key);
 279:./tmk_core/common/action_layer.c ****     }
 280:./tmk_core/common/action_layer.c ****     return action_for_key(layer, key);
 281:./tmk_core/common/action_layer.c **** #else
 282:./tmk_core/common/action_layer.c ****     return layer_switch_get_action(key);
 283:./tmk_core/common/action_layer.c **** #endif
 284:./tmk_core/common/action_layer.c **** }
 285:./tmk_core/common/action_layer.c **** 
 286:./tmk_core/common/action_layer.c **** 
 287:./tmk_core/common/action_layer.c **** /** \brief Layer switch get layer
 288:./tmk_core/common/action_layer.c ****  *
 289:./tmk_core/common/action_layer.c ****  * FIXME: Needs docs
 290:./tmk_core/common/action_layer.c ****  */
 291:./tmk_core/common/action_layer.c **** int8_t layer_switch_get_layer(keypos_t key)
 292:./tmk_core/common/action_layer.c **** {
 880               		.loc 1 292 0
 881               		.cfi_startproc
 882               	.LVL62:
 883 0000 CF92      		push r12
 884               	.LCFI20:
 885               		.cfi_def_cfa_offset 3
 886               		.cfi_offset 12, -2
 887 0002 DF92      		push r13
 888               	.LCFI21:
 889               		.cfi_def_cfa_offset 4
 890               		.cfi_offset 13, -3
 891 0004 EF92      		push r14
 892               	.LCFI22:
 893               		.cfi_def_cfa_offset 5
 894               		.cfi_offset 14, -4
 895 0006 FF92      		push r15
 896               	.LCFI23:
 897               		.cfi_def_cfa_offset 6
 898               		.cfi_offset 15, -5
 899 0008 0F93      		push r16
 900               	.LCFI24:
 901               		.cfi_def_cfa_offset 7
 902               		.cfi_offset 16, -6
 903 000a 1F93      		push r17
 904               	.LCFI25:
 905               		.cfi_def_cfa_offset 8
 906               		.cfi_offset 17, -7
 907 000c CF93      		push r28
 908               	.LCFI26:
 909               		.cfi_def_cfa_offset 9
 910               		.cfi_offset 28, -8
 911 000e DF93      		push r29
 912               	.LCFI27:
 913               		.cfi_def_cfa_offset 10
 914               		.cfi_offset 29, -9
 915               	/* prologue: function */
 916               	/* frame size = 0 */
 917               	/* stack size = 8 */
 918               	.L__stack_usage = 8
 919 0010 8C01      		movw r16,r24
 920               	.LVL63:
 293:./tmk_core/common/action_layer.c **** #ifndef NO_ACTION_LAYER
 294:./tmk_core/common/action_layer.c ****     action_t action;
 295:./tmk_core/common/action_layer.c ****     action.code = ACTION_TRANSPARENT;
 296:./tmk_core/common/action_layer.c **** 
 297:./tmk_core/common/action_layer.c ****     uint32_t layers = layer_state | default_layer_state;
 921               		.loc 1 297 0
 922 0012 C090 0000 		lds r12,layer_state
 923 0016 D090 0000 		lds r13,layer_state+1
 924 001a E090 0000 		lds r14,layer_state+2
 925 001e F090 0000 		lds r15,layer_state+3
 926 0022 8091 0000 		lds r24,default_layer_state
 927 0026 9091 0000 		lds r25,default_layer_state+1
 928 002a A091 0000 		lds r26,default_layer_state+2
 929 002e B091 0000 		lds r27,default_layer_state+3
 930               	.LVL64:
 931 0032 C82A      		or r12,r24
 932 0034 D92A      		or r13,r25
 933 0036 EA2A      		or r14,r26
 934 0038 FB2A      		or r15,r27
 935               	.LVL65:
 936 003a CFE1      		ldi r28,lo8(31)
 937 003c D0E0      		ldi r29,0
 938               	.LVL66:
 939               	.L37:
 940               	.LBB4:
 298:./tmk_core/common/action_layer.c ****     /* check top layer first */
 299:./tmk_core/common/action_layer.c ****     for (int8_t i = 31; i >= 0; i--) {
 300:./tmk_core/common/action_layer.c ****         if (layers & (1UL<<i)) {
 941               		.loc 1 300 0
 942 003e D701      		movw r26,r14
 943 0040 C601      		movw r24,r12
 944 0042 0C2E      		mov r0,r28
 945 0044 00C0      		rjmp 2f
 946               		1:
 947 0046 B695      		lsr r27
 948 0048 A795      		ror r26
 949 004a 9795      		ror r25
 950 004c 8795      		ror r24
 951               		2:
 952 004e 0A94      		dec r0
 953 0050 02F4      		brpl 1b
 954 0052 80FD      		sbrc r24,0
 955 0054 00C0      		rjmp .L36
 956               	.L39:
 957               	.LVL67:
 958               	.LVL68:
 959 0056 2197      		sbiw r28,1
 960 0058 00F4      		brcc .L37
 961               	.LBE4:
 301:./tmk_core/common/action_layer.c ****             action = action_for_key(i, key);
 302:./tmk_core/common/action_layer.c ****             if (action.code != ACTION_TRANSPARENT) {
 303:./tmk_core/common/action_layer.c ****                 return i;
 304:./tmk_core/common/action_layer.c ****             }
 305:./tmk_core/common/action_layer.c ****         }
 306:./tmk_core/common/action_layer.c ****     }
 307:./tmk_core/common/action_layer.c ****     /* fall back to layer 0 */
 308:./tmk_core/common/action_layer.c ****     return 0;
 962               		.loc 1 308 0
 963 005a 80E0      		ldi r24,0
 964 005c 00C0      		rjmp .L38
 965               	.L36:
 966               	.LBB5:
 301:./tmk_core/common/action_layer.c ****             action = action_for_key(i, key);
 967               		.loc 1 301 0
 968 005e B801      		movw r22,r16
 969 0060 8C2F      		mov r24,r28
 970 0062 0E94 0000 		call action_for_key
 971               	.LVL69:
 302:./tmk_core/common/action_layer.c ****                 return i;
 972               		.loc 1 302 0
 973 0066 0197      		sbiw r24,1
 974 0068 01F0      		breq .L39
 975 006a 8C2F      		mov r24,r28
 976               	.LVL70:
 977               	.L38:
 978               	/* epilogue start */
 979               	.LBE5:
 309:./tmk_core/common/action_layer.c **** #else
 310:./tmk_core/common/action_layer.c ****     return biton32(default_layer_state);
 311:./tmk_core/common/action_layer.c **** #endif
 312:./tmk_core/common/action_layer.c **** }
 980               		.loc 1 312 0
 981 006c DF91      		pop r29
 982 006e CF91      		pop r28
 983 0070 1F91      		pop r17
 984 0072 0F91      		pop r16
 985               	.LVL71:
 986 0074 FF90      		pop r15
 987 0076 EF90      		pop r14
 988 0078 DF90      		pop r13
 989 007a CF90      		pop r12
 990               	.LVL72:
 991 007c 0895      		ret
 992               		.cfi_endproc
 993               	.LFE28:
 995               		.section	.text.layer_switch_get_action,"ax",@progbits
 996               	.global	layer_switch_get_action
 998               	layer_switch_get_action:
 999               	.LFB29:
 313:./tmk_core/common/action_layer.c **** 
 314:./tmk_core/common/action_layer.c **** /** \brief Layer switch get layer
 315:./tmk_core/common/action_layer.c ****  *
 316:./tmk_core/common/action_layer.c ****  * FIXME: Needs docs
 317:./tmk_core/common/action_layer.c ****  */
 318:./tmk_core/common/action_layer.c **** action_t layer_switch_get_action(keypos_t key)
 319:./tmk_core/common/action_layer.c **** {
 1000               		.loc 1 319 0
 1001               		.cfi_startproc
 1002               	.LVL73:
 1003 0000 CF93      		push r28
 1004               	.LCFI28:
 1005               		.cfi_def_cfa_offset 3
 1006               		.cfi_offset 28, -2
 1007 0002 DF93      		push r29
 1008               	.LCFI29:
 1009               		.cfi_def_cfa_offset 4
 1010               		.cfi_offset 29, -3
 1011               	/* prologue: function */
 1012               	/* frame size = 0 */
 1013               	/* stack size = 2 */
 1014               	.L__stack_usage = 2
 1015 0004 EC01      		movw r28,r24
 320:./tmk_core/common/action_layer.c ****     return action_for_key(layer_switch_get_layer(key), key);
 1016               		.loc 1 320 0
 1017 0006 0E94 0000 		call layer_switch_get_layer
 1018               	.LVL74:
 1019 000a BE01      		movw r22,r28
 1020 000c 0E94 0000 		call action_for_key
 1021               	.LVL75:
 1022               	/* epilogue start */
 321:./tmk_core/common/action_layer.c **** }
 1023               		.loc 1 321 0
 1024 0010 DF91      		pop r29
 1025 0012 CF91      		pop r28
 1026               	.LVL76:
 1027 0014 0895      		ret
 1028               		.cfi_endproc
 1029               	.LFE29:
 1031               		.section	.text.store_or_get_action,"ax",@progbits
 1032               	.global	store_or_get_action
 1034               	store_or_get_action:
 1035               	.LFB27:
 265:./tmk_core/common/action_layer.c **** #if !defined(NO_ACTION_LAYER) && defined(PREVENT_STUCK_MODIFIERS)
 1036               		.loc 1 265 0
 1037               		.cfi_startproc
 1038               	.LVL77:
 1039 0000 1F93      		push r17
 1040               	.LCFI30:
 1041               		.cfi_def_cfa_offset 3
 1042               		.cfi_offset 17, -2
 1043 0002 CF93      		push r28
 1044               	.LCFI31:
 1045               		.cfi_def_cfa_offset 4
 1046               		.cfi_offset 28, -3
 1047 0004 DF93      		push r29
 1048               	.LCFI32:
 1049               		.cfi_def_cfa_offset 5
 1050               		.cfi_offset 29, -4
 1051               	/* prologue: function */
 1052               	/* frame size = 0 */
 1053               	/* stack size = 3 */
 1054               	.L__stack_usage = 3
 1055 0006 EB01      		movw r28,r22
 267:./tmk_core/common/action_layer.c ****         return layer_switch_get_action(key);
 1056               		.loc 1 267 0
 1057 0008 9091 0000 		lds r25,disable_action_cache
 1058 000c 9923      		tst r25
 1059 000e 01F0      		breq .L46
 268:./tmk_core/common/action_layer.c ****     }
 1060               		.loc 1 268 0
 1061 0010 CB01      		movw r24,r22
 1062               	.LVL78:
 1063 0012 0E94 0000 		call layer_switch_get_action
 1064               	.LVL79:
 1065 0016 00C0      		rjmp .L47
 1066               	.LVL80:
 1067               	.L46:
 273:./tmk_core/common/action_layer.c ****         layer = layer_switch_get_layer(key);
 1068               		.loc 1 273 0
 1069 0018 8823      		tst r24
 1070 001a 01F0      		breq .L48
 274:./tmk_core/common/action_layer.c ****         update_source_layers_cache(key, layer);
 1071               		.loc 1 274 0
 1072 001c CB01      		movw r24,r22
 1073               	.LVL81:
 1074 001e 0E94 0000 		call layer_switch_get_layer
 1075               	.LVL82:
 1076 0022 182F      		mov r17,r24
 1077               	.LVL83:
 275:./tmk_core/common/action_layer.c ****     }
 1078               		.loc 1 275 0
 1079 0024 682F      		mov r22,r24
 1080               	.LVL84:
 1081 0026 CE01      		movw r24,r28
 1082 0028 0E94 0000 		call update_source_layers_cache
 1083               	.LVL85:
 1084 002c 00C0      		rjmp .L49
 1085               	.LVL86:
 1086               	.L48:
 278:./tmk_core/common/action_layer.c ****     }
 1087               		.loc 1 278 0
 1088 002e CB01      		movw r24,r22
 1089               	.LVL87:
 1090 0030 0E94 0000 		call read_source_layers_cache
 1091               	.LVL88:
 1092 0034 182F      		mov r17,r24
 1093               	.LVL89:
 1094               	.L49:
 280:./tmk_core/common/action_layer.c **** #else
 1095               		.loc 1 280 0
 1096 0036 BE01      		movw r22,r28
 1097 0038 812F      		mov r24,r17
 1098 003a 0E94 0000 		call action_for_key
 1099               	.LVL90:
 1100               	.L47:
 1101               	/* epilogue start */
 284:./tmk_core/common/action_layer.c **** 
 1102               		.loc 1 284 0
 1103 003e DF91      		pop r29
 1104 0040 CF91      		pop r28
 1105               	.LVL91:
 1106 0042 1F91      		pop r17
 1107 0044 0895      		ret
 1108               		.cfi_endproc
 1109               	.LFE27:
 1111               	.global	source_layers_cache
 1112               		.section	.bss.source_layers_cache,"aw",@nobits
 1115               	source_layers_cache:
 1116 0000 0000 0000 		.zero	55
 1116      0000 0000 
 1116      0000 0000 
 1116      0000 0000 
 1116      0000 0000 
 1117               	.global	layer_state
 1118               		.section	.bss.layer_state,"aw",@nobits
 1121               	layer_state:
 1122 0000 0000 0000 		.zero	4
 1123               	.global	default_layer_state
 1124               		.section	.bss.default_layer_state,"aw",@nobits
 1127               	default_layer_state:
 1128 0000 0000 0000 		.zero	4
 1129               		.text
 1130               	.Letext0:
 1131               		.file 2 "/usr/lib/avr/include/stdint.h"
 1132               		.file 3 "./tmk_core/common/keyboard.h"
 1133               		.file 4 "./tmk_core/common/action_code.h"
 1134               		.file 5 "./tmk_core/common/action.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action_layer.c
     /tmp/ccHRPaOR.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccHRPaOR.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccHRPaOR.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccHRPaOR.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccHRPaOR.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccHRPaOR.s:13     .text.default_layer_debug:0000000000000000 default_layer_debug
     /tmp/ccHRPaOR.s:27     .text.layer_state_set_user:0000000000000000 layer_state_set_user
     /tmp/ccHRPaOR.s:27     .text.layer_state_set_user:0000000000000000 layer_state_set_user.localalias.0
     /tmp/ccHRPaOR.s:46     .text.default_layer_state_set_kb:0000000000000000 default_layer_state_set_kb
     /tmp/ccHRPaOR.s:59     .text.default_layer_state_set:0000000000000000 default_layer_state_set
     /tmp/ccHRPaOR.s:1127   .bss.default_layer_state:0000000000000000 default_layer_state
     /tmp/ccHRPaOR.s:85     .text.default_layer_set:0000000000000000 default_layer_set
     /tmp/ccHRPaOR.s:103    .text.default_layer_or:0000000000000000 default_layer_or
     /tmp/ccHRPaOR.s:143    .text.default_layer_and:0000000000000000 default_layer_and
     /tmp/ccHRPaOR.s:183    .text.default_layer_xor:0000000000000000 default_layer_xor
     /tmp/ccHRPaOR.s:223    .text.layer_state_set_kb:0000000000000000 layer_state_set_kb
     /tmp/ccHRPaOR.s:241    .text.layer_state_set:0000000000000000 layer_state_set
     /tmp/ccHRPaOR.s:1121   .bss.layer_state:0000000000000000 layer_state
     /tmp/ccHRPaOR.s:267    .text.layer_clear:0000000000000000 layer_clear
     /tmp/ccHRPaOR.s:287    .text.layer_state_cmp:0000000000000000 layer_state_cmp
     /tmp/ccHRPaOR.s:331    .text.layer_state_is:0000000000000000 layer_state_is
     /tmp/ccHRPaOR.s:354    .text.layer_move:0000000000000000 layer_move
     /tmp/ccHRPaOR.s:402    .text.layer_on:0000000000000000 layer_on
     /tmp/ccHRPaOR.s:459    .text.layer_off:0000000000000000 layer_off
     /tmp/ccHRPaOR.s:520    .text.layer_invert:0000000000000000 layer_invert
     /tmp/ccHRPaOR.s:577    .text.layer_or:0000000000000000 layer_or
     /tmp/ccHRPaOR.s:617    .text.layer_and:0000000000000000 layer_and
     /tmp/ccHRPaOR.s:657    .text.layer_xor:0000000000000000 layer_xor
     /tmp/ccHRPaOR.s:697    .text.layer_debug:0000000000000000 layer_debug
     /tmp/ccHRPaOR.s:712    .text.update_source_layers_cache:0000000000000000 update_source_layers_cache
     /tmp/ccHRPaOR.s:1115   .bss.source_layers_cache:0000000000000000 source_layers_cache
     /tmp/ccHRPaOR.s:794    .text.read_source_layers_cache:0000000000000000 read_source_layers_cache
     /tmp/ccHRPaOR.s:878    .text.layer_switch_get_layer:0000000000000000 layer_switch_get_layer
     /tmp/ccHRPaOR.s:998    .text.layer_switch_get_action:0000000000000000 layer_switch_get_action
     /tmp/ccHRPaOR.s:1034   .text.store_or_get_action:0000000000000000 store_or_get_action

UNDEFINED SYMBOLS
clear_keyboard_but_mods
action_for_key
disable_action_cache
__do_clear_bss
