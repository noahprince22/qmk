   1               		.file	"quantum.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.do_code16,"ax",@progbits
  12               	do_code16:
  13               	.LFB28:
  14               		.file 1 "quantum/quantum.c"
   1:quantum/quantum.c **** /* Copyright 2016-2017 Jack Humbert
   2:quantum/quantum.c ****  *
   3:quantum/quantum.c ****  * This program is free software: you can redistribute it and/or modify
   4:quantum/quantum.c ****  * it under the terms of the GNU General Public License as published by
   5:quantum/quantum.c ****  * the Free Software Foundation, either version 2 of the License, or
   6:quantum/quantum.c ****  * (at your option) any later version.
   7:quantum/quantum.c ****  *
   8:quantum/quantum.c ****  * This program is distributed in the hope that it will be useful,
   9:quantum/quantum.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:quantum/quantum.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:quantum/quantum.c ****  * GNU General Public License for more details.
  12:quantum/quantum.c ****  *
  13:quantum/quantum.c ****  * You should have received a copy of the GNU General Public License
  14:quantum/quantum.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15:quantum/quantum.c ****  */
  16:quantum/quantum.c **** 
  17:quantum/quantum.c **** #include "quantum.h"
  18:quantum/quantum.c **** #ifdef PROTOCOL_LUFA
  19:quantum/quantum.c **** #include "outputselect.h"
  20:quantum/quantum.c **** #endif
  21:quantum/quantum.c **** 
  22:quantum/quantum.c **** #ifndef TAPPING_TERM
  23:quantum/quantum.c **** #define TAPPING_TERM 200
  24:quantum/quantum.c **** #endif
  25:quantum/quantum.c **** 
  26:quantum/quantum.c **** #ifndef BREATHING_PERIOD
  27:quantum/quantum.c **** #define BREATHING_PERIOD 6
  28:quantum/quantum.c **** #endif
  29:quantum/quantum.c **** 
  30:quantum/quantum.c **** #include "backlight.h"
  31:quantum/quantum.c **** extern backlight_config_t backlight_config;
  32:quantum/quantum.c **** 
  33:quantum/quantum.c **** #ifdef FAUXCLICKY_ENABLE
  34:quantum/quantum.c **** #include "fauxclicky.h"
  35:quantum/quantum.c **** #endif
  36:quantum/quantum.c **** 
  37:quantum/quantum.c **** #ifdef API_ENABLE
  38:quantum/quantum.c **** #include "api.h"
  39:quantum/quantum.c **** #endif
  40:quantum/quantum.c **** 
  41:quantum/quantum.c **** #ifdef MIDI_ENABLE
  42:quantum/quantum.c **** #include "process_midi.h"
  43:quantum/quantum.c **** #endif
  44:quantum/quantum.c **** 
  45:quantum/quantum.c **** #ifdef AUDIO_ENABLE
  46:quantum/quantum.c ****   #ifndef GOODBYE_SONG
  47:quantum/quantum.c ****     #define GOODBYE_SONG SONG(GOODBYE_SOUND)
  48:quantum/quantum.c ****   #endif
  49:quantum/quantum.c ****   #ifndef AG_NORM_SONG
  50:quantum/quantum.c ****     #define AG_NORM_SONG SONG(AG_NORM_SOUND)
  51:quantum/quantum.c ****   #endif
  52:quantum/quantum.c ****   #ifndef AG_SWAP_SONG
  53:quantum/quantum.c ****     #define AG_SWAP_SONG SONG(AG_SWAP_SOUND)
  54:quantum/quantum.c ****   #endif
  55:quantum/quantum.c ****   float goodbye_song[][2] = GOODBYE_SONG;
  56:quantum/quantum.c ****   float ag_norm_song[][2] = AG_NORM_SONG;
  57:quantum/quantum.c ****   float ag_swap_song[][2] = AG_SWAP_SONG;
  58:quantum/quantum.c ****   #ifdef DEFAULT_LAYER_SONGS
  59:quantum/quantum.c ****     float default_layer_songs[][16][2] = DEFAULT_LAYER_SONGS;
  60:quantum/quantum.c ****   #endif
  61:quantum/quantum.c **** #endif
  62:quantum/quantum.c **** 
  63:quantum/quantum.c **** static void do_code16 (uint16_t code, void (*f) (uint8_t)) {
  15               		.loc 1 63 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 0F93      		push r16
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 16, -2
  22 0002 1F93      		push r17
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 17, -3
  26 0004 CF93      		push r28
  27               	.LCFI2:
  28               		.cfi_def_cfa_offset 5
  29               		.cfi_offset 28, -4
  30 0006 DF93      		push r29
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 6
  33               		.cfi_offset 29, -5
  34               	/* prologue: function */
  35               	/* frame size = 0 */
  36               	/* stack size = 4 */
  37               	.L__stack_usage = 4
  38 0008 8C01      		movw r16,r24
  39 000a EB01      		movw r28,r22
  64:quantum/quantum.c ****   switch (code) {
  40               		.loc 1 64 0
  41 000c 9A95      		dec r25
  42               	.LVL1:
  43 000e 8115      		cp r24,__zero_reg__
  44 0010 9F41      		sbci r25,31
  45 0012 00F4      		brsh .L1
  65:quantum/quantum.c ****   case QK_MODS ... QK_MODS_MAX:
  66:quantum/quantum.c ****     break;
  67:quantum/quantum.c ****   default:
  68:quantum/quantum.c ****     return;
  69:quantum/quantum.c ****   }
  70:quantum/quantum.c **** 
  71:quantum/quantum.c ****   if (code & QK_LCTL)
  46               		.loc 1 71 0
  47 0014 10FF      		sbrs r17,0
  48 0016 00C0      		rjmp .L4
  72:quantum/quantum.c ****     f(KC_LCTL);
  49               		.loc 1 72 0
  50 0018 80EE      		ldi r24,lo8(-32)
  51 001a FB01      		movw r30,r22
  52 001c 0995      		icall
  53               	.LVL2:
  54               	.L4:
  73:quantum/quantum.c ****   if (code & QK_LSFT)
  55               		.loc 1 73 0
  56 001e 11FF      		sbrs r17,1
  57 0020 00C0      		rjmp .L5
  74:quantum/quantum.c ****     f(KC_LSFT);
  58               		.loc 1 74 0
  59 0022 81EE      		ldi r24,lo8(-31)
  60 0024 FE01      		movw r30,r28
  61 0026 0995      		icall
  62               	.LVL3:
  63               	.L5:
  75:quantum/quantum.c ****   if (code & QK_LALT)
  64               		.loc 1 75 0
  65 0028 12FF      		sbrs r17,2
  66 002a 00C0      		rjmp .L6
  76:quantum/quantum.c ****     f(KC_LALT);
  67               		.loc 1 76 0
  68 002c 82EE      		ldi r24,lo8(-30)
  69 002e FE01      		movw r30,r28
  70 0030 0995      		icall
  71               	.LVL4:
  72               	.L6:
  77:quantum/quantum.c ****   if (code & QK_LGUI)
  73               		.loc 1 77 0
  74 0032 13FF      		sbrs r17,3
  75 0034 00C0      		rjmp .L7
  78:quantum/quantum.c ****     f(KC_LGUI);
  76               		.loc 1 78 0
  77 0036 83EE      		ldi r24,lo8(-29)
  78 0038 FE01      		movw r30,r28
  79 003a 0995      		icall
  80               	.LVL5:
  81               	.L7:
  79:quantum/quantum.c **** 
  80:quantum/quantum.c ****   if (code < QK_RMODS_MIN) return;
  82               		.loc 1 80 0
  83 003c 0115      		cp r16,__zero_reg__
  84 003e 1041      		sbci r17,16
  85 0040 00F4      		brsh .L21
  86               	.L1:
  87               	/* epilogue start */
  81:quantum/quantum.c **** 
  82:quantum/quantum.c ****   if (code & QK_RCTL)
  83:quantum/quantum.c ****     f(KC_RCTL);
  84:quantum/quantum.c ****   if (code & QK_RSFT)
  85:quantum/quantum.c ****     f(KC_RSFT);
  86:quantum/quantum.c ****   if (code & QK_RALT)
  87:quantum/quantum.c ****     f(KC_RALT);
  88:quantum/quantum.c ****   if (code & QK_RGUI)
  89:quantum/quantum.c ****     f(KC_RGUI);
  90:quantum/quantum.c **** }
  88               		.loc 1 90 0
  89 0042 DF91      		pop r29
  90 0044 CF91      		pop r28
  91               	.LVL6:
  92 0046 1F91      		pop r17
  93 0048 0F91      		pop r16
  94               	.LVL7:
  95 004a 0895      		ret
  96               	.LVL8:
  97               	.L21:
  83:quantum/quantum.c ****   if (code & QK_RSFT)
  98               		.loc 1 83 0
  99 004c 84EE      		ldi r24,lo8(-28)
 100 004e FE01      		movw r30,r28
 101 0050 0995      		icall
 102               	.LVL9:
  85:quantum/quantum.c ****   if (code & QK_RALT)
 103               		.loc 1 85 0
 104 0052 85EE      		ldi r24,lo8(-27)
 105 0054 FE01      		movw r30,r28
 106 0056 0995      		icall
 107               	.LVL10:
  87:quantum/quantum.c ****   if (code & QK_RGUI)
 108               		.loc 1 87 0
 109 0058 86EE      		ldi r24,lo8(-26)
 110 005a FE01      		movw r30,r28
 111 005c 0995      		icall
 112               	.LVL11:
  89:quantum/quantum.c **** }
 113               		.loc 1 89 0
 114 005e 87EE      		ldi r24,lo8(-25)
 115 0060 FE01      		movw r30,r28
 116               	/* epilogue start */
 117               		.loc 1 90 0
 118 0062 DF91      		pop r29
 119 0064 CF91      		pop r28
 120               	.LVL12:
 121 0066 1F91      		pop r17
 122 0068 0F91      		pop r16
 123               	.LVL13:
  89:quantum/quantum.c **** }
 124               		.loc 1 89 0
 125 006a 0994      		ijmp
 126               	.LVL14:
 127               		.cfi_endproc
 128               	.LFE28:
 130               		.section	.text.qk_register_weak_mods,"ax",@progbits
 132               	qk_register_weak_mods:
 133               	.LFB29:
  91:quantum/quantum.c **** 
  92:quantum/quantum.c **** static inline void qk_register_weak_mods(uint8_t kc) {
 134               		.loc 1 92 0
 135               		.cfi_startproc
 136               	.LVL15:
 137               	/* prologue: function */
 138               	/* frame size = 0 */
 139               	/* stack size = 0 */
 140               	.L__stack_usage = 0
  93:quantum/quantum.c ****     add_weak_mods(MOD_BIT(kc));
 141               		.loc 1 93 0
 142 0000 8770      		andi r24,lo8(7)
 143               	.LVL16:
 144 0002 91E0      		ldi r25,lo8(1)
 145 0004 00C0      		rjmp 2f
 146               		1:
 147 0006 990F      		lsl r25
 148               		2:
 149 0008 8A95      		dec r24
 150 000a 02F4      		brpl 1b
 151 000c 892F      		mov r24,r25
 152 000e 0E94 0000 		call add_weak_mods
 153               	.LVL17:
  94:quantum/quantum.c ****     send_keyboard_report();
 154               		.loc 1 94 0
 155 0012 0C94 0000 		jmp send_keyboard_report
 156               	.LVL18:
 157               		.cfi_endproc
 158               	.LFE29:
 160               		.section	.text.qk_register_mods,"ax",@progbits
 162               	qk_register_mods:
 163               	.LFB96:
 164               		.cfi_startproc
 165               	/* prologue: function */
 166               	/* frame size = 0 */
 167               	/* stack size = 0 */
 168               	.L__stack_usage = 0
 169 0000 0C94 0000 		jmp qk_register_weak_mods
 170               		.cfi_endproc
 171               	.LFE96:
 173               		.section	.text.qk_unregister_weak_mods,"ax",@progbits
 175               	qk_unregister_weak_mods:
 176               	.LFB30:
  95:quantum/quantum.c **** }
  96:quantum/quantum.c **** 
  97:quantum/quantum.c **** static inline void qk_unregister_weak_mods(uint8_t kc) {
 177               		.loc 1 97 0
 178               		.cfi_startproc
 179               	.LVL19:
 180               	/* prologue: function */
 181               	/* frame size = 0 */
 182               	/* stack size = 0 */
 183               	.L__stack_usage = 0
  98:quantum/quantum.c ****     del_weak_mods(MOD_BIT(kc));
 184               		.loc 1 98 0
 185 0000 8770      		andi r24,lo8(7)
 186               	.LVL20:
 187 0002 91E0      		ldi r25,lo8(1)
 188 0004 00C0      		rjmp 2f
 189               		1:
 190 0006 990F      		lsl r25
 191               		2:
 192 0008 8A95      		dec r24
 193 000a 02F4      		brpl 1b
 194 000c 892F      		mov r24,r25
 195 000e 0E94 0000 		call del_weak_mods
 196               	.LVL21:
  99:quantum/quantum.c ****     send_keyboard_report();
 197               		.loc 1 99 0
 198 0012 0C94 0000 		jmp send_keyboard_report
 199               	.LVL22:
 200               		.cfi_endproc
 201               	.LFE30:
 203               		.section	.text.qk_unregister_mods,"ax",@progbits
 205               	qk_unregister_mods:
 206               	.LFB98:
 207               		.cfi_startproc
 208               	/* prologue: function */
 209               	/* frame size = 0 */
 210               	/* stack size = 0 */
 211               	.L__stack_usage = 0
 212 0000 0C94 0000 		jmp qk_unregister_weak_mods
 213               		.cfi_endproc
 214               	.LFE98:
 216               		.section	.text.rgblight_toggle,"ax",@progbits
 217               		.weak	rgblight_toggle
 219               	rgblight_toggle:
 220               	.LFB10:
 221               		.file 2 "quantum/rgb.h"
   1:quantum/rgb.h **** /* Copyright 2017 Jack Humbert
   2:quantum/rgb.h ****  *
   3:quantum/rgb.h ****  * This program is free software: you can redistribute it and/or modify
   4:quantum/rgb.h ****  * it under the terms of the GNU General Public License as published by
   5:quantum/rgb.h ****  * the Free Software Foundation, either version 2 of the License, or
   6:quantum/rgb.h ****  * (at your option) any later version.
   7:quantum/rgb.h ****  *
   8:quantum/rgb.h ****  * This program is distributed in the hope that it will be useful,
   9:quantum/rgb.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:quantum/rgb.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:quantum/rgb.h ****  * GNU General Public License for more details.
  12:quantum/rgb.h ****  *
  13:quantum/rgb.h ****  * You should have received a copy of the GNU General Public License
  14:quantum/rgb.h ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15:quantum/rgb.h ****  */
  16:quantum/rgb.h **** 
  17:quantum/rgb.h **** #ifndef RGB_H
  18:quantum/rgb.h **** #define RGB_H
  19:quantum/rgb.h **** 
  20:quantum/rgb.h **** __attribute__((weak))
  21:quantum/rgb.h **** void rgblight_toggle(void) {};
 222               		.loc 2 21 0
 223               		.cfi_startproc
 224               	/* prologue: function */
 225               	/* frame size = 0 */
 226               	/* stack size = 0 */
 227               	.L__stack_usage = 0
 228               	/* epilogue start */
 229               		.loc 2 21 0
 230 0000 0895      		ret
 231               		.cfi_endproc
 232               	.LFE10:
 234               		.section	.text.rgblight_step,"ax",@progbits
 235               		.weak	rgblight_step
 237               	rgblight_step:
 238               	.LFB66:
 239               		.cfi_startproc
 240               	/* prologue: function */
 241               	/* frame size = 0 */
 242               	/* stack size = 0 */
 243               	.L__stack_usage = 0
 244               	/* epilogue start */
 245 0000 0895      		ret
 246               		.cfi_endproc
 247               	.LFE66:
 249               		.section	.text.rgblight_step_reverse,"ax",@progbits
 250               		.weak	rgblight_step_reverse
 252               	rgblight_step_reverse:
 253               	.LFB68:
 254               		.cfi_startproc
 255               	/* prologue: function */
 256               	/* frame size = 0 */
 257               	/* stack size = 0 */
 258               	.L__stack_usage = 0
 259               	/* epilogue start */
 260 0000 0895      		ret
 261               		.cfi_endproc
 262               	.LFE68:
 264               		.section	.text.rgblight_increase_hue,"ax",@progbits
 265               		.weak	rgblight_increase_hue
 267               	rgblight_increase_hue:
 268               	.LFB70:
 269               		.cfi_startproc
 270               	/* prologue: function */
 271               	/* frame size = 0 */
 272               	/* stack size = 0 */
 273               	.L__stack_usage = 0
 274               	/* epilogue start */
 275 0000 0895      		ret
 276               		.cfi_endproc
 277               	.LFE70:
 279               		.section	.text.rgblight_decrease_hue,"ax",@progbits
 280               		.weak	rgblight_decrease_hue
 282               	rgblight_decrease_hue:
 283               	.LFB72:
 284               		.cfi_startproc
 285               	/* prologue: function */
 286               	/* frame size = 0 */
 287               	/* stack size = 0 */
 288               	.L__stack_usage = 0
 289               	/* epilogue start */
 290 0000 0895      		ret
 291               		.cfi_endproc
 292               	.LFE72:
 294               		.section	.text.rgblight_increase_sat,"ax",@progbits
 295               		.weak	rgblight_increase_sat
 297               	rgblight_increase_sat:
 298               	.LFB74:
 299               		.cfi_startproc
 300               	/* prologue: function */
 301               	/* frame size = 0 */
 302               	/* stack size = 0 */
 303               	.L__stack_usage = 0
 304               	/* epilogue start */
 305 0000 0895      		ret
 306               		.cfi_endproc
 307               	.LFE74:
 309               		.section	.text.rgblight_decrease_sat,"ax",@progbits
 310               		.weak	rgblight_decrease_sat
 312               	rgblight_decrease_sat:
 313               	.LFB76:
 314               		.cfi_startproc
 315               	/* prologue: function */
 316               	/* frame size = 0 */
 317               	/* stack size = 0 */
 318               	.L__stack_usage = 0
 319               	/* epilogue start */
 320 0000 0895      		ret
 321               		.cfi_endproc
 322               	.LFE76:
 324               		.section	.text.rgblight_increase_val,"ax",@progbits
 325               		.weak	rgblight_increase_val
 327               	rgblight_increase_val:
 328               	.LFB78:
 329               		.cfi_startproc
 330               	/* prologue: function */
 331               	/* frame size = 0 */
 332               	/* stack size = 0 */
 333               	.L__stack_usage = 0
 334               	/* epilogue start */
 335 0000 0895      		ret
 336               		.cfi_endproc
 337               	.LFE78:
 339               		.section	.text.rgblight_decrease_val,"ax",@progbits
 340               		.weak	rgblight_decrease_val
 342               	rgblight_decrease_val:
 343               	.LFB80:
 344               		.cfi_startproc
 345               	/* prologue: function */
 346               	/* frame size = 0 */
 347               	/* stack size = 0 */
 348               	.L__stack_usage = 0
 349               	/* epilogue start */
 350 0000 0895      		ret
 351               		.cfi_endproc
 352               	.LFE80:
 354               		.section	.text.rgblight_increase_speed,"ax",@progbits
 355               		.weak	rgblight_increase_speed
 357               	rgblight_increase_speed:
 358               	.LFB82:
 359               		.cfi_startproc
 360               	/* prologue: function */
 361               	/* frame size = 0 */
 362               	/* stack size = 0 */
 363               	.L__stack_usage = 0
 364               	/* epilogue start */
 365 0000 0895      		ret
 366               		.cfi_endproc
 367               	.LFE82:
 369               		.section	.text.rgblight_decrease_speed,"ax",@progbits
 370               		.weak	rgblight_decrease_speed
 372               	rgblight_decrease_speed:
 373               	.LFB84:
 374               		.cfi_startproc
 375               	/* prologue: function */
 376               	/* frame size = 0 */
 377               	/* stack size = 0 */
 378               	.L__stack_usage = 0
 379               	/* epilogue start */
 380 0000 0895      		ret
 381               		.cfi_endproc
 382               	.LFE84:
 384               		.section	.text.register_code16,"ax",@progbits
 385               	.global	register_code16
 387               	register_code16:
 388               	.LFB33:
 100:quantum/quantum.c **** }
 101:quantum/quantum.c **** 
 102:quantum/quantum.c **** static inline void qk_register_mods(uint8_t kc) {
 103:quantum/quantum.c ****     add_weak_mods(MOD_BIT(kc));
 104:quantum/quantum.c ****     send_keyboard_report();
 105:quantum/quantum.c **** }
 106:quantum/quantum.c **** 
 107:quantum/quantum.c **** static inline void qk_unregister_mods(uint8_t kc) {
 108:quantum/quantum.c ****     del_weak_mods(MOD_BIT(kc));
 109:quantum/quantum.c ****     send_keyboard_report();
 110:quantum/quantum.c **** }
 111:quantum/quantum.c **** 
 112:quantum/quantum.c **** void register_code16 (uint16_t code) {
 389               		.loc 1 112 0
 390               		.cfi_startproc
 391               	.LVL23:
 392               		.loc 1 112 0
 393 0000 CF93      		push r28
 394               	.LCFI4:
 395               		.cfi_def_cfa_offset 3
 396               		.cfi_offset 28, -2
 397 0002 DF93      		push r29
 398               	.LCFI5:
 399               		.cfi_def_cfa_offset 4
 400               		.cfi_offset 29, -3
 401               	/* prologue: function */
 402               	/* frame size = 0 */
 403               	/* stack size = 2 */
 404               	.L__stack_usage = 2
 405 0004 EC01      		movw r28,r24
 113:quantum/quantum.c ****   if (IS_MOD(code) || code == KC_NO) {
 406               		.loc 1 113 0
 407 0006 805E      		subi r24,-32
 408 0008 9109      		sbc r25,__zero_reg__
 409               	.LVL24:
 410 000a 0897      		sbiw r24,8
 411 000c 00F0      		brlo .L38
 114:quantum/quantum.c ****       do_code16 (code, qk_register_mods);
 115:quantum/quantum.c ****   } else {
 116:quantum/quantum.c ****       do_code16 (code, qk_register_weak_mods);
 412               		.loc 1 116 0 discriminator 1
 413 000e 60E0      		ldi r22,lo8(gs(qk_register_weak_mods))
 414 0010 70E0      		ldi r23,hi8(gs(qk_register_weak_mods))
 113:quantum/quantum.c ****   if (IS_MOD(code) || code == KC_NO) {
 415               		.loc 1 113 0 discriminator 1
 416 0012 2097      		sbiw r28,0
 417 0014 01F4      		brne .L41
 418               	.L38:
 114:quantum/quantum.c ****       do_code16 (code, qk_register_mods);
 419               		.loc 1 114 0
 420 0016 60E0      		ldi r22,lo8(gs(qk_register_mods))
 421 0018 70E0      		ldi r23,hi8(gs(qk_register_mods))
 422               	.L41:
 423               		.loc 1 116 0
 424 001a CE01      		movw r24,r28
 425 001c 0E94 0000 		call do_code16
 426               	.LVL25:
 117:quantum/quantum.c ****   }
 118:quantum/quantum.c ****   register_code (code);
 427               		.loc 1 118 0
 428 0020 8C2F      		mov r24,r28
 429               	/* epilogue start */
 119:quantum/quantum.c **** }
 430               		.loc 1 119 0
 431 0022 DF91      		pop r29
 432 0024 CF91      		pop r28
 433               	.LVL26:
 118:quantum/quantum.c **** }
 434               		.loc 1 118 0
 435 0026 0C94 0000 		jmp register_code
 436               	.LVL27:
 437               		.cfi_endproc
 438               	.LFE33:
 440               		.section	.text.unregister_code16,"ax",@progbits
 441               	.global	unregister_code16
 443               	unregister_code16:
 444               	.LFB34:
 120:quantum/quantum.c **** 
 121:quantum/quantum.c **** void unregister_code16 (uint16_t code) {
 445               		.loc 1 121 0
 446               		.cfi_startproc
 447               	.LVL28:
 448 0000 CF93      		push r28
 449               	.LCFI6:
 450               		.cfi_def_cfa_offset 3
 451               		.cfi_offset 28, -2
 452 0002 DF93      		push r29
 453               	.LCFI7:
 454               		.cfi_def_cfa_offset 4
 455               		.cfi_offset 29, -3
 456               	/* prologue: function */
 457               	/* frame size = 0 */
 458               	/* stack size = 2 */
 459               	.L__stack_usage = 2
 460 0004 EC01      		movw r28,r24
 122:quantum/quantum.c ****   unregister_code (code);
 461               		.loc 1 122 0
 462 0006 0E94 0000 		call unregister_code
 463               	.LVL29:
 123:quantum/quantum.c ****   if (IS_MOD(code) || code == KC_NO) {
 464               		.loc 1 123 0
 465 000a CE01      		movw r24,r28
 466 000c 805E      		subi r24,-32
 467 000e 9109      		sbc r25,__zero_reg__
 468 0010 0897      		sbiw r24,8
 469 0012 00F0      		brlo .L43
 124:quantum/quantum.c ****       do_code16 (code, qk_unregister_mods);
 125:quantum/quantum.c ****   } else {
 126:quantum/quantum.c ****       do_code16 (code, qk_unregister_weak_mods);
 470               		.loc 1 126 0 discriminator 1
 471 0014 60E0      		ldi r22,lo8(gs(qk_unregister_weak_mods))
 472 0016 70E0      		ldi r23,hi8(gs(qk_unregister_weak_mods))
 123:quantum/quantum.c ****   if (IS_MOD(code) || code == KC_NO) {
 473               		.loc 1 123 0 discriminator 1
 474 0018 2097      		sbiw r28,0
 475 001a 01F4      		brne .L45
 476               	.L43:
 124:quantum/quantum.c ****       do_code16 (code, qk_unregister_mods);
 477               		.loc 1 124 0
 478 001c 60E0      		ldi r22,lo8(gs(qk_unregister_mods))
 479 001e 70E0      		ldi r23,hi8(gs(qk_unregister_mods))
 480               	.L45:
 481               		.loc 1 126 0
 482 0020 CE01      		movw r24,r28
 483               	/* epilogue start */
 127:quantum/quantum.c ****   }
 128:quantum/quantum.c **** }
 484               		.loc 1 128 0
 485 0022 DF91      		pop r29
 486 0024 CF91      		pop r28
 487               	.LVL30:
 126:quantum/quantum.c ****   }
 488               		.loc 1 126 0
 489 0026 0C94 0000 		jmp do_code16
 490               	.LVL31:
 491               		.cfi_endproc
 492               	.LFE34:
 494               		.section	.text.process_action_kb,"ax",@progbits
 495               		.weak	process_action_kb
 497               	process_action_kb:
 498               	.LFB35:
 129:quantum/quantum.c **** 
 130:quantum/quantum.c **** __attribute__ ((weak))
 131:quantum/quantum.c **** bool process_action_kb(keyrecord_t *record) {
 499               		.loc 1 131 0
 500               		.cfi_startproc
 501               	.LVL32:
 502               	/* prologue: function */
 503               	/* frame size = 0 */
 504               	/* stack size = 0 */
 505               	.L__stack_usage = 0
 132:quantum/quantum.c ****   return true;
 133:quantum/quantum.c **** }
 506               		.loc 1 133 0
 507 0000 81E0      		ldi r24,lo8(1)
 508               	.LVL33:
 509               	/* epilogue start */
 510 0002 0895      		ret
 511               		.cfi_endproc
 512               	.LFE35:
 514               		.section	.text.process_record_user,"ax",@progbits
 515               		.weak	process_record_user
 517               	process_record_user:
 518               	.LFB37:
 134:quantum/quantum.c **** 
 135:quantum/quantum.c **** __attribute__ ((weak))
 136:quantum/quantum.c **** bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
 137:quantum/quantum.c ****   return process_record_user(keycode, record);
 138:quantum/quantum.c **** }
 139:quantum/quantum.c **** 
 140:quantum/quantum.c **** __attribute__ ((weak))
 141:quantum/quantum.c **** bool process_record_user(uint16_t keycode, keyrecord_t *record) {
 519               		.loc 1 141 0
 520               		.cfi_startproc
 521               	.LVL34:
 522               	/* prologue: function */
 523               	/* frame size = 0 */
 524               	/* stack size = 0 */
 525               	.L__stack_usage = 0
 142:quantum/quantum.c ****   return true;
 143:quantum/quantum.c **** }
 526               		.loc 1 143 0
 527 0000 81E0      		ldi r24,lo8(1)
 528               	.LVL35:
 529               	/* epilogue start */
 530 0002 0895      		ret
 531               		.cfi_endproc
 532               	.LFE37:
 534               		.section	.text.process_record_kb,"ax",@progbits
 535               		.weak	process_record_kb
 537               	process_record_kb:
 538               	.LFB36:
 136:quantum/quantum.c ****   return process_record_user(keycode, record);
 539               		.loc 1 136 0
 540               		.cfi_startproc
 541               	.LVL36:
 542               	/* prologue: function */
 543               	/* frame size = 0 */
 544               	/* stack size = 0 */
 545               	.L__stack_usage = 0
 137:quantum/quantum.c **** }
 546               		.loc 1 137 0
 547 0000 0C94 0000 		jmp process_record_user
 548               	.LVL37:
 549               		.cfi_endproc
 550               	.LFE36:
 552               		.section	.text.reset_keyboard,"ax",@progbits
 553               	.global	reset_keyboard
 555               	reset_keyboard:
 556               	.LFB38:
 144:quantum/quantum.c **** 
 145:quantum/quantum.c **** void reset_keyboard(void) {
 557               		.loc 1 145 0
 558               		.cfi_startproc
 559               	/* prologue: function */
 560               	/* frame size = 0 */
 561               	/* stack size = 0 */
 562               	.L__stack_usage = 0
 146:quantum/quantum.c ****   clear_keyboard();
 563               		.loc 1 146 0
 564 0000 0E94 0000 		call clear_keyboard
 565               	.LVL38:
 566               	.LBB22:
 567               	.LBB23:
 568               		.file 3 "/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 569               		.loc 3 187 0
 570 0004 2FEF      		ldi r18,lo8(799999)
 571 0006 84E3      		ldi r24,hi8(799999)
 572 0008 9CE0      		ldi r25,hlo8(799999)
 573 000a 2150      	1:	subi r18,1
 574 000c 8040      		sbci r24,0
 575 000e 9040      		sbci r25,0
 576 0010 01F4      		brne 1b
 577 0012 00C0      		rjmp .
 578 0014 0000      		nop
 579               	.LVL39:
 580               	.LBE23:
 581               	.LBE22:
 147:quantum/quantum.c **** #if defined(MIDI_ENABLE) && defined(MIDI_BASIC)
 148:quantum/quantum.c ****   process_midi_all_notes_off();
 149:quantum/quantum.c **** #endif
 150:quantum/quantum.c **** #if defined(AUDIO_ENABLE) && !defined(NO_MUSIC_MODE)
 151:quantum/quantum.c ****   music_all_notes_off();
 152:quantum/quantum.c ****   uint16_t timer_start = timer_read();
 153:quantum/quantum.c ****   PLAY_SONG(goodbye_song);
 154:quantum/quantum.c ****   shutdown_user();
 155:quantum/quantum.c ****   while(timer_elapsed(timer_start) < 250)
 156:quantum/quantum.c ****     wait_ms(1);
 157:quantum/quantum.c ****   stop_all_notes();
 158:quantum/quantum.c **** #else
 159:quantum/quantum.c ****   wait_ms(250);
 160:quantum/quantum.c **** #endif
 161:quantum/quantum.c **** // this is also done later in bootloader.c - not sure if it's neccesary here
 162:quantum/quantum.c **** #ifdef BOOTLOADER_CATERINA
 163:quantum/quantum.c ****   *(uint16_t *)0x0800 = 0x7777; // these two are a-star-specific
 582               		.loc 1 163 0
 583 0016 87E7      		ldi r24,lo8(119)
 584 0018 97E7      		ldi r25,lo8(119)
 585 001a 9093 0108 		sts 2048+1,r25
 586 001e 8093 0008 		sts 2048,r24
 164:quantum/quantum.c **** #endif
 165:quantum/quantum.c ****   bootloader_jump();
 587               		.loc 1 165 0
 588 0022 0C94 0000 		jmp bootloader_jump
 589               	.LVL40:
 590               		.cfi_endproc
 591               	.LFE38:
 593               		.section	.text.process_record_quantum,"ax",@progbits
 594               	.global	process_record_quantum
 596               	process_record_quantum:
 597               	.LFB39:
 166:quantum/quantum.c **** }
 167:quantum/quantum.c **** 
 168:quantum/quantum.c **** // Shift / paren setup
 169:quantum/quantum.c **** 
 170:quantum/quantum.c **** #ifndef LSPO_KEY
 171:quantum/quantum.c ****   #define LSPO_KEY KC_9
 172:quantum/quantum.c **** #endif
 173:quantum/quantum.c **** #ifndef RSPC_KEY
 174:quantum/quantum.c ****   #define RSPC_KEY KC_0
 175:quantum/quantum.c **** #endif
 176:quantum/quantum.c **** 
 177:quantum/quantum.c **** // Shift / Enter setup
 178:quantum/quantum.c **** #ifndef SFTENT_KEY
 179:quantum/quantum.c ****   #define SFTENT_KEY KC_ENT
 180:quantum/quantum.c **** #endif
 181:quantum/quantum.c **** 
 182:quantum/quantum.c **** static bool shift_interrupted[2] = {0, 0};
 183:quantum/quantum.c **** static uint16_t scs_timer[2] = {0, 0};
 184:quantum/quantum.c **** 
 185:quantum/quantum.c **** /* true if the last press of GRAVE_ESC was shifted (i.e. GUI or SHIFT were pressed), false otherwis
 186:quantum/quantum.c ****  * Used to ensure that the correct keycode is released if the key is released.
 187:quantum/quantum.c ****  */
 188:quantum/quantum.c **** static bool grave_esc_was_shifted = false;
 189:quantum/quantum.c **** 
 190:quantum/quantum.c **** bool process_record_quantum(keyrecord_t *record) {
 598               		.loc 1 190 0
 599               		.cfi_startproc
 600               	.LVL41:
 601 0000 0F93      		push r16
 602               	.LCFI8:
 603               		.cfi_def_cfa_offset 3
 604               		.cfi_offset 16, -2
 605 0002 1F93      		push r17
 606               	.LCFI9:
 607               		.cfi_def_cfa_offset 4
 608               		.cfi_offset 17, -3
 609 0004 CF93      		push r28
 610               	.LCFI10:
 611               		.cfi_def_cfa_offset 5
 612               		.cfi_offset 28, -4
 613 0006 DF93      		push r29
 614               	.LCFI11:
 615               		.cfi_def_cfa_offset 6
 616               		.cfi_offset 29, -5
 617               	/* prologue: function */
 618               	/* frame size = 0 */
 619               	/* stack size = 4 */
 620               	.L__stack_usage = 4
 621 0008 8C01      		movw r16,r24
 191:quantum/quantum.c **** 
 192:quantum/quantum.c ****   /* This gets the keycode from the key pressed */
 193:quantum/quantum.c ****   keypos_t key = record->event.key;
 622               		.loc 1 193 0
 623 000a FC01      		movw r30,r24
 624 000c C081      		ld r28,Z
 625 000e D181      		ldd r29,Z+1
 626               	.LVL42:
 194:quantum/quantum.c ****   uint16_t keycode;
 195:quantum/quantum.c **** 
 196:quantum/quantum.c ****   #if !defined(NO_ACTION_LAYER) && defined(PREVENT_STUCK_MODIFIERS)
 197:quantum/quantum.c ****     /* TODO: Use store_or_get_action() or a similar function. */
 198:quantum/quantum.c ****     if (!disable_action_cache) {
 199:quantum/quantum.c ****       uint8_t layer;
 200:quantum/quantum.c **** 
 201:quantum/quantum.c ****       if (record->event.pressed) {
 202:quantum/quantum.c ****         layer = layer_switch_get_layer(key);
 203:quantum/quantum.c ****         update_source_layers_cache(key, layer);
 204:quantum/quantum.c ****       } else {
 205:quantum/quantum.c ****         layer = read_source_layers_cache(key);
 206:quantum/quantum.c ****       }
 207:quantum/quantum.c ****       keycode = keymap_key_to_keycode(layer, key);
 208:quantum/quantum.c ****     } else
 209:quantum/quantum.c ****   #endif
 210:quantum/quantum.c ****     keycode = keymap_key_to_keycode(layer_switch_get_layer(key), key);
 627               		.loc 1 210 0
 628 0010 CE01      		movw r24,r28
 629               	.LVL43:
 630 0012 0E94 0000 		call layer_switch_get_layer
 631               	.LVL44:
 632 0016 BE01      		movw r22,r28
 633 0018 0E94 0000 		call keymap_key_to_keycode
 634               	.LVL45:
 635 001c EC01      		movw r28,r24
 636               	.LVL46:
 211:quantum/quantum.c **** 
 212:quantum/quantum.c ****     // This is how you use actions here
 213:quantum/quantum.c ****     // if (keycode == KC_LEAD) {
 214:quantum/quantum.c ****     //   action_t action;
 215:quantum/quantum.c ****     //   action.code = ACTION_DEFAULT_LAYER_SET(0);
 216:quantum/quantum.c ****     //   process_action(record, action);
 217:quantum/quantum.c ****     //   return false;
 218:quantum/quantum.c ****     // }
 219:quantum/quantum.c **** 
 220:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 221:quantum/quantum.c ****     preprocess_tap_dance(keycode, record);
 637               		.loc 1 221 0
 638 001e B801      		movw r22,r16
 639 0020 0E94 0000 		call preprocess_tap_dance
 640               	.LVL47:
 222:quantum/quantum.c ****   #endif
 223:quantum/quantum.c **** 
 224:quantum/quantum.c ****   if (!(
 225:quantum/quantum.c ****   #if defined(KEY_LOCK_ENABLE)
 226:quantum/quantum.c ****     // Must run first to be able to mask key_up events.
 227:quantum/quantum.c ****     process_key_lock(&keycode, record) &&
 228:quantum/quantum.c ****   #endif
 229:quantum/quantum.c ****   #if defined(AUDIO_ENABLE) && defined(AUDIO_CLICKY)
 230:quantum/quantum.c ****       process_clicky(keycode, record) &&
 231:quantum/quantum.c ****   #endif //AUDIO_CLICKY
 232:quantum/quantum.c ****     process_record_kb(keycode, record) &&
 641               		.loc 1 232 0
 642 0024 B801      		movw r22,r16
 643 0026 CE01      		movw r24,r28
 644 0028 0E94 0000 		call process_record_kb
 645               	.LVL48:
 233:quantum/quantum.c ****   #if defined(RGB_MATRIX_ENABLE) && defined(RGB_MATRIX_KEYPRESSES)
 234:quantum/quantum.c ****     process_rgb_matrix(keycode, record) &&
 235:quantum/quantum.c ****   #endif
 236:quantum/quantum.c ****   #if defined(MIDI_ENABLE) && defined(MIDI_ADVANCED)
 237:quantum/quantum.c ****     process_midi(keycode, record) &&
 238:quantum/quantum.c ****   #endif
 239:quantum/quantum.c ****   #ifdef AUDIO_ENABLE
 240:quantum/quantum.c ****     process_audio(keycode, record) &&
 241:quantum/quantum.c ****   #endif
 242:quantum/quantum.c ****   #ifdef STENO_ENABLE
 243:quantum/quantum.c ****     process_steno(keycode, record) &&
 244:quantum/quantum.c ****   #endif
 245:quantum/quantum.c ****   #if ( defined(AUDIO_ENABLE) || (defined(MIDI_ENABLE) && defined(MIDI_BASIC))) && !defined(NO_MUSI
 246:quantum/quantum.c ****     process_music(keycode, record) &&
 247:quantum/quantum.c ****   #endif
 248:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 249:quantum/quantum.c ****     process_tap_dance(keycode, record) &&
 646               		.loc 1 249 0
 647 002c 8823      		tst r24
 648 002e 01F4      		brne .+2
 649 0030 00C0      		rjmp .L50
 650               		.loc 1 249 0 is_stmt 0 discriminator 2
 651 0032 B801      		movw r22,r16
 652 0034 CE01      		movw r24,r28
 653 0036 0E94 0000 		call process_tap_dance
 654               	.LVL49:
 232:quantum/quantum.c ****   #if defined(RGB_MATRIX_ENABLE) && defined(RGB_MATRIX_KEYPRESSES)
 655               		.loc 1 232 0 is_stmt 1 discriminator 2
 656 003a 8823      		tst r24
 657 003c 01F4      		brne .+2
 658 003e 00C0      		rjmp .L50
 250:quantum/quantum.c ****   #endif
 251:quantum/quantum.c ****   #ifndef DISABLE_LEADER
 252:quantum/quantum.c ****     process_leader(keycode, record) &&
 659               		.loc 1 252 0 discriminator 3
 660 0040 B801      		movw r22,r16
 661 0042 CE01      		movw r24,r28
 662 0044 0E94 0000 		call process_leader
 663               	.LVL50:
 249:quantum/quantum.c ****   #endif
 664               		.loc 1 249 0 discriminator 3
 665 0048 8823      		tst r24
 666 004a 01F4      		brne .+2
 667 004c 00C0      		rjmp .L50
 253:quantum/quantum.c ****   #endif
 254:quantum/quantum.c ****   #ifndef DISABLE_CHORDING
 255:quantum/quantum.c ****     process_chording(keycode, record) &&
 256:quantum/quantum.c ****   #endif
 257:quantum/quantum.c ****   #ifdef COMBO_ENABLE
 258:quantum/quantum.c ****     process_combo(keycode, record) &&
 259:quantum/quantum.c ****   #endif
 260:quantum/quantum.c ****   #ifdef UNICODE_ENABLE
 261:quantum/quantum.c ****     process_unicode(keycode, record) &&
 262:quantum/quantum.c ****   #endif
 263:quantum/quantum.c ****   #ifdef UCIS_ENABLE
 264:quantum/quantum.c ****     process_ucis(keycode, record) &&
 265:quantum/quantum.c ****   #endif
 266:quantum/quantum.c ****   #ifdef PRINTING_ENABLE
 267:quantum/quantum.c ****     process_printer(keycode, record) &&
 268:quantum/quantum.c ****   #endif
 269:quantum/quantum.c ****   #ifdef AUTO_SHIFT_ENABLE
 270:quantum/quantum.c ****     process_auto_shift(keycode, record) &&
 271:quantum/quantum.c ****   #endif
 272:quantum/quantum.c ****   #ifdef UNICODEMAP_ENABLE
 273:quantum/quantum.c ****     process_unicode_map(keycode, record) &&
 274:quantum/quantum.c ****   #endif
 275:quantum/quantum.c ****   #ifdef TERMINAL_ENABLE
 276:quantum/quantum.c ****     process_terminal(keycode, record) &&
 277:quantum/quantum.c ****   #endif
 278:quantum/quantum.c ****       true)) {
 279:quantum/quantum.c ****     return false;
 280:quantum/quantum.c ****   }
 281:quantum/quantum.c **** 
 282:quantum/quantum.c ****   // Shift / paren setup
 283:quantum/quantum.c **** 
 284:quantum/quantum.c ****   switch(keycode) {
 668               		.loc 1 284 0
 669 004e C531      		cpi r28,21
 670 0050 FCE5      		ldi r31,92
 671 0052 DF07      		cpc r29,r31
 672 0054 01F4      		brne .+2
 673 0056 00C0      		rjmp .L55
 674 0058 00F4      		brsh .L56
 675 005a C130      		cpi r28,1
 676 005c ECE5      		ldi r30,92
 677 005e DE07      		cpc r29,r30
 678 0060 01F4      		brne .+2
 679 0062 00C0      		rjmp .L57
 680 0064 00F0      		brlo .+2
 681 0066 00C0      		rjmp .L58
 682 0068 C115      		cp r28,__zero_reg__
 683 006a DC45      		sbci r29,92
 684 006c 01F0      		breq .L59
 685               	.L54:
 285:quantum/quantum.c ****     case RESET:
 286:quantum/quantum.c ****       if (record->event.pressed) {
 287:quantum/quantum.c ****         reset_keyboard();
 288:quantum/quantum.c ****       }
 289:quantum/quantum.c ****     return false;
 290:quantum/quantum.c ****     case DEBUG:
 291:quantum/quantum.c ****       if (record->event.pressed) {
 292:quantum/quantum.c ****           debug_enable = true;
 293:quantum/quantum.c ****           print("DEBUG: enabled.\n");
 294:quantum/quantum.c ****       }
 295:quantum/quantum.c ****     return false;
 296:quantum/quantum.c ****   #ifdef FAUXCLICKY_ENABLE
 297:quantum/quantum.c ****   case FC_TOG:
 298:quantum/quantum.c ****     if (record->event.pressed) {
 299:quantum/quantum.c ****       FAUXCLICKY_TOGGLE;
 300:quantum/quantum.c ****     }
 301:quantum/quantum.c ****     return false;
 302:quantum/quantum.c ****   case FC_ON:
 303:quantum/quantum.c ****     if (record->event.pressed) {
 304:quantum/quantum.c ****       FAUXCLICKY_ON;
 305:quantum/quantum.c ****     }
 306:quantum/quantum.c ****     return false;
 307:quantum/quantum.c ****   case FC_OFF:
 308:quantum/quantum.c ****     if (record->event.pressed) {
 309:quantum/quantum.c ****       FAUXCLICKY_OFF;
 310:quantum/quantum.c ****     }
 311:quantum/quantum.c ****     return false;
 312:quantum/quantum.c ****   #endif
 313:quantum/quantum.c ****   #if defined(RGBLIGHT_ENABLE) || defined(RGB_MATRIX_ENABLE)
 314:quantum/quantum.c ****   case RGB_TOG:
 315:quantum/quantum.c ****     if (record->event.pressed) {
 316:quantum/quantum.c ****       rgblight_toggle();
 317:quantum/quantum.c ****     }
 318:quantum/quantum.c ****     return false;
 319:quantum/quantum.c ****   case RGB_MODE_FORWARD:
 320:quantum/quantum.c ****     if (record->event.pressed) {
 321:quantum/quantum.c ****       uint8_t shifted = get_mods() & (MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT));
 322:quantum/quantum.c ****       if(shifted) {
 323:quantum/quantum.c ****         rgblight_step_reverse();
 324:quantum/quantum.c ****       }
 325:quantum/quantum.c ****       else {
 326:quantum/quantum.c ****         rgblight_step();
 327:quantum/quantum.c ****       }
 328:quantum/quantum.c ****     }
 329:quantum/quantum.c ****     return false;
 330:quantum/quantum.c ****   case RGB_MODE_REVERSE:
 331:quantum/quantum.c ****     if (record->event.pressed) {
 332:quantum/quantum.c ****       uint8_t shifted = get_mods() & (MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT));
 333:quantum/quantum.c ****       if(shifted) {
 334:quantum/quantum.c ****         rgblight_step();
 335:quantum/quantum.c ****       }
 336:quantum/quantum.c ****       else {
 337:quantum/quantum.c ****         rgblight_step_reverse();
 338:quantum/quantum.c ****       }
 339:quantum/quantum.c ****     }
 340:quantum/quantum.c ****     return false;
 341:quantum/quantum.c ****   case RGB_HUI:
 342:quantum/quantum.c ****     if (record->event.pressed) {
 343:quantum/quantum.c ****       rgblight_increase_hue();
 344:quantum/quantum.c ****     }
 345:quantum/quantum.c ****     return false;
 346:quantum/quantum.c ****   case RGB_HUD:
 347:quantum/quantum.c ****     if (record->event.pressed) {
 348:quantum/quantum.c ****       rgblight_decrease_hue();
 349:quantum/quantum.c ****     }
 350:quantum/quantum.c ****     return false;
 351:quantum/quantum.c ****   case RGB_SAI:
 352:quantum/quantum.c ****     if (record->event.pressed) {
 353:quantum/quantum.c ****       rgblight_increase_sat();
 354:quantum/quantum.c ****     }
 355:quantum/quantum.c ****     return false;
 356:quantum/quantum.c ****   case RGB_SAD:
 357:quantum/quantum.c ****     if (record->event.pressed) {
 358:quantum/quantum.c ****       rgblight_decrease_sat();
 359:quantum/quantum.c ****     }
 360:quantum/quantum.c ****     return false;
 361:quantum/quantum.c ****   case RGB_VAI:
 362:quantum/quantum.c ****     if (record->event.pressed) {
 363:quantum/quantum.c ****       rgblight_increase_val();
 364:quantum/quantum.c ****     }
 365:quantum/quantum.c ****     return false;
 366:quantum/quantum.c ****   case RGB_VAD:
 367:quantum/quantum.c ****     if (record->event.pressed) {
 368:quantum/quantum.c ****       rgblight_decrease_val();
 369:quantum/quantum.c ****     }
 370:quantum/quantum.c ****     return false;
 371:quantum/quantum.c ****   case RGB_SPI:
 372:quantum/quantum.c ****     if (record->event.pressed) {
 373:quantum/quantum.c ****       rgblight_increase_speed();
 374:quantum/quantum.c ****     }
 375:quantum/quantum.c ****     return false;
 376:quantum/quantum.c ****   case RGB_SPD:
 377:quantum/quantum.c ****     if (record->event.pressed) {
 378:quantum/quantum.c ****       rgblight_decrease_speed();
 379:quantum/quantum.c ****     }
 380:quantum/quantum.c ****     return false;
 381:quantum/quantum.c ****   case RGB_MODE_PLAIN:
 382:quantum/quantum.c ****     if (record->event.pressed) {
 383:quantum/quantum.c ****       rgblight_mode(1);
 384:quantum/quantum.c ****     }
 385:quantum/quantum.c ****     return false;
 386:quantum/quantum.c ****   case RGB_MODE_BREATHE:
 387:quantum/quantum.c ****     if (record->event.pressed) {
 388:quantum/quantum.c ****       if ((2 <= rgblight_get_mode()) && (rgblight_get_mode() < 5)) {
 389:quantum/quantum.c ****         rgblight_step();
 390:quantum/quantum.c ****       } else {
 391:quantum/quantum.c ****         rgblight_mode(2);
 392:quantum/quantum.c ****       }
 393:quantum/quantum.c ****     }
 394:quantum/quantum.c ****     return false;
 395:quantum/quantum.c ****   case RGB_MODE_RAINBOW:
 396:quantum/quantum.c ****     if (record->event.pressed) {
 397:quantum/quantum.c ****       if ((6 <= rgblight_get_mode()) && (rgblight_get_mode() < 8)) {
 398:quantum/quantum.c ****         rgblight_step();
 399:quantum/quantum.c ****       } else {
 400:quantum/quantum.c ****         rgblight_mode(6);
 401:quantum/quantum.c ****       }
 402:quantum/quantum.c ****     }
 403:quantum/quantum.c ****     return false;
 404:quantum/quantum.c ****   case RGB_MODE_SWIRL:
 405:quantum/quantum.c ****     if (record->event.pressed) {
 406:quantum/quantum.c ****       if ((9 <= rgblight_get_mode()) && (rgblight_get_mode() < 14)) {
 407:quantum/quantum.c ****         rgblight_step();
 408:quantum/quantum.c ****       } else {
 409:quantum/quantum.c ****         rgblight_mode(9);
 410:quantum/quantum.c ****       }
 411:quantum/quantum.c ****     }
 412:quantum/quantum.c ****     return false;
 413:quantum/quantum.c ****   case RGB_MODE_SNAKE:
 414:quantum/quantum.c ****     if (record->event.pressed) {
 415:quantum/quantum.c ****       if ((15 <= rgblight_get_mode()) && (rgblight_get_mode() < 20)) {
 416:quantum/quantum.c ****         rgblight_step();
 417:quantum/quantum.c ****       } else {
 418:quantum/quantum.c ****         rgblight_mode(15);
 419:quantum/quantum.c ****       }
 420:quantum/quantum.c ****     }
 421:quantum/quantum.c ****     return false;
 422:quantum/quantum.c ****   case RGB_MODE_KNIGHT:
 423:quantum/quantum.c ****     if (record->event.pressed) {
 424:quantum/quantum.c ****       if ((21 <= rgblight_get_mode()) && (rgblight_get_mode() < 23)) {
 425:quantum/quantum.c ****         rgblight_step();
 426:quantum/quantum.c ****       } else {
 427:quantum/quantum.c ****         rgblight_mode(21);
 428:quantum/quantum.c ****       }
 429:quantum/quantum.c ****     }
 430:quantum/quantum.c ****     return false;
 431:quantum/quantum.c ****   case RGB_MODE_XMAS:
 432:quantum/quantum.c ****     if (record->event.pressed) {
 433:quantum/quantum.c ****       rgblight_mode(24);
 434:quantum/quantum.c ****     }
 435:quantum/quantum.c ****     return false;
 436:quantum/quantum.c ****   case RGB_MODE_GRADIENT:
 437:quantum/quantum.c ****     if (record->event.pressed) {
 438:quantum/quantum.c ****       if ((25 <= rgblight_get_mode()) && (rgblight_get_mode() < 34)) {
 439:quantum/quantum.c ****         rgblight_step();
 440:quantum/quantum.c ****       } else {
 441:quantum/quantum.c ****         rgblight_mode(25);
 442:quantum/quantum.c ****       }
 443:quantum/quantum.c ****     }
 444:quantum/quantum.c ****     return false;
 445:quantum/quantum.c ****   #endif
 446:quantum/quantum.c ****     #ifdef PROTOCOL_LUFA
 447:quantum/quantum.c ****     case OUT_AUTO:
 448:quantum/quantum.c ****       if (record->event.pressed) {
 449:quantum/quantum.c ****         set_output(OUTPUT_AUTO);
 450:quantum/quantum.c ****       }
 451:quantum/quantum.c ****       return false;
 452:quantum/quantum.c ****     case OUT_USB:
 453:quantum/quantum.c ****       if (record->event.pressed) {
 454:quantum/quantum.c ****         set_output(OUTPUT_USB);
 455:quantum/quantum.c ****       }
 456:quantum/quantum.c ****       return false;
 457:quantum/quantum.c ****     #ifdef BLUETOOTH_ENABLE
 458:quantum/quantum.c ****     case OUT_BT:
 459:quantum/quantum.c ****       if (record->event.pressed) {
 460:quantum/quantum.c ****         set_output(OUTPUT_BLUETOOTH);
 461:quantum/quantum.c ****       }
 462:quantum/quantum.c ****       return false;
 463:quantum/quantum.c ****     #endif
 464:quantum/quantum.c ****     #endif
 465:quantum/quantum.c ****     case MAGIC_SWAP_CONTROL_CAPSLOCK ... MAGIC_TOGGLE_NKRO:
 466:quantum/quantum.c ****       if (record->event.pressed) {
 467:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 468:quantum/quantum.c ****         if (!eeconfig_is_enabled()) {
 469:quantum/quantum.c ****             eeconfig_init();
 470:quantum/quantum.c ****         }
 471:quantum/quantum.c ****         /* keymap config */
 472:quantum/quantum.c ****         keymap_config.raw = eeconfig_read_keymap();
 473:quantum/quantum.c ****         switch (keycode)
 474:quantum/quantum.c ****         {
 475:quantum/quantum.c ****           case MAGIC_SWAP_CONTROL_CAPSLOCK:
 476:quantum/quantum.c ****             keymap_config.swap_control_capslock = true;
 477:quantum/quantum.c ****             break;
 478:quantum/quantum.c ****           case MAGIC_CAPSLOCK_TO_CONTROL:
 479:quantum/quantum.c ****             keymap_config.capslock_to_control = true;
 480:quantum/quantum.c ****             break;
 481:quantum/quantum.c ****           case MAGIC_SWAP_LALT_LGUI:
 482:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = true;
 483:quantum/quantum.c ****             break;
 484:quantum/quantum.c ****           case MAGIC_SWAP_RALT_RGUI:
 485:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 486:quantum/quantum.c ****             break;
 487:quantum/quantum.c ****           case MAGIC_NO_GUI:
 488:quantum/quantum.c ****             keymap_config.no_gui = true;
 489:quantum/quantum.c ****             break;
 490:quantum/quantum.c ****           case MAGIC_SWAP_GRAVE_ESC:
 491:quantum/quantum.c ****             keymap_config.swap_grave_esc = true;
 492:quantum/quantum.c ****             break;
 493:quantum/quantum.c ****           case MAGIC_SWAP_BACKSLASH_BACKSPACE:
 494:quantum/quantum.c ****             keymap_config.swap_backslash_backspace = true;
 495:quantum/quantum.c ****             break;
 496:quantum/quantum.c ****           case MAGIC_HOST_NKRO:
 497:quantum/quantum.c ****             keymap_config.nkro = true;
 498:quantum/quantum.c ****             break;
 499:quantum/quantum.c ****           case MAGIC_SWAP_ALT_GUI:
 500:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = true;
 501:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 502:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 503:quantum/quantum.c ****               PLAY_SONG(ag_swap_song);
 504:quantum/quantum.c ****             #endif
 505:quantum/quantum.c ****             break;
 506:quantum/quantum.c ****           case MAGIC_UNSWAP_CONTROL_CAPSLOCK:
 507:quantum/quantum.c ****             keymap_config.swap_control_capslock = false;
 508:quantum/quantum.c ****             break;
 509:quantum/quantum.c ****           case MAGIC_UNCAPSLOCK_TO_CONTROL:
 510:quantum/quantum.c ****             keymap_config.capslock_to_control = false;
 511:quantum/quantum.c ****             break;
 512:quantum/quantum.c ****           case MAGIC_UNSWAP_LALT_LGUI:
 513:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = false;
 514:quantum/quantum.c ****             break;
 515:quantum/quantum.c ****           case MAGIC_UNSWAP_RALT_RGUI:
 516:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 517:quantum/quantum.c ****             break;
 518:quantum/quantum.c ****           case MAGIC_UNNO_GUI:
 519:quantum/quantum.c ****             keymap_config.no_gui = false;
 520:quantum/quantum.c ****             break;
 521:quantum/quantum.c ****           case MAGIC_UNSWAP_GRAVE_ESC:
 522:quantum/quantum.c ****             keymap_config.swap_grave_esc = false;
 523:quantum/quantum.c ****             break;
 524:quantum/quantum.c ****           case MAGIC_UNSWAP_BACKSLASH_BACKSPACE:
 525:quantum/quantum.c ****             keymap_config.swap_backslash_backspace = false;
 526:quantum/quantum.c ****             break;
 527:quantum/quantum.c ****           case MAGIC_UNHOST_NKRO:
 528:quantum/quantum.c ****             keymap_config.nkro = false;
 529:quantum/quantum.c ****             break;
 530:quantum/quantum.c ****           case MAGIC_UNSWAP_ALT_GUI:
 531:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = false;
 532:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 533:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 534:quantum/quantum.c ****               PLAY_SONG(ag_norm_song);
 535:quantum/quantum.c ****             #endif
 536:quantum/quantum.c ****             break;
 537:quantum/quantum.c ****           case MAGIC_TOGGLE_NKRO:
 538:quantum/quantum.c ****             keymap_config.nkro = !keymap_config.nkro;
 539:quantum/quantum.c ****             break;
 540:quantum/quantum.c ****           default:
 541:quantum/quantum.c ****             break;
 542:quantum/quantum.c ****         }
 543:quantum/quantum.c ****         eeconfig_update_keymap(keymap_config.raw);
 544:quantum/quantum.c ****         clear_keyboard(); // clear to prevent stuck keys
 545:quantum/quantum.c **** 
 546:quantum/quantum.c ****         return false;
 547:quantum/quantum.c ****       }
 548:quantum/quantum.c ****       break;
 549:quantum/quantum.c ****     case KC_LSPO: {
 550:quantum/quantum.c ****       if (record->event.pressed) {
 551:quantum/quantum.c ****         shift_interrupted[0] = false;
 552:quantum/quantum.c ****         scs_timer[0] = timer_read ();
 553:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 554:quantum/quantum.c ****       }
 555:quantum/quantum.c ****       else {
 556:quantum/quantum.c ****         #ifdef DISABLE_SPACE_CADET_ROLLOVER
 557:quantum/quantum.c ****           if (get_mods() & MOD_BIT(KC_RSFT)) {
 558:quantum/quantum.c ****             shift_interrupted[0] = true;
 559:quantum/quantum.c ****             shift_interrupted[1] = true;
 560:quantum/quantum.c ****           }
 561:quantum/quantum.c ****         #endif
 562:quantum/quantum.c ****         if (!shift_interrupted[0] && timer_elapsed(scs_timer[0]) < TAPPING_TERM) {
 563:quantum/quantum.c ****           register_code(LSPO_KEY);
 564:quantum/quantum.c ****           unregister_code(LSPO_KEY);
 565:quantum/quantum.c ****         }
 566:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_LSFT));
 567:quantum/quantum.c ****       }
 568:quantum/quantum.c ****       return false;
 569:quantum/quantum.c ****     }
 570:quantum/quantum.c **** 
 571:quantum/quantum.c ****     case KC_RSPC: {
 572:quantum/quantum.c ****       if (record->event.pressed) {
 573:quantum/quantum.c ****         shift_interrupted[1] = false;
 574:quantum/quantum.c ****         scs_timer[1] = timer_read ();
 575:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 576:quantum/quantum.c ****       }
 577:quantum/quantum.c ****       else {
 578:quantum/quantum.c ****         #ifdef DISABLE_SPACE_CADET_ROLLOVER
 579:quantum/quantum.c ****           if (get_mods() & MOD_BIT(KC_LSFT)) {
 580:quantum/quantum.c ****             shift_interrupted[0] = true;
 581:quantum/quantum.c ****             shift_interrupted[1] = true;
 582:quantum/quantum.c ****           }
 583:quantum/quantum.c ****         #endif
 584:quantum/quantum.c ****         if (!shift_interrupted[1] && timer_elapsed(scs_timer[1]) < TAPPING_TERM) {
 585:quantum/quantum.c ****           register_code(RSPC_KEY);
 586:quantum/quantum.c ****           unregister_code(RSPC_KEY);
 587:quantum/quantum.c ****         }
 588:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 589:quantum/quantum.c ****       }
 590:quantum/quantum.c ****       return false;
 591:quantum/quantum.c ****     }
 592:quantum/quantum.c **** 
 593:quantum/quantum.c ****     case KC_SFTENT: {
 594:quantum/quantum.c ****       if (record->event.pressed) {
 595:quantum/quantum.c ****         shift_interrupted[1] = false;
 596:quantum/quantum.c ****         scs_timer[1] = timer_read ();
 597:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 598:quantum/quantum.c ****       }
 599:quantum/quantum.c ****       else if (!shift_interrupted[1] && timer_elapsed(scs_timer[1]) < TAPPING_TERM) {
 600:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 601:quantum/quantum.c ****         register_code(SFTENT_KEY);
 602:quantum/quantum.c ****         unregister_code(SFTENT_KEY);
 603:quantum/quantum.c ****       }
 604:quantum/quantum.c ****       else {
 605:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 606:quantum/quantum.c ****       }
 607:quantum/quantum.c ****       return false;
 608:quantum/quantum.c ****     }
 609:quantum/quantum.c **** 
 610:quantum/quantum.c ****     case GRAVE_ESC: {
 611:quantum/quantum.c ****       uint8_t shifted = get_mods() & ((MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT)
 612:quantum/quantum.c ****                                       |MOD_BIT(KC_LGUI)|MOD_BIT(KC_RGUI)));
 613:quantum/quantum.c **** 
 614:quantum/quantum.c **** #ifdef GRAVE_ESC_ALT_OVERRIDE
 615:quantum/quantum.c ****       // if ALT is pressed, ESC is always sent
 616:quantum/quantum.c ****       // this is handy for the cmd+opt+esc shortcut on macOS, among other things.
 617:quantum/quantum.c ****       if (get_mods() & (MOD_BIT(KC_LALT) | MOD_BIT(KC_RALT))) {
 618:quantum/quantum.c ****         shifted = 0;
 619:quantum/quantum.c ****       }
 620:quantum/quantum.c **** #endif
 621:quantum/quantum.c **** 
 622:quantum/quantum.c **** #ifdef GRAVE_ESC_CTRL_OVERRIDE
 623:quantum/quantum.c ****       // if CTRL is pressed, ESC is always sent
 624:quantum/quantum.c ****       // this is handy for the ctrl+shift+esc shortcut on windows, among other things.
 625:quantum/quantum.c ****       if (get_mods() & (MOD_BIT(KC_LCTL) | MOD_BIT(KC_RCTL))) {
 626:quantum/quantum.c ****         shifted = 0;
 627:quantum/quantum.c ****       }
 628:quantum/quantum.c **** #endif
 629:quantum/quantum.c **** 
 630:quantum/quantum.c **** #ifdef GRAVE_ESC_GUI_OVERRIDE
 631:quantum/quantum.c ****       // if GUI is pressed, ESC is always sent
 632:quantum/quantum.c ****       if (get_mods() & (MOD_BIT(KC_LGUI) | MOD_BIT(KC_RGUI))) {
 633:quantum/quantum.c ****         shifted = 0;
 634:quantum/quantum.c ****       }
 635:quantum/quantum.c **** #endif
 636:quantum/quantum.c **** 
 637:quantum/quantum.c **** #ifdef GRAVE_ESC_SHIFT_OVERRIDE
 638:quantum/quantum.c ****       // if SHIFT is pressed, ESC is always sent
 639:quantum/quantum.c ****       if (get_mods() & (MOD_BIT(KC_LSHIFT) | MOD_BIT(KC_RSHIFT))) {
 640:quantum/quantum.c ****         shifted = 0;
 641:quantum/quantum.c ****       }
 642:quantum/quantum.c **** #endif
 643:quantum/quantum.c **** 
 644:quantum/quantum.c ****       if (record->event.pressed) {
 645:quantum/quantum.c ****         grave_esc_was_shifted = shifted;
 646:quantum/quantum.c ****         add_key(shifted ? KC_GRAVE : KC_ESCAPE);
 647:quantum/quantum.c ****       }
 648:quantum/quantum.c ****       else {
 649:quantum/quantum.c ****         del_key(grave_esc_was_shifted ? KC_GRAVE : KC_ESCAPE);
 650:quantum/quantum.c ****       }
 651:quantum/quantum.c **** 
 652:quantum/quantum.c ****       send_keyboard_report();
 653:quantum/quantum.c ****       return false;
 654:quantum/quantum.c ****     }
 655:quantum/quantum.c **** 
 656:quantum/quantum.c **** #if defined(BACKLIGHT_ENABLE) && defined(BACKLIGHT_BREATHING)
 657:quantum/quantum.c ****     case BL_BRTG: {
 658:quantum/quantum.c ****       if (record->event.pressed)
 659:quantum/quantum.c ****         breathing_toggle();
 660:quantum/quantum.c ****       return false;
 661:quantum/quantum.c ****     }
 662:quantum/quantum.c **** #endif
 663:quantum/quantum.c **** 
 664:quantum/quantum.c ****     default: {
 665:quantum/quantum.c ****       shift_interrupted[0] = true;
 686               		.loc 1 665 0
 687 006e 81E0      		ldi r24,lo8(1)
 688 0070 8093 0000 		sts shift_interrupted,r24
 666:quantum/quantum.c ****       shift_interrupted[1] = true;
 689               		.loc 1 666 0
 690 0074 8093 0000 		sts shift_interrupted+1,r24
 691               	.L66:
 667:quantum/quantum.c ****       break;
 668:quantum/quantum.c ****     }
 669:quantum/quantum.c ****   }
 670:quantum/quantum.c **** 
 671:quantum/quantum.c ****   return process_action_kb(record);
 692               		.loc 1 671 0
 693 0078 C801      		movw r24,r16
 694               	/* epilogue start */
 672:quantum/quantum.c **** }
 695               		.loc 1 672 0
 696 007a DF91      		pop r29
 697 007c CF91      		pop r28
 698               	.LVL51:
 699 007e 1F91      		pop r17
 700 0080 0F91      		pop r16
 701               	.LVL52:
 671:quantum/quantum.c **** }
 702               		.loc 1 671 0
 703 0082 0C94 0000 		jmp process_action_kb
 704               	.LVL53:
 705               	.L56:
 284:quantum/quantum.c ****     case RESET:
 706               		.loc 1 284 0
 707 0086 C53D      		cpi r28,-43
 708 0088 ECE5      		ldi r30,92
 709 008a DE07      		cpc r29,r30
 710 008c 01F4      		brne .+2
 711 008e 00C0      		rjmp .L60
 712 0090 00F4      		brsh .L61
 713 0092 C33D      		cpi r28,-45
 714 0094 8CE5      		ldi r24,92
 715 0096 D807      		cpc r29,r24
 716 0098 01F4      		brne .+2
 717 009a 00C0      		rjmp .L62
 718 009c C43D      		cpi r28,-44
 719 009e DC45      		sbci r29,92
 720 00a0 01F4      		brne .L54
 572:quantum/quantum.c ****         shift_interrupted[1] = false;
 721               		.loc 1 572 0
 722 00a2 F801      		movw r30,r16
 723 00a4 8281      		ldd r24,Z+2
 724 00a6 8823      		tst r24
 725 00a8 01F4      		brne .+2
 726 00aa 00C0      		rjmp .L93
 727               	.L97:
 573:quantum/quantum.c ****         scs_timer[1] = timer_read ();
 728               		.loc 1 573 0
 729 00ac 1092 0000 		sts shift_interrupted+1,__zero_reg__
 574:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 730               		.loc 1 574 0
 731 00b0 0E94 0000 		call timer_read
 732               	.LVL54:
 733 00b4 9093 0000 		sts scs_timer+2+1,r25
 734 00b8 8093 0000 		sts scs_timer+2,r24
 575:quantum/quantum.c ****       }
 735               		.loc 1 575 0
 736 00bc 80E2      		ldi r24,lo8(32)
 737 00be 00C0      		rjmp .L128
 738               	.L61:
 284:quantum/quantum.c ****     case RESET:
 739               		.loc 1 284 0
 740 00c0 C83D      		cpi r28,-40
 741 00c2 FCE5      		ldi r31,92
 742 00c4 DF07      		cpc r29,r31
 743 00c6 01F0      		breq .L64
 744 00c8 C93D      		cpi r28,-39
 745 00ca DC45      		sbci r29,92
 746 00cc 01F4      		brne .L54
 453:quantum/quantum.c ****         set_output(OUTPUT_USB);
 747               		.loc 1 453 0
 748 00ce F801      		movw r30,r16
 749 00d0 8281      		ldd r24,Z+2
 750 00d2 8823      		tst r24
 751 00d4 01F0      		breq .L50
 454:quantum/quantum.c ****       }
 752               		.loc 1 454 0
 753 00d6 82E0      		ldi r24,lo8(2)
 754 00d8 00C0      		rjmp .L127
 755               	.L59:
 286:quantum/quantum.c ****         reset_keyboard();
 756               		.loc 1 286 0
 757 00da F801      		movw r30,r16
 758 00dc 8281      		ldd r24,Z+2
 759 00de 8111      		cpse r24,__zero_reg__
 287:quantum/quantum.c ****       }
 760               		.loc 1 287 0
 761 00e0 0E94 0000 		call reset_keyboard
 762               	.LVL55:
 763               	.L50:
 764               		.loc 1 672 0
 765 00e4 80E0      		ldi r24,0
 766               	/* epilogue start */
 767 00e6 DF91      		pop r29
 768 00e8 CF91      		pop r28
 769               	.LVL56:
 770 00ea 1F91      		pop r17
 771 00ec 0F91      		pop r16
 772               	.LVL57:
 773 00ee 0895      		ret
 774               	.LVL58:
 775               	.L57:
 291:quantum/quantum.c ****           debug_enable = true;
 776               		.loc 1 291 0
 777 00f0 F801      		movw r30,r16
 778 00f2 8281      		ldd r24,Z+2
 779 00f4 8823      		tst r24
 780 00f6 01F0      		breq .L50
 292:quantum/quantum.c ****           print("DEBUG: enabled.\n");
 781               		.loc 1 292 0
 782 00f8 8091 0000 		lds r24,debug_config
 783 00fc 8160      		ori r24,lo8(1<<0)
 784 00fe 8093 0000 		sts debug_config,r24
 785 0102 00C0      		rjmp .L50
 786               	.L64:
 448:quantum/quantum.c ****         set_output(OUTPUT_AUTO);
 787               		.loc 1 448 0
 788 0104 F801      		movw r30,r16
 789 0106 8281      		ldd r24,Z+2
 790 0108 8823      		tst r24
 791 010a 01F0      		breq .L50
 449:quantum/quantum.c ****       }
 792               		.loc 1 449 0
 793 010c 80E0      		ldi r24,0
 794               	.L127:
 454:quantum/quantum.c ****       }
 795               		.loc 1 454 0
 796 010e 0E94 0000 		call set_output
 797               	.LVL59:
 798 0112 00C0      		rjmp .L50
 799               	.L58:
 466:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 800               		.loc 1 466 0
 801 0114 F801      		movw r30,r16
 802 0116 8281      		ldd r24,Z+2
 803 0118 8823      		tst r24
 804 011a 01F4      		brne .+2
 805 011c 00C0      		rjmp .L66
 468:quantum/quantum.c ****             eeconfig_init();
 806               		.loc 1 468 0
 807 011e 0E94 0000 		call eeconfig_is_enabled
 808               	.LVL60:
 809 0122 8111      		cpse r24,__zero_reg__
 810 0124 00C0      		rjmp .L67
 469:quantum/quantum.c ****         }
 811               		.loc 1 469 0
 812 0126 0E94 0000 		call eeconfig_init
 813               	.LVL61:
 814               	.L67:
 472:quantum/quantum.c ****         switch (keycode)
 815               		.loc 1 472 0
 816 012a 0E94 0000 		call eeconfig_read_keymap
 817               	.LVL62:
 818 012e 90E0      		ldi r25,0
 819 0130 9093 0000 		sts keymap_config+1,r25
 820 0134 8093 0000 		sts keymap_config,r24
 473:quantum/quantum.c ****         {
 821               		.loc 1 473 0
 822 0138 FE01      		movw r30,r28
 823 013a E350      		subi r30,3
 824 013c FC45      		sbci r31,92
 476:quantum/quantum.c ****             break;
 825               		.loc 1 476 0
 826 013e 8091 0000 		lds r24,keymap_config
 827 0142 8160      		ori r24,lo8(1<<0)
 473:quantum/quantum.c ****         {
 828               		.loc 1 473 0
 829 0144 E231      		cpi r30,18
 830 0146 F105      		cpc r31,__zero_reg__
 831 0148 00F4      		brsh .L126
 832 014a E050      		subi r30,lo8(-(gs(.L70)))
 833 014c F040      		sbci r31,hi8(-(gs(.L70)))
 834 014e 0C94 0000 		jmp __tablejump2__
 835               		.p2align	1
 836               	.L70:
 837 0152 0000      		.word gs(.L69)
 838 0154 0000      		.word gs(.L71)
 839 0156 0000      		.word gs(.L72)
 840 0158 0000      		.word gs(.L73)
 841 015a 0000      		.word gs(.L74)
 842 015c 0000      		.word gs(.L75)
 843 015e 0000      		.word gs(.L76)
 844 0160 0000      		.word gs(.L77)
 845 0162 0000      		.word gs(.L78)
 846 0164 0000      		.word gs(.L79)
 847 0166 0000      		.word gs(.L80)
 848 0168 0000      		.word gs(.L81)
 849 016a 0000      		.word gs(.L82)
 850 016c 0000      		.word gs(.L83)
 851 016e 0000      		.word gs(.L84)
 852 0170 0000      		.word gs(.L85)
 853 0172 0000      		.word gs(.L86)
 854 0174 0000      		.word gs(.L87)
 855               	.L69:
 479:quantum/quantum.c ****             break;
 856               		.loc 1 479 0
 857 0176 8091 0000 		lds r24,keymap_config
 858 017a 8260      		ori r24,lo8(1<<1)
 859               	.L126:
 538:quantum/quantum.c ****             break;
 860               		.loc 1 538 0
 861 017c 8093 0000 		sts keymap_config,r24
 543:quantum/quantum.c ****         clear_keyboard(); // clear to prevent stuck keys
 862               		.loc 1 543 0
 863 0180 8091 0000 		lds r24,keymap_config
 864 0184 0E94 0000 		call eeconfig_update_keymap
 865               	.LVL63:
 544:quantum/quantum.c **** 
 866               		.loc 1 544 0
 867 0188 0E94 0000 		call clear_keyboard
 868               	.LVL64:
 546:quantum/quantum.c ****       }
 869               		.loc 1 546 0
 870 018c 00C0      		rjmp .L50
 871               	.L71:
 482:quantum/quantum.c ****             break;
 872               		.loc 1 482 0
 873 018e 8091 0000 		lds r24,keymap_config
 874 0192 8460      		ori r24,lo8(1<<2)
 875 0194 00C0      		rjmp .L126
 876               	.L72:
 485:quantum/quantum.c ****             break;
 877               		.loc 1 485 0
 878 0196 8091 0000 		lds r24,keymap_config
 879               	.L131:
 501:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 880               		.loc 1 501 0
 881 019a 8860      		ori r24,lo8(1<<3)
 882 019c 00C0      		rjmp .L126
 883               	.L73:
 488:quantum/quantum.c ****             break;
 884               		.loc 1 488 0
 885 019e 8091 0000 		lds r24,keymap_config
 886 01a2 8061      		ori r24,lo8(1<<4)
 887 01a4 00C0      		rjmp .L126
 888               	.L74:
 491:quantum/quantum.c ****             break;
 889               		.loc 1 491 0
 890 01a6 8091 0000 		lds r24,keymap_config
 891 01aa 8062      		ori r24,lo8(1<<5)
 892 01ac 00C0      		rjmp .L126
 893               	.L75:
 494:quantum/quantum.c ****             break;
 894               		.loc 1 494 0
 895 01ae 8091 0000 		lds r24,keymap_config
 896 01b2 8064      		ori r24,lo8(1<<6)
 897 01b4 00C0      		rjmp .L126
 898               	.L76:
 497:quantum/quantum.c ****             break;
 899               		.loc 1 497 0
 900 01b6 8091 0000 		lds r24,keymap_config
 901 01ba 8068      		ori r24,lo8(1<<7)
 902 01bc 00C0      		rjmp .L126
 903               	.L77:
 500:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 904               		.loc 1 500 0
 905 01be 8091 0000 		lds r24,keymap_config
 501:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 906               		.loc 1 501 0
 907 01c2 8460      		ori r24,lo8(4)
 908 01c4 00C0      		rjmp .L131
 909               	.L78:
 507:quantum/quantum.c ****             break;
 910               		.loc 1 507 0
 911 01c6 8091 0000 		lds r24,keymap_config
 912 01ca 8E7F      		andi r24,lo8(~(1<<0))
 913 01cc 00C0      		rjmp .L126
 914               	.L79:
 510:quantum/quantum.c ****             break;
 915               		.loc 1 510 0
 916 01ce 8091 0000 		lds r24,keymap_config
 917 01d2 8D7F      		andi r24,lo8(~(1<<1))
 918 01d4 00C0      		rjmp .L126
 919               	.L80:
 513:quantum/quantum.c ****             break;
 920               		.loc 1 513 0
 921 01d6 8091 0000 		lds r24,keymap_config
 922 01da 8B7F      		andi r24,lo8(~(1<<2))
 923 01dc 00C0      		rjmp .L126
 924               	.L81:
 516:quantum/quantum.c ****             break;
 925               		.loc 1 516 0
 926 01de 8091 0000 		lds r24,keymap_config
 927               	.L130:
 532:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 928               		.loc 1 532 0
 929 01e2 877F      		andi r24,lo8(~(1<<3))
 930 01e4 00C0      		rjmp .L126
 931               	.L82:
 519:quantum/quantum.c ****             break;
 932               		.loc 1 519 0
 933 01e6 8091 0000 		lds r24,keymap_config
 934 01ea 8F7E      		andi r24,lo8(~(1<<4))
 935 01ec 00C0      		rjmp .L126
 936               	.L83:
 522:quantum/quantum.c ****             break;
 937               		.loc 1 522 0
 938 01ee 8091 0000 		lds r24,keymap_config
 939 01f2 8F7D      		andi r24,lo8(~(1<<5))
 940 01f4 00C0      		rjmp .L126
 941               	.L84:
 525:quantum/quantum.c ****             break;
 942               		.loc 1 525 0
 943 01f6 8091 0000 		lds r24,keymap_config
 944 01fa 8F7B      		andi r24,lo8(~(1<<6))
 945 01fc 00C0      		rjmp .L126
 946               	.L85:
 528:quantum/quantum.c ****             break;
 947               		.loc 1 528 0
 948 01fe 8091 0000 		lds r24,keymap_config
 949 0202 8F77      		andi r24,lo8(~(1<<7))
 950 0204 00C0      		rjmp .L126
 951               	.L86:
 531:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 952               		.loc 1 531 0
 953 0206 8091 0000 		lds r24,keymap_config
 532:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 954               		.loc 1 532 0
 955 020a 8B7F      		andi r24,lo8(-5)
 956 020c 00C0      		rjmp .L130
 957               	.L87:
 538:quantum/quantum.c ****             break;
 958               		.loc 1 538 0
 959 020e 9091 0000 		lds r25,keymap_config
 960 0212 892F      		mov r24,r25
 961 0214 97FB      		bst r25,7
 962 0216 87F9      		bld r24,7
 963 0218 8058      		subi r24,0x80
 964 021a 00C0      		rjmp .L126
 965               	.L62:
 550:quantum/quantum.c ****         shift_interrupted[0] = false;
 966               		.loc 1 550 0
 967 021c F801      		movw r30,r16
 968 021e 8281      		ldd r24,Z+2
 969 0220 8823      		tst r24
 970 0222 01F0      		breq .L89
 551:quantum/quantum.c ****         scs_timer[0] = timer_read ();
 971               		.loc 1 551 0
 972 0224 1092 0000 		sts shift_interrupted,__zero_reg__
 552:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 973               		.loc 1 552 0
 974 0228 0E94 0000 		call timer_read
 975               	.LVL65:
 976 022c 9093 0000 		sts scs_timer+1,r25
 977 0230 8093 0000 		sts scs_timer,r24
 553:quantum/quantum.c ****       }
 978               		.loc 1 553 0
 979 0234 82E0      		ldi r24,lo8(2)
 980               	.L128:
 575:quantum/quantum.c ****       }
 981               		.loc 1 575 0
 982 0236 0E94 0000 		call register_mods
 983               	.LVL66:
 984 023a 00C0      		rjmp .L50
 985               	.L89:
 562:quantum/quantum.c ****           register_code(LSPO_KEY);
 986               		.loc 1 562 0
 987 023c 8091 0000 		lds r24,shift_interrupted
 988 0240 8111      		cpse r24,__zero_reg__
 989 0242 00C0      		rjmp .L91
 562:quantum/quantum.c ****           register_code(LSPO_KEY);
 990               		.loc 1 562 0 is_stmt 0 discriminator 1
 991 0244 8091 0000 		lds r24,scs_timer
 992 0248 9091 0000 		lds r25,scs_timer+1
 993 024c 0E94 0000 		call timer_elapsed
 994               	.LVL67:
 995 0250 8639      		cpi r24,-106
 996 0252 9105      		cpc r25,__zero_reg__
 997 0254 00F4      		brsh .L91
 563:quantum/quantum.c ****           unregister_code(LSPO_KEY);
 998               		.loc 1 563 0 is_stmt 1
 999 0256 86E2      		ldi r24,lo8(38)
 1000 0258 0E94 0000 		call register_code
 1001               	.LVL68:
 564:quantum/quantum.c ****         }
 1002               		.loc 1 564 0
 1003 025c 86E2      		ldi r24,lo8(38)
 1004 025e 0E94 0000 		call unregister_code
 1005               	.LVL69:
 1006               	.L91:
 566:quantum/quantum.c ****       }
 1007               		.loc 1 566 0
 1008 0262 82E0      		ldi r24,lo8(2)
 1009               	.L129:
 588:quantum/quantum.c ****       }
 1010               		.loc 1 588 0
 1011 0264 0E94 0000 		call unregister_mods
 1012               	.LVL70:
 1013 0268 00C0      		rjmp .L50
 1014               	.L93:
 584:quantum/quantum.c ****           register_code(RSPC_KEY);
 1015               		.loc 1 584 0
 1016 026a 8091 0000 		lds r24,shift_interrupted+1
 1017 026e 8111      		cpse r24,__zero_reg__
 1018 0270 00C0      		rjmp .L95
 584:quantum/quantum.c ****           register_code(RSPC_KEY);
 1019               		.loc 1 584 0 is_stmt 0 discriminator 1
 1020 0272 8091 0000 		lds r24,scs_timer+2
 1021 0276 9091 0000 		lds r25,scs_timer+2+1
 1022 027a 0E94 0000 		call timer_elapsed
 1023               	.LVL71:
 1024 027e 8639      		cpi r24,-106
 1025 0280 9105      		cpc r25,__zero_reg__
 1026 0282 00F4      		brsh .L95
 585:quantum/quantum.c ****           unregister_code(RSPC_KEY);
 1027               		.loc 1 585 0 is_stmt 1
 1028 0284 87E2      		ldi r24,lo8(39)
 1029 0286 0E94 0000 		call register_code
 1030               	.LVL72:
 586:quantum/quantum.c ****         }
 1031               		.loc 1 586 0
 1032 028a 87E2      		ldi r24,lo8(39)
 1033 028c 0E94 0000 		call unregister_code
 1034               	.LVL73:
 1035               	.L95:
 588:quantum/quantum.c ****       }
 1036               		.loc 1 588 0
 1037 0290 80E2      		ldi r24,lo8(32)
 1038 0292 00C0      		rjmp .L129
 1039               	.L60:
 594:quantum/quantum.c ****         shift_interrupted[1] = false;
 1040               		.loc 1 594 0
 1041 0294 F801      		movw r30,r16
 1042 0296 8281      		ldd r24,Z+2
 1043 0298 8111      		cpse r24,__zero_reg__
 1044 029a 00C0      		rjmp .L97
 599:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 1045               		.loc 1 599 0
 1046 029c 8091 0000 		lds r24,shift_interrupted+1
 1047 02a0 8111      		cpse r24,__zero_reg__
 1048 02a2 00C0      		rjmp .L95
 599:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 1049               		.loc 1 599 0 is_stmt 0 discriminator 1
 1050 02a4 8091 0000 		lds r24,scs_timer+2
 1051 02a8 9091 0000 		lds r25,scs_timer+2+1
 1052 02ac 0E94 0000 		call timer_elapsed
 1053               	.LVL74:
 1054 02b0 8639      		cpi r24,-106
 1055 02b2 9105      		cpc r25,__zero_reg__
 1056 02b4 00F4      		brsh .L95
 600:quantum/quantum.c ****         register_code(SFTENT_KEY);
 1057               		.loc 1 600 0 is_stmt 1
 1058 02b6 80E2      		ldi r24,lo8(32)
 1059 02b8 0E94 0000 		call unregister_mods
 1060               	.LVL75:
 601:quantum/quantum.c ****         unregister_code(SFTENT_KEY);
 1061               		.loc 1 601 0
 1062 02bc 88E2      		ldi r24,lo8(40)
 1063 02be 0E94 0000 		call register_code
 1064               	.LVL76:
 602:quantum/quantum.c ****       }
 1065               		.loc 1 602 0
 1066 02c2 88E2      		ldi r24,lo8(40)
 1067 02c4 0E94 0000 		call unregister_code
 1068               	.LVL77:
 1069 02c8 00C0      		rjmp .L50
 1070               	.L55:
 1071               	.LBB24:
 611:quantum/quantum.c ****                                       |MOD_BIT(KC_LGUI)|MOD_BIT(KC_RGUI)));
 1072               		.loc 1 611 0
 1073 02ca 0E94 0000 		call get_mods
 1074               	.LVL78:
 644:quantum/quantum.c ****         grave_esc_was_shifted = shifted;
 1075               		.loc 1 644 0
 1076 02ce F801      		movw r30,r16
 1077 02d0 9281      		ldd r25,Z+2
 1078 02d2 9923      		tst r25
 1079 02d4 01F0      		breq .L98
 611:quantum/quantum.c ****                                       |MOD_BIT(KC_LGUI)|MOD_BIT(KC_RGUI)));
 1080               		.loc 1 611 0
 1081 02d6 8A7A      		andi r24,lo8(-86)
 1082               	.LVL79:
 645:quantum/quantum.c ****         add_key(shifted ? KC_GRAVE : KC_ESCAPE);
 1083               		.loc 1 645 0
 1084 02d8 91E0      		ldi r25,lo8(1)
 1085 02da 01F4      		brne .L99
 1086 02dc 90E0      		ldi r25,0
 1087               	.L99:
 1088 02de 9093 0000 		sts grave_esc_was_shifted,r25
 646:quantum/quantum.c ****       }
 1089               		.loc 1 646 0
 1090 02e2 8111      		cpse r24,__zero_reg__
 1091 02e4 00C0      		rjmp .L103
 1092 02e6 89E2      		ldi r24,lo8(41)
 1093               	.LVL80:
 1094               	.L100:
 646:quantum/quantum.c ****       }
 1095               		.loc 1 646 0 is_stmt 0 discriminator 4
 1096 02e8 0E94 0000 		call add_key
 1097               	.LVL81:
 1098               	.L101:
 652:quantum/quantum.c ****       return false;
 1099               		.loc 1 652 0 is_stmt 1
 1100 02ec 0E94 0000 		call send_keyboard_report
 1101               	.LVL82:
 653:quantum/quantum.c ****     }
 1102               		.loc 1 653 0
 1103 02f0 00C0      		rjmp .L50
 1104               	.LVL83:
 1105               	.L103:
 646:quantum/quantum.c ****       }
 1106               		.loc 1 646 0
 1107 02f2 85E3      		ldi r24,lo8(53)
 1108               	.LVL84:
 1109 02f4 00C0      		rjmp .L100
 1110               	.LVL85:
 1111               	.L98:
 649:quantum/quantum.c ****       }
 1112               		.loc 1 649 0
 1113 02f6 8091 0000 		lds r24,grave_esc_was_shifted
 1114               	.LVL86:
 1115 02fa 8111      		cpse r24,__zero_reg__
 1116 02fc 00C0      		rjmp .L104
 1117 02fe 89E2      		ldi r24,lo8(41)
 1118               	.L102:
 649:quantum/quantum.c ****       }
 1119               		.loc 1 649 0 is_stmt 0 discriminator 4
 1120 0300 0E94 0000 		call del_key
 1121               	.LVL87:
 1122 0304 00C0      		rjmp .L101
 1123               	.L104:
 649:quantum/quantum.c ****       }
 1124               		.loc 1 649 0
 1125 0306 85E3      		ldi r24,lo8(53)
 1126 0308 00C0      		rjmp .L102
 1127               	.LBE24:
 1128               		.cfi_endproc
 1129               	.LFE39:
 1131               		.section	.text.send_char,"ax",@progbits
 1132               	.global	send_char
 1134               	send_char:
 1135               	.LFB44:
 673:quantum/quantum.c **** 
 674:quantum/quantum.c **** __attribute__ ((weak))
 675:quantum/quantum.c **** const bool ascii_to_shift_lut[0x80] PROGMEM = {
 676:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 677:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 678:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 679:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 680:quantum/quantum.c ****     0, 1, 1, 1, 1, 1, 1, 0,
 681:quantum/quantum.c ****     1, 1, 1, 1, 0, 0, 0, 0,
 682:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 683:quantum/quantum.c ****     0, 0, 1, 0, 1, 0, 1, 1,
 684:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 685:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 686:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 687:quantum/quantum.c ****     1, 1, 1, 0, 0, 0, 1, 1,
 688:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 689:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 690:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 691:quantum/quantum.c ****     0, 0, 0, 1, 1, 1, 1, 0
 692:quantum/quantum.c **** };
 693:quantum/quantum.c **** 
 694:quantum/quantum.c **** __attribute__ ((weak))
 695:quantum/quantum.c **** const uint8_t ascii_to_keycode_lut[0x80] PROGMEM = {
 696:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 697:quantum/quantum.c ****     KC_BSPC, KC_TAB, KC_ENT, 0, 0, 0, 0, 0,
 698:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 699:quantum/quantum.c ****     0, 0, 0, KC_ESC, 0, 0, 0, 0,
 700:quantum/quantum.c ****     KC_SPC, KC_1, KC_QUOT, KC_3, KC_4, KC_5, KC_7, KC_QUOT,
 701:quantum/quantum.c ****     KC_9, KC_0, KC_8, KC_EQL, KC_COMM, KC_MINS, KC_DOT, KC_SLSH,
 702:quantum/quantum.c ****     KC_0, KC_1, KC_2, KC_3, KC_4, KC_5, KC_6, KC_7,
 703:quantum/quantum.c ****     KC_8, KC_9, KC_SCLN, KC_SCLN, KC_COMM, KC_EQL, KC_DOT, KC_SLSH,
 704:quantum/quantum.c ****     KC_2, KC_A, KC_B, KC_C, KC_D, KC_E, KC_F, KC_G,
 705:quantum/quantum.c ****     KC_H, KC_I, KC_J, KC_K, KC_L, KC_M, KC_N, KC_O,
 706:quantum/quantum.c ****     KC_P, KC_Q, KC_R, KC_S, KC_T, KC_U, KC_V, KC_W,
 707:quantum/quantum.c ****     KC_X, KC_Y, KC_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_6, KC_MINS,
 708:quantum/quantum.c ****     KC_GRV, KC_A, KC_B, KC_C, KC_D, KC_E, KC_F, KC_G,
 709:quantum/quantum.c ****     KC_H, KC_I, KC_J, KC_K, KC_L, KC_M, KC_N, KC_O,
 710:quantum/quantum.c ****     KC_P, KC_Q, KC_R, KC_S, KC_T, KC_U, KC_V, KC_W,
 711:quantum/quantum.c ****     KC_X, KC_Y, KC_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_GRV, KC_DEL
 712:quantum/quantum.c **** };
 713:quantum/quantum.c **** 
 714:quantum/quantum.c **** void send_string(const char *str) {
 715:quantum/quantum.c ****   send_string_with_delay(str, 0);
 716:quantum/quantum.c **** }
 717:quantum/quantum.c **** 
 718:quantum/quantum.c **** void send_string_P(const char *str) {
 719:quantum/quantum.c ****   send_string_with_delay_P(str, 0);
 720:quantum/quantum.c **** }
 721:quantum/quantum.c **** 
 722:quantum/quantum.c **** void send_string_with_delay(const char *str, uint8_t interval) {
 723:quantum/quantum.c ****     while (1) {
 724:quantum/quantum.c ****         char ascii_code = *str;
 725:quantum/quantum.c ****         if (!ascii_code) break;
 726:quantum/quantum.c ****         if (ascii_code == 1) {
 727:quantum/quantum.c ****           // tap
 728:quantum/quantum.c ****           uint8_t keycode = *(++str);
 729:quantum/quantum.c ****           register_code(keycode);
 730:quantum/quantum.c ****           unregister_code(keycode);
 731:quantum/quantum.c ****         } else if (ascii_code == 2) {
 732:quantum/quantum.c ****           // down
 733:quantum/quantum.c ****           uint8_t keycode = *(++str);
 734:quantum/quantum.c ****           register_code(keycode);
 735:quantum/quantum.c ****         } else if (ascii_code == 3) {
 736:quantum/quantum.c ****           // up
 737:quantum/quantum.c ****           uint8_t keycode = *(++str);
 738:quantum/quantum.c ****           unregister_code(keycode);
 739:quantum/quantum.c ****         } else {
 740:quantum/quantum.c ****           send_char(ascii_code);
 741:quantum/quantum.c ****         }
 742:quantum/quantum.c ****         ++str;
 743:quantum/quantum.c ****         // interval
 744:quantum/quantum.c ****         { uint8_t ms = interval; while (ms--) wait_ms(1); }
 745:quantum/quantum.c ****     }
 746:quantum/quantum.c **** }
 747:quantum/quantum.c **** 
 748:quantum/quantum.c **** void send_string_with_delay_P(const char *str, uint8_t interval) {
 749:quantum/quantum.c ****     while (1) {
 750:quantum/quantum.c ****         char ascii_code = pgm_read_byte(str);
 751:quantum/quantum.c ****         if (!ascii_code) break;
 752:quantum/quantum.c ****         if (ascii_code == 1) {
 753:quantum/quantum.c ****           // tap
 754:quantum/quantum.c ****           uint8_t keycode = pgm_read_byte(++str);
 755:quantum/quantum.c ****           register_code(keycode);
 756:quantum/quantum.c ****           unregister_code(keycode);
 757:quantum/quantum.c ****         } else if (ascii_code == 2) {
 758:quantum/quantum.c ****           // down
 759:quantum/quantum.c ****           uint8_t keycode = pgm_read_byte(++str);
 760:quantum/quantum.c ****           register_code(keycode);
 761:quantum/quantum.c ****         } else if (ascii_code == 3) {
 762:quantum/quantum.c ****           // up
 763:quantum/quantum.c ****           uint8_t keycode = pgm_read_byte(++str);
 764:quantum/quantum.c ****           unregister_code(keycode);
 765:quantum/quantum.c ****         } else {
 766:quantum/quantum.c ****           send_char(ascii_code);
 767:quantum/quantum.c ****         }
 768:quantum/quantum.c ****         ++str;
 769:quantum/quantum.c ****         // interval
 770:quantum/quantum.c ****         { uint8_t ms = interval; while (ms--) wait_ms(1); }
 771:quantum/quantum.c ****     }
 772:quantum/quantum.c **** }
 773:quantum/quantum.c **** 
 774:quantum/quantum.c **** void send_char(char ascii_code) {
 1136               		.loc 1 774 0 is_stmt 1
 1137               		.cfi_startproc
 1138               	.LVL88:
 1139 0000 CF93      		push r28
 1140               	.LCFI12:
 1141               		.cfi_def_cfa_offset 3
 1142               		.cfi_offset 28, -2
 1143               	/* prologue: function */
 1144               	/* frame size = 0 */
 1145               	/* stack size = 1 */
 1146               	.L__stack_usage = 1
 1147 0002 90E0      		ldi r25,0
 1148               	.LVL89:
 1149               	.LBB25:
 775:quantum/quantum.c ****   uint8_t keycode;
 776:quantum/quantum.c ****   keycode = pgm_read_byte(&ascii_to_keycode_lut[(uint8_t)ascii_code]);
 1150               		.loc 1 776 0
 1151 0004 FC01      		movw r30,r24
 1152 0006 E050      		subi r30,lo8(-(ascii_to_keycode_lut))
 1153 0008 F040      		sbci r31,hi8(-(ascii_to_keycode_lut))
 1154               	.LVL90:
 1155               	/* #APP */
 1156               	 ;  776 "quantum/quantum.c" 1
 1157 000a C491      		lpm r28, Z
 1158               		
 1159               	 ;  0 "" 2
 1160               	.LVL91:
 1161               	/* #NOAPP */
 1162               	.LBE25:
 1163               	.LBB26:
 777:quantum/quantum.c ****   if (pgm_read_byte(&ascii_to_shift_lut[(uint8_t)ascii_code])) {
 1164               		.loc 1 777 0
 1165 000c 8050      		subi r24,lo8(-(ascii_to_shift_lut))
 1166 000e 9040      		sbci r25,hi8(-(ascii_to_shift_lut))
 1167               	.LVL92:
 1168 0010 FC01      		movw r30,r24
 1169               	.LVL93:
 1170               	/* #APP */
 1171               	 ;  777 "quantum/quantum.c" 1
 1172 0012 8491      		lpm r24, Z
 1173               		
 1174               	 ;  0 "" 2
 1175               	.LVL94:
 1176               	/* #NOAPP */
 1177               	.LBE26:
 1178 0014 8823      		tst r24
 1179 0016 01F0      		breq .L133
 778:quantum/quantum.c ****       register_code(KC_LSFT);
 1180               		.loc 1 778 0
 1181 0018 81EE      		ldi r24,lo8(-31)
 1182               	.LVL95:
 1183 001a 0E94 0000 		call register_code
 1184               	.LVL96:
 779:quantum/quantum.c ****       register_code(keycode);
 1185               		.loc 1 779 0
 1186 001e 8C2F      		mov r24,r28
 1187 0020 0E94 0000 		call register_code
 1188               	.LVL97:
 780:quantum/quantum.c ****       unregister_code(keycode);
 1189               		.loc 1 780 0
 1190 0024 8C2F      		mov r24,r28
 1191 0026 0E94 0000 		call unregister_code
 1192               	.LVL98:
 781:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1193               		.loc 1 781 0
 1194 002a 81EE      		ldi r24,lo8(-31)
 1195               	.L134:
 1196               	/* epilogue start */
 782:quantum/quantum.c ****   } else {
 783:quantum/quantum.c ****       register_code(keycode);
 784:quantum/quantum.c ****       unregister_code(keycode);
 785:quantum/quantum.c ****   }
 786:quantum/quantum.c **** }
 1197               		.loc 1 786 0
 1198 002c CF91      		pop r28
 1199               	.LVL99:
 784:quantum/quantum.c ****   }
 1200               		.loc 1 784 0
 1201 002e 0C94 0000 		jmp unregister_code
 1202               	.LVL100:
 1203               	.L133:
 783:quantum/quantum.c ****       unregister_code(keycode);
 1204               		.loc 1 783 0
 1205 0032 8C2F      		mov r24,r28
 1206               	.LVL101:
 1207 0034 0E94 0000 		call register_code
 1208               	.LVL102:
 784:quantum/quantum.c ****   }
 1209               		.loc 1 784 0
 1210 0038 8C2F      		mov r24,r28
 1211 003a 00C0      		rjmp .L134
 1212               		.cfi_endproc
 1213               	.LFE44:
 1215               		.section	.text.send_string_with_delay,"ax",@progbits
 1216               	.global	send_string_with_delay
 1218               	send_string_with_delay:
 1219               	.LFB42:
 722:quantum/quantum.c ****     while (1) {
 1220               		.loc 1 722 0
 1221               		.cfi_startproc
 1222               	.LVL103:
 1223 0000 FF92      		push r15
 1224               	.LCFI13:
 1225               		.cfi_def_cfa_offset 3
 1226               		.cfi_offset 15, -2
 1227 0002 0F93      		push r16
 1228               	.LCFI14:
 1229               		.cfi_def_cfa_offset 4
 1230               		.cfi_offset 16, -3
 1231 0004 1F93      		push r17
 1232               	.LCFI15:
 1233               		.cfi_def_cfa_offset 5
 1234               		.cfi_offset 17, -4
 1235 0006 CF93      		push r28
 1236               	.LCFI16:
 1237               		.cfi_def_cfa_offset 6
 1238               		.cfi_offset 28, -5
 1239 0008 DF93      		push r29
 1240               	.LCFI17:
 1241               		.cfi_def_cfa_offset 7
 1242               		.cfi_offset 29, -6
 1243               	/* prologue: function */
 1244               	/* frame size = 0 */
 1245               	/* stack size = 5 */
 1246               	.L__stack_usage = 5
 1247 000a EC01      		movw r28,r24
 1248 000c F62E      		mov r15,r22
 1249               	.LVL104:
 1250               	.L143:
 1251               	.LBB27:
 724:quantum/quantum.c ****         if (!ascii_code) break;
 1252               		.loc 1 724 0
 1253 000e 8881      		ld r24,Y
 1254               	.LVL105:
 725:quantum/quantum.c ****         if (ascii_code == 1) {
 1255               		.loc 1 725 0
 1256 0010 8823      		tst r24
 1257 0012 01F0      		breq .L135
 1258 0014 8E01      		movw r16,r28
 1259 0016 0F5F      		subi r16,-1
 1260 0018 1F4F      		sbci r17,-1
 726:quantum/quantum.c ****           // tap
 1261               		.loc 1 726 0
 1262 001a 8130      		cpi r24,lo8(1)
 1263 001c 01F4      		brne .L137
 1264               	.LVL106:
 1265               	.LBB28:
 728:quantum/quantum.c ****           register_code(keycode);
 1266               		.loc 1 728 0
 1267 001e C981      		ldd r28,Y+1
 1268               	.LVL107:
 729:quantum/quantum.c ****           unregister_code(keycode);
 1269               		.loc 1 729 0
 1270 0020 8C2F      		mov r24,r28
 1271               	.LVL108:
 1272 0022 0E94 0000 		call register_code
 1273               	.LVL109:
 730:quantum/quantum.c ****         } else if (ascii_code == 2) {
 1274               		.loc 1 730 0
 1275 0026 8C2F      		mov r24,r28
 1276               	.LVL110:
 1277               	.L144:
 1278               	.LBE28:
 1279               	.LBB29:
 738:quantum/quantum.c ****         } else {
 1280               		.loc 1 738 0
 1281 0028 0E94 0000 		call unregister_code
 1282               	.LVL111:
 1283               	.LBE29:
 1284 002c 00C0      		rjmp .L138
 1285               	.LVL112:
 1286               	.L137:
 731:quantum/quantum.c ****           // down
 1287               		.loc 1 731 0
 1288 002e 8230      		cpi r24,lo8(2)
 1289 0030 01F4      		brne .L139
 1290               	.LVL113:
 1291               	.LBB30:
 734:quantum/quantum.c ****         } else if (ascii_code == 3) {
 1292               		.loc 1 734 0
 1293 0032 8981      		ldd r24,Y+1
 1294               	.LVL114:
 1295 0034 0E94 0000 		call register_code
 1296               	.LVL115:
 1297               	.L138:
 1298               	.LBE30:
 742:quantum/quantum.c ****         // interval
 1299               		.loc 1 742 0
 1300 0038 E801      		movw r28,r16
 1301 003a 2196      		adiw r28,1
 1302               	.LVL116:
 1303               	.LBB31:
 744:quantum/quantum.c ****     }
 1304               		.loc 1 744 0
 1305 003c 8F2D      		mov r24,r15
 1306               	.LVL117:
 1307               	.L141:
 744:quantum/quantum.c ****     }
 1308               		.loc 1 744 0 is_stmt 0 discriminator 1
 1309               	.LVL118:
 1310 003e 8150      		subi r24,1
 1311 0040 00F0      		brcs .L143
 1312               	.LBB32:
 1313               	.LBB33:
 1314               		.loc 3 187 0 is_stmt 1
 1315 0042 EFE9      		ldi r30,lo8(3999)
 1316 0044 FFE0      		ldi r31,hi8(3999)
 1317 0046 3197      	1:	sbiw r30,1
 1318 0048 01F4      		brne 1b
 1319 004a 00C0      		rjmp .
 1320 004c 0000      		nop
 1321 004e 00C0      		rjmp .L141
 1322               	.LVL119:
 1323               	.L139:
 1324               	.LBE33:
 1325               	.LBE32:
 1326               	.LBE31:
 735:quantum/quantum.c ****           // up
 1327               		.loc 1 735 0
 1328 0050 8330      		cpi r24,lo8(3)
 1329 0052 01F4      		brne .L140
 1330               	.LVL120:
 1331               	.LBB34:
 738:quantum/quantum.c ****         } else {
 1332               		.loc 1 738 0
 1333 0054 8981      		ldd r24,Y+1
 1334               	.LVL121:
 1335 0056 00C0      		rjmp .L144
 1336               	.LVL122:
 1337               	.L140:
 1338               	.LBE34:
 740:quantum/quantum.c ****         }
 1339               		.loc 1 740 0
 1340 0058 0E94 0000 		call send_char
 1341               	.LVL123:
 1342 005c 8E01      		movw r16,r28
 1343 005e 00C0      		rjmp .L138
 1344               	.LVL124:
 1345               	.L135:
 1346               	/* epilogue start */
 1347               	.LBE27:
 746:quantum/quantum.c **** 
 1348               		.loc 1 746 0
 1349 0060 DF91      		pop r29
 1350 0062 CF91      		pop r28
 1351               	.LVL125:
 1352 0064 1F91      		pop r17
 1353 0066 0F91      		pop r16
 1354 0068 FF90      		pop r15
 1355               	.LVL126:
 1356 006a 0895      		ret
 1357               		.cfi_endproc
 1358               	.LFE42:
 1360               		.section	.text.send_string,"ax",@progbits
 1361               	.global	send_string
 1363               	send_string:
 1364               	.LFB40:
 714:quantum/quantum.c ****   send_string_with_delay(str, 0);
 1365               		.loc 1 714 0
 1366               		.cfi_startproc
 1367               	.LVL127:
 1368               	/* prologue: function */
 1369               	/* frame size = 0 */
 1370               	/* stack size = 0 */
 1371               	.L__stack_usage = 0
 715:quantum/quantum.c **** }
 1372               		.loc 1 715 0
 1373 0000 60E0      		ldi r22,0
 1374 0002 0C94 0000 		jmp send_string_with_delay
 1375               	.LVL128:
 1376               		.cfi_endproc
 1377               	.LFE40:
 1379               		.section	.text.send_string_with_delay_P,"ax",@progbits
 1380               	.global	send_string_with_delay_P
 1382               	send_string_with_delay_P:
 1383               	.LFB43:
 748:quantum/quantum.c ****     while (1) {
 1384               		.loc 1 748 0
 1385               		.cfi_startproc
 1386               	.LVL129:
 1387 0000 FF92      		push r15
 1388               	.LCFI18:
 1389               		.cfi_def_cfa_offset 3
 1390               		.cfi_offset 15, -2
 1391 0002 0F93      		push r16
 1392               	.LCFI19:
 1393               		.cfi_def_cfa_offset 4
 1394               		.cfi_offset 16, -3
 1395 0004 1F93      		push r17
 1396               	.LCFI20:
 1397               		.cfi_def_cfa_offset 5
 1398               		.cfi_offset 17, -4
 1399 0006 CF93      		push r28
 1400               	.LCFI21:
 1401               		.cfi_def_cfa_offset 6
 1402               		.cfi_offset 28, -5
 1403 0008 DF93      		push r29
 1404               	.LCFI22:
 1405               		.cfi_def_cfa_offset 7
 1406               		.cfi_offset 29, -6
 1407               	/* prologue: function */
 1408               	/* frame size = 0 */
 1409               	/* stack size = 5 */
 1410               	.L__stack_usage = 5
 1411 000a 8C01      		movw r16,r24
 1412 000c F62E      		mov r15,r22
 1413               	.LVL130:
 1414               	.L154:
 1415               	.LBB35:
 1416               	.LBB36:
 750:quantum/quantum.c ****         if (!ascii_code) break;
 1417               		.loc 1 750 0
 1418 000e F801      		movw r30,r16
 1419               	/* #APP */
 1420               	 ;  750 "quantum/quantum.c" 1
 1421 0010 8491      		lpm r24, Z
 1422               		
 1423               	 ;  0 "" 2
 1424               	.LVL131:
 1425               	/* #NOAPP */
 1426               	.LBE36:
 751:quantum/quantum.c ****         if (ascii_code == 1) {
 1427               		.loc 1 751 0
 1428 0012 8823      		tst r24
 1429 0014 01F0      		breq .L146
 1430 0016 E801      		movw r28,r16
 1431 0018 2196      		adiw r28,1
 752:quantum/quantum.c ****           // tap
 1432               		.loc 1 752 0
 1433 001a 8130      		cpi r24,lo8(1)
 1434 001c 01F4      		brne .L148
 1435               	.LVL132:
 1436               	.LBB37:
 1437               	.LBB38:
 754:quantum/quantum.c ****           register_code(keycode);
 1438               		.loc 1 754 0
 1439 001e FE01      		movw r30,r28
 1440               	/* #APP */
 1441               	 ;  754 "quantum/quantum.c" 1
 1442 0020 1491      		lpm r17, Z
 1443               		
 1444               	 ;  0 "" 2
 1445               	.LVL133:
 1446               	/* #NOAPP */
 1447               	.LBE38:
 755:quantum/quantum.c ****           unregister_code(keycode);
 1448               		.loc 1 755 0
 1449 0022 812F      		mov r24,r17
 1450               	.LVL134:
 1451 0024 0E94 0000 		call register_code
 1452               	.LVL135:
 756:quantum/quantum.c ****         } else if (ascii_code == 2) {
 1453               		.loc 1 756 0
 1454 0028 812F      		mov r24,r17
 1455               	.LVL136:
 1456               	.L155:
 1457               	.LBE37:
 1458               	.LBB39:
 764:quantum/quantum.c ****         } else {
 1459               		.loc 1 764 0
 1460 002a 0E94 0000 		call unregister_code
 1461               	.LVL137:
 1462               	.LBE39:
 1463 002e 00C0      		rjmp .L149
 1464               	.LVL138:
 1465               	.L148:
 757:quantum/quantum.c ****           // down
 1466               		.loc 1 757 0
 1467 0030 8230      		cpi r24,lo8(2)
 1468 0032 01F4      		brne .L150
 1469               	.LVL139:
 1470               	.LBB41:
 1471               	.LBB42:
 759:quantum/quantum.c ****           register_code(keycode);
 1472               		.loc 1 759 0
 1473 0034 FE01      		movw r30,r28
 1474               	/* #APP */
 1475               	 ;  759 "quantum/quantum.c" 1
 1476 0036 8491      		lpm r24, Z
 1477               		
 1478               	 ;  0 "" 2
 1479               	.LVL140:
 1480               	/* #NOAPP */
 1481               	.LBE42:
 760:quantum/quantum.c ****         } else if (ascii_code == 3) {
 1482               		.loc 1 760 0
 1483 0038 0E94 0000 		call register_code
 1484               	.LVL141:
 1485               	.L149:
 1486               	.LBE41:
 768:quantum/quantum.c ****         // interval
 1487               		.loc 1 768 0
 1488 003c 8E01      		movw r16,r28
 1489 003e 0F5F      		subi r16,-1
 1490 0040 1F4F      		sbci r17,-1
 1491               	.LVL142:
 1492               	.LBB43:
 770:quantum/quantum.c ****     }
 1493               		.loc 1 770 0
 1494 0042 8F2D      		mov r24,r15
 1495               	.LVL143:
 1496               	.L152:
 770:quantum/quantum.c ****     }
 1497               		.loc 1 770 0 is_stmt 0 discriminator 1
 1498               	.LVL144:
 1499 0044 8150      		subi r24,1
 1500 0046 00F0      		brcs .L154
 1501               	.LBB44:
 1502               	.LBB45:
 1503               		.loc 3 187 0 is_stmt 1
 1504 0048 EFE9      		ldi r30,lo8(3999)
 1505 004a FFE0      		ldi r31,hi8(3999)
 1506 004c 3197      	1:	sbiw r30,1
 1507 004e 01F4      		brne 1b
 1508 0050 00C0      		rjmp .
 1509 0052 0000      		nop
 1510 0054 00C0      		rjmp .L152
 1511               	.LVL145:
 1512               	.L150:
 1513               	.LBE45:
 1514               	.LBE44:
 1515               	.LBE43:
 761:quantum/quantum.c ****           // up
 1516               		.loc 1 761 0
 1517 0056 8330      		cpi r24,lo8(3)
 1518 0058 01F4      		brne .L151
 1519               	.LVL146:
 1520               	.LBB46:
 1521               	.LBB40:
 763:quantum/quantum.c ****           unregister_code(keycode);
 1522               		.loc 1 763 0
 1523 005a FE01      		movw r30,r28
 1524               	/* #APP */
 1525               	 ;  763 "quantum/quantum.c" 1
 1526 005c 8491      		lpm r24, Z
 1527               		
 1528               	 ;  0 "" 2
 1529               	.LVL147:
 1530               	/* #NOAPP */
 1531 005e 00C0      		rjmp .L155
 1532               	.LVL148:
 1533               	.L151:
 1534               	.LBE40:
 1535               	.LBE46:
 766:quantum/quantum.c ****         }
 1536               		.loc 1 766 0
 1537 0060 0E94 0000 		call send_char
 1538               	.LVL149:
 1539 0064 E801      		movw r28,r16
 1540 0066 00C0      		rjmp .L149
 1541               	.LVL150:
 1542               	.L146:
 1543               	/* epilogue start */
 1544               	.LBE35:
 772:quantum/quantum.c **** 
 1545               		.loc 1 772 0
 1546 0068 DF91      		pop r29
 1547 006a CF91      		pop r28
 1548 006c 1F91      		pop r17
 1549 006e 0F91      		pop r16
 1550               	.LVL151:
 1551 0070 FF90      		pop r15
 1552               	.LVL152:
 1553 0072 0895      		ret
 1554               		.cfi_endproc
 1555               	.LFE43:
 1557               		.section	.text.send_string_P,"ax",@progbits
 1558               	.global	send_string_P
 1560               	send_string_P:
 1561               	.LFB41:
 718:quantum/quantum.c ****   send_string_with_delay_P(str, 0);
 1562               		.loc 1 718 0
 1563               		.cfi_startproc
 1564               	.LVL153:
 1565               	/* prologue: function */
 1566               	/* frame size = 0 */
 1567               	/* stack size = 0 */
 1568               	.L__stack_usage = 0
 719:quantum/quantum.c **** }
 1569               		.loc 1 719 0
 1570 0000 60E0      		ldi r22,0
 1571 0002 0C94 0000 		jmp send_string_with_delay_P
 1572               	.LVL154:
 1573               		.cfi_endproc
 1574               	.LFE41:
 1576               		.section	.text.set_single_persistent_default_layer,"ax",@progbits
 1577               	.global	set_single_persistent_default_layer
 1579               	set_single_persistent_default_layer:
 1580               	.LFB45:
 787:quantum/quantum.c **** 
 788:quantum/quantum.c **** void set_single_persistent_default_layer(uint8_t default_layer) {
 1581               		.loc 1 788 0
 1582               		.cfi_startproc
 1583               	.LVL155:
 1584 0000 CF93      		push r28
 1585               	.LCFI23:
 1586               		.cfi_def_cfa_offset 3
 1587               		.cfi_offset 28, -2
 1588 0002 DF93      		push r29
 1589               	.LCFI24:
 1590               		.cfi_def_cfa_offset 4
 1591               		.cfi_offset 29, -3
 1592               	/* prologue: function */
 1593               	/* frame size = 0 */
 1594               	/* stack size = 2 */
 1595               	.L__stack_usage = 2
 789:quantum/quantum.c ****   #if defined(AUDIO_ENABLE) && defined(DEFAULT_LAYER_SONGS)
 790:quantum/quantum.c ****     PLAY_SONG(default_layer_songs[default_layer]);
 791:quantum/quantum.c ****   #endif
 792:quantum/quantum.c ****   eeconfig_update_default_layer(1U<<default_layer);
 1596               		.loc 1 792 0
 1597 0004 C1E0      		ldi r28,lo8(1)
 1598 0006 D0E0      		ldi r29,0
 1599 0008 00C0      		rjmp 2f
 1600               		1:
 1601 000a CC0F      		lsl r28
 1602 000c DD1F      		rol r29
 1603               		2:
 1604 000e 8A95      		dec r24
 1605 0010 02F4      		brpl 1b
 1606 0012 8C2F      		mov r24,r28
 1607               	.LVL156:
 1608 0014 0E94 0000 		call eeconfig_update_default_layer
 1609               	.LVL157:
 793:quantum/quantum.c ****   default_layer_set(1U<<default_layer);
 1610               		.loc 1 793 0
 1611 0018 BE01      		movw r22,r28
 1612 001a 90E0      		ldi r25,0
 1613 001c 80E0      		ldi r24,0
 1614               	/* epilogue start */
 794:quantum/quantum.c **** }
 1615               		.loc 1 794 0
 1616 001e DF91      		pop r29
 1617 0020 CF91      		pop r28
 793:quantum/quantum.c ****   default_layer_set(1U<<default_layer);
 1618               		.loc 1 793 0
 1619 0022 0C94 0000 		jmp default_layer_set
 1620               	.LVL158:
 1621               		.cfi_endproc
 1622               	.LFE45:
 1624               		.section	.text.update_tri_layer_state,"ax",@progbits
 1625               	.global	update_tri_layer_state
 1627               	update_tri_layer_state:
 1628               	.LFB46:
 795:quantum/quantum.c **** 
 796:quantum/quantum.c **** uint32_t update_tri_layer_state(uint32_t state, uint8_t layer1, uint8_t layer2, uint8_t layer3) {
 1629               		.loc 1 796 0
 1630               		.cfi_startproc
 1631               	.LVL159:
 1632 0000 8F92      		push r8
 1633               	.LCFI25:
 1634               		.cfi_def_cfa_offset 3
 1635               		.cfi_offset 8, -2
 1636 0002 9F92      		push r9
 1637               	.LCFI26:
 1638               		.cfi_def_cfa_offset 4
 1639               		.cfi_offset 9, -3
 1640 0004 AF92      		push r10
 1641               	.LCFI27:
 1642               		.cfi_def_cfa_offset 5
 1643               		.cfi_offset 10, -4
 1644 0006 BF92      		push r11
 1645               	.LCFI28:
 1646               		.cfi_def_cfa_offset 6
 1647               		.cfi_offset 11, -5
 1648 0008 CF92      		push r12
 1649               	.LCFI29:
 1650               		.cfi_def_cfa_offset 7
 1651               		.cfi_offset 12, -6
 1652 000a DF92      		push r13
 1653               	.LCFI30:
 1654               		.cfi_def_cfa_offset 8
 1655               		.cfi_offset 13, -7
 1656 000c EF92      		push r14
 1657               	.LCFI31:
 1658               		.cfi_def_cfa_offset 9
 1659               		.cfi_offset 14, -8
 1660 000e FF92      		push r15
 1661               	.LCFI32:
 1662               		.cfi_def_cfa_offset 10
 1663               		.cfi_offset 15, -9
 1664 0010 0F93      		push r16
 1665               	.LCFI33:
 1666               		.cfi_def_cfa_offset 11
 1667               		.cfi_offset 16, -10
 1668 0012 1F93      		push r17
 1669               	.LCFI34:
 1670               		.cfi_def_cfa_offset 12
 1671               		.cfi_offset 17, -11
 1672               	/* prologue: function */
 1673               	/* frame size = 0 */
 1674               	/* stack size = 10 */
 1675               	.L__stack_usage = 10
 1676 0014 6B01      		movw r12,r22
 1677 0016 7C01      		movw r14,r24
 797:quantum/quantum.c ****   uint32_t mask12 = (1UL << layer1) | (1UL << layer2);
 1678               		.loc 1 797 0
 1679 0018 81E0      		ldi r24,lo8(1)
 1680 001a 90E0      		ldi r25,0
 1681 001c A0E0      		ldi r26,0
 1682 001e B0E0      		ldi r27,0
 1683 0020 4C01      		movw r8,r24
 1684 0022 5D01      		movw r10,r26
 1685 0024 00C0      		rjmp 2f
 1686               		1:
 1687 0026 880C      		lsl r8
 1688 0028 991C      		rol r9
 1689 002a AA1C      		rol r10
 1690 002c BB1C      		rol r11
 1691               		2:
 1692 002e 4A95      		dec r20
 1693 0030 02F4      		brpl 1b
 1694 0032 B501      		movw r22,r10
 1695               	.LVL160:
 1696 0034 A401      		movw r20,r8
 1697               	.LVL161:
 1698 0036 4C01      		movw r8,r24
 1699 0038 5D01      		movw r10,r26
 1700 003a 00C0      		rjmp 2f
 1701               		1:
 1702 003c 880C      		lsl r8
 1703 003e 991C      		rol r9
 1704 0040 AA1C      		rol r10
 1705 0042 BB1C      		rol r11
 1706               		2:
 1707 0044 2A95      		dec r18
 1708 0046 02F4      		brpl 1b
 1709 0048 4829      		or r20,r8
 1710 004a 5929      		or r21,r9
 1711 004c 6A29      		or r22,r10
 1712 004e 7B29      		or r23,r11
 1713               	.LVL162:
 798:quantum/quantum.c ****   uint32_t mask3 = 1UL << layer3;
 1714               		.loc 1 798 0
 1715 0050 00C0      		rjmp 2f
 1716               		1:
 1717 0052 880F      		lsl r24
 1718 0054 991F      		rol r25
 1719 0056 AA1F      		rol r26
 1720 0058 BB1F      		rol r27
 1721               		2:
 1722 005a 0A95      		dec r16
 1723 005c 02F4      		brpl 1b
 1724               	.LVL163:
 799:quantum/quantum.c ****   return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 1725               		.loc 1 799 0
 1726 005e 8A01      		movw r16,r20
 1727               	.LVL164:
 1728 0060 9B01      		movw r18,r22
 1729               	.LVL165:
 1730 0062 0C21      		and r16,r12
 1731 0064 1D21      		and r17,r13
 1732 0066 2E21      		and r18,r14
 1733 0068 3F21      		and r19,r15
 1734 006a 0417      		cp r16,r20
 1735 006c 1507      		cpc r17,r21
 1736 006e 2607      		cpc r18,r22
 1737 0070 3707      		cpc r19,r23
 1738 0072 01F4      		brne .L159
 1739               		.loc 1 799 0 is_stmt 0 discriminator 1
 1740 0074 8C29      		or r24,r12
 1741               	.LVL166:
 1742 0076 9D29      		or r25,r13
 1743 0078 AE29      		or r26,r14
 1744 007a BF29      		or r27,r15
 1745               	.L158:
 800:quantum/quantum.c **** }
 1746               		.loc 1 800 0 is_stmt 1
 1747 007c BC01      		movw r22,r24
 1748 007e CD01      		movw r24,r26
 1749               	/* epilogue start */
 1750 0080 1F91      		pop r17
 1751               	.LVL167:
 1752 0082 0F91      		pop r16
 1753               	.LVL168:
 1754 0084 FF90      		pop r15
 1755 0086 EF90      		pop r14
 1756 0088 DF90      		pop r13
 1757 008a CF90      		pop r12
 1758 008c BF90      		pop r11
 1759 008e AF90      		pop r10
 1760 0090 9F90      		pop r9
 1761 0092 8F90      		pop r8
 1762               	.LVL169:
 1763 0094 0895      		ret
 1764               	.LVL170:
 1765               	.L159:
 799:quantum/quantum.c ****   return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 1766               		.loc 1 799 0 discriminator 2
 1767 0096 8095      		com r24
 1768 0098 9095      		com r25
 1769 009a A095      		com r26
 1770 009c B095      		com r27
 1771               	.LVL171:
 1772 009e 8C21      		and r24,r12
 1773               	.LVL172:
 1774 00a0 9D21      		and r25,r13
 1775 00a2 AE21      		and r26,r14
 1776 00a4 BF21      		and r27,r15
 1777 00a6 00C0      		rjmp .L158
 1778               		.cfi_endproc
 1779               	.LFE46:
 1781               		.section	.text.update_tri_layer,"ax",@progbits
 1782               	.global	update_tri_layer
 1784               	update_tri_layer:
 1785               	.LFB47:
 801:quantum/quantum.c **** 
 802:quantum/quantum.c **** void update_tri_layer(uint8_t layer1, uint8_t layer2, uint8_t layer3) {
 1786               		.loc 1 802 0
 1787               		.cfi_startproc
 1788               	.LVL173:
 1789 0000 0F93      		push r16
 1790               	.LCFI35:
 1791               		.cfi_def_cfa_offset 3
 1792               		.cfi_offset 16, -2
 1793               	/* prologue: function */
 1794               	/* frame size = 0 */
 1795               	/* stack size = 1 */
 1796               	.L__stack_usage = 1
 1797 0002 382F      		mov r19,r24
 1798 0004 262F      		mov r18,r22
 803:quantum/quantum.c ****   layer_state_set(update_tri_layer_state(layer_state, layer1, layer2, layer3));
 1799               		.loc 1 803 0
 1800 0006 6091 0000 		lds r22,layer_state
 1801 000a 7091 0000 		lds r23,layer_state+1
 1802 000e 8091 0000 		lds r24,layer_state+2
 1803 0012 9091 0000 		lds r25,layer_state+3
 1804               	.LVL174:
 1805 0016 042F      		mov r16,r20
 1806 0018 432F      		mov r20,r19
 1807               	.LVL175:
 1808 001a 0E94 0000 		call update_tri_layer_state
 1809               	.LVL176:
 1810               	/* epilogue start */
 804:quantum/quantum.c **** }
 1811               		.loc 1 804 0
 1812 001e 0F91      		pop r16
 1813               	.LVL177:
 803:quantum/quantum.c ****   layer_state_set(update_tri_layer_state(layer_state, layer1, layer2, layer3));
 1814               		.loc 1 803 0
 1815 0020 0C94 0000 		jmp layer_state_set
 1816               	.LVL178:
 1817               		.cfi_endproc
 1818               	.LFE47:
 1820               		.section	.text.tap_random_base64,"ax",@progbits
 1821               	.global	tap_random_base64
 1823               	tap_random_base64:
 1824               	.LFB48:
 805:quantum/quantum.c **** 
 806:quantum/quantum.c **** void tap_random_base64(void) {
 1825               		.loc 1 806 0
 1826               		.cfi_startproc
 1827 0000 CF93      		push r28
 1828               	.LCFI36:
 1829               		.cfi_def_cfa_offset 3
 1830               		.cfi_offset 28, -2
 1831 0002 DF93      		push r29
 1832               	.LCFI37:
 1833               		.cfi_def_cfa_offset 4
 1834               		.cfi_offset 29, -3
 1835               	/* prologue: function */
 1836               	/* frame size = 0 */
 1837               	/* stack size = 2 */
 1838               	.L__stack_usage = 2
 807:quantum/quantum.c ****   #if defined(__AVR_ATmega32U4__)
 808:quantum/quantum.c ****     uint8_t key = (TCNT0 + TCNT1 + TCNT3 + TCNT4) % 64;
 1839               		.loc 1 808 0
 1840 0004 46B5      		in r20,0x26
 1841 0006 2091 8400 		lds r18,132
 1842 000a 3091 8500 		lds r19,132+1
 1843 000e C091 9400 		lds r28,148
 1844 0012 D091 9500 		lds r29,148+1
 1845 0016 8091 BE00 		lds r24,190
 1846 001a 9091 BF00 		lds r25,190+1
 1847 001e C20F      		add r28,r18
 1848 0020 C40F      		add r28,r20
 1849 0022 C80F      		add r28,r24
 1850 0024 CF73      		andi r28,lo8(63)
 1851               	.LVL179:
 809:quantum/quantum.c ****   #else
 810:quantum/quantum.c ****     uint8_t key = rand() % 64;
 811:quantum/quantum.c ****   #endif
 812:quantum/quantum.c ****   switch (key) {
 1852               		.loc 1 812 0
 1853 0026 CE33      		cpi r28,lo8(62)
 1854 0028 00F4      		brsh .L164
 1855 002a C533      		cpi r28,lo8(53)
 1856 002c 00F4      		brsh .L165
 1857 002e CA31      		cpi r28,lo8(26)
 1858 0030 00F0      		brlo .L163
 1859 0032 C433      		cpi r28,lo8(52)
 1860 0034 00F4      		brsh .L170
 813:quantum/quantum.c ****     case 0 ... 25:
 814:quantum/quantum.c ****       register_code(KC_LSFT);
 815:quantum/quantum.c ****       register_code(key + KC_A);
 816:quantum/quantum.c ****       unregister_code(key + KC_A);
 817:quantum/quantum.c ****       unregister_code(KC_LSFT);
 818:quantum/quantum.c ****       break;
 819:quantum/quantum.c ****     case 26 ... 51:
 820:quantum/quantum.c ****       register_code(key - 26 + KC_A);
 1861               		.loc 1 820 0
 1862 0036 C651      		subi r28,lo8(-(-22))
 1863               	.LVL180:
 1864               	.L173:
 821:quantum/quantum.c ****       unregister_code(key - 26 + KC_A);
 822:quantum/quantum.c ****       break;
 823:quantum/quantum.c ****     case 52:
 824:quantum/quantum.c ****       register_code(KC_0);
 825:quantum/quantum.c ****       unregister_code(KC_0);
 826:quantum/quantum.c ****       break;
 827:quantum/quantum.c ****     case 53 ... 61:
 828:quantum/quantum.c ****       register_code(key - 53 + KC_1);
 1865               		.loc 1 828 0
 1866 0038 8C2F      		mov r24,r28
 1867 003a 0E94 0000 		call register_code
 1868               	.LVL181:
 829:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 1869               		.loc 1 829 0
 1870 003e 8C2F      		mov r24,r28
 1871 0040 00C0      		rjmp .L171
 1872               	.LVL182:
 1873               	.L164:
 812:quantum/quantum.c ****     case 0 ... 25:
 1874               		.loc 1 812 0
 1875 0042 CE33      		cpi r28,lo8(62)
 1876 0044 01F0      		breq .L168
 1877 0046 CF33      		cpi r28,lo8(63)
 1878 0048 01F0      		breq .L169
 1879               	.L163:
 814:quantum/quantum.c ****       register_code(key + KC_A);
 1880               		.loc 1 814 0
 1881 004a 81EE      		ldi r24,lo8(-31)
 1882 004c 0E94 0000 		call register_code
 1883               	.LVL183:
 815:quantum/quantum.c ****       unregister_code(key + KC_A);
 1884               		.loc 1 815 0
 1885 0050 CC5F      		subi r28,lo8(-(4))
 1886               	.LVL184:
 1887 0052 8C2F      		mov r24,r28
 1888 0054 0E94 0000 		call register_code
 1889               	.LVL185:
 816:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1890               		.loc 1 816 0
 1891 0058 8C2F      		mov r24,r28
 1892               	.LVL186:
 1893               	.L172:
 830:quantum/quantum.c ****       break;
 831:quantum/quantum.c ****     case 62:
 832:quantum/quantum.c ****       register_code(KC_LSFT);
 833:quantum/quantum.c ****       register_code(KC_EQL);
 834:quantum/quantum.c ****       unregister_code(KC_EQL);
 1894               		.loc 1 834 0
 1895 005a 0E94 0000 		call unregister_code
 1896               	.LVL187:
 835:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1897               		.loc 1 835 0
 1898 005e 81EE      		ldi r24,lo8(-31)
 1899 0060 00C0      		rjmp .L171
 1900               	.LVL188:
 1901               	.L170:
 824:quantum/quantum.c ****       unregister_code(KC_0);
 1902               		.loc 1 824 0
 1903 0062 87E2      		ldi r24,lo8(39)
 1904 0064 0E94 0000 		call register_code
 1905               	.LVL189:
 825:quantum/quantum.c ****       break;
 1906               		.loc 1 825 0
 1907 0068 87E2      		ldi r24,lo8(39)
 1908               	.LVL190:
 1909               	.L171:
 1910               	/* epilogue start */
 836:quantum/quantum.c ****       break;
 837:quantum/quantum.c ****     case 63:
 838:quantum/quantum.c ****       register_code(KC_SLSH);
 839:quantum/quantum.c ****       unregister_code(KC_SLSH);
 840:quantum/quantum.c ****       break;
 841:quantum/quantum.c ****   }
 842:quantum/quantum.c **** }
 1911               		.loc 1 842 0
 1912 006a DF91      		pop r29
 1913 006c CF91      		pop r28
 839:quantum/quantum.c ****       break;
 1914               		.loc 1 839 0
 1915 006e 0C94 0000 		jmp unregister_code
 1916               	.LVL191:
 1917               	.L165:
 828:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 1918               		.loc 1 828 0
 1919 0072 C751      		subi r28,lo8(-(-23))
 1920               	.LVL192:
 1921 0074 00C0      		rjmp .L173
 1922               	.LVL193:
 1923               	.L168:
 832:quantum/quantum.c ****       register_code(KC_EQL);
 1924               		.loc 1 832 0
 1925 0076 81EE      		ldi r24,lo8(-31)
 1926 0078 0E94 0000 		call register_code
 1927               	.LVL194:
 833:quantum/quantum.c ****       unregister_code(KC_EQL);
 1928               		.loc 1 833 0
 1929 007c 8EE2      		ldi r24,lo8(46)
 1930 007e 0E94 0000 		call register_code
 1931               	.LVL195:
 834:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1932               		.loc 1 834 0
 1933 0082 8EE2      		ldi r24,lo8(46)
 1934 0084 00C0      		rjmp .L172
 1935               	.L169:
 838:quantum/quantum.c ****       unregister_code(KC_SLSH);
 1936               		.loc 1 838 0
 1937 0086 88E3      		ldi r24,lo8(56)
 1938 0088 0E94 0000 		call register_code
 1939               	.LVL196:
 839:quantum/quantum.c ****       break;
 1940               		.loc 1 839 0
 1941 008c 88E3      		ldi r24,lo8(56)
 1942 008e 00C0      		rjmp .L171
 1943               		.cfi_endproc
 1944               	.LFE48:
 1946               		.section	.text.matrix_init_quantum,"ax",@progbits
 1947               	.global	matrix_init_quantum
 1949               	matrix_init_quantum:
 1950               	.LFB49:
 843:quantum/quantum.c **** 
 844:quantum/quantum.c **** void matrix_init_quantum() {
 1951               		.loc 1 844 0
 1952               		.cfi_startproc
 1953               	/* prologue: function */
 1954               	/* frame size = 0 */
 1955               	/* stack size = 0 */
 1956               	.L__stack_usage = 0
 845:quantum/quantum.c ****   #ifdef BACKLIGHT_ENABLE
 846:quantum/quantum.c ****     backlight_init_ports();
 847:quantum/quantum.c ****   #endif
 848:quantum/quantum.c ****   #ifdef AUDIO_ENABLE
 849:quantum/quantum.c ****     audio_init();
 850:quantum/quantum.c ****   #endif
 851:quantum/quantum.c ****   #ifdef RGB_MATRIX_ENABLE
 852:quantum/quantum.c ****     rgb_matrix_init_drivers();
 853:quantum/quantum.c ****   #endif
 854:quantum/quantum.c ****   matrix_init_kb();
 1957               		.loc 1 854 0
 1958 0000 0C94 0000 		jmp matrix_init_kb
 1959               	.LVL197:
 1960               		.cfi_endproc
 1961               	.LFE49:
 1963               		.section	.text.matrix_scan_quantum,"ax",@progbits
 1964               	.global	matrix_scan_quantum
 1966               	matrix_scan_quantum:
 1967               	.LFB50:
 855:quantum/quantum.c **** }
 856:quantum/quantum.c **** 
 857:quantum/quantum.c **** uint8_t rgb_matrix_task_counter = 0;
 858:quantum/quantum.c **** 
 859:quantum/quantum.c **** #ifndef RGB_MATRIX_SKIP_FRAMES
 860:quantum/quantum.c ****   #define RGB_MATRIX_SKIP_FRAMES 1
 861:quantum/quantum.c **** #endif
 862:quantum/quantum.c **** 
 863:quantum/quantum.c **** void matrix_scan_quantum() {
 1968               		.loc 1 863 0
 1969               		.cfi_startproc
 1970               	/* prologue: function */
 1971               	/* frame size = 0 */
 1972               	/* stack size = 0 */
 1973               	.L__stack_usage = 0
 864:quantum/quantum.c ****   #if defined(AUDIO_ENABLE)
 865:quantum/quantum.c ****     matrix_scan_music();
 866:quantum/quantum.c ****   #endif
 867:quantum/quantum.c **** 
 868:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 869:quantum/quantum.c ****     matrix_scan_tap_dance();
 1974               		.loc 1 869 0
 1975 0000 0E94 0000 		call matrix_scan_tap_dance
 1976               	.LVL198:
 870:quantum/quantum.c ****   #endif
 871:quantum/quantum.c **** 
 872:quantum/quantum.c ****   #ifdef COMBO_ENABLE
 873:quantum/quantum.c ****     matrix_scan_combo();
 874:quantum/quantum.c ****   #endif
 875:quantum/quantum.c **** 
 876:quantum/quantum.c ****   #if defined(BACKLIGHT_ENABLE) && defined(BACKLIGHT_PIN)
 877:quantum/quantum.c ****     backlight_task();
 878:quantum/quantum.c ****   #endif
 879:quantum/quantum.c **** 
 880:quantum/quantum.c ****   #ifdef RGB_MATRIX_ENABLE
 881:quantum/quantum.c ****     rgb_matrix_task();
 882:quantum/quantum.c ****     if (rgb_matrix_task_counter == 0) {
 883:quantum/quantum.c ****       rgb_matrix_update_pwm_buffers();
 884:quantum/quantum.c ****     }
 885:quantum/quantum.c ****     rgb_matrix_task_counter = ((rgb_matrix_task_counter + 1) % (RGB_MATRIX_SKIP_FRAMES + 1));
 886:quantum/quantum.c ****   #endif
 887:quantum/quantum.c **** 
 888:quantum/quantum.c ****   matrix_scan_kb();
 1977               		.loc 1 888 0
 1978 0004 0C94 0000 		jmp matrix_scan_kb
 1979               	.LVL199:
 1980               		.cfi_endproc
 1981               	.LFE50:
 1983               		.section	.text.backlight_init_ports,"ax",@progbits
 1984               		.weak	backlight_init_ports
 1986               	backlight_init_ports:
 1987               	.LFB92:
 1988               		.cfi_startproc
 1989               	/* prologue: function */
 1990               	/* frame size = 0 */
 1991               	/* stack size = 0 */
 1992               	.L__stack_usage = 0
 1993               	/* epilogue start */
 1994 0000 0895      		ret
 1995               		.cfi_endproc
 1996               	.LFE92:
 1998               		.section	.text.send_nibble,"ax",@progbits
 1999               	.global	send_nibble
 2001               	send_nibble:
 2002               	.LFB56:
 889:quantum/quantum.c **** }
 890:quantum/quantum.c **** #if defined(BACKLIGHT_ENABLE) && defined(BACKLIGHT_PIN)
 891:quantum/quantum.c **** 
 892:quantum/quantum.c **** static const uint8_t backlight_pin = BACKLIGHT_PIN;
 893:quantum/quantum.c **** 
 894:quantum/quantum.c **** // depending on the pin, we use a different output compare unit
 895:quantum/quantum.c **** #if BACKLIGHT_PIN == B7
 896:quantum/quantum.c **** #  define COM1x1 COM1C1
 897:quantum/quantum.c **** #  define OCR1x  OCR1C
 898:quantum/quantum.c **** #elif BACKLIGHT_PIN == B6
 899:quantum/quantum.c **** #  define COM1x1 COM1B1
 900:quantum/quantum.c **** #  define OCR1x  OCR1B
 901:quantum/quantum.c **** #elif BACKLIGHT_PIN == B5
 902:quantum/quantum.c **** #  define COM1x1 COM1A1
 903:quantum/quantum.c **** #  define OCR1x  OCR1A
 904:quantum/quantum.c **** #else
 905:quantum/quantum.c **** #  define NO_HARDWARE_PWM
 906:quantum/quantum.c **** #endif
 907:quantum/quantum.c **** 
 908:quantum/quantum.c **** #ifndef BACKLIGHT_ON_STATE
 909:quantum/quantum.c **** #define BACKLIGHT_ON_STATE 0
 910:quantum/quantum.c **** #endif
 911:quantum/quantum.c **** 
 912:quantum/quantum.c **** #ifdef NO_HARDWARE_PWM // pwm through software
 913:quantum/quantum.c **** 
 914:quantum/quantum.c **** __attribute__ ((weak))
 915:quantum/quantum.c **** void backlight_init_ports(void)
 916:quantum/quantum.c **** {
 917:quantum/quantum.c ****   // Setup backlight pin as output and output to on state.
 918:quantum/quantum.c ****   // DDRx |= n
 919:quantum/quantum.c ****   _SFR_IO8((backlight_pin >> 4) + 1) |= _BV(backlight_pin & 0xF);
 920:quantum/quantum.c ****   #if BACKLIGHT_ON_STATE == 0
 921:quantum/quantum.c ****     // PORTx &= ~n
 922:quantum/quantum.c ****     _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 923:quantum/quantum.c ****   #else
 924:quantum/quantum.c ****     // PORTx |= n
 925:quantum/quantum.c ****     _SFR_IO8((backlight_pin >> 4) + 2) |= _BV(backlight_pin & 0xF);
 926:quantum/quantum.c ****   #endif
 927:quantum/quantum.c **** }
 928:quantum/quantum.c **** 
 929:quantum/quantum.c **** __attribute__ ((weak))
 930:quantum/quantum.c **** void backlight_set(uint8_t level) {}
 931:quantum/quantum.c **** 
 932:quantum/quantum.c **** uint8_t backlight_tick = 0;
 933:quantum/quantum.c **** 
 934:quantum/quantum.c **** #ifndef BACKLIGHT_CUSTOM_DRIVER
 935:quantum/quantum.c **** void backlight_task(void) {
 936:quantum/quantum.c ****   if ((0xFFFF >> ((BACKLIGHT_LEVELS - get_backlight_level()) * ((BACKLIGHT_LEVELS + 1) / 2))) & (1 
 937:quantum/quantum.c ****     #if BACKLIGHT_ON_STATE == 0
 938:quantum/quantum.c ****       // PORTx &= ~n
 939:quantum/quantum.c ****       _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 940:quantum/quantum.c ****     #else
 941:quantum/quantum.c ****       // PORTx |= n
 942:quantum/quantum.c ****       _SFR_IO8((backlight_pin >> 4) + 2) |= _BV(backlight_pin & 0xF);
 943:quantum/quantum.c ****     #endif
 944:quantum/quantum.c ****   } else {
 945:quantum/quantum.c ****     #if BACKLIGHT_ON_STATE == 0
 946:quantum/quantum.c ****       // PORTx |= n
 947:quantum/quantum.c ****       _SFR_IO8((backlight_pin >> 4) + 2) |= _BV(backlight_pin & 0xF);
 948:quantum/quantum.c ****     #else
 949:quantum/quantum.c ****       // PORTx &= ~n
 950:quantum/quantum.c ****       _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 951:quantum/quantum.c ****     #endif
 952:quantum/quantum.c ****   }
 953:quantum/quantum.c ****   backlight_tick = (backlight_tick + 1) % 16;
 954:quantum/quantum.c **** }
 955:quantum/quantum.c **** #endif
 956:quantum/quantum.c **** 
 957:quantum/quantum.c **** #ifdef BACKLIGHT_BREATHING
 958:quantum/quantum.c ****   #ifndef BACKLIGHT_CUSTOM_DRIVER
 959:quantum/quantum.c ****   #error "Backlight breathing only available with hardware PWM. Please disable."
 960:quantum/quantum.c ****   #endif
 961:quantum/quantum.c **** #endif
 962:quantum/quantum.c **** 
 963:quantum/quantum.c **** #else // pwm through timer
 964:quantum/quantum.c **** 
 965:quantum/quantum.c **** #define TIMER_TOP 0xFFFFU
 966:quantum/quantum.c **** 
 967:quantum/quantum.c **** // See http://jared.geek.nz/2013/feb/linear-led-pwm
 968:quantum/quantum.c **** static uint16_t cie_lightness(uint16_t v) {
 969:quantum/quantum.c ****   if (v <= 5243) // if below 8% of max
 970:quantum/quantum.c ****     return v / 9; // same as dividing by 900%
 971:quantum/quantum.c ****   else {
 972:quantum/quantum.c ****     uint32_t y = (((uint32_t) v + 10486) << 8) / (10486 + 0xFFFFUL); // add 16% of max and compare
 973:quantum/quantum.c ****     // to get a useful result with integer division, we shift left in the expression above
 974:quantum/quantum.c ****     // and revert what we've done again after squaring.
 975:quantum/quantum.c ****     y = y * y * y >> 8;
 976:quantum/quantum.c ****     if (y > 0xFFFFUL) // prevent overflow
 977:quantum/quantum.c ****       return 0xFFFFU;
 978:quantum/quantum.c ****     else
 979:quantum/quantum.c ****       return (uint16_t) y;
 980:quantum/quantum.c ****   }
 981:quantum/quantum.c **** }
 982:quantum/quantum.c **** 
 983:quantum/quantum.c **** // range for val is [0..TIMER_TOP]. PWM pin is high while the timer count is below val.
 984:quantum/quantum.c **** static inline void set_pwm(uint16_t val) {
 985:quantum/quantum.c ****   OCR1x = val;
 986:quantum/quantum.c **** }
 987:quantum/quantum.c **** 
 988:quantum/quantum.c **** #ifndef BACKLIGHT_CUSTOM_DRIVER
 989:quantum/quantum.c **** __attribute__ ((weak))
 990:quantum/quantum.c **** void backlight_set(uint8_t level) {
 991:quantum/quantum.c ****   if (level > BACKLIGHT_LEVELS)
 992:quantum/quantum.c ****     level = BACKLIGHT_LEVELS;
 993:quantum/quantum.c **** 
 994:quantum/quantum.c ****   if (level == 0) {
 995:quantum/quantum.c ****     // Turn off PWM control on backlight pin
 996:quantum/quantum.c ****     TCCR1A &= ~(_BV(COM1x1));
 997:quantum/quantum.c ****   } else {
 998:quantum/quantum.c ****     // Turn on PWM control of backlight pin
 999:quantum/quantum.c ****     TCCR1A |= _BV(COM1x1);
1000:quantum/quantum.c ****   }
1001:quantum/quantum.c ****   // Set the brightness
1002:quantum/quantum.c ****   set_pwm(cie_lightness(TIMER_TOP * (uint32_t)level / BACKLIGHT_LEVELS));
1003:quantum/quantum.c **** }
1004:quantum/quantum.c **** 
1005:quantum/quantum.c **** void backlight_task(void) {}
1006:quantum/quantum.c **** #endif  // BACKLIGHT_CUSTOM_DRIVER
1007:quantum/quantum.c **** 
1008:quantum/quantum.c **** #ifdef BACKLIGHT_BREATHING
1009:quantum/quantum.c **** 
1010:quantum/quantum.c **** #define BREATHING_NO_HALT  0
1011:quantum/quantum.c **** #define BREATHING_HALT_OFF 1
1012:quantum/quantum.c **** #define BREATHING_HALT_ON  2
1013:quantum/quantum.c **** #define BREATHING_STEPS 128
1014:quantum/quantum.c **** 
1015:quantum/quantum.c **** static uint8_t breathing_period = BREATHING_PERIOD;
1016:quantum/quantum.c **** static uint8_t breathing_halt = BREATHING_NO_HALT;
1017:quantum/quantum.c **** static uint16_t breathing_counter = 0;
1018:quantum/quantum.c **** 
1019:quantum/quantum.c **** bool is_breathing(void) {
1020:quantum/quantum.c ****     return !!(TIMSK1 & _BV(TOIE1));
1021:quantum/quantum.c **** }
1022:quantum/quantum.c **** 
1023:quantum/quantum.c **** #define breathing_interrupt_enable() do {TIMSK1 |= _BV(TOIE1);} while (0)
1024:quantum/quantum.c **** #define breathing_interrupt_disable() do {TIMSK1 &= ~_BV(TOIE1);} while (0)
1025:quantum/quantum.c **** #define breathing_min() do {breathing_counter = 0;} while (0)
1026:quantum/quantum.c **** #define breathing_max() do {breathing_counter = breathing_period * 244 / 2;} while (0)
1027:quantum/quantum.c **** 
1028:quantum/quantum.c **** void breathing_enable(void)
1029:quantum/quantum.c **** {
1030:quantum/quantum.c ****   breathing_counter = 0;
1031:quantum/quantum.c ****   breathing_halt = BREATHING_NO_HALT;
1032:quantum/quantum.c ****   breathing_interrupt_enable();
1033:quantum/quantum.c **** }
1034:quantum/quantum.c **** 
1035:quantum/quantum.c **** void breathing_pulse(void)
1036:quantum/quantum.c **** {
1037:quantum/quantum.c ****     if (get_backlight_level() == 0)
1038:quantum/quantum.c ****       breathing_min();
1039:quantum/quantum.c ****     else
1040:quantum/quantum.c ****       breathing_max();
1041:quantum/quantum.c ****     breathing_halt = BREATHING_HALT_ON;
1042:quantum/quantum.c ****     breathing_interrupt_enable();
1043:quantum/quantum.c **** }
1044:quantum/quantum.c **** 
1045:quantum/quantum.c **** void breathing_disable(void)
1046:quantum/quantum.c **** {
1047:quantum/quantum.c ****     breathing_interrupt_disable();
1048:quantum/quantum.c ****     // Restore backlight level
1049:quantum/quantum.c ****     backlight_set(get_backlight_level());
1050:quantum/quantum.c **** }
1051:quantum/quantum.c **** 
1052:quantum/quantum.c **** void breathing_self_disable(void)
1053:quantum/quantum.c **** {
1054:quantum/quantum.c ****   if (get_backlight_level() == 0)
1055:quantum/quantum.c ****     breathing_halt = BREATHING_HALT_OFF;
1056:quantum/quantum.c ****   else
1057:quantum/quantum.c ****     breathing_halt = BREATHING_HALT_ON;
1058:quantum/quantum.c **** }
1059:quantum/quantum.c **** 
1060:quantum/quantum.c **** void breathing_toggle(void) {
1061:quantum/quantum.c ****   if (is_breathing())
1062:quantum/quantum.c ****     breathing_disable();
1063:quantum/quantum.c ****   else
1064:quantum/quantum.c ****     breathing_enable();
1065:quantum/quantum.c **** }
1066:quantum/quantum.c **** 
1067:quantum/quantum.c **** void breathing_period_set(uint8_t value)
1068:quantum/quantum.c **** {
1069:quantum/quantum.c ****   if (!value)
1070:quantum/quantum.c ****     value = 1;
1071:quantum/quantum.c ****   breathing_period = value;
1072:quantum/quantum.c **** }
1073:quantum/quantum.c **** 
1074:quantum/quantum.c **** void breathing_period_default(void) {
1075:quantum/quantum.c ****   breathing_period_set(BREATHING_PERIOD);
1076:quantum/quantum.c **** }
1077:quantum/quantum.c **** 
1078:quantum/quantum.c **** void breathing_period_inc(void)
1079:quantum/quantum.c **** {
1080:quantum/quantum.c ****   breathing_period_set(breathing_period+1);
1081:quantum/quantum.c **** }
1082:quantum/quantum.c **** 
1083:quantum/quantum.c **** void breathing_period_dec(void)
1084:quantum/quantum.c **** {
1085:quantum/quantum.c ****   breathing_period_set(breathing_period-1);
1086:quantum/quantum.c **** }
1087:quantum/quantum.c **** 
1088:quantum/quantum.c **** /* To generate breathing curve in python:
1089:quantum/quantum.c ****  * from math import sin, pi; [int(sin(x/128.0*pi)**4*255) for x in range(128)]
1090:quantum/quantum.c ****  */
1091:quantum/quantum.c **** static const uint8_t breathing_table[BREATHING_STEPS] PROGMEM = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1
1092:quantum/quantum.c **** 
1093:quantum/quantum.c **** // Use this before the cie_lightness function.
1094:quantum/quantum.c **** static inline uint16_t scale_backlight(uint16_t v) {
1095:quantum/quantum.c ****   return v / BACKLIGHT_LEVELS * get_backlight_level();
1096:quantum/quantum.c **** }
1097:quantum/quantum.c **** 
1098:quantum/quantum.c **** /* Assuming a 16MHz CPU clock and a timer that resets at 64k (ICR1), the following interrupt handle
1099:quantum/quantum.c ****  * about 244 times per second.
1100:quantum/quantum.c ****  */
1101:quantum/quantum.c **** ISR(TIMER1_OVF_vect)
1102:quantum/quantum.c **** {
1103:quantum/quantum.c ****   uint16_t interval = (uint16_t) breathing_period * 244 / BREATHING_STEPS;
1104:quantum/quantum.c ****   // resetting after one period to prevent ugly reset at overflow.
1105:quantum/quantum.c ****   breathing_counter = (breathing_counter + 1) % (breathing_period * 244);
1106:quantum/quantum.c ****   uint8_t index = breathing_counter / interval % BREATHING_STEPS;
1107:quantum/quantum.c **** 
1108:quantum/quantum.c ****   if (((breathing_halt == BREATHING_HALT_ON) && (index == BREATHING_STEPS / 2)) ||
1109:quantum/quantum.c ****       ((breathing_halt == BREATHING_HALT_OFF) && (index == BREATHING_STEPS - 1)))
1110:quantum/quantum.c ****   {
1111:quantum/quantum.c ****       breathing_interrupt_disable();
1112:quantum/quantum.c ****   }
1113:quantum/quantum.c **** 
1114:quantum/quantum.c ****   set_pwm(cie_lightness(scale_backlight((uint16_t) pgm_read_byte(&breathing_table[index]) * 0x0101U
1115:quantum/quantum.c **** }
1116:quantum/quantum.c **** 
1117:quantum/quantum.c **** #endif // BACKLIGHT_BREATHING
1118:quantum/quantum.c **** 
1119:quantum/quantum.c **** __attribute__ ((weak))
1120:quantum/quantum.c **** void backlight_init_ports(void)
1121:quantum/quantum.c **** {
1122:quantum/quantum.c ****   // Setup backlight pin as output and output to on state.
1123:quantum/quantum.c ****   // DDRx |= n
1124:quantum/quantum.c ****   _SFR_IO8((backlight_pin >> 4) + 1) |= _BV(backlight_pin & 0xF);
1125:quantum/quantum.c ****   #if BACKLIGHT_ON_STATE == 0
1126:quantum/quantum.c ****     // PORTx &= ~n
1127:quantum/quantum.c ****     _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
1128:quantum/quantum.c ****   #else
1129:quantum/quantum.c ****     // PORTx |= n
1130:quantum/quantum.c ****     _SFR_IO8((backlight_pin >> 4) + 2) |= _BV(backlight_pin & 0xF);
1131:quantum/quantum.c ****   #endif
1132:quantum/quantum.c ****   // I could write a wall of text here to explain... but TL;DW
1133:quantum/quantum.c ****   // Go read the ATmega32u4 datasheet.
1134:quantum/quantum.c ****   // And this: http://blog.saikoled.com/post/43165849837/secret-konami-cheat-code-to-high-resolutio
1135:quantum/quantum.c **** 
1136:quantum/quantum.c ****   // Pin PB7 = OCR1C (Timer 1, Channel C)
1137:quantum/quantum.c ****   // Compare Output Mode = Clear on compare match, Channel C = COM1C1=1 COM1C0=0
1138:quantum/quantum.c ****   // (i.e. start high, go low when counter matches.)
1139:quantum/quantum.c ****   // WGM Mode 14 (Fast PWM) = WGM13=1 WGM12=1 WGM11=1 WGM10=0
1140:quantum/quantum.c ****   // Clock Select = clk/1 (no prescaling) = CS12=0 CS11=0 CS10=1
1141:quantum/quantum.c **** 
1142:quantum/quantum.c ****   /*
1143:quantum/quantum.c ****   14.8.3:
1144:quantum/quantum.c ****   "In fast PWM mode, the compare units allow generation of PWM waveforms on the OCnx pins. Setting 
1145:quantum/quantum.c ****   "In fast PWM mode the counter is incremented until the counter value matches either one of the fi
1146:quantum/quantum.c ****   */
1147:quantum/quantum.c **** 
1148:quantum/quantum.c ****   TCCR1A = _BV(COM1x1) | _BV(WGM11); // = 0b00001010;
1149:quantum/quantum.c ****   TCCR1B = _BV(WGM13) | _BV(WGM12) | _BV(CS10); // = 0b00011001;
1150:quantum/quantum.c ****   // Use full 16-bit resolution. Counter counts to ICR1 before reset to 0.
1151:quantum/quantum.c ****   ICR1 = TIMER_TOP;
1152:quantum/quantum.c **** 
1153:quantum/quantum.c ****   backlight_init();
1154:quantum/quantum.c ****   #ifdef BACKLIGHT_BREATHING
1155:quantum/quantum.c ****     breathing_enable();
1156:quantum/quantum.c ****   #endif
1157:quantum/quantum.c **** }
1158:quantum/quantum.c **** 
1159:quantum/quantum.c **** #endif // NO_HARDWARE_PWM
1160:quantum/quantum.c **** 
1161:quantum/quantum.c **** #else // backlight
1162:quantum/quantum.c **** 
1163:quantum/quantum.c **** __attribute__ ((weak))
1164:quantum/quantum.c **** void backlight_init_ports(void) {}
1165:quantum/quantum.c **** 
1166:quantum/quantum.c **** __attribute__ ((weak))
1167:quantum/quantum.c **** void backlight_set(uint8_t level) {}
1168:quantum/quantum.c **** 
1169:quantum/quantum.c **** #endif // backlight
1170:quantum/quantum.c **** 
1171:quantum/quantum.c **** 
1172:quantum/quantum.c **** // Functions for spitting out values
1173:quantum/quantum.c **** //
1174:quantum/quantum.c **** 
1175:quantum/quantum.c **** void send_dword(uint32_t number) { // this might not actually work
1176:quantum/quantum.c ****     uint16_t word = (number >> 16);
1177:quantum/quantum.c ****     send_word(word);
1178:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
1179:quantum/quantum.c **** }
1180:quantum/quantum.c **** 
1181:quantum/quantum.c **** void send_word(uint16_t number) {
1182:quantum/quantum.c ****     uint8_t byte = number >> 8;
1183:quantum/quantum.c ****     send_byte(byte);
1184:quantum/quantum.c ****     send_byte(number & 0xFF);
1185:quantum/quantum.c **** }
1186:quantum/quantum.c **** 
1187:quantum/quantum.c **** void send_byte(uint8_t number) {
1188:quantum/quantum.c ****     uint8_t nibble = number >> 4;
1189:quantum/quantum.c ****     send_nibble(nibble);
1190:quantum/quantum.c ****     send_nibble(number & 0xF);
1191:quantum/quantum.c **** }
1192:quantum/quantum.c **** 
1193:quantum/quantum.c **** void send_nibble(uint8_t number) {
 2003               		.loc 1 1193 0
 2004               		.cfi_startproc
 2005               	.LVL200:
 2006               		.loc 1 1193 0
 2007 0000 CF93      		push r28
 2008               	.LCFI38:
 2009               		.cfi_def_cfa_offset 3
 2010               		.cfi_offset 28, -2
 2011               	/* prologue: function */
 2012               	/* frame size = 0 */
 2013               	/* stack size = 1 */
 2014               	.L__stack_usage = 1
1194:quantum/quantum.c ****     switch (number) {
 2015               		.loc 1 1194 0
 2016 0002 8A30      		cpi r24,lo8(10)
 2017 0004 00F4      		brsh .L179
 2018 0006 8130      		cpi r24,lo8(1)
 2019 0008 00F0      		brlo .L183
1195:quantum/quantum.c ****         case 0:
1196:quantum/quantum.c ****             register_code(KC_0);
1197:quantum/quantum.c ****             unregister_code(KC_0);
1198:quantum/quantum.c ****             break;
1199:quantum/quantum.c ****         case 1 ... 9:
1200:quantum/quantum.c ****             register_code(KC_1 + (number - 1));
 2020               		.loc 1 1200 0
 2021 000a CDE1      		ldi r28,lo8(29)
 2022               	.L186:
1201:quantum/quantum.c ****             unregister_code(KC_1 + (number - 1));
1202:quantum/quantum.c ****             break;
1203:quantum/quantum.c ****         case 0xA ... 0xF:
1204:quantum/quantum.c ****             register_code(KC_A + (number - 0xA));
 2023               		.loc 1 1204 0
 2024 000c C80F      		add r28,r24
 2025 000e 8C2F      		mov r24,r28
 2026               	.LVL201:
 2027 0010 0E94 0000 		call register_code
 2028               	.LVL202:
1205:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 2029               		.loc 1 1205 0
 2030 0014 8C2F      		mov r24,r28
 2031 0016 00C0      		rjmp .L185
 2032               	.LVL203:
 2033               	.L179:
1204:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 2034               		.loc 1 1204 0
 2035 0018 CAEF      		ldi r28,lo8(-6)
1194:quantum/quantum.c ****         case 0:
 2036               		.loc 1 1194 0
 2037 001a 8031      		cpi r24,lo8(16)
 2038 001c 00F0      		brlo .L186
 2039               	/* epilogue start */
1206:quantum/quantum.c ****             break;
1207:quantum/quantum.c ****     }
1208:quantum/quantum.c **** }
 2040               		.loc 1 1208 0
 2041 001e CF91      		pop r28
 2042 0020 0895      		ret
 2043               	.L183:
1196:quantum/quantum.c ****             unregister_code(KC_0);
 2044               		.loc 1 1196 0
 2045 0022 87E2      		ldi r24,lo8(39)
 2046               	.LVL204:
 2047 0024 0E94 0000 		call register_code
 2048               	.LVL205:
1197:quantum/quantum.c ****             break;
 2049               		.loc 1 1197 0
 2050 0028 87E2      		ldi r24,lo8(39)
 2051               	.L185:
 2052               	/* epilogue start */
 2053               		.loc 1 1208 0
 2054 002a CF91      		pop r28
1205:quantum/quantum.c ****             break;
 2055               		.loc 1 1205 0
 2056 002c 0C94 0000 		jmp unregister_code
 2057               	.LVL206:
 2058               		.cfi_endproc
 2059               	.LFE56:
 2061               		.section	.text.send_byte,"ax",@progbits
 2062               	.global	send_byte
 2064               	send_byte:
 2065               	.LFB55:
1187:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 2066               		.loc 1 1187 0
 2067               		.cfi_startproc
 2068               	.LVL207:
 2069 0000 CF93      		push r28
 2070               	.LCFI39:
 2071               		.cfi_def_cfa_offset 3
 2072               		.cfi_offset 28, -2
 2073               	/* prologue: function */
 2074               	/* frame size = 0 */
 2075               	/* stack size = 1 */
 2076               	.L__stack_usage = 1
 2077 0002 C82F      		mov r28,r24
 2078               	.LVL208:
1189:quantum/quantum.c ****     send_nibble(number & 0xF);
 2079               		.loc 1 1189 0
 2080 0004 8295      		swap r24
 2081               	.LVL209:
 2082 0006 8F70      		andi r24,lo8(15)
 2083 0008 0E94 0000 		call send_nibble
 2084               	.LVL210:
1190:quantum/quantum.c **** }
 2085               		.loc 1 1190 0
 2086 000c 8C2F      		mov r24,r28
 2087 000e 8F70      		andi r24,lo8(15)
 2088               	/* epilogue start */
1191:quantum/quantum.c **** 
 2089               		.loc 1 1191 0
 2090 0010 CF91      		pop r28
 2091               	.LVL211:
1190:quantum/quantum.c **** }
 2092               		.loc 1 1190 0
 2093 0012 0C94 0000 		jmp send_nibble
 2094               	.LVL212:
 2095               		.cfi_endproc
 2096               	.LFE55:
 2098               		.section	.text.send_word,"ax",@progbits
 2099               	.global	send_word
 2101               	send_word:
 2102               	.LFB54:
1181:quantum/quantum.c ****     uint8_t byte = number >> 8;
 2103               		.loc 1 1181 0
 2104               		.cfi_startproc
 2105               	.LVL213:
 2106 0000 CF93      		push r28
 2107               	.LCFI40:
 2108               		.cfi_def_cfa_offset 3
 2109               		.cfi_offset 28, -2
 2110               	/* prologue: function */
 2111               	/* frame size = 0 */
 2112               	/* stack size = 1 */
 2113               	.L__stack_usage = 1
 2114 0002 C82F      		mov r28,r24
 2115               	.LVL214:
1183:quantum/quantum.c ****     send_byte(number & 0xFF);
 2116               		.loc 1 1183 0
 2117 0004 892F      		mov r24,r25
 2118               	.LVL215:
 2119 0006 0E94 0000 		call send_byte
 2120               	.LVL216:
1184:quantum/quantum.c **** }
 2121               		.loc 1 1184 0
 2122 000a 8C2F      		mov r24,r28
 2123               	/* epilogue start */
1185:quantum/quantum.c **** 
 2124               		.loc 1 1185 0
 2125 000c CF91      		pop r28
1184:quantum/quantum.c **** }
 2126               		.loc 1 1184 0
 2127 000e 0C94 0000 		jmp send_byte
 2128               	.LVL217:
 2129               		.cfi_endproc
 2130               	.LFE54:
 2132               		.section	.text.send_dword,"ax",@progbits
 2133               	.global	send_dword
 2135               	send_dword:
 2136               	.LFB53:
1175:quantum/quantum.c ****     uint16_t word = (number >> 16);
 2137               		.loc 1 1175 0
 2138               		.cfi_startproc
 2139               	.LVL218:
 2140 0000 CF92      		push r12
 2141               	.LCFI41:
 2142               		.cfi_def_cfa_offset 3
 2143               		.cfi_offset 12, -2
 2144 0002 DF92      		push r13
 2145               	.LCFI42:
 2146               		.cfi_def_cfa_offset 4
 2147               		.cfi_offset 13, -3
 2148 0004 EF92      		push r14
 2149               	.LCFI43:
 2150               		.cfi_def_cfa_offset 5
 2151               		.cfi_offset 14, -4
 2152 0006 FF92      		push r15
 2153               	.LCFI44:
 2154               		.cfi_def_cfa_offset 6
 2155               		.cfi_offset 15, -5
 2156               	/* prologue: function */
 2157               	/* frame size = 0 */
 2158               	/* stack size = 4 */
 2159               	.L__stack_usage = 4
 2160 0008 6B01      		movw r12,r22
1177:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
 2161               		.loc 1 1177 0
 2162 000a 0E94 0000 		call send_word
 2163               	.LVL219:
1178:quantum/quantum.c **** }
 2164               		.loc 1 1178 0
 2165 000e C601      		movw r24,r12
 2166               	/* epilogue start */
1179:quantum/quantum.c **** 
 2167               		.loc 1 1179 0
 2168 0010 FF90      		pop r15
 2169 0012 EF90      		pop r14
 2170 0014 DF90      		pop r13
 2171 0016 CF90      		pop r12
1178:quantum/quantum.c **** }
 2172               		.loc 1 1178 0
 2173 0018 0C94 0000 		jmp send_word
 2174               	.LVL220:
 2175               		.cfi_endproc
 2176               	.LFE53:
 2178               		.section	.text.hex_to_keycode,"ax",@progbits
 2179               		.weak	hex_to_keycode
 2181               	hex_to_keycode:
 2182               	.LFB57:
1209:quantum/quantum.c **** 
1210:quantum/quantum.c **** 
1211:quantum/quantum.c **** __attribute__((weak))
1212:quantum/quantum.c **** uint16_t hex_to_keycode(uint8_t hex)
1213:quantum/quantum.c **** {
 2183               		.loc 1 1213 0
 2184               		.cfi_startproc
 2185               	.LVL221:
 2186               	/* prologue: function */
 2187               	/* frame size = 0 */
 2188               	/* stack size = 0 */
 2189               	.L__stack_usage = 0
1214:quantum/quantum.c ****   hex = hex & 0xF;
 2190               		.loc 1 1214 0
 2191 0000 282F      		mov r18,r24
 2192 0002 2F70      		andi r18,lo8(15)
 2193               	.LVL222:
1215:quantum/quantum.c ****   if (hex == 0x0) {
 2194               		.loc 1 1215 0
 2195 0004 01F0      		breq .L193
 2196 0006 822F      		mov r24,r18
 2197 0008 90E0      		ldi r25,0
1216:quantum/quantum.c ****     return KC_0;
1217:quantum/quantum.c ****   } else if (hex < 0xA) {
 2198               		.loc 1 1217 0
 2199 000a 2A30      		cpi r18,lo8(10)
 2200 000c 00F4      		brsh .L192
1218:quantum/quantum.c ****     return KC_1 + (hex - 0x1);
 2201               		.loc 1 1218 0
 2202 000e 4D96      		adiw r24,29
 2203 0010 0895      		ret
 2204               	.L192:
1219:quantum/quantum.c ****   } else {
1220:quantum/quantum.c ****     return KC_A + (hex - 0xA);
 2205               		.loc 1 1220 0
 2206 0012 0697      		sbiw r24,6
 2207 0014 0895      		ret
 2208               	.L193:
1216:quantum/quantum.c ****   } else if (hex < 0xA) {
 2209               		.loc 1 1216 0
 2210 0016 87E2      		ldi r24,lo8(39)
 2211 0018 90E0      		ldi r25,0
 2212               	/* epilogue start */
1221:quantum/quantum.c ****   }
1222:quantum/quantum.c **** }
 2213               		.loc 1 1222 0
 2214 001a 0895      		ret
 2215               		.cfi_endproc
 2216               	.LFE57:
 2218               		.section	.text.api_send_unicode,"ax",@progbits
 2219               	.global	api_send_unicode
 2221               	api_send_unicode:
 2222               	.LFB58:
1223:quantum/quantum.c **** 
1224:quantum/quantum.c **** void api_send_unicode(uint32_t unicode) {
 2223               		.loc 1 1224 0
 2224               		.cfi_startproc
 2225               	.LVL223:
 2226               	/* prologue: function */
 2227               	/* frame size = 0 */
 2228               	/* stack size = 0 */
 2229               	.L__stack_usage = 0
 2230               	/* epilogue start */
1225:quantum/quantum.c **** #ifdef API_ENABLE
1226:quantum/quantum.c ****     uint8_t chunk[4];
1227:quantum/quantum.c ****     dword_to_bytes(unicode, chunk);
1228:quantum/quantum.c ****     MT_SEND_DATA(DT_UNICODE, chunk, 5);
1229:quantum/quantum.c **** #endif
1230:quantum/quantum.c **** }
 2231               		.loc 1 1230 0
 2232 0000 0895      		ret
 2233               		.cfi_endproc
 2234               	.LFE58:
 2236               		.section	.text.led_set_user,"ax",@progbits
 2237               		.weak	led_set_user
 2239               	led_set_user:
 2240               	.LFB59:
1231:quantum/quantum.c **** 
1232:quantum/quantum.c **** __attribute__ ((weak))
1233:quantum/quantum.c **** void led_set_user(uint8_t usb_led) {
 2241               		.loc 1 1233 0
 2242               		.cfi_startproc
 2243               	.LVL224:
 2244               	/* prologue: function */
 2245               	/* frame size = 0 */
 2246               	/* stack size = 0 */
 2247               	.L__stack_usage = 0
 2248               	/* epilogue start */
1234:quantum/quantum.c **** 
1235:quantum/quantum.c **** }
 2249               		.loc 1 1235 0
 2250 0000 0895      		ret
 2251               		.cfi_endproc
 2252               	.LFE59:
 2254               		.set	led_set_user.localalias.1,led_set_user
 2255               		.section	.text.backlight_set,"ax",@progbits
 2256               		.weak	backlight_set
 2258               	backlight_set:
 2259               	.LFB94:
 2260               		.cfi_startproc
 2261               	/* prologue: function */
 2262               	/* frame size = 0 */
 2263               	/* stack size = 0 */
 2264               	.L__stack_usage = 0
 2265               	/* epilogue start */
 2266 0000 0895      		ret
 2267               		.cfi_endproc
 2268               	.LFE94:
 2270               		.section	.text.led_set_kb,"ax",@progbits
 2271               		.weak	led_set_kb
 2273               	led_set_kb:
 2274               	.LFB60:
1236:quantum/quantum.c **** 
1237:quantum/quantum.c **** __attribute__ ((weak))
1238:quantum/quantum.c **** void led_set_kb(uint8_t usb_led) {
 2275               		.loc 1 1238 0
 2276               		.cfi_startproc
 2277               	.LVL225:
 2278               	/* prologue: function */
 2279               	/* frame size = 0 */
 2280               	/* stack size = 0 */
 2281               	.L__stack_usage = 0
1239:quantum/quantum.c ****     led_set_user(usb_led);
 2282               		.loc 1 1239 0
 2283 0000 0C94 0000 		jmp led_set_user
 2284               	.LVL226:
 2285               		.cfi_endproc
 2286               	.LFE60:
 2288               		.section	.text.led_init_ports,"ax",@progbits
 2289               		.weak	led_init_ports
 2291               	led_init_ports:
 2292               	.LFB86:
 2293               		.cfi_startproc
 2294               	/* prologue: function */
 2295               	/* frame size = 0 */
 2296               	/* stack size = 0 */
 2297               	.L__stack_usage = 0
 2298               	/* epilogue start */
 2299 0000 0895      		ret
 2300               		.cfi_endproc
 2301               	.LFE86:
 2303               		.section	.text.led_set,"ax",@progbits
 2304               		.weak	led_set
 2306               	led_set:
 2307               	.LFB62:
1240:quantum/quantum.c **** }
1241:quantum/quantum.c **** 
1242:quantum/quantum.c **** __attribute__ ((weak))
1243:quantum/quantum.c **** void led_init_ports(void)
1244:quantum/quantum.c **** {
1245:quantum/quantum.c **** 
1246:quantum/quantum.c **** }
1247:quantum/quantum.c **** 
1248:quantum/quantum.c **** __attribute__ ((weak))
1249:quantum/quantum.c **** void led_set(uint8_t usb_led)
1250:quantum/quantum.c **** {
 2308               		.loc 1 1250 0
 2309               		.cfi_startproc
 2310               	.LVL227:
 2311               	/* prologue: function */
 2312               	/* frame size = 0 */
 2313               	/* stack size = 0 */
 2314               	.L__stack_usage = 0
1251:quantum/quantum.c **** 
1252:quantum/quantum.c ****   // Example LED Code
1253:quantum/quantum.c ****   //
1254:quantum/quantum.c ****     // // Using PE6 Caps Lock LED
1255:quantum/quantum.c ****     // if (usb_led & (1<<USB_LED_CAPS_LOCK))
1256:quantum/quantum.c ****     // {
1257:quantum/quantum.c ****     //     // Output high.
1258:quantum/quantum.c ****     //     DDRE |= (1<<6);
1259:quantum/quantum.c ****     //     PORTE |= (1<<6);
1260:quantum/quantum.c ****     // }
1261:quantum/quantum.c ****     // else
1262:quantum/quantum.c ****     // {
1263:quantum/quantum.c ****     //     // Output low.
1264:quantum/quantum.c ****     //     DDRE &= ~(1<<6);
1265:quantum/quantum.c ****     //     PORTE &= ~(1<<6);
1266:quantum/quantum.c ****     // }
1267:quantum/quantum.c **** 
1268:quantum/quantum.c ****   led_set_kb(usb_led);
 2315               		.loc 1 1268 0
 2316 0000 0C94 0000 		jmp led_set_kb
 2317               	.LVL228:
 2318               		.cfi_endproc
 2319               	.LFE62:
 2321               		.section	.text.startup_user,"ax",@progbits
 2322               		.weak	startup_user
 2324               	startup_user:
 2325               	.LFB88:
 2326               		.cfi_startproc
 2327               	/* prologue: function */
 2328               	/* frame size = 0 */
 2329               	/* stack size = 0 */
 2330               	.L__stack_usage = 0
 2331               	/* epilogue start */
 2332 0000 0895      		ret
 2333               		.cfi_endproc
 2334               	.LFE88:
 2336               		.section	.text.shutdown_user,"ax",@progbits
 2337               		.weak	shutdown_user
 2339               	shutdown_user:
 2340               	.LFB90:
 2341               		.cfi_startproc
 2342               	/* prologue: function */
 2343               	/* frame size = 0 */
 2344               	/* stack size = 0 */
 2345               	.L__stack_usage = 0
 2346               	/* epilogue start */
 2347 0000 0895      		ret
 2348               		.cfi_endproc
 2349               	.LFE90:
 2351               	.global	rgb_matrix_task_counter
 2352               		.section	.bss.rgb_matrix_task_counter,"aw",@nobits
 2355               	rgb_matrix_task_counter:
 2356 0000 00        		.zero	1
 2357               		.weak	ascii_to_keycode_lut
 2358               		.section	.progmem.data.ascii_to_keycode_lut,"a",@progbits
 2361               	ascii_to_keycode_lut:
 2362 0000 00        		.byte	0
 2363 0001 00        		.byte	0
 2364 0002 00        		.byte	0
 2365 0003 00        		.byte	0
 2366 0004 00        		.byte	0
 2367 0005 00        		.byte	0
 2368 0006 00        		.byte	0
 2369 0007 00        		.byte	0
 2370 0008 2A        		.byte	42
 2371 0009 2B        		.byte	43
 2372 000a 28        		.byte	40
 2373 000b 00        		.byte	0
 2374 000c 00        		.byte	0
 2375 000d 00        		.byte	0
 2376 000e 00        		.byte	0
 2377 000f 00        		.byte	0
 2378 0010 00        		.byte	0
 2379 0011 00        		.byte	0
 2380 0012 00        		.byte	0
 2381 0013 00        		.byte	0
 2382 0014 00        		.byte	0
 2383 0015 00        		.byte	0
 2384 0016 00        		.byte	0
 2385 0017 00        		.byte	0
 2386 0018 00        		.byte	0
 2387 0019 00        		.byte	0
 2388 001a 00        		.byte	0
 2389 001b 29        		.byte	41
 2390 001c 00        		.byte	0
 2391 001d 00        		.byte	0
 2392 001e 00        		.byte	0
 2393 001f 00        		.byte	0
 2394 0020 2C        		.byte	44
 2395 0021 1E        		.byte	30
 2396 0022 34        		.byte	52
 2397 0023 20        		.byte	32
 2398 0024 21        		.byte	33
 2399 0025 22        		.byte	34
 2400 0026 24        		.byte	36
 2401 0027 34        		.byte	52
 2402 0028 26        		.byte	38
 2403 0029 27        		.byte	39
 2404 002a 25        		.byte	37
 2405 002b 2E        		.byte	46
 2406 002c 36        		.byte	54
 2407 002d 2D        		.byte	45
 2408 002e 37        		.byte	55
 2409 002f 38        		.byte	56
 2410 0030 27        		.byte	39
 2411 0031 1E        		.byte	30
 2412 0032 1F        		.byte	31
 2413 0033 20        		.byte	32
 2414 0034 21        		.byte	33
 2415 0035 22        		.byte	34
 2416 0036 23        		.byte	35
 2417 0037 24        		.byte	36
 2418 0038 25        		.byte	37
 2419 0039 26        		.byte	38
 2420 003a 33        		.byte	51
 2421 003b 33        		.byte	51
 2422 003c 36        		.byte	54
 2423 003d 2E        		.byte	46
 2424 003e 37        		.byte	55
 2425 003f 38        		.byte	56
 2426 0040 1F        		.byte	31
 2427 0041 04        		.byte	4
 2428 0042 05        		.byte	5
 2429 0043 06        		.byte	6
 2430 0044 07        		.byte	7
 2431 0045 08        		.byte	8
 2432 0046 09        		.byte	9
 2433 0047 0A        		.byte	10
 2434 0048 0B        		.byte	11
 2435 0049 0C        		.byte	12
 2436 004a 0D        		.byte	13
 2437 004b 0E        		.byte	14
 2438 004c 0F        		.byte	15
 2439 004d 10        		.byte	16
 2440 004e 11        		.byte	17
 2441 004f 12        		.byte	18
 2442 0050 13        		.byte	19
 2443 0051 14        		.byte	20
 2444 0052 15        		.byte	21
 2445 0053 16        		.byte	22
 2446 0054 17        		.byte	23
 2447 0055 18        		.byte	24
 2448 0056 19        		.byte	25
 2449 0057 1A        		.byte	26
 2450 0058 1B        		.byte	27
 2451 0059 1C        		.byte	28
 2452 005a 1D        		.byte	29
 2453 005b 2F        		.byte	47
 2454 005c 31        		.byte	49
 2455 005d 30        		.byte	48
 2456 005e 23        		.byte	35
 2457 005f 2D        		.byte	45
 2458 0060 35        		.byte	53
 2459 0061 04        		.byte	4
 2460 0062 05        		.byte	5
 2461 0063 06        		.byte	6
 2462 0064 07        		.byte	7
 2463 0065 08        		.byte	8
 2464 0066 09        		.byte	9
 2465 0067 0A        		.byte	10
 2466 0068 0B        		.byte	11
 2467 0069 0C        		.byte	12
 2468 006a 0D        		.byte	13
 2469 006b 0E        		.byte	14
 2470 006c 0F        		.byte	15
 2471 006d 10        		.byte	16
 2472 006e 11        		.byte	17
 2473 006f 12        		.byte	18
 2474 0070 13        		.byte	19
 2475 0071 14        		.byte	20
 2476 0072 15        		.byte	21
 2477 0073 16        		.byte	22
 2478 0074 17        		.byte	23
 2479 0075 18        		.byte	24
 2480 0076 19        		.byte	25
 2481 0077 1A        		.byte	26
 2482 0078 1B        		.byte	27
 2483 0079 1C        		.byte	28
 2484 007a 1D        		.byte	29
 2485 007b 2F        		.byte	47
 2486 007c 31        		.byte	49
 2487 007d 30        		.byte	48
 2488 007e 35        		.byte	53
 2489 007f 4C        		.byte	76
 2490               		.weak	ascii_to_shift_lut
 2491               		.section	.progmem.data.ascii_to_shift_lut,"a",@progbits
 2494               	ascii_to_shift_lut:
 2495 0000 00        		.byte	0
 2496 0001 00        		.byte	0
 2497 0002 00        		.byte	0
 2498 0003 00        		.byte	0
 2499 0004 00        		.byte	0
 2500 0005 00        		.byte	0
 2501 0006 00        		.byte	0
 2502 0007 00        		.byte	0
 2503 0008 00        		.byte	0
 2504 0009 00        		.byte	0
 2505 000a 00        		.byte	0
 2506 000b 00        		.byte	0
 2507 000c 00        		.byte	0
 2508 000d 00        		.byte	0
 2509 000e 00        		.byte	0
 2510 000f 00        		.byte	0
 2511 0010 00        		.byte	0
 2512 0011 00        		.byte	0
 2513 0012 00        		.byte	0
 2514 0013 00        		.byte	0
 2515 0014 00        		.byte	0
 2516 0015 00        		.byte	0
 2517 0016 00        		.byte	0
 2518 0017 00        		.byte	0
 2519 0018 00        		.byte	0
 2520 0019 00        		.byte	0
 2521 001a 00        		.byte	0
 2522 001b 00        		.byte	0
 2523 001c 00        		.byte	0
 2524 001d 00        		.byte	0
 2525 001e 00        		.byte	0
 2526 001f 00        		.byte	0
 2527 0020 00        		.byte	0
 2528 0021 01        		.byte	1
 2529 0022 01        		.byte	1
 2530 0023 01        		.byte	1
 2531 0024 01        		.byte	1
 2532 0025 01        		.byte	1
 2533 0026 01        		.byte	1
 2534 0027 00        		.byte	0
 2535 0028 01        		.byte	1
 2536 0029 01        		.byte	1
 2537 002a 01        		.byte	1
 2538 002b 01        		.byte	1
 2539 002c 00        		.byte	0
 2540 002d 00        		.byte	0
 2541 002e 00        		.byte	0
 2542 002f 00        		.byte	0
 2543 0030 00        		.byte	0
 2544 0031 00        		.byte	0
 2545 0032 00        		.byte	0
 2546 0033 00        		.byte	0
 2547 0034 00        		.byte	0
 2548 0035 00        		.byte	0
 2549 0036 00        		.byte	0
 2550 0037 00        		.byte	0
 2551 0038 00        		.byte	0
 2552 0039 00        		.byte	0
 2553 003a 01        		.byte	1
 2554 003b 00        		.byte	0
 2555 003c 01        		.byte	1
 2556 003d 00        		.byte	0
 2557 003e 01        		.byte	1
 2558 003f 01        		.byte	1
 2559 0040 01        		.byte	1
 2560 0041 01        		.byte	1
 2561 0042 01        		.byte	1
 2562 0043 01        		.byte	1
 2563 0044 01        		.byte	1
 2564 0045 01        		.byte	1
 2565 0046 01        		.byte	1
 2566 0047 01        		.byte	1
 2567 0048 01        		.byte	1
 2568 0049 01        		.byte	1
 2569 004a 01        		.byte	1
 2570 004b 01        		.byte	1
 2571 004c 01        		.byte	1
 2572 004d 01        		.byte	1
 2573 004e 01        		.byte	1
 2574 004f 01        		.byte	1
 2575 0050 01        		.byte	1
 2576 0051 01        		.byte	1
 2577 0052 01        		.byte	1
 2578 0053 01        		.byte	1
 2579 0054 01        		.byte	1
 2580 0055 01        		.byte	1
 2581 0056 01        		.byte	1
 2582 0057 01        		.byte	1
 2583 0058 01        		.byte	1
 2584 0059 01        		.byte	1
 2585 005a 01        		.byte	1
 2586 005b 00        		.byte	0
 2587 005c 00        		.byte	0
 2588 005d 00        		.byte	0
 2589 005e 01        		.byte	1
 2590 005f 01        		.byte	1
 2591 0060 00        		.byte	0
 2592 0061 00        		.byte	0
 2593 0062 00        		.byte	0
 2594 0063 00        		.byte	0
 2595 0064 00        		.byte	0
 2596 0065 00        		.byte	0
 2597 0066 00        		.byte	0
 2598 0067 00        		.byte	0
 2599 0068 00        		.byte	0
 2600 0069 00        		.byte	0
 2601 006a 00        		.byte	0
 2602 006b 00        		.byte	0
 2603 006c 00        		.byte	0
 2604 006d 00        		.byte	0
 2605 006e 00        		.byte	0
 2606 006f 00        		.byte	0
 2607 0070 00        		.byte	0
 2608 0071 00        		.byte	0
 2609 0072 00        		.byte	0
 2610 0073 00        		.byte	0
 2611 0074 00        		.byte	0
 2612 0075 00        		.byte	0
 2613 0076 00        		.byte	0
 2614 0077 00        		.byte	0
 2615 0078 00        		.byte	0
 2616 0079 00        		.byte	0
 2617 007a 00        		.byte	0
 2618 007b 01        		.byte	1
 2619 007c 01        		.byte	1
 2620 007d 01        		.byte	1
 2621 007e 01        		.byte	1
 2622 007f 00        		.byte	0
 2623               		.section	.bss.grave_esc_was_shifted,"aw",@nobits
 2626               	grave_esc_was_shifted:
 2627 0000 00        		.zero	1
 2628               		.section	.bss.scs_timer,"aw",@nobits
 2631               	scs_timer:
 2632 0000 0000 0000 		.zero	4
 2633               		.section	.bss.shift_interrupted,"aw",@nobits
 2636               	shift_interrupted:
 2637 0000 0000      		.zero	2
 2638               		.text
 2639               	.Letext0:
 2640               		.file 4 "/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/stdint.h"
 2641               		.file 5 "/usr/local/Cellar/avr-gcc@7/7.3.0/lib/avr-gcc/7/gcc/avr/7.3.0/include/stddef.h"
 2642               		.file 6 "./tmk_core/common/keyboard.h"
 2643               		.file 7 "./tmk_core/common/action.h"
 2644               		.file 8 "./tmk_core/common/report.h"
 2645               		.file 9 "./tmk_core/common/host.h"
 2646               		.file 10 "./tmk_core/common/debug.h"
 2647               		.file 11 "quantum/keycode_config.h"
 2648               		.file 12 "./tmk_core/common/keycode.h"
 2649               		.file 13 "quantum/quantum_keycodes.h"
 2650               		.file 14 "quantum/keymap.h"
 2651               		.file 15 "./tmk_core/common/action_layer.h"
 2652               		.file 16 "./tmk_core/common/timer.h"
 2653               		.file 17 "./tmk_core/common/action_util.h"
 2654               		.file 18 "/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/stdlib.h"
 2655               		.file 19 "./quantum/process_keycode/process_tap_dance.h"
 2656               		.file 20 "quantum/quantum.h"
 2657               		.file 21 "./tmk_core/protocol/lufa/outputselect.h"
 2658               		.file 22 "./tmk_core/common/backlight.h"
 2659               		.file 23 "./tmk_core/common/eeconfig.h"
 2660               		.file 24 "./quantum/process_keycode/process_leader.h"
 2661               		.file 25 "./tmk_core/common/bootloader.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 quantum.c
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:4      *ABS*:000000000000003f __SREG__
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:12     .text.do_code16:0000000000000000 do_code16
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:132    .text.qk_register_weak_mods:0000000000000000 qk_register_weak_mods
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:162    .text.qk_register_mods:0000000000000000 qk_register_mods
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:175    .text.qk_unregister_weak_mods:0000000000000000 qk_unregister_weak_mods
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:205    .text.qk_unregister_mods:0000000000000000 qk_unregister_mods
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:219    .text.rgblight_toggle:0000000000000000 rgblight_toggle
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:237    .text.rgblight_step:0000000000000000 rgblight_step
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:252    .text.rgblight_step_reverse:0000000000000000 rgblight_step_reverse
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:267    .text.rgblight_increase_hue:0000000000000000 rgblight_increase_hue
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:282    .text.rgblight_decrease_hue:0000000000000000 rgblight_decrease_hue
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:297    .text.rgblight_increase_sat:0000000000000000 rgblight_increase_sat
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:312    .text.rgblight_decrease_sat:0000000000000000 rgblight_decrease_sat
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:327    .text.rgblight_increase_val:0000000000000000 rgblight_increase_val
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:342    .text.rgblight_decrease_val:0000000000000000 rgblight_decrease_val
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:357    .text.rgblight_increase_speed:0000000000000000 rgblight_increase_speed
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:372    .text.rgblight_decrease_speed:0000000000000000 rgblight_decrease_speed
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:387    .text.register_code16:0000000000000000 register_code16
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:443    .text.unregister_code16:0000000000000000 unregister_code16
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:497    .text.process_action_kb:0000000000000000 process_action_kb
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:517    .text.process_record_user:0000000000000000 process_record_user
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:537    .text.process_record_kb:0000000000000000 process_record_kb
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:555    .text.reset_keyboard:0000000000000000 reset_keyboard
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:596    .text.process_record_quantum:0000000000000000 process_record_quantum
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:2636   .bss.shift_interrupted:0000000000000000 shift_interrupted
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:2631   .bss.scs_timer:0000000000000000 scs_timer
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:2626   .bss.grave_esc_was_shifted:0000000000000000 grave_esc_was_shifted
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:1134   .text.send_char:0000000000000000 send_char
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:2361   .progmem.data.ascii_to_keycode_lut:0000000000000000 ascii_to_keycode_lut
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:2494   .progmem.data.ascii_to_shift_lut:0000000000000000 ascii_to_shift_lut
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:1218   .text.send_string_with_delay:0000000000000000 send_string_with_delay
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:1363   .text.send_string:0000000000000000 send_string
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:1382   .text.send_string_with_delay_P:0000000000000000 send_string_with_delay_P
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:1560   .text.send_string_P:0000000000000000 send_string_P
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:1579   .text.set_single_persistent_default_layer:0000000000000000 set_single_persistent_default_layer
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:1627   .text.update_tri_layer_state:0000000000000000 update_tri_layer_state
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:1784   .text.update_tri_layer:0000000000000000 update_tri_layer
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:1823   .text.tap_random_base64:0000000000000000 tap_random_base64
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:1949   .text.matrix_init_quantum:0000000000000000 matrix_init_quantum
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:1966   .text.matrix_scan_quantum:0000000000000000 matrix_scan_quantum
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:1986   .text.backlight_init_ports:0000000000000000 backlight_init_ports
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:2001   .text.send_nibble:0000000000000000 send_nibble
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:2064   .text.send_byte:0000000000000000 send_byte
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:2101   .text.send_word:0000000000000000 send_word
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:2135   .text.send_dword:0000000000000000 send_dword
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:2181   .text.hex_to_keycode:0000000000000000 hex_to_keycode
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:2221   .text.api_send_unicode:0000000000000000 api_send_unicode
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:2239   .text.led_set_user:0000000000000000 led_set_user
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:2239   .text.led_set_user:0000000000000000 led_set_user.localalias.1
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:2258   .text.backlight_set:0000000000000000 backlight_set
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:2273   .text.led_set_kb:0000000000000000 led_set_kb
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:2291   .text.led_init_ports:0000000000000000 led_init_ports
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:2306   .text.led_set:0000000000000000 led_set
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:2324   .text.startup_user:0000000000000000 startup_user
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:2339   .text.shutdown_user:0000000000000000 shutdown_user
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//ccH3acyk.s:2355   .bss.rgb_matrix_task_counter:0000000000000000 rgb_matrix_task_counter

UNDEFINED SYMBOLS
add_weak_mods
send_keyboard_report
del_weak_mods
register_code
unregister_code
clear_keyboard
bootloader_jump
layer_switch_get_layer
keymap_key_to_keycode
preprocess_tap_dance
process_tap_dance
process_leader
timer_read
debug_config
set_output
eeconfig_is_enabled
eeconfig_init
eeconfig_read_keymap
keymap_config
__tablejump2__
eeconfig_update_keymap
register_mods
timer_elapsed
unregister_mods
get_mods
add_key
del_key
eeconfig_update_default_layer
default_layer_set
layer_state
layer_state_set
matrix_init_kb
matrix_scan_tap_dance
matrix_scan_kb
__do_clear_bss
