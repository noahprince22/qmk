   1               		.file	"process_tap_dance.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.process_tap_dance_action_on_dance_finished.part.0,"ax",@progbits
  12               	process_tap_dance_action_on_dance_finished.part.0:
  13               	.LFB42:
  14               		.file 1 "quantum/process_keycode/process_tap_dance.c"
   1:quantum/process_keycode/process_tap_dance.c **** /* Copyright 2016 Jack Humbert
   2:quantum/process_keycode/process_tap_dance.c ****  *
   3:quantum/process_keycode/process_tap_dance.c ****  * This program is free software: you can redistribute it and/or modify
   4:quantum/process_keycode/process_tap_dance.c ****  * it under the terms of the GNU General Public License as published by
   5:quantum/process_keycode/process_tap_dance.c ****  * the Free Software Foundation, either version 2 of the License, or
   6:quantum/process_keycode/process_tap_dance.c ****  * (at your option) any later version.
   7:quantum/process_keycode/process_tap_dance.c ****  *
   8:quantum/process_keycode/process_tap_dance.c ****  * This program is distributed in the hope that it will be useful,
   9:quantum/process_keycode/process_tap_dance.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:quantum/process_keycode/process_tap_dance.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:quantum/process_keycode/process_tap_dance.c ****  * GNU General Public License for more details.
  12:quantum/process_keycode/process_tap_dance.c ****  *
  13:quantum/process_keycode/process_tap_dance.c ****  * You should have received a copy of the GNU General Public License
  14:quantum/process_keycode/process_tap_dance.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15:quantum/process_keycode/process_tap_dance.c ****  */
  16:quantum/process_keycode/process_tap_dance.c **** #include "quantum.h"
  17:quantum/process_keycode/process_tap_dance.c **** #include "action_tapping.h"
  18:quantum/process_keycode/process_tap_dance.c **** 
  19:quantum/process_keycode/process_tap_dance.c **** uint8_t get_oneshot_mods(void);
  20:quantum/process_keycode/process_tap_dance.c **** 
  21:quantum/process_keycode/process_tap_dance.c **** static uint16_t last_td;
  22:quantum/process_keycode/process_tap_dance.c **** static int8_t highest_td = -1;
  23:quantum/process_keycode/process_tap_dance.c **** 
  24:quantum/process_keycode/process_tap_dance.c **** void qk_tap_dance_pair_on_each_tap (qk_tap_dance_state_t *state, void *user_data) {
  25:quantum/process_keycode/process_tap_dance.c ****   qk_tap_dance_pair_t *pair = (qk_tap_dance_pair_t *)user_data;
  26:quantum/process_keycode/process_tap_dance.c **** 
  27:quantum/process_keycode/process_tap_dance.c ****   if (state->count == 2) {
  28:quantum/process_keycode/process_tap_dance.c ****     register_code16 (pair->kc2);
  29:quantum/process_keycode/process_tap_dance.c ****     state->finished = true;
  30:quantum/process_keycode/process_tap_dance.c ****   }
  31:quantum/process_keycode/process_tap_dance.c **** }
  32:quantum/process_keycode/process_tap_dance.c **** 
  33:quantum/process_keycode/process_tap_dance.c **** void qk_tap_dance_pair_finished (qk_tap_dance_state_t *state, void *user_data) {
  34:quantum/process_keycode/process_tap_dance.c ****   qk_tap_dance_pair_t *pair = (qk_tap_dance_pair_t *)user_data;
  35:quantum/process_keycode/process_tap_dance.c **** 
  36:quantum/process_keycode/process_tap_dance.c ****   if (state->count == 1) {
  37:quantum/process_keycode/process_tap_dance.c ****     register_code16 (pair->kc1);
  38:quantum/process_keycode/process_tap_dance.c ****   } else if (state->count == 2) {
  39:quantum/process_keycode/process_tap_dance.c ****     register_code16 (pair->kc2);
  40:quantum/process_keycode/process_tap_dance.c ****   }
  41:quantum/process_keycode/process_tap_dance.c **** }
  42:quantum/process_keycode/process_tap_dance.c **** 
  43:quantum/process_keycode/process_tap_dance.c **** void qk_tap_dance_pair_reset (qk_tap_dance_state_t *state, void *user_data) {
  44:quantum/process_keycode/process_tap_dance.c ****   qk_tap_dance_pair_t *pair = (qk_tap_dance_pair_t *)user_data;
  45:quantum/process_keycode/process_tap_dance.c **** 
  46:quantum/process_keycode/process_tap_dance.c ****   if (state->count == 1) {
  47:quantum/process_keycode/process_tap_dance.c ****     unregister_code16 (pair->kc1);
  48:quantum/process_keycode/process_tap_dance.c ****   } else if (state->count == 2) {
  49:quantum/process_keycode/process_tap_dance.c ****     unregister_code16 (pair->kc2);
  50:quantum/process_keycode/process_tap_dance.c ****   }
  51:quantum/process_keycode/process_tap_dance.c **** }
  52:quantum/process_keycode/process_tap_dance.c **** 
  53:quantum/process_keycode/process_tap_dance.c **** void qk_tap_dance_dual_role_on_each_tap (qk_tap_dance_state_t *state, void *user_data) {
  54:quantum/process_keycode/process_tap_dance.c ****   qk_tap_dance_dual_role_t *pair = (qk_tap_dance_dual_role_t *)user_data;
  55:quantum/process_keycode/process_tap_dance.c **** 
  56:quantum/process_keycode/process_tap_dance.c ****   if (state->count == 2) {
  57:quantum/process_keycode/process_tap_dance.c ****     layer_move (pair->layer);
  58:quantum/process_keycode/process_tap_dance.c ****     state->finished = true;
  59:quantum/process_keycode/process_tap_dance.c ****   }
  60:quantum/process_keycode/process_tap_dance.c **** }
  61:quantum/process_keycode/process_tap_dance.c **** 
  62:quantum/process_keycode/process_tap_dance.c **** void qk_tap_dance_dual_role_finished (qk_tap_dance_state_t *state, void *user_data) {
  63:quantum/process_keycode/process_tap_dance.c ****   qk_tap_dance_dual_role_t *pair = (qk_tap_dance_dual_role_t *)user_data;
  64:quantum/process_keycode/process_tap_dance.c **** 
  65:quantum/process_keycode/process_tap_dance.c ****   if (state->count == 1) {
  66:quantum/process_keycode/process_tap_dance.c ****     register_code16 (pair->kc);
  67:quantum/process_keycode/process_tap_dance.c ****   } else if (state->count == 2) {
  68:quantum/process_keycode/process_tap_dance.c ****     layer_move (pair->layer);
  69:quantum/process_keycode/process_tap_dance.c ****   }
  70:quantum/process_keycode/process_tap_dance.c **** }
  71:quantum/process_keycode/process_tap_dance.c **** 
  72:quantum/process_keycode/process_tap_dance.c **** void qk_tap_dance_dual_role_reset (qk_tap_dance_state_t *state, void *user_data) {
  73:quantum/process_keycode/process_tap_dance.c ****   qk_tap_dance_dual_role_t *pair = (qk_tap_dance_dual_role_t *)user_data;
  74:quantum/process_keycode/process_tap_dance.c **** 
  75:quantum/process_keycode/process_tap_dance.c ****   if (state->count == 1) {
  76:quantum/process_keycode/process_tap_dance.c ****     unregister_code16 (pair->kc);
  77:quantum/process_keycode/process_tap_dance.c ****   }
  78:quantum/process_keycode/process_tap_dance.c **** }
  79:quantum/process_keycode/process_tap_dance.c **** 
  80:quantum/process_keycode/process_tap_dance.c **** static inline void _process_tap_dance_action_fn (qk_tap_dance_state_t *state,
  81:quantum/process_keycode/process_tap_dance.c ****                                                  void *user_data,
  82:quantum/process_keycode/process_tap_dance.c ****                                                  qk_tap_dance_user_fn_t fn)
  83:quantum/process_keycode/process_tap_dance.c **** {
  84:quantum/process_keycode/process_tap_dance.c ****   if (fn) {
  85:quantum/process_keycode/process_tap_dance.c ****     fn(state, user_data);
  86:quantum/process_keycode/process_tap_dance.c ****   }
  87:quantum/process_keycode/process_tap_dance.c **** }
  88:quantum/process_keycode/process_tap_dance.c **** 
  89:quantum/process_keycode/process_tap_dance.c **** static inline void process_tap_dance_action_on_each_tap (qk_tap_dance_action_t *action)
  90:quantum/process_keycode/process_tap_dance.c **** {
  91:quantum/process_keycode/process_tap_dance.c ****   _process_tap_dance_action_fn (&action->state, action->user_data, action->fn.on_each_tap);
  92:quantum/process_keycode/process_tap_dance.c **** }
  93:quantum/process_keycode/process_tap_dance.c **** 
  94:quantum/process_keycode/process_tap_dance.c **** static inline void process_tap_dance_action_on_dance_finished (qk_tap_dance_action_t *action)
  15               		.loc 1 94 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 CF93      		push r28
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22 0002 DF93      		push r29
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 29, -3
  26               	/* prologue: function */
  27               	/* frame size = 0 */
  28               	/* stack size = 2 */
  29               	.L__stack_usage = 2
  30 0004 EC01      		movw r28,r24
  95:quantum/process_keycode/process_tap_dance.c **** {
  96:quantum/process_keycode/process_tap_dance.c ****   if (action->state.finished)
  97:quantum/process_keycode/process_tap_dance.c ****     return;
  98:quantum/process_keycode/process_tap_dance.c ****   action->state.finished = true;
  31               		.loc 1 98 0
  32 0006 81E0      		ldi r24,lo8(1)
  33               	.LVL1:
  34 0008 8F87      		std Y+15,r24
  99:quantum/process_keycode/process_tap_dance.c ****   add_mods(action->state.oneshot_mods);
  35               		.loc 1 99 0
  36 000a 8F81      		ldd r24,Y+7
  37 000c 0E94 0000 		call add_mods
  38               	.LVL2:
 100:quantum/process_keycode/process_tap_dance.c ****   add_weak_mods(action->state.weak_mods);
  39               		.loc 1 100 0
  40 0010 8885      		ldd r24,Y+8
  41 0012 0E94 0000 		call add_weak_mods
  42               	.LVL3:
 101:quantum/process_keycode/process_tap_dance.c ****   send_keyboard_report();
  43               		.loc 1 101 0
  44 0016 0E94 0000 		call send_keyboard_report
  45               	.LVL4:
 102:quantum/process_keycode/process_tap_dance.c ****   _process_tap_dance_action_fn (&action->state, action->user_data, action->fn.on_dance_finished);
  46               		.loc 1 102 0
  47 001a EA81      		ldd r30,Y+2
  48 001c FB81      		ldd r31,Y+3
  49 001e CE01      		movw r24,r28
  50 0020 0696      		adiw r24,6
  51               	.LVL5:
  52               	.LBB4:
  53               	.LBB5:
  84:quantum/process_keycode/process_tap_dance.c ****     fn(state, user_data);
  54               		.loc 1 84 0
  55 0022 3097      		sbiw r30,0
  56 0024 01F0      		breq .L1
  85:quantum/process_keycode/process_tap_dance.c ****   }
  57               		.loc 1 85 0
  58 0026 6A89      		ldd r22,Y+18
  59 0028 7B89      		ldd r23,Y+19
  60               	/* epilogue start */
  61               	.LBE5:
  62               	.LBE4:
 103:quantum/process_keycode/process_tap_dance.c **** }
  63               		.loc 1 103 0
  64 002a DF91      		pop r29
  65 002c CF91      		pop r28
  66               	.LVL6:
  67               	.LBB7:
  68               	.LBB6:
  85:quantum/process_keycode/process_tap_dance.c ****   }
  69               		.loc 1 85 0
  70 002e 0994      		ijmp
  71               	.LVL7:
  72               	.L1:
  73               	/* epilogue start */
  74               	.LBE6:
  75               	.LBE7:
  76               		.loc 1 103 0
  77 0030 DF91      		pop r29
  78 0032 CF91      		pop r28
  79               	.LVL8:
  80 0034 0895      		ret
  81               		.cfi_endproc
  82               	.LFE42:
  84               		.section	.text.rgblight_toggle,"ax",@progbits
  85               		.weak	rgblight_toggle
  87               	rgblight_toggle:
  88               	.LFB62:
  89               		.cfi_startproc
  90               	/* prologue: function */
  91               	/* frame size = 0 */
  92               	/* stack size = 0 */
  93               	.L__stack_usage = 0
  94 0000 0895      		ret
  95               		.cfi_endproc
  96               	.LFE62:
  98               		.section	.text.rgblight_step,"ax",@progbits
  99               		.weak	rgblight_step
 101               	rgblight_step:
 102               	.LFB60:
 103               		.cfi_startproc
 104               	/* prologue: function */
 105               	/* frame size = 0 */
 106               	/* stack size = 0 */
 107               	.L__stack_usage = 0
 108 0000 0895      		ret
 109               		.cfi_endproc
 110               	.LFE60:
 112               		.section	.text.rgblight_step_reverse,"ax",@progbits
 113               		.weak	rgblight_step_reverse
 115               	rgblight_step_reverse:
 116               	.LFB58:
 117               		.cfi_startproc
 118               	/* prologue: function */
 119               	/* frame size = 0 */
 120               	/* stack size = 0 */
 121               	.L__stack_usage = 0
 122 0000 0895      		ret
 123               		.cfi_endproc
 124               	.LFE58:
 126               		.section	.text.rgblight_increase_hue,"ax",@progbits
 127               		.weak	rgblight_increase_hue
 129               	rgblight_increase_hue:
 130               	.LFB56:
 131               		.cfi_startproc
 132               	/* prologue: function */
 133               	/* frame size = 0 */
 134               	/* stack size = 0 */
 135               	.L__stack_usage = 0
 136 0000 0895      		ret
 137               		.cfi_endproc
 138               	.LFE56:
 140               		.section	.text.rgblight_decrease_hue,"ax",@progbits
 141               		.weak	rgblight_decrease_hue
 143               	rgblight_decrease_hue:
 144               	.LFB54:
 145               		.cfi_startproc
 146               	/* prologue: function */
 147               	/* frame size = 0 */
 148               	/* stack size = 0 */
 149               	.L__stack_usage = 0
 150 0000 0895      		ret
 151               		.cfi_endproc
 152               	.LFE54:
 154               		.section	.text.rgblight_increase_sat,"ax",@progbits
 155               		.weak	rgblight_increase_sat
 157               	rgblight_increase_sat:
 158               	.LFB52:
 159               		.cfi_startproc
 160               	/* prologue: function */
 161               	/* frame size = 0 */
 162               	/* stack size = 0 */
 163               	.L__stack_usage = 0
 164 0000 0895      		ret
 165               		.cfi_endproc
 166               	.LFE52:
 168               		.section	.text.rgblight_decrease_sat,"ax",@progbits
 169               		.weak	rgblight_decrease_sat
 171               	rgblight_decrease_sat:
 172               	.LFB50:
 173               		.cfi_startproc
 174               	/* prologue: function */
 175               	/* frame size = 0 */
 176               	/* stack size = 0 */
 177               	.L__stack_usage = 0
 178 0000 0895      		ret
 179               		.cfi_endproc
 180               	.LFE50:
 182               		.section	.text.rgblight_increase_val,"ax",@progbits
 183               		.weak	rgblight_increase_val
 185               	rgblight_increase_val:
 186               	.LFB48:
 187               		.cfi_startproc
 188               	/* prologue: function */
 189               	/* frame size = 0 */
 190               	/* stack size = 0 */
 191               	.L__stack_usage = 0
 192 0000 0895      		ret
 193               		.cfi_endproc
 194               	.LFE48:
 196               		.section	.text.rgblight_decrease_val,"ax",@progbits
 197               		.weak	rgblight_decrease_val
 199               	rgblight_decrease_val:
 200               	.LFB46:
 201               		.cfi_startproc
 202               	/* prologue: function */
 203               	/* frame size = 0 */
 204               	/* stack size = 0 */
 205               	.L__stack_usage = 0
 206 0000 0895      		ret
 207               		.cfi_endproc
 208               	.LFE46:
 210               		.section	.text.rgblight_increase_speed,"ax",@progbits
 211               		.weak	rgblight_increase_speed
 213               	rgblight_increase_speed:
 214               	.LFB44:
 215               		.cfi_startproc
 216               	/* prologue: function */
 217               	/* frame size = 0 */
 218               	/* stack size = 0 */
 219               	.L__stack_usage = 0
 220 0000 0895      		ret
 221               		.cfi_endproc
 222               	.LFE44:
 224               		.section	.text.rgblight_decrease_speed,"ax",@progbits
 225               		.weak	rgblight_decrease_speed
 227               	rgblight_decrease_speed:
 228               	.LFB20:
 229               		.file 2 "./quantum/rgb.h"
   1:./quantum/rgb.h **** /* Copyright 2017 Jack Humbert
   2:./quantum/rgb.h ****  *
   3:./quantum/rgb.h ****  * This program is free software: you can redistribute it and/or modify
   4:./quantum/rgb.h ****  * it under the terms of the GNU General Public License as published by
   5:./quantum/rgb.h ****  * the Free Software Foundation, either version 2 of the License, or
   6:./quantum/rgb.h ****  * (at your option) any later version.
   7:./quantum/rgb.h ****  *
   8:./quantum/rgb.h ****  * This program is distributed in the hope that it will be useful,
   9:./quantum/rgb.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:./quantum/rgb.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:./quantum/rgb.h ****  * GNU General Public License for more details.
  12:./quantum/rgb.h ****  *
  13:./quantum/rgb.h ****  * You should have received a copy of the GNU General Public License
  14:./quantum/rgb.h ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15:./quantum/rgb.h ****  */
  16:./quantum/rgb.h **** 
  17:./quantum/rgb.h **** #ifndef RGB_H
  18:./quantum/rgb.h **** #define RGB_H
  19:./quantum/rgb.h **** 
  20:./quantum/rgb.h **** __attribute__((weak))
  21:./quantum/rgb.h **** void rgblight_toggle(void) {};
  22:./quantum/rgb.h **** 
  23:./quantum/rgb.h **** __attribute__((weak))
  24:./quantum/rgb.h **** void rgblight_step(void) {};
  25:./quantum/rgb.h **** 
  26:./quantum/rgb.h **** __attribute__((weak))
  27:./quantum/rgb.h **** void rgblight_step_reverse(void) {};
  28:./quantum/rgb.h **** 
  29:./quantum/rgb.h **** __attribute__((weak))
  30:./quantum/rgb.h **** void rgblight_increase_hue(void) {};
  31:./quantum/rgb.h **** 
  32:./quantum/rgb.h **** __attribute__((weak))
  33:./quantum/rgb.h **** void rgblight_decrease_hue(void) {};
  34:./quantum/rgb.h **** 
  35:./quantum/rgb.h **** __attribute__((weak))
  36:./quantum/rgb.h **** void rgblight_increase_sat(void) {};
  37:./quantum/rgb.h **** 
  38:./quantum/rgb.h **** __attribute__((weak))
  39:./quantum/rgb.h **** void rgblight_decrease_sat(void) {};
  40:./quantum/rgb.h **** 
  41:./quantum/rgb.h **** __attribute__((weak))
  42:./quantum/rgb.h **** void rgblight_increase_val(void) {};
  43:./quantum/rgb.h **** 
  44:./quantum/rgb.h **** __attribute__((weak))
  45:./quantum/rgb.h **** void rgblight_decrease_val(void) {};
  46:./quantum/rgb.h **** 
  47:./quantum/rgb.h **** __attribute__((weak))
  48:./quantum/rgb.h **** void rgblight_increase_speed(void) {};
  49:./quantum/rgb.h **** 
  50:./quantum/rgb.h **** __attribute__((weak))
  51:./quantum/rgb.h **** void rgblight_decrease_speed(void) {};
 230               		.loc 2 51 0
 231               		.cfi_startproc
 232               	/* prologue: function */
 233               	/* frame size = 0 */
 234               	/* stack size = 0 */
 235               	.L__stack_usage = 0
 236 0000 0895      		ret
 237               		.cfi_endproc
 238               	.LFE20:
 240               		.section	.text.qk_tap_dance_pair_on_each_tap,"ax",@progbits
 241               	.global	qk_tap_dance_pair_on_each_tap
 243               	qk_tap_dance_pair_on_each_tap:
 244               	.LFB28:
  24:quantum/process_keycode/process_tap_dance.c ****   qk_tap_dance_pair_t *pair = (qk_tap_dance_pair_t *)user_data;
 245               		.loc 1 24 0
 246               		.cfi_startproc
 247               	.LVL9:
  24:quantum/process_keycode/process_tap_dance.c ****   qk_tap_dance_pair_t *pair = (qk_tap_dance_pair_t *)user_data;
 248               		.loc 1 24 0
 249 0000 CF93      		push r28
 250               	.LCFI2:
 251               		.cfi_def_cfa_offset 3
 252               		.cfi_offset 28, -2
 253 0002 DF93      		push r29
 254               	.LCFI3:
 255               		.cfi_def_cfa_offset 4
 256               		.cfi_offset 29, -3
 257               	/* prologue: function */
 258               	/* frame size = 0 */
 259               	/* stack size = 2 */
 260               	.L__stack_usage = 2
 261               	.LVL10:
  27:quantum/process_keycode/process_tap_dance.c ****     register_code16 (pair->kc2);
 262               		.loc 1 27 0
 263 0004 FC01      		movw r30,r24
 264 0006 2081      		ld r18,Z
 265 0008 2230      		cpi r18,lo8(2)
 266 000a 01F4      		brne .L15
 267 000c FB01      		movw r30,r22
 268 000e EC01      		movw r28,r24
  28:quantum/process_keycode/process_tap_dance.c ****     state->finished = true;
 269               		.loc 1 28 0
 270 0010 8281      		ldd r24,Z+2
 271 0012 9381      		ldd r25,Z+3
 272               	.LVL11:
 273 0014 0E94 0000 		call register_code16
 274               	.LVL12:
  29:quantum/process_keycode/process_tap_dance.c ****   }
 275               		.loc 1 29 0
 276 0018 81E0      		ldi r24,lo8(1)
 277 001a 8987      		std Y+9,r24
 278               	.LVL13:
 279               	.L15:
 280               	/* epilogue start */
  31:quantum/process_keycode/process_tap_dance.c **** 
 281               		.loc 1 31 0
 282 001c DF91      		pop r29
 283 001e CF91      		pop r28
 284 0020 0895      		ret
 285               		.cfi_endproc
 286               	.LFE28:
 288               		.section	.text.qk_tap_dance_pair_finished,"ax",@progbits
 289               	.global	qk_tap_dance_pair_finished
 291               	qk_tap_dance_pair_finished:
 292               	.LFB29:
  33:quantum/process_keycode/process_tap_dance.c ****   qk_tap_dance_pair_t *pair = (qk_tap_dance_pair_t *)user_data;
 293               		.loc 1 33 0
 294               		.cfi_startproc
 295               	.LVL14:
 296               	/* prologue: function */
 297               	/* frame size = 0 */
 298               	/* stack size = 0 */
 299               	.L__stack_usage = 0
  36:quantum/process_keycode/process_tap_dance.c ****     register_code16 (pair->kc1);
 300               		.loc 1 36 0
 301 0000 FC01      		movw r30,r24
 302 0002 8081      		ld r24,Z
 303               	.LVL15:
 304 0004 8130      		cpi r24,lo8(1)
 305 0006 01F4      		brne .L18
  37:quantum/process_keycode/process_tap_dance.c ****   } else if (state->count == 2) {
 306               		.loc 1 37 0
 307 0008 FB01      		movw r30,r22
 308               	.LVL16:
 309 000a 8081      		ld r24,Z
 310 000c 9181      		ldd r25,Z+1
 311 000e 00C0      		rjmp .L20
 312               	.LVL17:
 313               	.L18:
  38:quantum/process_keycode/process_tap_dance.c ****     register_code16 (pair->kc2);
 314               		.loc 1 38 0
 315 0010 8230      		cpi r24,lo8(2)
 316 0012 01F4      		brne .L17
  39:quantum/process_keycode/process_tap_dance.c ****   }
 317               		.loc 1 39 0
 318 0014 FB01      		movw r30,r22
 319               	.LVL18:
 320 0016 8281      		ldd r24,Z+2
 321 0018 9381      		ldd r25,Z+3
 322               	.L20:
 323 001a 0C94 0000 		jmp register_code16
 324               	.LVL19:
 325               	.L17:
 326 001e 0895      		ret
 327               		.cfi_endproc
 328               	.LFE29:
 330               		.section	.text.qk_tap_dance_pair_reset,"ax",@progbits
 331               	.global	qk_tap_dance_pair_reset
 333               	qk_tap_dance_pair_reset:
 334               	.LFB30:
  43:quantum/process_keycode/process_tap_dance.c ****   qk_tap_dance_pair_t *pair = (qk_tap_dance_pair_t *)user_data;
 335               		.loc 1 43 0
 336               		.cfi_startproc
 337               	.LVL20:
 338               	/* prologue: function */
 339               	/* frame size = 0 */
 340               	/* stack size = 0 */
 341               	.L__stack_usage = 0
  46:quantum/process_keycode/process_tap_dance.c ****     unregister_code16 (pair->kc1);
 342               		.loc 1 46 0
 343 0000 FC01      		movw r30,r24
 344 0002 8081      		ld r24,Z
 345               	.LVL21:
 346 0004 8130      		cpi r24,lo8(1)
 347 0006 01F4      		brne .L22
  47:quantum/process_keycode/process_tap_dance.c ****   } else if (state->count == 2) {
 348               		.loc 1 47 0
 349 0008 FB01      		movw r30,r22
 350               	.LVL22:
 351 000a 8081      		ld r24,Z
 352 000c 9181      		ldd r25,Z+1
 353 000e 00C0      		rjmp .L24
 354               	.LVL23:
 355               	.L22:
  48:quantum/process_keycode/process_tap_dance.c ****     unregister_code16 (pair->kc2);
 356               		.loc 1 48 0
 357 0010 8230      		cpi r24,lo8(2)
 358 0012 01F4      		brne .L21
  49:quantum/process_keycode/process_tap_dance.c ****   }
 359               		.loc 1 49 0
 360 0014 FB01      		movw r30,r22
 361               	.LVL24:
 362 0016 8281      		ldd r24,Z+2
 363 0018 9381      		ldd r25,Z+3
 364               	.L24:
 365 001a 0C94 0000 		jmp unregister_code16
 366               	.LVL25:
 367               	.L21:
 368 001e 0895      		ret
 369               		.cfi_endproc
 370               	.LFE30:
 372               		.section	.text.qk_tap_dance_dual_role_on_each_tap,"ax",@progbits
 373               	.global	qk_tap_dance_dual_role_on_each_tap
 375               	qk_tap_dance_dual_role_on_each_tap:
 376               	.LFB31:
  53:quantum/process_keycode/process_tap_dance.c ****   qk_tap_dance_dual_role_t *pair = (qk_tap_dance_dual_role_t *)user_data;
 377               		.loc 1 53 0
 378               		.cfi_startproc
 379               	.LVL26:
 380 0000 CF93      		push r28
 381               	.LCFI4:
 382               		.cfi_def_cfa_offset 3
 383               		.cfi_offset 28, -2
 384 0002 DF93      		push r29
 385               	.LCFI5:
 386               		.cfi_def_cfa_offset 4
 387               		.cfi_offset 29, -3
 388               	/* prologue: function */
 389               	/* frame size = 0 */
 390               	/* stack size = 2 */
 391               	.L__stack_usage = 2
 392               	.LVL27:
  56:quantum/process_keycode/process_tap_dance.c ****     layer_move (pair->layer);
 393               		.loc 1 56 0
 394 0004 FC01      		movw r30,r24
 395 0006 2081      		ld r18,Z
 396 0008 2230      		cpi r18,lo8(2)
 397 000a 01F4      		brne .L25
 398 000c FB01      		movw r30,r22
 399 000e EC01      		movw r28,r24
  57:quantum/process_keycode/process_tap_dance.c ****     state->finished = true;
 400               		.loc 1 57 0
 401 0010 8281      		ldd r24,Z+2
 402               	.LVL28:
 403 0012 0E94 0000 		call layer_move
 404               	.LVL29:
  58:quantum/process_keycode/process_tap_dance.c ****   }
 405               		.loc 1 58 0
 406 0016 81E0      		ldi r24,lo8(1)
 407 0018 8987      		std Y+9,r24
 408               	.LVL30:
 409               	.L25:
 410               	/* epilogue start */
  60:quantum/process_keycode/process_tap_dance.c **** 
 411               		.loc 1 60 0
 412 001a DF91      		pop r29
 413 001c CF91      		pop r28
 414 001e 0895      		ret
 415               		.cfi_endproc
 416               	.LFE31:
 418               		.section	.text.qk_tap_dance_dual_role_finished,"ax",@progbits
 419               	.global	qk_tap_dance_dual_role_finished
 421               	qk_tap_dance_dual_role_finished:
 422               	.LFB32:
  62:quantum/process_keycode/process_tap_dance.c ****   qk_tap_dance_dual_role_t *pair = (qk_tap_dance_dual_role_t *)user_data;
 423               		.loc 1 62 0
 424               		.cfi_startproc
 425               	.LVL31:
 426               	/* prologue: function */
 427               	/* frame size = 0 */
 428               	/* stack size = 0 */
 429               	.L__stack_usage = 0
  65:quantum/process_keycode/process_tap_dance.c ****     register_code16 (pair->kc);
 430               		.loc 1 65 0
 431 0000 FC01      		movw r30,r24
 432 0002 8081      		ld r24,Z
 433               	.LVL32:
 434 0004 8130      		cpi r24,lo8(1)
 435 0006 01F4      		brne .L28
  66:quantum/process_keycode/process_tap_dance.c ****   } else if (state->count == 2) {
 436               		.loc 1 66 0
 437 0008 FB01      		movw r30,r22
 438               	.LVL33:
 439 000a 8081      		ld r24,Z
 440 000c 9181      		ldd r25,Z+1
 441 000e 0C94 0000 		jmp register_code16
 442               	.LVL34:
 443               	.L28:
  67:quantum/process_keycode/process_tap_dance.c ****     layer_move (pair->layer);
 444               		.loc 1 67 0
 445 0012 8230      		cpi r24,lo8(2)
 446 0014 01F4      		brne .L27
  68:quantum/process_keycode/process_tap_dance.c ****   }
 447               		.loc 1 68 0
 448 0016 FB01      		movw r30,r22
 449               	.LVL35:
 450 0018 8281      		ldd r24,Z+2
 451 001a 0C94 0000 		jmp layer_move
 452               	.LVL36:
 453               	.L27:
 454 001e 0895      		ret
 455               		.cfi_endproc
 456               	.LFE32:
 458               		.section	.text.qk_tap_dance_dual_role_reset,"ax",@progbits
 459               	.global	qk_tap_dance_dual_role_reset
 461               	qk_tap_dance_dual_role_reset:
 462               	.LFB33:
  72:quantum/process_keycode/process_tap_dance.c ****   qk_tap_dance_dual_role_t *pair = (qk_tap_dance_dual_role_t *)user_data;
 463               		.loc 1 72 0
 464               		.cfi_startproc
 465               	.LVL37:
 466               	/* prologue: function */
 467               	/* frame size = 0 */
 468               	/* stack size = 0 */
 469               	.L__stack_usage = 0
  75:quantum/process_keycode/process_tap_dance.c ****     unregister_code16 (pair->kc);
 470               		.loc 1 75 0
 471 0000 FC01      		movw r30,r24
 472 0002 8081      		ld r24,Z
 473               	.LVL38:
 474 0004 8130      		cpi r24,lo8(1)
 475 0006 01F4      		brne .L30
  76:quantum/process_keycode/process_tap_dance.c ****   }
 476               		.loc 1 76 0
 477 0008 FB01      		movw r30,r22
 478               	.LVL39:
 479 000a 8081      		ld r24,Z
 480 000c 9181      		ldd r25,Z+1
 481 000e 0C94 0000 		jmp unregister_code16
 482               	.LVL40:
 483               	.L30:
 484 0012 0895      		ret
 485               		.cfi_endproc
 486               	.LFE33:
 488               		.section	.text.reset_tap_dance,"ax",@progbits
 489               	.global	reset_tap_dance
 491               	reset_tap_dance:
 492               	.LFB41:
 104:quantum/process_keycode/process_tap_dance.c **** 
 105:quantum/process_keycode/process_tap_dance.c **** static inline void process_tap_dance_action_on_reset (qk_tap_dance_action_t *action)
 106:quantum/process_keycode/process_tap_dance.c **** {
 107:quantum/process_keycode/process_tap_dance.c ****   _process_tap_dance_action_fn (&action->state, action->user_data, action->fn.on_reset);
 108:quantum/process_keycode/process_tap_dance.c ****   del_mods(action->state.oneshot_mods);
 109:quantum/process_keycode/process_tap_dance.c ****   del_weak_mods(action->state.weak_mods);
 110:quantum/process_keycode/process_tap_dance.c ****   send_keyboard_report();
 111:quantum/process_keycode/process_tap_dance.c **** }
 112:quantum/process_keycode/process_tap_dance.c **** 
 113:quantum/process_keycode/process_tap_dance.c **** void preprocess_tap_dance(uint16_t keycode, keyrecord_t *record) {
 114:quantum/process_keycode/process_tap_dance.c ****   qk_tap_dance_action_t *action;
 115:quantum/process_keycode/process_tap_dance.c **** 
 116:quantum/process_keycode/process_tap_dance.c ****   if (!record->event.pressed)
 117:quantum/process_keycode/process_tap_dance.c ****     return;
 118:quantum/process_keycode/process_tap_dance.c **** 
 119:quantum/process_keycode/process_tap_dance.c ****   if (highest_td == -1)
 120:quantum/process_keycode/process_tap_dance.c ****     return;
 121:quantum/process_keycode/process_tap_dance.c **** 
 122:quantum/process_keycode/process_tap_dance.c ****   for (int i = 0; i <= highest_td; i++) {
 123:quantum/process_keycode/process_tap_dance.c ****     action = &tap_dance_actions[i];
 124:quantum/process_keycode/process_tap_dance.c ****     if (action->state.count) {
 125:quantum/process_keycode/process_tap_dance.c ****       if (keycode == action->state.keycode && keycode == last_td)
 126:quantum/process_keycode/process_tap_dance.c ****         continue;
 127:quantum/process_keycode/process_tap_dance.c ****       action->state.interrupted = true;
 128:quantum/process_keycode/process_tap_dance.c ****       process_tap_dance_action_on_dance_finished (action);
 129:quantum/process_keycode/process_tap_dance.c ****       reset_tap_dance (&action->state);
 130:quantum/process_keycode/process_tap_dance.c ****     }
 131:quantum/process_keycode/process_tap_dance.c ****   }
 132:quantum/process_keycode/process_tap_dance.c **** }
 133:quantum/process_keycode/process_tap_dance.c **** 
 134:quantum/process_keycode/process_tap_dance.c **** bool process_tap_dance(uint16_t keycode, keyrecord_t *record) {
 135:quantum/process_keycode/process_tap_dance.c ****   uint16_t idx = keycode - QK_TAP_DANCE;
 136:quantum/process_keycode/process_tap_dance.c ****   qk_tap_dance_action_t *action;
 137:quantum/process_keycode/process_tap_dance.c **** 
 138:quantum/process_keycode/process_tap_dance.c ****   switch(keycode) {
 139:quantum/process_keycode/process_tap_dance.c ****   case QK_TAP_DANCE ... QK_TAP_DANCE_MAX:
 140:quantum/process_keycode/process_tap_dance.c ****     if ((int16_t)idx > highest_td)
 141:quantum/process_keycode/process_tap_dance.c ****       highest_td = idx;
 142:quantum/process_keycode/process_tap_dance.c ****     action = &tap_dance_actions[idx];
 143:quantum/process_keycode/process_tap_dance.c **** 
 144:quantum/process_keycode/process_tap_dance.c ****     action->state.pressed = record->event.pressed;
 145:quantum/process_keycode/process_tap_dance.c ****     if (record->event.pressed) {
 146:quantum/process_keycode/process_tap_dance.c ****       action->state.keycode = keycode;
 147:quantum/process_keycode/process_tap_dance.c ****       action->state.count++;
 148:quantum/process_keycode/process_tap_dance.c ****       action->state.timer = timer_read();
 149:quantum/process_keycode/process_tap_dance.c ****       action->state.oneshot_mods = get_oneshot_mods();
 150:quantum/process_keycode/process_tap_dance.c ****       action->state.weak_mods = get_mods();
 151:quantum/process_keycode/process_tap_dance.c ****       action->state.weak_mods |= get_weak_mods();
 152:quantum/process_keycode/process_tap_dance.c ****       process_tap_dance_action_on_each_tap (action);
 153:quantum/process_keycode/process_tap_dance.c **** 
 154:quantum/process_keycode/process_tap_dance.c ****       last_td = keycode;
 155:quantum/process_keycode/process_tap_dance.c ****     } else {
 156:quantum/process_keycode/process_tap_dance.c ****       if (action->state.count && action->state.finished) {
 157:quantum/process_keycode/process_tap_dance.c ****         reset_tap_dance (&action->state);
 158:quantum/process_keycode/process_tap_dance.c ****       }
 159:quantum/process_keycode/process_tap_dance.c ****     }
 160:quantum/process_keycode/process_tap_dance.c **** 
 161:quantum/process_keycode/process_tap_dance.c ****     break;
 162:quantum/process_keycode/process_tap_dance.c ****   }
 163:quantum/process_keycode/process_tap_dance.c **** 
 164:quantum/process_keycode/process_tap_dance.c ****   return true;
 165:quantum/process_keycode/process_tap_dance.c **** }
 166:quantum/process_keycode/process_tap_dance.c **** 
 167:quantum/process_keycode/process_tap_dance.c **** 
 168:quantum/process_keycode/process_tap_dance.c **** 
 169:quantum/process_keycode/process_tap_dance.c **** void matrix_scan_tap_dance () {
 170:quantum/process_keycode/process_tap_dance.c ****   if (highest_td == -1)
 171:quantum/process_keycode/process_tap_dance.c ****     return;
 172:quantum/process_keycode/process_tap_dance.c ****   uint16_t tap_user_defined;
 173:quantum/process_keycode/process_tap_dance.c **** 
 174:quantum/process_keycode/process_tap_dance.c ****   for (uint8_t i = 0; i <= highest_td; i++) {
 175:quantum/process_keycode/process_tap_dance.c ****     qk_tap_dance_action_t *action = &tap_dance_actions[i];
 176:quantum/process_keycode/process_tap_dance.c ****     if(action->custom_tapping_term > 0 ) {
 177:quantum/process_keycode/process_tap_dance.c ****       tap_user_defined = action->custom_tapping_term;
 178:quantum/process_keycode/process_tap_dance.c ****     }
 179:quantum/process_keycode/process_tap_dance.c ****     else{
 180:quantum/process_keycode/process_tap_dance.c ****       tap_user_defined = TAPPING_TERM;
 181:quantum/process_keycode/process_tap_dance.c ****     }
 182:quantum/process_keycode/process_tap_dance.c ****     if (action->state.count && timer_elapsed (action->state.timer) > tap_user_defined) {
 183:quantum/process_keycode/process_tap_dance.c ****       process_tap_dance_action_on_dance_finished (action);
 184:quantum/process_keycode/process_tap_dance.c ****       reset_tap_dance (&action->state);
 185:quantum/process_keycode/process_tap_dance.c ****     }
 186:quantum/process_keycode/process_tap_dance.c ****   }
 187:quantum/process_keycode/process_tap_dance.c **** }
 188:quantum/process_keycode/process_tap_dance.c **** 
 189:quantum/process_keycode/process_tap_dance.c **** void reset_tap_dance (qk_tap_dance_state_t *state) {
 493               		.loc 1 189 0
 494               		.cfi_startproc
 495               	.LVL41:
 496 0000 EF92      		push r14
 497               	.LCFI6:
 498               		.cfi_def_cfa_offset 3
 499               		.cfi_offset 14, -2
 500 0002 FF92      		push r15
 501               	.LCFI7:
 502               		.cfi_def_cfa_offset 4
 503               		.cfi_offset 15, -3
 504 0004 0F93      		push r16
 505               	.LCFI8:
 506               		.cfi_def_cfa_offset 5
 507               		.cfi_offset 16, -4
 508 0006 1F93      		push r17
 509               	.LCFI9:
 510               		.cfi_def_cfa_offset 6
 511               		.cfi_offset 17, -5
 512 0008 CF93      		push r28
 513               	.LCFI10:
 514               		.cfi_def_cfa_offset 7
 515               		.cfi_offset 28, -6
 516 000a DF93      		push r29
 517               	.LCFI11:
 518               		.cfi_def_cfa_offset 8
 519               		.cfi_offset 29, -7
 520               	/* prologue: function */
 521               	/* frame size = 0 */
 522               	/* stack size = 6 */
 523               	.L__stack_usage = 6
 190:quantum/process_keycode/process_tap_dance.c ****   qk_tap_dance_action_t *action;
 191:quantum/process_keycode/process_tap_dance.c **** 
 192:quantum/process_keycode/process_tap_dance.c ****   if (state->pressed)
 524               		.loc 1 192 0
 525 000c FC01      		movw r30,r24
 526 000e 2085      		ldd r18,Z+8
 527 0010 2111      		cpse r18,__zero_reg__
 528 0012 00C0      		rjmp .L32
 529 0014 EC01      		movw r28,r24
 193:quantum/process_keycode/process_tap_dance.c ****     return;
 194:quantum/process_keycode/process_tap_dance.c **** 
 195:quantum/process_keycode/process_tap_dance.c ****   action = &tap_dance_actions[state->keycode - QK_TAP_DANCE];
 530               		.loc 1 195 0
 531 0016 E380      		ldd r14,Z+3
 532 0018 F480      		ldd r15,Z+4
 533 001a F7E5      		ldi r31,87
 534 001c FF1A      		sub r15,r31
 535               	.LVL42:
 536               	.LBB12:
 537               	.LBB13:
 107:quantum/process_keycode/process_tap_dance.c ****   del_mods(action->state.oneshot_mods);
 538               		.loc 1 107 0
 539 001e 24E1      		ldi r18,lo8(20)
 540 0020 2E9D      		mul r18,r14
 541 0022 C001      		movw r24,r0
 542 0024 2F9D      		mul r18,r15
 543 0026 900D      		add r25,r0
 544 0028 1124      		clr __zero_reg__
 545               	.LVL43:
 546 002a DC01      		movw r26,r24
 547 002c A050      		subi r26,lo8(-(tap_dance_actions))
 548 002e B040      		sbci r27,hi8(-(tap_dance_actions))
 549 0030 1496      		adiw r26,4
 550 0032 ED91      		ld r30,X+
 551 0034 FC91      		ld r31,X
 552 0036 1597      		sbiw r26,4+1
 553 0038 8050      		subi r24,lo8(-(tap_dance_actions+6))
 554 003a 9040      		sbci r25,hi8(-(tap_dance_actions+6))
 555               	.LVL44:
 556               	.LBB14:
 557               	.LBB15:
  84:quantum/process_keycode/process_tap_dance.c ****     fn(state, user_data);
 558               		.loc 1 84 0
 559 003c 3097      		sbiw r30,0
 560 003e 01F0      		breq .L34
  85:quantum/process_keycode/process_tap_dance.c ****   }
 561               		.loc 1 85 0
 562 0040 5296      		adiw r26,18
 563 0042 6D91      		ld r22,X+
 564 0044 7C91      		ld r23,X
 565 0046 5397      		sbiw r26,18+1
 566 0048 0995      		icall
 567               	.LVL45:
 568               	.L34:
 569               	.LBE15:
 570               	.LBE14:
 108:quantum/process_keycode/process_tap_dance.c ****   del_weak_mods(action->state.weak_mods);
 571               		.loc 1 108 0
 572 004a 84E1      		ldi r24,lo8(20)
 573 004c 8E9D      		mul r24,r14
 574 004e 8001      		movw r16,r0
 575 0050 8F9D      		mul r24,r15
 576 0052 100D      		add r17,r0
 577 0054 1124      		clr __zero_reg__
 578 0056 0050      		subi r16,lo8(-(tap_dance_actions))
 579 0058 1040      		sbci r17,hi8(-(tap_dance_actions))
 580 005a F801      		movw r30,r16
 581 005c 8781      		ldd r24,Z+7
 582 005e 0E94 0000 		call del_mods
 583               	.LVL46:
 109:quantum/process_keycode/process_tap_dance.c ****   send_keyboard_report();
 584               		.loc 1 109 0
 585 0062 F801      		movw r30,r16
 586 0064 8085      		ldd r24,Z+8
 587 0066 0E94 0000 		call del_weak_mods
 588               	.LVL47:
 110:quantum/process_keycode/process_tap_dance.c **** }
 589               		.loc 1 110 0
 590 006a 0E94 0000 		call send_keyboard_report
 591               	.LVL48:
 592               	.LBE13:
 593               	.LBE12:
 196:quantum/process_keycode/process_tap_dance.c **** 
 197:quantum/process_keycode/process_tap_dance.c ****   process_tap_dance_action_on_reset (action);
 198:quantum/process_keycode/process_tap_dance.c **** 
 199:quantum/process_keycode/process_tap_dance.c ****   state->count = 0;
 594               		.loc 1 199 0
 595 006e 1882      		st Y,__zero_reg__
 200:quantum/process_keycode/process_tap_dance.c ****   state->interrupted = false;
 596               		.loc 1 200 0
 597 0070 1F82      		std Y+7,__zero_reg__
 201:quantum/process_keycode/process_tap_dance.c ****   state->finished = false;
 598               		.loc 1 201 0
 599 0072 1986      		std Y+9,__zero_reg__
 202:quantum/process_keycode/process_tap_dance.c ****   last_td = 0;
 600               		.loc 1 202 0
 601 0074 1092 0000 		sts last_td+1,__zero_reg__
 602 0078 1092 0000 		sts last_td,__zero_reg__
 603               	.LVL49:
 604               	.L32:
 605               	/* epilogue start */
 203:quantum/process_keycode/process_tap_dance.c **** }
 606               		.loc 1 203 0
 607 007c DF91      		pop r29
 608 007e CF91      		pop r28
 609 0080 1F91      		pop r17
 610 0082 0F91      		pop r16
 611 0084 FF90      		pop r15
 612 0086 EF90      		pop r14
 613 0088 0895      		ret
 614               		.cfi_endproc
 615               	.LFE41:
 617               		.section	.text.preprocess_tap_dance,"ax",@progbits
 618               	.global	preprocess_tap_dance
 620               	preprocess_tap_dance:
 621               	.LFB38:
 113:quantum/process_keycode/process_tap_dance.c ****   qk_tap_dance_action_t *action;
 622               		.loc 1 113 0
 623               		.cfi_startproc
 624               	.LVL50:
 625 0000 DF92      		push r13
 626               	.LCFI12:
 627               		.cfi_def_cfa_offset 3
 628               		.cfi_offset 13, -2
 629 0002 EF92      		push r14
 630               	.LCFI13:
 631               		.cfi_def_cfa_offset 4
 632               		.cfi_offset 14, -3
 633 0004 FF92      		push r15
 634               	.LCFI14:
 635               		.cfi_def_cfa_offset 5
 636               		.cfi_offset 15, -4
 637 0006 0F93      		push r16
 638               	.LCFI15:
 639               		.cfi_def_cfa_offset 6
 640               		.cfi_offset 16, -5
 641 0008 1F93      		push r17
 642               	.LCFI16:
 643               		.cfi_def_cfa_offset 7
 644               		.cfi_offset 17, -6
 645 000a CF93      		push r28
 646               	.LCFI17:
 647               		.cfi_def_cfa_offset 8
 648               		.cfi_offset 28, -7
 649 000c DF93      		push r29
 650               	.LCFI18:
 651               		.cfi_def_cfa_offset 9
 652               		.cfi_offset 29, -8
 653               	/* prologue: function */
 654               	/* frame size = 0 */
 655               	/* stack size = 7 */
 656               	.L__stack_usage = 7
 116:quantum/process_keycode/process_tap_dance.c ****     return;
 657               		.loc 1 116 0
 658 000e FB01      		movw r30,r22
 659 0010 2281      		ldd r18,Z+2
 660 0012 2223      		tst r18
 661 0014 01F0      		breq .L38
 119:quantum/process_keycode/process_tap_dance.c ****     return;
 662               		.loc 1 119 0
 663 0016 2091 0000 		lds r18,highest_td
 664 001a 2F3F      		cpi r18,lo8(-1)
 665 001c 01F0      		breq .L38
 666 001e 8C01      		movw r16,r24
 667 0020 C0E0      		ldi r28,lo8(tap_dance_actions)
 668 0022 D0E0      		ldi r29,hi8(tap_dance_actions)
 669 0024 E12C      		mov r14,__zero_reg__
 670 0026 F12C      		mov r15,__zero_reg__
 671               	.LBB19:
 127:quantum/process_keycode/process_tap_dance.c ****       process_tap_dance_action_on_dance_finished (action);
 672               		.loc 1 127 0
 673 0028 DD24      		clr r13
 674 002a D394      		inc r13
 675               	.LVL51:
 676               	.L41:
 122:quantum/process_keycode/process_tap_dance.c ****     action = &tap_dance_actions[i];
 677               		.loc 1 122 0 discriminator 1
 678 002c 8091 0000 		lds r24,highest_td
 679 0030 082E      		mov __tmp_reg__,r24
 680 0032 000C      		lsl r0
 681 0034 990B      		sbc r25,r25
 682 0036 8E15      		cp r24,r14
 683 0038 9F05      		cpc r25,r15
 684 003a 04F0      		brlt .L38
 685               	.LVL52:
 124:quantum/process_keycode/process_tap_dance.c ****       if (keycode == action->state.keycode && keycode == last_td)
 686               		.loc 1 124 0
 687 003c 8E81      		ldd r24,Y+6
 688 003e 8823      		tst r24
 689 0040 01F0      		breq .L42
 125:quantum/process_keycode/process_tap_dance.c ****         continue;
 690               		.loc 1 125 0
 691 0042 8985      		ldd r24,Y+9
 692 0044 9A85      		ldd r25,Y+10
 693 0046 8017      		cp r24,r16
 694 0048 9107      		cpc r25,r17
 695 004a 01F4      		brne .L43
 125:quantum/process_keycode/process_tap_dance.c ****         continue;
 696               		.loc 1 125 0 is_stmt 0 discriminator 1
 697 004c 8091 0000 		lds r24,last_td
 698 0050 9091 0000 		lds r25,last_td+1
 699 0054 0817      		cp r16,r24
 700 0056 1907      		cpc r17,r25
 701 0058 01F0      		breq .L42
 702               	.L43:
 127:quantum/process_keycode/process_tap_dance.c ****       process_tap_dance_action_on_dance_finished (action);
 703               		.loc 1 127 0 is_stmt 1
 704 005a DD86      		std Y+13,r13
 705               	.LVL53:
 706               	.LBB20:
 707               	.LBB21:
  96:quantum/process_keycode/process_tap_dance.c ****     return;
 708               		.loc 1 96 0
 709 005c 8F85      		ldd r24,Y+15
 710 005e 8111      		cpse r24,__zero_reg__
 711 0060 00C0      		rjmp .L44
 712 0062 CE01      		movw r24,r28
 713 0064 0E94 0000 		call process_tap_dance_action_on_dance_finished.part.0
 714               	.LVL54:
 715               	.L44:
 716               	.LBE21:
 717               	.LBE20:
 129:quantum/process_keycode/process_tap_dance.c ****     }
 718               		.loc 1 129 0
 719 0068 CE01      		movw r24,r28
 720 006a 0696      		adiw r24,6
 721 006c 0E94 0000 		call reset_tap_dance
 722               	.LVL55:
 723               	.L42:
 122:quantum/process_keycode/process_tap_dance.c ****     action = &tap_dance_actions[i];
 724               		.loc 1 122 0 discriminator 2
 725 0070 FFEF      		ldi r31,-1
 726 0072 EF1A      		sub r14,r31
 727 0074 FF0A      		sbc r15,r31
 728               	.LVL56:
 729 0076 6496      		adiw r28,20
 730 0078 00C0      		rjmp .L41
 731               	.LVL57:
 732               	.L38:
 733               	/* epilogue start */
 734               	.LBE19:
 132:quantum/process_keycode/process_tap_dance.c **** 
 735               		.loc 1 132 0
 736 007a DF91      		pop r29
 737 007c CF91      		pop r28
 738 007e 1F91      		pop r17
 739 0080 0F91      		pop r16
 740 0082 FF90      		pop r15
 741 0084 EF90      		pop r14
 742 0086 DF90      		pop r13
 743 0088 0895      		ret
 744               		.cfi_endproc
 745               	.LFE38:
 747               		.section	.text.process_tap_dance,"ax",@progbits
 748               	.global	process_tap_dance
 750               	process_tap_dance:
 751               	.LFB39:
 134:quantum/process_keycode/process_tap_dance.c ****   uint16_t idx = keycode - QK_TAP_DANCE;
 752               		.loc 1 134 0
 753               		.cfi_startproc
 754               	.LVL58:
 755 0000 EF92      		push r14
 756               	.LCFI19:
 757               		.cfi_def_cfa_offset 3
 758               		.cfi_offset 14, -2
 759 0002 FF92      		push r15
 760               	.LCFI20:
 761               		.cfi_def_cfa_offset 4
 762               		.cfi_offset 15, -3
 763 0004 0F93      		push r16
 764               	.LCFI21:
 765               		.cfi_def_cfa_offset 5
 766               		.cfi_offset 16, -4
 767 0006 1F93      		push r17
 768               	.LCFI22:
 769               		.cfi_def_cfa_offset 6
 770               		.cfi_offset 17, -5
 771 0008 CF93      		push r28
 772               	.LCFI23:
 773               		.cfi_def_cfa_offset 7
 774               		.cfi_offset 28, -6
 775 000a DF93      		push r29
 776               	.LCFI24:
 777               		.cfi_def_cfa_offset 8
 778               		.cfi_offset 29, -7
 779               	/* prologue: function */
 780               	/* frame size = 0 */
 781               	/* stack size = 6 */
 782               	.L__stack_usage = 6
 783               	.LVL59:
 138:quantum/process_keycode/process_tap_dance.c ****   case QK_TAP_DANCE ... QK_TAP_DANCE_MAX:
 784               		.loc 1 138 0
 785 000c 9C01      		movw r18,r24
 786 000e 3755      		subi r19,87
 787               	.LVL60:
 788 0010 2F3F      		cpi r18,-1
 789 0012 3105      		cpc r19,__zero_reg__
 790 0014 01F0      		breq .+4
 791 0016 00F0      		brlo .+2
 792 0018 00C0      		rjmp .L53
 140:quantum/process_keycode/process_tap_dance.c ****       highest_td = idx;
 793               		.loc 1 140 0
 794 001a 4091 0000 		lds r20,highest_td
 795 001e 042E      		mov __tmp_reg__,r20
 796 0020 000C      		lsl r0
 797 0022 550B      		sbc r21,r21
 798 0024 4217      		cp r20,r18
 799 0026 5307      		cpc r21,r19
 800 0028 04F4      		brge .L55
 141:quantum/process_keycode/process_tap_dance.c ****     action = &tap_dance_actions[idx];
 801               		.loc 1 141 0
 802 002a 2093 0000 		sts highest_td,r18
 803               	.L55:
 804 002e FB01      		movw r30,r22
 805 0030 7C01      		movw r14,r24
 806               	.LVL61:
 144:quantum/process_keycode/process_tap_dance.c ****     if (record->event.pressed) {
 807               		.loc 1 144 0
 808 0032 8281      		ldd r24,Z+2
 809               	.LVL62:
 810 0034 94E1      		ldi r25,lo8(20)
 811 0036 929F      		mul r25,r18
 812 0038 8001      		movw r16,r0
 813 003a 939F      		mul r25,r19
 814 003c 100D      		add r17,r0
 815 003e 1124      		clr __zero_reg__
 816 0040 E801      		movw r28,r16
 817 0042 C050      		subi r28,lo8(-(tap_dance_actions))
 818 0044 D040      		sbci r29,hi8(-(tap_dance_actions))
 819 0046 8E87      		std Y+14,r24
 145:quantum/process_keycode/process_tap_dance.c ****       action->state.keycode = keycode;
 820               		.loc 1 145 0
 821 0048 9281      		ldd r25,Z+2
 822 004a 8E81      		ldd r24,Y+6
 823 004c 9923      		tst r25
 824 004e 01F0      		breq .L56
 146:quantum/process_keycode/process_tap_dance.c ****       action->state.count++;
 825               		.loc 1 146 0
 826 0050 FA86      		std Y+10,r15
 827 0052 E986      		std Y+9,r14
 147:quantum/process_keycode/process_tap_dance.c ****       action->state.timer = timer_read();
 828               		.loc 1 147 0
 829 0054 8F5F      		subi r24,lo8(-(1))
 830 0056 8E83      		std Y+6,r24
 148:quantum/process_keycode/process_tap_dance.c ****       action->state.oneshot_mods = get_oneshot_mods();
 831               		.loc 1 148 0
 832 0058 0E94 0000 		call timer_read
 833               	.LVL63:
 834 005c 9C87      		std Y+12,r25
 835 005e 8B87      		std Y+11,r24
 149:quantum/process_keycode/process_tap_dance.c ****       action->state.weak_mods = get_mods();
 836               		.loc 1 149 0
 837 0060 0E94 0000 		call get_oneshot_mods
 838               	.LVL64:
 839 0064 8F83      		std Y+7,r24
 150:quantum/process_keycode/process_tap_dance.c ****       action->state.weak_mods |= get_weak_mods();
 840               		.loc 1 150 0
 841 0066 0E94 0000 		call get_mods
 842               	.LVL65:
 843 006a 8887      		std Y+8,r24
 151:quantum/process_keycode/process_tap_dance.c ****       process_tap_dance_action_on_each_tap (action);
 844               		.loc 1 151 0
 845 006c 0E94 0000 		call get_weak_mods
 846               	.LVL66:
 847 0070 9885      		ldd r25,Y+8
 848 0072 892B      		or r24,r25
 849 0074 8887      		std Y+8,r24
 850               	.LVL67:
 851               	.LBB26:
 852               	.LBB27:
  91:quantum/process_keycode/process_tap_dance.c **** }
 853               		.loc 1 91 0
 854 0076 E881      		ld r30,Y
 855 0078 F981      		ldd r31,Y+1
 856 007a C801      		movw r24,r16
 857 007c 8050      		subi r24,lo8(-(tap_dance_actions+6))
 858 007e 9040      		sbci r25,hi8(-(tap_dance_actions+6))
 859               	.LVL68:
 860               	.LBB28:
 861               	.LBB29:
  84:quantum/process_keycode/process_tap_dance.c ****     fn(state, user_data);
 862               		.loc 1 84 0
 863 0080 3097      		sbiw r30,0
 864 0082 01F0      		breq .L57
  85:quantum/process_keycode/process_tap_dance.c ****   }
 865               		.loc 1 85 0
 866 0084 6A89      		ldd r22,Y+18
 867 0086 7B89      		ldd r23,Y+19
 868 0088 0995      		icall
 869               	.LVL69:
 870               	.L57:
 871               	.LBE29:
 872               	.LBE28:
 873               	.LBE27:
 874               	.LBE26:
 154:quantum/process_keycode/process_tap_dance.c ****     } else {
 875               		.loc 1 154 0
 876 008a F092 0000 		sts last_td+1,r15
 877 008e E092 0000 		sts last_td,r14
 878 0092 00C0      		rjmp .L53
 879               	.LVL70:
 880               	.L56:
 156:quantum/process_keycode/process_tap_dance.c ****         reset_tap_dance (&action->state);
 881               		.loc 1 156 0
 882 0094 8823      		tst r24
 883 0096 01F0      		breq .L53
 156:quantum/process_keycode/process_tap_dance.c ****         reset_tap_dance (&action->state);
 884               		.loc 1 156 0 is_stmt 0 discriminator 1
 885 0098 8F85      		ldd r24,Y+15
 886 009a 8823      		tst r24
 887 009c 01F0      		breq .L53
 157:quantum/process_keycode/process_tap_dance.c ****       }
 888               		.loc 1 157 0 is_stmt 1
 889 009e C801      		movw r24,r16
 890 00a0 8050      		subi r24,lo8(-(tap_dance_actions+6))
 891 00a2 9040      		sbci r25,hi8(-(tap_dance_actions+6))
 892 00a4 0E94 0000 		call reset_tap_dance
 893               	.LVL71:
 894               	.L53:
 165:quantum/process_keycode/process_tap_dance.c **** 
 895               		.loc 1 165 0
 896 00a8 81E0      		ldi r24,lo8(1)
 897               	/* epilogue start */
 898 00aa DF91      		pop r29
 899 00ac CF91      		pop r28
 900 00ae 1F91      		pop r17
 901 00b0 0F91      		pop r16
 902 00b2 FF90      		pop r15
 903 00b4 EF90      		pop r14
 904 00b6 0895      		ret
 905               		.cfi_endproc
 906               	.LFE39:
 908               		.section	.text.matrix_scan_tap_dance,"ax",@progbits
 909               	.global	matrix_scan_tap_dance
 911               	matrix_scan_tap_dance:
 912               	.LFB40:
 169:quantum/process_keycode/process_tap_dance.c ****   if (highest_td == -1)
 913               		.loc 1 169 0
 914               		.cfi_startproc
 915 0000 CF92      		push r12
 916               	.LCFI25:
 917               		.cfi_def_cfa_offset 3
 918               		.cfi_offset 12, -2
 919 0002 DF92      		push r13
 920               	.LCFI26:
 921               		.cfi_def_cfa_offset 4
 922               		.cfi_offset 13, -3
 923 0004 EF92      		push r14
 924               	.LCFI27:
 925               		.cfi_def_cfa_offset 5
 926               		.cfi_offset 14, -4
 927 0006 FF92      		push r15
 928               	.LCFI28:
 929               		.cfi_def_cfa_offset 6
 930               		.cfi_offset 15, -5
 931 0008 0F93      		push r16
 932               	.LCFI29:
 933               		.cfi_def_cfa_offset 7
 934               		.cfi_offset 16, -6
 935 000a 1F93      		push r17
 936               	.LCFI30:
 937               		.cfi_def_cfa_offset 8
 938               		.cfi_offset 17, -7
 939 000c CF93      		push r28
 940               	.LCFI31:
 941               		.cfi_def_cfa_offset 9
 942               		.cfi_offset 28, -8
 943 000e DF93      		push r29
 944               	.LCFI32:
 945               		.cfi_def_cfa_offset 10
 946               		.cfi_offset 29, -9
 947               	/* prologue: function */
 948               	/* frame size = 0 */
 949               	/* stack size = 8 */
 950               	.L__stack_usage = 8
 170:quantum/process_keycode/process_tap_dance.c ****     return;
 951               		.loc 1 170 0
 952 0010 8091 0000 		lds r24,highest_td
 953 0014 8F3F      		cpi r24,lo8(-1)
 954 0016 01F0      		breq .L67
 955 0018 F12C      		mov r15,__zero_reg__
 956               	.LBB34:
 957               	.LBB35:
 176:quantum/process_keycode/process_tap_dance.c ****       tap_user_defined = action->custom_tapping_term;
 958               		.loc 1 176 0 discriminator 1
 959 001a 94E1      		ldi r25,lo8(20)
 960 001c E92E      		mov r14,r25
 961               	.L69:
 962               	.LVL72:
 963               	.LBE35:
 174:quantum/process_keycode/process_tap_dance.c ****     qk_tap_dance_action_t *action = &tap_dance_actions[i];
 964               		.loc 1 174 0 discriminator 1
 965 001e 0F2D      		mov r16,r15
 966 0020 10E0      		ldi r17,0
 967 0022 8091 0000 		lds r24,highest_td
 968 0026 082E      		mov __tmp_reg__,r24
 969 0028 000C      		lsl r0
 970 002a 990B      		sbc r25,r25
 971 002c 8017      		cp r24,r16
 972 002e 9107      		cpc r25,r17
 973 0030 04F0      		brlt .L67
 974               	.LVL73:
 975               	.LBB38:
 176:quantum/process_keycode/process_tap_dance.c ****       tap_user_defined = action->custom_tapping_term;
 976               		.loc 1 176 0
 977 0032 E09E      		mul r14,r16
 978 0034 F001      		movw r30,r0
 979 0036 E19E      		mul r14,r17
 980 0038 F00D      		add r31,r0
 981 003a 1124      		clr __zero_reg__
 982 003c E050      		subi r30,lo8(-(tap_dance_actions))
 983 003e F040      		sbci r31,hi8(-(tap_dance_actions))
 984 0040 C088      		ldd r12,Z+16
 985 0042 D188      		ldd r13,Z+17
 986 0044 C114      		cp r12,__zero_reg__
 987 0046 D104      		cpc r13,__zero_reg__
 988 0048 01F4      		brne .L70
 180:quantum/process_keycode/process_tap_dance.c ****     }
 989               		.loc 1 180 0
 990 004a 86E9      		ldi r24,lo8(-106)
 991 004c C82E      		mov r12,r24
 992 004e D12C      		mov r13,__zero_reg__
 993               	.L70:
 994               	.LVL74:
 182:quantum/process_keycode/process_tap_dance.c ****       process_tap_dance_action_on_dance_finished (action);
 995               		.loc 1 182 0
 996 0050 E09E      		mul r14,r16
 997 0052 E001      		movw r28,r0
 998 0054 E19E      		mul r14,r17
 999 0056 D00D      		add r29,r0
 1000 0058 1124      		clr __zero_reg__
 1001 005a C050      		subi r28,lo8(-(tap_dance_actions))
 1002 005c D040      		sbci r29,hi8(-(tap_dance_actions))
 1003 005e 8E81      		ldd r24,Y+6
 1004 0060 8823      		tst r24
 1005 0062 01F0      		breq .L72
 182:quantum/process_keycode/process_tap_dance.c ****       process_tap_dance_action_on_dance_finished (action);
 1006               		.loc 1 182 0 is_stmt 0 discriminator 1
 1007 0064 8B85      		ldd r24,Y+11
 1008 0066 9C85      		ldd r25,Y+12
 1009 0068 0E94 0000 		call timer_elapsed
 1010               	.LVL75:
 1011 006c C816      		cp r12,r24
 1012 006e D906      		cpc r13,r25
 1013 0070 00F4      		brsh .L72
 1014               	.LVL76:
 1015               	.LBB36:
 1016               	.LBB37:
  96:quantum/process_keycode/process_tap_dance.c ****     return;
 1017               		.loc 1 96 0 is_stmt 1
 1018 0072 8F85      		ldd r24,Y+15
 1019 0074 8111      		cpse r24,__zero_reg__
 1020 0076 00C0      		rjmp .L74
 1021 0078 CE01      		movw r24,r28
 1022 007a 0E94 0000 		call process_tap_dance_action_on_dance_finished.part.0
 1023               	.LVL77:
 1024               	.L74:
 1025               	.LBE37:
 1026               	.LBE36:
 184:quantum/process_keycode/process_tap_dance.c ****     }
 1027               		.loc 1 184 0
 1028 007e E09E      		mul r14,r16
 1029 0080 C001      		movw r24,r0
 1030 0082 E19E      		mul r14,r17
 1031 0084 900D      		add r25,r0
 1032 0086 1124      		clr __zero_reg__
 1033 0088 8050      		subi r24,lo8(-(tap_dance_actions+6))
 1034 008a 9040      		sbci r25,hi8(-(tap_dance_actions+6))
 1035 008c 0E94 0000 		call reset_tap_dance
 1036               	.LVL78:
 1037               	.L72:
 1038               	.LBE38:
 174:quantum/process_keycode/process_tap_dance.c ****     qk_tap_dance_action_t *action = &tap_dance_actions[i];
 1039               		.loc 1 174 0 discriminator 2
 1040 0090 F394      		inc r15
 1041               	.LVL79:
 1042 0092 00C0      		rjmp .L69
 1043               	.LVL80:
 1044               	.L67:
 1045               	/* epilogue start */
 1046               	.LBE34:
 187:quantum/process_keycode/process_tap_dance.c **** 
 1047               		.loc 1 187 0
 1048 0094 DF91      		pop r29
 1049 0096 CF91      		pop r28
 1050 0098 1F91      		pop r17
 1051 009a 0F91      		pop r16
 1052 009c FF90      		pop r15
 1053 009e EF90      		pop r14
 1054 00a0 DF90      		pop r13
 1055 00a2 CF90      		pop r12
 1056 00a4 0895      		ret
 1057               		.cfi_endproc
 1058               	.LFE40:
 1060               		.section	.data.highest_td,"aw",@progbits
 1063               	highest_td:
 1064 0000 FF        		.byte	-1
 1065               		.section	.bss.last_td,"aw",@nobits
 1068               	last_td:
 1069 0000 0000      		.zero	2
 1070               		.text
 1071               	.Letext0:
 1072               		.file 3 "/usr/lib/avr/include/stdint.h"
 1073               		.file 4 "./tmk_core/common/keyboard.h"
 1074               		.file 5 "./tmk_core/common/action.h"
 1075               		.file 6 "./tmk_core/common/report.h"
 1076               		.file 7 "./quantum/process_keycode/process_tap_dance.h"
 1077               		.file 8 "./tmk_core/common/action_util.h"
 1078               		.file 9 "./quantum/quantum.h"
 1079               		.file 10 "./tmk_core/common/action_layer.h"
 1080               		.file 11 "./tmk_core/common/timer.h"
 1081               		.file 12 "./quantum/quantum_keycodes.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 process_tap_dance.c
     /tmp/ccsbEHe0.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccsbEHe0.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccsbEHe0.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccsbEHe0.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccsbEHe0.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccsbEHe0.s:12     .text.process_tap_dance_action_on_dance_finished.part.0:0000000000000000 process_tap_dance_action_on_dance_finished.part.0
     /tmp/ccsbEHe0.s:87     .text.rgblight_toggle:0000000000000000 rgblight_toggle
     /tmp/ccsbEHe0.s:101    .text.rgblight_step:0000000000000000 rgblight_step
     /tmp/ccsbEHe0.s:115    .text.rgblight_step_reverse:0000000000000000 rgblight_step_reverse
     /tmp/ccsbEHe0.s:129    .text.rgblight_increase_hue:0000000000000000 rgblight_increase_hue
     /tmp/ccsbEHe0.s:143    .text.rgblight_decrease_hue:0000000000000000 rgblight_decrease_hue
     /tmp/ccsbEHe0.s:157    .text.rgblight_increase_sat:0000000000000000 rgblight_increase_sat
     /tmp/ccsbEHe0.s:171    .text.rgblight_decrease_sat:0000000000000000 rgblight_decrease_sat
     /tmp/ccsbEHe0.s:185    .text.rgblight_increase_val:0000000000000000 rgblight_increase_val
     /tmp/ccsbEHe0.s:199    .text.rgblight_decrease_val:0000000000000000 rgblight_decrease_val
     /tmp/ccsbEHe0.s:213    .text.rgblight_increase_speed:0000000000000000 rgblight_increase_speed
     /tmp/ccsbEHe0.s:227    .text.rgblight_decrease_speed:0000000000000000 rgblight_decrease_speed
     /tmp/ccsbEHe0.s:243    .text.qk_tap_dance_pair_on_each_tap:0000000000000000 qk_tap_dance_pair_on_each_tap
     /tmp/ccsbEHe0.s:291    .text.qk_tap_dance_pair_finished:0000000000000000 qk_tap_dance_pair_finished
     /tmp/ccsbEHe0.s:333    .text.qk_tap_dance_pair_reset:0000000000000000 qk_tap_dance_pair_reset
     /tmp/ccsbEHe0.s:375    .text.qk_tap_dance_dual_role_on_each_tap:0000000000000000 qk_tap_dance_dual_role_on_each_tap
     /tmp/ccsbEHe0.s:421    .text.qk_tap_dance_dual_role_finished:0000000000000000 qk_tap_dance_dual_role_finished
     /tmp/ccsbEHe0.s:461    .text.qk_tap_dance_dual_role_reset:0000000000000000 qk_tap_dance_dual_role_reset
     /tmp/ccsbEHe0.s:491    .text.reset_tap_dance:0000000000000000 reset_tap_dance
     /tmp/ccsbEHe0.s:1068   .bss.last_td:0000000000000000 last_td
     /tmp/ccsbEHe0.s:620    .text.preprocess_tap_dance:0000000000000000 preprocess_tap_dance
     /tmp/ccsbEHe0.s:1063   .data.highest_td:0000000000000000 highest_td
     /tmp/ccsbEHe0.s:750    .text.process_tap_dance:0000000000000000 process_tap_dance
     /tmp/ccsbEHe0.s:911    .text.matrix_scan_tap_dance:0000000000000000 matrix_scan_tap_dance

UNDEFINED SYMBOLS
add_mods
add_weak_mods
send_keyboard_report
register_code16
unregister_code16
layer_move
tap_dance_actions
del_mods
del_weak_mods
timer_read
get_oneshot_mods
get_mods
get_weak_mods
timer_elapsed
__do_copy_data
__do_clear_bss
