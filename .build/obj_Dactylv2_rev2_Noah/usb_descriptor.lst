   1               		.file	"usb_descriptor.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.get_usb_descriptor,"ax",@progbits
  11               	.global	get_usb_descriptor
  13               	get_usb_descriptor:
  14               	.LFB100:
  15               		.file 1 "tmk_core/protocol/usb_descriptor.c"
   1:tmk_core/protocol/usb_descriptor.c **** /*
   2:tmk_core/protocol/usb_descriptor.c ****  * Copyright 2012 Jun Wako <wakojun@gmail.com>
   3:tmk_core/protocol/usb_descriptor.c ****  * This file is based on:
   4:tmk_core/protocol/usb_descriptor.c ****  *     LUFA-120219/Demos/Device/Lowlevel/KeyboardMouse
   5:tmk_core/protocol/usb_descriptor.c ****  *     LUFA-120219/Demos/Device/Lowlevel/GenericHID
   6:tmk_core/protocol/usb_descriptor.c ****  */
   7:tmk_core/protocol/usb_descriptor.c **** 
   8:tmk_core/protocol/usb_descriptor.c **** /*
   9:tmk_core/protocol/usb_descriptor.c ****              LUFA Library
  10:tmk_core/protocol/usb_descriptor.c ****      Copyright (C) Dean Camera, 2012.
  11:tmk_core/protocol/usb_descriptor.c **** 
  12:tmk_core/protocol/usb_descriptor.c ****   dean [at] fourwalledcubicle [dot] com
  13:tmk_core/protocol/usb_descriptor.c ****            www.lufa-lib.org
  14:tmk_core/protocol/usb_descriptor.c **** */
  15:tmk_core/protocol/usb_descriptor.c **** 
  16:tmk_core/protocol/usb_descriptor.c **** /*
  17:tmk_core/protocol/usb_descriptor.c ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  18:tmk_core/protocol/usb_descriptor.c ****   Copyright 2010  Denver Gingerich (denver [at] ossguy [dot] com)
  19:tmk_core/protocol/usb_descriptor.c **** 
  20:tmk_core/protocol/usb_descriptor.c ****   Permission to use, copy, modify, distribute, and sell this
  21:tmk_core/protocol/usb_descriptor.c ****   software and its documentation for any purpose is hereby granted
  22:tmk_core/protocol/usb_descriptor.c ****   without fee, provided that the above copyright notice appear in
  23:tmk_core/protocol/usb_descriptor.c ****   all copies and that both that the copyright notice and this
  24:tmk_core/protocol/usb_descriptor.c ****   permission notice and warranty disclaimer appear in supporting
  25:tmk_core/protocol/usb_descriptor.c ****   documentation, and that the name of the author not be used in
  26:tmk_core/protocol/usb_descriptor.c ****   advertising or publicity pertaining to distribution of the
  27:tmk_core/protocol/usb_descriptor.c ****   software without specific, written prior permission.
  28:tmk_core/protocol/usb_descriptor.c **** 
  29:tmk_core/protocol/usb_descriptor.c ****   The author disclaim all warranties with regard to this
  30:tmk_core/protocol/usb_descriptor.c ****   software, including all implied warranties of merchantability
  31:tmk_core/protocol/usb_descriptor.c ****   and fitness.  In no event shall the author be liable for any
  32:tmk_core/protocol/usb_descriptor.c ****   special, indirect or consequential damages or any damages
  33:tmk_core/protocol/usb_descriptor.c ****   whatsoever resulting from loss of use, data or profits, whether
  34:tmk_core/protocol/usb_descriptor.c ****   in an action of contract, negligence or other tortious action,
  35:tmk_core/protocol/usb_descriptor.c ****   arising out of or in connection with the use or performance of
  36:tmk_core/protocol/usb_descriptor.c ****   this software.
  37:tmk_core/protocol/usb_descriptor.c **** */
  38:tmk_core/protocol/usb_descriptor.c **** 
  39:tmk_core/protocol/usb_descriptor.c **** #include "util.h"
  40:tmk_core/protocol/usb_descriptor.c **** #include "report.h"
  41:tmk_core/protocol/usb_descriptor.c **** #include "usb_descriptor.h"
  42:tmk_core/protocol/usb_descriptor.c **** 
  43:tmk_core/protocol/usb_descriptor.c **** #ifndef USB_MAX_POWER_CONSUMPTION
  44:tmk_core/protocol/usb_descriptor.c **** #define USB_MAX_POWER_CONSUMPTION 500
  45:tmk_core/protocol/usb_descriptor.c **** #endif
  46:tmk_core/protocol/usb_descriptor.c **** 
  47:tmk_core/protocol/usb_descriptor.c **** /*******************************************************************************
  48:tmk_core/protocol/usb_descriptor.c ****  * HID Report Descriptors
  49:tmk_core/protocol/usb_descriptor.c ****  ******************************************************************************/
  50:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM KeyboardReport[] =
  51:tmk_core/protocol/usb_descriptor.c **** {
  52:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01), /* Generic Desktop */
  53:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x06), /* Keyboard */
  54:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01), /* Application */
  55:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07), /* Key Codes */
  56:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0xE0), /* Keyboard Left Control */
  57:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0xE7), /* Keyboard Right GUI */
  58:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
  59:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0x01),
  60:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x08),
  61:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
  62:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
  63:tmk_core/protocol/usb_descriptor.c **** 
  64:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x01),
  65:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
  66:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_CONSTANT),  /* reserved */
  67:tmk_core/protocol/usb_descriptor.c **** 
  68:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x08), /* LEDs */
  69:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x01), /* Num Lock */
  70:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0x05), /* Kana */
  71:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x05),
  72:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
  73:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
  74:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x01),
  75:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x03),
  76:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_CONSTANT),
  77:tmk_core/protocol/usb_descriptor.c **** 
  78:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07), /* Keyboard */
  79:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x00), /* Reserved (no event indicated) */
  80:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0xFF), /* Keyboard Application */
  81:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
  82:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
  83:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x06),
  84:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
  85:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
  86:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
  87:tmk_core/protocol/usb_descriptor.c **** };
  88:tmk_core/protocol/usb_descriptor.c **** 
  89:tmk_core/protocol/usb_descriptor.c **** #ifdef MOUSE_ENABLE
  90:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM MouseReport[] =
  91:tmk_core/protocol/usb_descriptor.c **** {
  92:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01), /* Generic Desktop */
  93:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x02), /* Mouse */
  94:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01), /* Application */
  95:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE(8, 0x01), /* Pointer */
  96:tmk_core/protocol/usb_descriptor.c ****         HID_RI_COLLECTION(8, 0x00), /* Physical */
  97:tmk_core/protocol/usb_descriptor.c **** 
  98:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_PAGE(8, 0x09), /* Button */
  99:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_MINIMUM(8, 0x01),  /* Button 1 */
 100:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_MAXIMUM(8, 0x05),  /* Button 5 */
 101:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, 0x00),
 102:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 103:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x05),
 104:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x01),
 105:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 106:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x01),
 107:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x03),
 108:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_CONSTANT),
 109:tmk_core/protocol/usb_descriptor.c **** 
 110:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_PAGE(8, 0x01), /* Generic Desktop */
 111:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x30), /* Usage X */
 112:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x31), /* Usage Y */
 113:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, -127),
 114:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 127),
 115:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x02),
 116:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x08),
 117:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 118:tmk_core/protocol/usb_descriptor.c **** 
 119:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x38), /* Wheel */
 120:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, -127),
 121:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 127),
 122:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x01),
 123:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x08),
 124:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 125:tmk_core/protocol/usb_descriptor.c **** 
 126:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_PAGE(8, 0x0C), /* Consumer */
 127:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(16, 0x0238), /* AC Pan (Horizontal wheel) */
 128:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, -127),
 129:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 127),
 130:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x01),
 131:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x08),
 132:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 133:tmk_core/protocol/usb_descriptor.c **** 
 134:tmk_core/protocol/usb_descriptor.c ****         HID_RI_END_COLLECTION(0),
 135:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 136:tmk_core/protocol/usb_descriptor.c **** };
 137:tmk_core/protocol/usb_descriptor.c **** #endif
 138:tmk_core/protocol/usb_descriptor.c **** 
 139:tmk_core/protocol/usb_descriptor.c **** #ifdef EXTRAKEY_ENABLE
 140:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM ExtrakeyReport[] =
 141:tmk_core/protocol/usb_descriptor.c **** {
 142:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01), /* Generic Desktop */
 143:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x80), /* System Control */
 144:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01), /* Application */
 145:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_SYSTEM),
 146:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(16, 0x0001),
 147:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x0003),
 148:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(16, 0x0081), /* System Power Down */
 149:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(16, 0x0083), /* System Wake Up */
 150:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 16),
 151:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 1),
 152:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
 153:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 154:tmk_core/protocol/usb_descriptor.c **** 
 155:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x0C), /* Consumer */
 156:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x01), /* Consumer Control */
 157:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01), /* Application */
 158:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_CONSUMER),
 159:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(16, 0x0001),
 160:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x029C),
 161:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(16, 0x0001), /* +10 */
 162:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(16, 0x029C), /* AC Distribute Vertically */
 163:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 16),
 164:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 1),
 165:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
 166:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 167:tmk_core/protocol/usb_descriptor.c **** };
 168:tmk_core/protocol/usb_descriptor.c **** #endif
 169:tmk_core/protocol/usb_descriptor.c **** 
 170:tmk_core/protocol/usb_descriptor.c **** #ifdef RAW_ENABLE
 171:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM RawReport[] =
 172:tmk_core/protocol/usb_descriptor.c **** {
 173:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(16, 0xFF60), /* Vendor Page 0xFF60 */
 174:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x61), /* Vendor Usage 0x61 */
 175:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01), /* Application */
 176:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE(8, 0x62), /* Vendor Usage 0x62 */
 177:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 178:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 179:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, RAW_EPSIZE),
 180:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
 181:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 182:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE(8, 0x63), /* Vendor Usage 0x63 */
 183:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 184:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 185:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, RAW_EPSIZE),
 186:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
 187:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
 188:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 189:tmk_core/protocol/usb_descriptor.c **** };
 190:tmk_core/protocol/usb_descriptor.c **** #endif
 191:tmk_core/protocol/usb_descriptor.c **** 
 192:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
 193:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM ConsoleReport[] =
 194:tmk_core/protocol/usb_descriptor.c **** {
 195:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(16, 0xFF31), /* Vendor Page(PJRC Teensy compatible) */
 196:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x74), /* Vendor Usage(PJRC Teensy compatible) */
 197:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01), /* Application */
 198:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE(8, 0x75), /* Vendor Usage 0x75 */
 199:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 200:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 201:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, CONSOLE_EPSIZE),
 202:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
 203:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 204:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE(8, 0x76), /* Vendor Usage 0x76 */
 205:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 206:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 207:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, CONSOLE_EPSIZE),
 208:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
 209:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
 210:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 211:tmk_core/protocol/usb_descriptor.c **** };
 212:tmk_core/protocol/usb_descriptor.c **** #endif
 213:tmk_core/protocol/usb_descriptor.c **** 
 214:tmk_core/protocol/usb_descriptor.c **** #ifdef NKRO_ENABLE
 215:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM NKROReport[] =
 216:tmk_core/protocol/usb_descriptor.c **** {
 217:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01), /* Generic Desktop */
 218:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x06), /* Keyboard */
 219:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01), /* Application */
 220:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07), /* Key Codes */
 221:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0xE0), /* Keyboard Left Control */
 222:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0xE7), /* Keyboard Right GUI */
 223:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 224:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 225:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x08),
 226:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
 227:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 228:tmk_core/protocol/usb_descriptor.c **** 
 229:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x08), /* LEDs */
 230:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x01), /* Num Lock */
 231:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0x05), /* Kana */
 232:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x05),
 233:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
 234:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
 235:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x01),
 236:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x03),
 237:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_CONSTANT),
 238:tmk_core/protocol/usb_descriptor.c **** 
 239:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07), /* Key Codes */
 240:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x00), /* Keyboard 0 */
 241:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, (NKRO_EPSIZE-1)*8-1), /* Keyboard Right GUI */
 242:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 243:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 244:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, (NKRO_EPSIZE-1)*8),
 245:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
 246:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 247:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 248:tmk_core/protocol/usb_descriptor.c **** };
 249:tmk_core/protocol/usb_descriptor.c **** #endif
 250:tmk_core/protocol/usb_descriptor.c **** 
 251:tmk_core/protocol/usb_descriptor.c **** /*******************************************************************************
 252:tmk_core/protocol/usb_descriptor.c ****  * Device Descriptors
 253:tmk_core/protocol/usb_descriptor.c ****  ******************************************************************************/
 254:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_Device_t PROGMEM DeviceDescriptor =
 255:tmk_core/protocol/usb_descriptor.c **** {
 256:tmk_core/protocol/usb_descriptor.c ****     .Header                 = {.Size = sizeof(USB_Descriptor_Device_t), .Type = DTYPE_Device},
 257:tmk_core/protocol/usb_descriptor.c **** 
 258:tmk_core/protocol/usb_descriptor.c ****     .USBSpecification       = VERSION_BCD(1,1,0),
 259:tmk_core/protocol/usb_descriptor.c **** #if VIRTSER_ENABLE
 260:tmk_core/protocol/usb_descriptor.c ****     .Class                  = USB_CSCP_IADDeviceClass,
 261:tmk_core/protocol/usb_descriptor.c ****     .SubClass               = USB_CSCP_IADDeviceSubclass,
 262:tmk_core/protocol/usb_descriptor.c ****     .Protocol               = USB_CSCP_IADDeviceProtocol,
 263:tmk_core/protocol/usb_descriptor.c **** #else
 264:tmk_core/protocol/usb_descriptor.c ****     .Class                  = USB_CSCP_NoDeviceClass,
 265:tmk_core/protocol/usb_descriptor.c ****     .SubClass               = USB_CSCP_NoDeviceSubclass,
 266:tmk_core/protocol/usb_descriptor.c ****     .Protocol               = USB_CSCP_NoDeviceProtocol,
 267:tmk_core/protocol/usb_descriptor.c **** #endif
 268:tmk_core/protocol/usb_descriptor.c **** 
 269:tmk_core/protocol/usb_descriptor.c ****     .Endpoint0Size          = FIXED_CONTROL_ENDPOINT_SIZE,
 270:tmk_core/protocol/usb_descriptor.c **** 
 271:tmk_core/protocol/usb_descriptor.c ****     /* specified in config.h */
 272:tmk_core/protocol/usb_descriptor.c ****     .VendorID               = VENDOR_ID,
 273:tmk_core/protocol/usb_descriptor.c ****     .ProductID              = PRODUCT_ID,
 274:tmk_core/protocol/usb_descriptor.c ****     .ReleaseNumber          = DEVICE_VER,
 275:tmk_core/protocol/usb_descriptor.c **** 
 276:tmk_core/protocol/usb_descriptor.c ****     .ManufacturerStrIndex   = 0x01,
 277:tmk_core/protocol/usb_descriptor.c ****     .ProductStrIndex        = 0x02,
 278:tmk_core/protocol/usb_descriptor.c ****     .SerialNumStrIndex      = 0x03,
 279:tmk_core/protocol/usb_descriptor.c **** 
 280:tmk_core/protocol/usb_descriptor.c ****     .NumberOfConfigurations = FIXED_NUM_CONFIGURATIONS
 281:tmk_core/protocol/usb_descriptor.c **** };
 282:tmk_core/protocol/usb_descriptor.c **** 
 283:tmk_core/protocol/usb_descriptor.c **** /*******************************************************************************
 284:tmk_core/protocol/usb_descriptor.c ****  * Configuration Descriptors
 285:tmk_core/protocol/usb_descriptor.c ****  ******************************************************************************/
 286:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_Configuration_t PROGMEM ConfigurationDescriptor =
 287:tmk_core/protocol/usb_descriptor.c **** {
 288:tmk_core/protocol/usb_descriptor.c ****     .Config =
 289:tmk_core/protocol/usb_descriptor.c ****         {
 290:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Configuration_Header_t), .Type
 291:tmk_core/protocol/usb_descriptor.c **** 
 292:tmk_core/protocol/usb_descriptor.c ****             .TotalConfigurationSize = sizeof(USB_Descriptor_Configuration_t),
 293:tmk_core/protocol/usb_descriptor.c ****             .TotalInterfaces        = TOTAL_INTERFACES,
 294:tmk_core/protocol/usb_descriptor.c **** 
 295:tmk_core/protocol/usb_descriptor.c ****             .ConfigurationNumber    = 1,
 296:tmk_core/protocol/usb_descriptor.c ****             .ConfigurationStrIndex  = NO_DESCRIPTOR,
 297:tmk_core/protocol/usb_descriptor.c **** 
 298:tmk_core/protocol/usb_descriptor.c ****             .ConfigAttributes       = (USB_CONFIG_ATTR_RESERVED | USB_CONFIG_ATTR_REMOTEWAKEUP),
 299:tmk_core/protocol/usb_descriptor.c **** 
 300:tmk_core/protocol/usb_descriptor.c ****             .MaxPowerConsumption    = USB_CONFIG_POWER_MA(USB_MAX_POWER_CONSUMPTION)
 301:tmk_core/protocol/usb_descriptor.c ****         },
 302:tmk_core/protocol/usb_descriptor.c **** 
 303:tmk_core/protocol/usb_descriptor.c ****     /*
 304:tmk_core/protocol/usb_descriptor.c ****      * Keyboard
 305:tmk_core/protocol/usb_descriptor.c ****      */
 306:tmk_core/protocol/usb_descriptor.c ****     .Keyboard_Interface =
 307:tmk_core/protocol/usb_descriptor.c ****         {
 308:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_In
 309:tmk_core/protocol/usb_descriptor.c **** 
 310:tmk_core/protocol/usb_descriptor.c ****             .InterfaceNumber        = KEYBOARD_INTERFACE,
 311:tmk_core/protocol/usb_descriptor.c ****             .AlternateSetting       = 0x00,
 312:tmk_core/protocol/usb_descriptor.c **** 
 313:tmk_core/protocol/usb_descriptor.c ****             .TotalEndpoints         = 1,
 314:tmk_core/protocol/usb_descriptor.c **** 
 315:tmk_core/protocol/usb_descriptor.c ****             .Class                  = HID_CSCP_HIDClass,
 316:tmk_core/protocol/usb_descriptor.c ****             .SubClass               = HID_CSCP_BootSubclass,
 317:tmk_core/protocol/usb_descriptor.c ****             .Protocol               = HID_CSCP_KeyboardBootProtocol,
 318:tmk_core/protocol/usb_descriptor.c **** 
 319:tmk_core/protocol/usb_descriptor.c ****             .InterfaceStrIndex      = NO_DESCRIPTOR
 320:tmk_core/protocol/usb_descriptor.c ****         },
 321:tmk_core/protocol/usb_descriptor.c **** 
 322:tmk_core/protocol/usb_descriptor.c ****     .Keyboard_HID =
 323:tmk_core/protocol/usb_descriptor.c ****         {
 324:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HID_DTYPE_
 325:tmk_core/protocol/usb_descriptor.c **** 
 326:tmk_core/protocol/usb_descriptor.c ****             .HIDSpec                = VERSION_BCD(1,1,1),
 327:tmk_core/protocol/usb_descriptor.c ****             .CountryCode            = 0x00,
 328:tmk_core/protocol/usb_descriptor.c ****             .TotalReportDescriptors = 1,
 329:tmk_core/protocol/usb_descriptor.c ****             .HIDReportType          = HID_DTYPE_Report,
 330:tmk_core/protocol/usb_descriptor.c ****             .HIDReportLength        = sizeof(KeyboardReport)
 331:tmk_core/protocol/usb_descriptor.c ****         },
 332:tmk_core/protocol/usb_descriptor.c **** 
 333:tmk_core/protocol/usb_descriptor.c ****     .Keyboard_INEndpoint =
 334:tmk_core/protocol/usb_descriptor.c ****         {
 335:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_End
 336:tmk_core/protocol/usb_descriptor.c **** 
 337:tmk_core/protocol/usb_descriptor.c ****             .EndpointAddress        = (ENDPOINT_DIR_IN | KEYBOARD_IN_EPNUM),
 338:tmk_core/protocol/usb_descriptor.c ****             .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_D
 339:tmk_core/protocol/usb_descriptor.c ****             .EndpointSize           = KEYBOARD_EPSIZE,
 340:tmk_core/protocol/usb_descriptor.c ****             .PollingIntervalMS      = 0x0A
 341:tmk_core/protocol/usb_descriptor.c ****         },
 342:tmk_core/protocol/usb_descriptor.c **** 
 343:tmk_core/protocol/usb_descriptor.c ****     /*
 344:tmk_core/protocol/usb_descriptor.c ****      * Mouse
 345:tmk_core/protocol/usb_descriptor.c ****      */
 346:tmk_core/protocol/usb_descriptor.c **** #ifdef MOUSE_ENABLE
 347:tmk_core/protocol/usb_descriptor.c ****     .Mouse_Interface =
 348:tmk_core/protocol/usb_descriptor.c ****         {
 349:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_In
 350:tmk_core/protocol/usb_descriptor.c **** 
 351:tmk_core/protocol/usb_descriptor.c ****             .InterfaceNumber        = MOUSE_INTERFACE,
 352:tmk_core/protocol/usb_descriptor.c ****             .AlternateSetting       = 0x00,
 353:tmk_core/protocol/usb_descriptor.c **** 
 354:tmk_core/protocol/usb_descriptor.c ****             .TotalEndpoints         = 1,
 355:tmk_core/protocol/usb_descriptor.c **** 
 356:tmk_core/protocol/usb_descriptor.c ****             .Class                  = HID_CSCP_HIDClass,
 357:tmk_core/protocol/usb_descriptor.c ****             .SubClass               = HID_CSCP_BootSubclass,
 358:tmk_core/protocol/usb_descriptor.c ****             .Protocol               = HID_CSCP_MouseBootProtocol,
 359:tmk_core/protocol/usb_descriptor.c **** 
 360:tmk_core/protocol/usb_descriptor.c ****             .InterfaceStrIndex      = NO_DESCRIPTOR
 361:tmk_core/protocol/usb_descriptor.c ****         },
 362:tmk_core/protocol/usb_descriptor.c **** 
 363:tmk_core/protocol/usb_descriptor.c ****     .Mouse_HID =
 364:tmk_core/protocol/usb_descriptor.c ****         {
 365:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HID_DTYPE_
 366:tmk_core/protocol/usb_descriptor.c **** 
 367:tmk_core/protocol/usb_descriptor.c ****             .HIDSpec                = VERSION_BCD(1,1,1),
 368:tmk_core/protocol/usb_descriptor.c ****             .CountryCode            = 0x00,
 369:tmk_core/protocol/usb_descriptor.c ****             .TotalReportDescriptors = 1,
 370:tmk_core/protocol/usb_descriptor.c ****             .HIDReportType          = HID_DTYPE_Report,
 371:tmk_core/protocol/usb_descriptor.c ****             .HIDReportLength        = sizeof(MouseReport)
 372:tmk_core/protocol/usb_descriptor.c ****         },
 373:tmk_core/protocol/usb_descriptor.c **** 
 374:tmk_core/protocol/usb_descriptor.c ****     .Mouse_INEndpoint =
 375:tmk_core/protocol/usb_descriptor.c ****         {
 376:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_End
 377:tmk_core/protocol/usb_descriptor.c **** 
 378:tmk_core/protocol/usb_descriptor.c ****             .EndpointAddress        = (ENDPOINT_DIR_IN | MOUSE_IN_EPNUM),
 379:tmk_core/protocol/usb_descriptor.c ****             .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_D
 380:tmk_core/protocol/usb_descriptor.c ****             .EndpointSize           = MOUSE_EPSIZE,
 381:tmk_core/protocol/usb_descriptor.c ****             .PollingIntervalMS      = 0x0A
 382:tmk_core/protocol/usb_descriptor.c ****         },
 383:tmk_core/protocol/usb_descriptor.c **** #endif
 384:tmk_core/protocol/usb_descriptor.c **** 
 385:tmk_core/protocol/usb_descriptor.c ****     /*
 386:tmk_core/protocol/usb_descriptor.c ****      * Extra
 387:tmk_core/protocol/usb_descriptor.c ****      */
 388:tmk_core/protocol/usb_descriptor.c **** #ifdef EXTRAKEY_ENABLE
 389:tmk_core/protocol/usb_descriptor.c ****     .Extrakey_Interface =
 390:tmk_core/protocol/usb_descriptor.c ****         {
 391:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_In
 392:tmk_core/protocol/usb_descriptor.c **** 
 393:tmk_core/protocol/usb_descriptor.c ****             .InterfaceNumber        = EXTRAKEY_INTERFACE,
 394:tmk_core/protocol/usb_descriptor.c ****             .AlternateSetting       = 0x00,
 395:tmk_core/protocol/usb_descriptor.c **** 
 396:tmk_core/protocol/usb_descriptor.c ****             .TotalEndpoints         = 1,
 397:tmk_core/protocol/usb_descriptor.c **** 
 398:tmk_core/protocol/usb_descriptor.c ****             .Class                  = HID_CSCP_HIDClass,
 399:tmk_core/protocol/usb_descriptor.c ****             .SubClass               = HID_CSCP_NonBootSubclass,
 400:tmk_core/protocol/usb_descriptor.c ****             .Protocol               = HID_CSCP_NonBootProtocol,
 401:tmk_core/protocol/usb_descriptor.c **** 
 402:tmk_core/protocol/usb_descriptor.c ****             .InterfaceStrIndex      = NO_DESCRIPTOR
 403:tmk_core/protocol/usb_descriptor.c ****         },
 404:tmk_core/protocol/usb_descriptor.c **** 
 405:tmk_core/protocol/usb_descriptor.c ****     .Extrakey_HID =
 406:tmk_core/protocol/usb_descriptor.c ****         {
 407:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HID_DTYPE_
 408:tmk_core/protocol/usb_descriptor.c **** 
 409:tmk_core/protocol/usb_descriptor.c ****             .HIDSpec                = VERSION_BCD(1,1,1),
 410:tmk_core/protocol/usb_descriptor.c ****             .CountryCode            = 0x00,
 411:tmk_core/protocol/usb_descriptor.c ****             .TotalReportDescriptors = 1,
 412:tmk_core/protocol/usb_descriptor.c ****             .HIDReportType          = HID_DTYPE_Report,
 413:tmk_core/protocol/usb_descriptor.c ****             .HIDReportLength        = sizeof(ExtrakeyReport)
 414:tmk_core/protocol/usb_descriptor.c ****         },
 415:tmk_core/protocol/usb_descriptor.c **** 
 416:tmk_core/protocol/usb_descriptor.c ****     .Extrakey_INEndpoint =
 417:tmk_core/protocol/usb_descriptor.c ****         {
 418:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_End
 419:tmk_core/protocol/usb_descriptor.c **** 
 420:tmk_core/protocol/usb_descriptor.c ****             .EndpointAddress        = (ENDPOINT_DIR_IN | EXTRAKEY_IN_EPNUM),
 421:tmk_core/protocol/usb_descriptor.c ****             .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_D
 422:tmk_core/protocol/usb_descriptor.c ****             .EndpointSize           = EXTRAKEY_EPSIZE,
 423:tmk_core/protocol/usb_descriptor.c ****             .PollingIntervalMS      = 0x0A
 424:tmk_core/protocol/usb_descriptor.c ****         },
 425:tmk_core/protocol/usb_descriptor.c **** #endif
 426:tmk_core/protocol/usb_descriptor.c **** 
 427:tmk_core/protocol/usb_descriptor.c **** 		/*
 428:tmk_core/protocol/usb_descriptor.c **** 	     * Raw
 429:tmk_core/protocol/usb_descriptor.c **** 	     */
 430:tmk_core/protocol/usb_descriptor.c **** 	#ifdef RAW_ENABLE
 431:tmk_core/protocol/usb_descriptor.c **** 	    .Raw_Interface =
 432:tmk_core/protocol/usb_descriptor.c **** 	        {
 433:tmk_core/protocol/usb_descriptor.c **** 	            .Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_I
 434:tmk_core/protocol/usb_descriptor.c **** 
 435:tmk_core/protocol/usb_descriptor.c **** 	            .InterfaceNumber        = RAW_INTERFACE,
 436:tmk_core/protocol/usb_descriptor.c **** 	            .AlternateSetting       = 0x00,
 437:tmk_core/protocol/usb_descriptor.c **** 
 438:tmk_core/protocol/usb_descriptor.c **** 	            .TotalEndpoints         = 2,
 439:tmk_core/protocol/usb_descriptor.c **** 
 440:tmk_core/protocol/usb_descriptor.c **** 	            .Class                  = HID_CSCP_HIDClass,
 441:tmk_core/protocol/usb_descriptor.c **** 	            .SubClass               = HID_CSCP_NonBootSubclass,
 442:tmk_core/protocol/usb_descriptor.c **** 	            .Protocol               = HID_CSCP_NonBootProtocol,
 443:tmk_core/protocol/usb_descriptor.c **** 
 444:tmk_core/protocol/usb_descriptor.c **** 	            .InterfaceStrIndex      = NO_DESCRIPTOR
 445:tmk_core/protocol/usb_descriptor.c **** 	        },
 446:tmk_core/protocol/usb_descriptor.c **** 
 447:tmk_core/protocol/usb_descriptor.c **** 	    .Raw_HID =
 448:tmk_core/protocol/usb_descriptor.c **** 	        {
 449:tmk_core/protocol/usb_descriptor.c **** 	            .Header                 = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HID_DTYPE
 450:tmk_core/protocol/usb_descriptor.c **** 
 451:tmk_core/protocol/usb_descriptor.c **** 	            .HIDSpec                = VERSION_BCD(1,1,1),
 452:tmk_core/protocol/usb_descriptor.c **** 	            .CountryCode            = 0x00,
 453:tmk_core/protocol/usb_descriptor.c **** 	            .TotalReportDescriptors = 1,
 454:tmk_core/protocol/usb_descriptor.c **** 	            .HIDReportType          = HID_DTYPE_Report,
 455:tmk_core/protocol/usb_descriptor.c **** 	            .HIDReportLength        = sizeof(RawReport)
 456:tmk_core/protocol/usb_descriptor.c **** 	        },
 457:tmk_core/protocol/usb_descriptor.c **** 
 458:tmk_core/protocol/usb_descriptor.c **** 	    .Raw_INEndpoint =
 459:tmk_core/protocol/usb_descriptor.c **** 	        {
 460:tmk_core/protocol/usb_descriptor.c **** 	            .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_En
 461:tmk_core/protocol/usb_descriptor.c **** 
 462:tmk_core/protocol/usb_descriptor.c **** 	            .EndpointAddress        = (ENDPOINT_DIR_IN | RAW_IN_EPNUM),
 463:tmk_core/protocol/usb_descriptor.c **** 	            .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_
 464:tmk_core/protocol/usb_descriptor.c **** 	            .EndpointSize           = RAW_EPSIZE,
 465:tmk_core/protocol/usb_descriptor.c **** 	            .PollingIntervalMS      = 0x01
 466:tmk_core/protocol/usb_descriptor.c **** 	        },
 467:tmk_core/protocol/usb_descriptor.c **** 
 468:tmk_core/protocol/usb_descriptor.c **** 	    .Raw_OUTEndpoint =
 469:tmk_core/protocol/usb_descriptor.c **** 	        {
 470:tmk_core/protocol/usb_descriptor.c **** 	            .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_En
 471:tmk_core/protocol/usb_descriptor.c **** 
 472:tmk_core/protocol/usb_descriptor.c **** 	            .EndpointAddress        = (ENDPOINT_DIR_OUT | RAW_OUT_EPNUM),
 473:tmk_core/protocol/usb_descriptor.c **** 	            .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_
 474:tmk_core/protocol/usb_descriptor.c **** 	            .EndpointSize           = RAW_EPSIZE,
 475:tmk_core/protocol/usb_descriptor.c **** 	            .PollingIntervalMS      = 0x01
 476:tmk_core/protocol/usb_descriptor.c **** 	        },
 477:tmk_core/protocol/usb_descriptor.c **** 	#endif
 478:tmk_core/protocol/usb_descriptor.c **** 
 479:tmk_core/protocol/usb_descriptor.c ****     /*
 480:tmk_core/protocol/usb_descriptor.c ****      * Console
 481:tmk_core/protocol/usb_descriptor.c ****      */
 482:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
 483:tmk_core/protocol/usb_descriptor.c ****     .Console_Interface =
 484:tmk_core/protocol/usb_descriptor.c ****         {
 485:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_In
 486:tmk_core/protocol/usb_descriptor.c **** 
 487:tmk_core/protocol/usb_descriptor.c ****             .InterfaceNumber        = CONSOLE_INTERFACE,
 488:tmk_core/protocol/usb_descriptor.c ****             .AlternateSetting       = 0x00,
 489:tmk_core/protocol/usb_descriptor.c **** 
 490:tmk_core/protocol/usb_descriptor.c ****             .TotalEndpoints         = 2,
 491:tmk_core/protocol/usb_descriptor.c **** 
 492:tmk_core/protocol/usb_descriptor.c ****             .Class                  = HID_CSCP_HIDClass,
 493:tmk_core/protocol/usb_descriptor.c ****             .SubClass               = HID_CSCP_NonBootSubclass,
 494:tmk_core/protocol/usb_descriptor.c ****             .Protocol               = HID_CSCP_NonBootProtocol,
 495:tmk_core/protocol/usb_descriptor.c **** 
 496:tmk_core/protocol/usb_descriptor.c ****             .InterfaceStrIndex      = NO_DESCRIPTOR
 497:tmk_core/protocol/usb_descriptor.c ****         },
 498:tmk_core/protocol/usb_descriptor.c **** 
 499:tmk_core/protocol/usb_descriptor.c ****     .Console_HID =
 500:tmk_core/protocol/usb_descriptor.c ****         {
 501:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HID_DTYPE_
 502:tmk_core/protocol/usb_descriptor.c **** 
 503:tmk_core/protocol/usb_descriptor.c ****             .HIDSpec                = VERSION_BCD(1,1,1),
 504:tmk_core/protocol/usb_descriptor.c ****             .CountryCode            = 0x00,
 505:tmk_core/protocol/usb_descriptor.c ****             .TotalReportDescriptors = 1,
 506:tmk_core/protocol/usb_descriptor.c ****             .HIDReportType          = HID_DTYPE_Report,
 507:tmk_core/protocol/usb_descriptor.c ****             .HIDReportLength        = sizeof(ConsoleReport)
 508:tmk_core/protocol/usb_descriptor.c ****         },
 509:tmk_core/protocol/usb_descriptor.c **** 
 510:tmk_core/protocol/usb_descriptor.c ****     .Console_INEndpoint =
 511:tmk_core/protocol/usb_descriptor.c ****         {
 512:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_End
 513:tmk_core/protocol/usb_descriptor.c **** 
 514:tmk_core/protocol/usb_descriptor.c ****             .EndpointAddress        = (ENDPOINT_DIR_IN | CONSOLE_IN_EPNUM),
 515:tmk_core/protocol/usb_descriptor.c ****             .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_D
 516:tmk_core/protocol/usb_descriptor.c ****             .EndpointSize           = CONSOLE_EPSIZE,
 517:tmk_core/protocol/usb_descriptor.c ****             .PollingIntervalMS      = 0x01
 518:tmk_core/protocol/usb_descriptor.c ****         },
 519:tmk_core/protocol/usb_descriptor.c **** 
 520:tmk_core/protocol/usb_descriptor.c ****     .Console_OUTEndpoint =
 521:tmk_core/protocol/usb_descriptor.c ****         {
 522:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_End
 523:tmk_core/protocol/usb_descriptor.c **** 
 524:tmk_core/protocol/usb_descriptor.c ****             .EndpointAddress        = (ENDPOINT_DIR_OUT | CONSOLE_OUT_EPNUM),
 525:tmk_core/protocol/usb_descriptor.c ****             .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_D
 526:tmk_core/protocol/usb_descriptor.c ****             .EndpointSize           = CONSOLE_EPSIZE,
 527:tmk_core/protocol/usb_descriptor.c ****             .PollingIntervalMS      = 0x01
 528:tmk_core/protocol/usb_descriptor.c ****         },
 529:tmk_core/protocol/usb_descriptor.c **** #endif
 530:tmk_core/protocol/usb_descriptor.c **** 
 531:tmk_core/protocol/usb_descriptor.c ****     /*
 532:tmk_core/protocol/usb_descriptor.c ****      * NKRO
 533:tmk_core/protocol/usb_descriptor.c ****      */
 534:tmk_core/protocol/usb_descriptor.c **** #ifdef NKRO_ENABLE
 535:tmk_core/protocol/usb_descriptor.c ****     .NKRO_Interface =
 536:tmk_core/protocol/usb_descriptor.c ****         {
 537:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_In
 538:tmk_core/protocol/usb_descriptor.c **** 
 539:tmk_core/protocol/usb_descriptor.c ****             .InterfaceNumber        = NKRO_INTERFACE,
 540:tmk_core/protocol/usb_descriptor.c ****             .AlternateSetting       = 0x00,
 541:tmk_core/protocol/usb_descriptor.c **** 
 542:tmk_core/protocol/usb_descriptor.c ****             .TotalEndpoints         = 1,
 543:tmk_core/protocol/usb_descriptor.c **** 
 544:tmk_core/protocol/usb_descriptor.c ****             .Class                  = HID_CSCP_HIDClass,
 545:tmk_core/protocol/usb_descriptor.c ****             .SubClass               = HID_CSCP_NonBootSubclass,
 546:tmk_core/protocol/usb_descriptor.c ****             .Protocol               = HID_CSCP_NonBootProtocol,
 547:tmk_core/protocol/usb_descriptor.c **** 
 548:tmk_core/protocol/usb_descriptor.c ****             .InterfaceStrIndex      = NO_DESCRIPTOR
 549:tmk_core/protocol/usb_descriptor.c ****         },
 550:tmk_core/protocol/usb_descriptor.c **** 
 551:tmk_core/protocol/usb_descriptor.c ****     .NKRO_HID =
 552:tmk_core/protocol/usb_descriptor.c ****         {
 553:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HID_DTYPE_
 554:tmk_core/protocol/usb_descriptor.c **** 
 555:tmk_core/protocol/usb_descriptor.c ****             .HIDSpec                = VERSION_BCD(1,1,1),
 556:tmk_core/protocol/usb_descriptor.c ****             .CountryCode            = 0x00,
 557:tmk_core/protocol/usb_descriptor.c ****             .TotalReportDescriptors = 1,
 558:tmk_core/protocol/usb_descriptor.c ****             .HIDReportType          = HID_DTYPE_Report,
 559:tmk_core/protocol/usb_descriptor.c ****             .HIDReportLength        = sizeof(NKROReport)
 560:tmk_core/protocol/usb_descriptor.c ****         },
 561:tmk_core/protocol/usb_descriptor.c **** 
 562:tmk_core/protocol/usb_descriptor.c ****     .NKRO_INEndpoint =
 563:tmk_core/protocol/usb_descriptor.c ****         {
 564:tmk_core/protocol/usb_descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_End
 565:tmk_core/protocol/usb_descriptor.c **** 
 566:tmk_core/protocol/usb_descriptor.c ****             .EndpointAddress        = (ENDPOINT_DIR_IN | NKRO_IN_EPNUM),
 567:tmk_core/protocol/usb_descriptor.c ****             .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_D
 568:tmk_core/protocol/usb_descriptor.c ****             .EndpointSize           = NKRO_EPSIZE,
 569:tmk_core/protocol/usb_descriptor.c ****             .PollingIntervalMS      = 0x01
 570:tmk_core/protocol/usb_descriptor.c ****         },
 571:tmk_core/protocol/usb_descriptor.c **** #endif
 572:tmk_core/protocol/usb_descriptor.c **** 
 573:tmk_core/protocol/usb_descriptor.c **** #ifdef MIDI_ENABLE
 574:tmk_core/protocol/usb_descriptor.c ****     .Audio_Interface_Association =
 575:tmk_core/protocol/usb_descriptor.c ****         {
 576:tmk_core/protocol/usb_descriptor.c ****             .Header                   = {.Size = sizeof(USB_Descriptor_Interface_Association_t), .T
 577:tmk_core/protocol/usb_descriptor.c **** 
 578:tmk_core/protocol/usb_descriptor.c ****             .FirstInterfaceIndex      = AC_INTERFACE,
 579:tmk_core/protocol/usb_descriptor.c ****             .TotalInterfaces          = 2,
 580:tmk_core/protocol/usb_descriptor.c **** 
 581:tmk_core/protocol/usb_descriptor.c ****             .Class                    = AUDIO_CSCP_AudioClass,
 582:tmk_core/protocol/usb_descriptor.c ****             .SubClass                 = AUDIO_CSCP_ControlSubclass,
 583:tmk_core/protocol/usb_descriptor.c ****             .Protocol                 = AUDIO_CSCP_ControlProtocol,
 584:tmk_core/protocol/usb_descriptor.c **** 
 585:tmk_core/protocol/usb_descriptor.c ****             .IADStrIndex              = NO_DESCRIPTOR,
 586:tmk_core/protocol/usb_descriptor.c ****         },
 587:tmk_core/protocol/usb_descriptor.c ****     .Audio_ControlInterface =
 588:tmk_core/protocol/usb_descriptor.c ****         {
 589:tmk_core/protocol/usb_descriptor.c ****             .Header                   = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_
 590:tmk_core/protocol/usb_descriptor.c **** 
 591:tmk_core/protocol/usb_descriptor.c ****             .InterfaceNumber          = AC_INTERFACE,
 592:tmk_core/protocol/usb_descriptor.c ****             .AlternateSetting         = 0,
 593:tmk_core/protocol/usb_descriptor.c **** 
 594:tmk_core/protocol/usb_descriptor.c ****             .TotalEndpoints           = 0,
 595:tmk_core/protocol/usb_descriptor.c **** 
 596:tmk_core/protocol/usb_descriptor.c ****             .Class                    = AUDIO_CSCP_AudioClass,
 597:tmk_core/protocol/usb_descriptor.c ****             .SubClass                 = AUDIO_CSCP_ControlSubclass,
 598:tmk_core/protocol/usb_descriptor.c ****             .Protocol                 = AUDIO_CSCP_ControlProtocol,
 599:tmk_core/protocol/usb_descriptor.c **** 
 600:tmk_core/protocol/usb_descriptor.c ****             .InterfaceStrIndex        = NO_DESCRIPTOR
 601:tmk_core/protocol/usb_descriptor.c ****         },
 602:tmk_core/protocol/usb_descriptor.c **** 
 603:tmk_core/protocol/usb_descriptor.c ****     .Audio_ControlInterface_SPC =
 604:tmk_core/protocol/usb_descriptor.c ****         {
 605:tmk_core/protocol/usb_descriptor.c ****             .Header                   = {.Size = sizeof(USB_Audio_Descriptor_Interface_AC_t), .Type
 606:tmk_core/protocol/usb_descriptor.c ****             .Subtype                  = AUDIO_DSUBTYPE_CSInterface_Header,
 607:tmk_core/protocol/usb_descriptor.c **** 
 608:tmk_core/protocol/usb_descriptor.c ****             .ACSpecification          = VERSION_BCD(1,0,0),
 609:tmk_core/protocol/usb_descriptor.c ****             .TotalLength              = sizeof(USB_Audio_Descriptor_Interface_AC_t),
 610:tmk_core/protocol/usb_descriptor.c **** 
 611:tmk_core/protocol/usb_descriptor.c ****             .InCollection             = 1,
 612:tmk_core/protocol/usb_descriptor.c ****             .InterfaceNumber          = AS_INTERFACE,
 613:tmk_core/protocol/usb_descriptor.c ****         },
 614:tmk_core/protocol/usb_descriptor.c **** 
 615:tmk_core/protocol/usb_descriptor.c ****     .Audio_StreamInterface =
 616:tmk_core/protocol/usb_descriptor.c ****         {
 617:tmk_core/protocol/usb_descriptor.c ****             .Header                   = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_
 618:tmk_core/protocol/usb_descriptor.c **** 
 619:tmk_core/protocol/usb_descriptor.c ****             .InterfaceNumber          = AS_INTERFACE,
 620:tmk_core/protocol/usb_descriptor.c ****             .AlternateSetting         = 0,
 621:tmk_core/protocol/usb_descriptor.c **** 
 622:tmk_core/protocol/usb_descriptor.c ****             .TotalEndpoints           = 2,
 623:tmk_core/protocol/usb_descriptor.c **** 
 624:tmk_core/protocol/usb_descriptor.c ****             .Class                    = AUDIO_CSCP_AudioClass,
 625:tmk_core/protocol/usb_descriptor.c ****             .SubClass                 = AUDIO_CSCP_MIDIStreamingSubclass,
 626:tmk_core/protocol/usb_descriptor.c ****             .Protocol                 = AUDIO_CSCP_StreamingProtocol,
 627:tmk_core/protocol/usb_descriptor.c **** 
 628:tmk_core/protocol/usb_descriptor.c ****             .InterfaceStrIndex        = NO_DESCRIPTOR
 629:tmk_core/protocol/usb_descriptor.c ****         },
 630:tmk_core/protocol/usb_descriptor.c **** 
 631:tmk_core/protocol/usb_descriptor.c ****     .Audio_StreamInterface_SPC =
 632:tmk_core/protocol/usb_descriptor.c ****         {
 633:tmk_core/protocol/usb_descriptor.c ****             .Header                   = {.Size = sizeof(USB_MIDI_Descriptor_AudioInterface_AS_t), .
 634:tmk_core/protocol/usb_descriptor.c ****             .Subtype                  = AUDIO_DSUBTYPE_CSInterface_General,
 635:tmk_core/protocol/usb_descriptor.c **** 
 636:tmk_core/protocol/usb_descriptor.c ****             .AudioSpecification       = VERSION_BCD(1,0,0),
 637:tmk_core/protocol/usb_descriptor.c **** 
 638:tmk_core/protocol/usb_descriptor.c ****             .TotalLength              = offsetof(USB_Descriptor_Configuration_t, MIDI_Out_Jack_Endp
 639:tmk_core/protocol/usb_descriptor.c ****                                         + sizeof(USB_MIDI_Descriptor_Jack_Endpoint_t)
 640:tmk_core/protocol/usb_descriptor.c ****                                         - offsetof(USB_Descriptor_Configuration_t, Audio_StreamInte
 641:tmk_core/protocol/usb_descriptor.c ****         },
 642:tmk_core/protocol/usb_descriptor.c **** 
 643:tmk_core/protocol/usb_descriptor.c ****     .MIDI_In_Jack_Emb =
 644:tmk_core/protocol/usb_descriptor.c ****         {
 645:tmk_core/protocol/usb_descriptor.c ****             .Header                   = {.Size = sizeof(USB_MIDI_Descriptor_InputJack_t), .Type = D
 646:tmk_core/protocol/usb_descriptor.c ****             .Subtype                  = AUDIO_DSUBTYPE_CSInterface_InputTerminal,
 647:tmk_core/protocol/usb_descriptor.c **** 
 648:tmk_core/protocol/usb_descriptor.c ****             .JackType                 = MIDI_JACKTYPE_Embedded,
 649:tmk_core/protocol/usb_descriptor.c ****             .JackID                   = 0x01,
 650:tmk_core/protocol/usb_descriptor.c **** 
 651:tmk_core/protocol/usb_descriptor.c ****             .JackStrIndex             = NO_DESCRIPTOR
 652:tmk_core/protocol/usb_descriptor.c ****         },
 653:tmk_core/protocol/usb_descriptor.c **** 
 654:tmk_core/protocol/usb_descriptor.c ****     .MIDI_In_Jack_Ext =
 655:tmk_core/protocol/usb_descriptor.c ****         {
 656:tmk_core/protocol/usb_descriptor.c ****             .Header                   = {.Size = sizeof(USB_MIDI_Descriptor_InputJack_t), .Type = D
 657:tmk_core/protocol/usb_descriptor.c ****             .Subtype                  = AUDIO_DSUBTYPE_CSInterface_InputTerminal,
 658:tmk_core/protocol/usb_descriptor.c **** 
 659:tmk_core/protocol/usb_descriptor.c ****             .JackType                 = MIDI_JACKTYPE_External,
 660:tmk_core/protocol/usb_descriptor.c ****             .JackID                   = 0x02,
 661:tmk_core/protocol/usb_descriptor.c **** 
 662:tmk_core/protocol/usb_descriptor.c ****             .JackStrIndex             = NO_DESCRIPTOR
 663:tmk_core/protocol/usb_descriptor.c ****         },
 664:tmk_core/protocol/usb_descriptor.c **** 
 665:tmk_core/protocol/usb_descriptor.c ****     .MIDI_Out_Jack_Emb =
 666:tmk_core/protocol/usb_descriptor.c ****         {
 667:tmk_core/protocol/usb_descriptor.c ****             .Header                   = {.Size = sizeof(USB_MIDI_Descriptor_OutputJack_t), .Type = 
 668:tmk_core/protocol/usb_descriptor.c ****             .Subtype                  = AUDIO_DSUBTYPE_CSInterface_OutputTerminal,
 669:tmk_core/protocol/usb_descriptor.c **** 
 670:tmk_core/protocol/usb_descriptor.c ****             .JackType                 = MIDI_JACKTYPE_Embedded,
 671:tmk_core/protocol/usb_descriptor.c ****             .JackID                   = 0x03,
 672:tmk_core/protocol/usb_descriptor.c **** 
 673:tmk_core/protocol/usb_descriptor.c ****             .NumberOfPins             = 1,
 674:tmk_core/protocol/usb_descriptor.c ****             .SourceJackID             = {0x02},
 675:tmk_core/protocol/usb_descriptor.c ****             .SourcePinID              = {0x01},
 676:tmk_core/protocol/usb_descriptor.c **** 
 677:tmk_core/protocol/usb_descriptor.c ****             .JackStrIndex             = NO_DESCRIPTOR
 678:tmk_core/protocol/usb_descriptor.c ****         },
 679:tmk_core/protocol/usb_descriptor.c **** 
 680:tmk_core/protocol/usb_descriptor.c ****     .MIDI_Out_Jack_Ext =
 681:tmk_core/protocol/usb_descriptor.c ****         {
 682:tmk_core/protocol/usb_descriptor.c ****             .Header                   = {.Size = sizeof(USB_MIDI_Descriptor_OutputJack_t), .Type = 
 683:tmk_core/protocol/usb_descriptor.c ****             .Subtype                  = AUDIO_DSUBTYPE_CSInterface_OutputTerminal,
 684:tmk_core/protocol/usb_descriptor.c **** 
 685:tmk_core/protocol/usb_descriptor.c ****             .JackType                 = MIDI_JACKTYPE_External,
 686:tmk_core/protocol/usb_descriptor.c ****             .JackID                   = 0x04,
 687:tmk_core/protocol/usb_descriptor.c **** 
 688:tmk_core/protocol/usb_descriptor.c ****             .NumberOfPins             = 1,
 689:tmk_core/protocol/usb_descriptor.c ****             .SourceJackID             = {0x01},
 690:tmk_core/protocol/usb_descriptor.c ****             .SourcePinID              = {0x01},
 691:tmk_core/protocol/usb_descriptor.c **** 
 692:tmk_core/protocol/usb_descriptor.c ****             .JackStrIndex             = NO_DESCRIPTOR
 693:tmk_core/protocol/usb_descriptor.c ****         },
 694:tmk_core/protocol/usb_descriptor.c **** 
 695:tmk_core/protocol/usb_descriptor.c ****     .MIDI_In_Jack_Endpoint =
 696:tmk_core/protocol/usb_descriptor.c ****         {
 697:tmk_core/protocol/usb_descriptor.c ****             .Endpoint =
 698:tmk_core/protocol/usb_descriptor.c ****                 {
 699:tmk_core/protocol/usb_descriptor.c ****                     .Header              = {.Size = sizeof(USB_Audio_Descriptor_StreamEndpoint_Std_
 700:tmk_core/protocol/usb_descriptor.c **** 
 701:tmk_core/protocol/usb_descriptor.c ****                     .EndpointAddress     = MIDI_STREAM_OUT_EPADDR,
 702:tmk_core/protocol/usb_descriptor.c ****                     .Attributes          = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_D
 703:tmk_core/protocol/usb_descriptor.c ****                     .EndpointSize        = MIDI_STREAM_EPSIZE,
 704:tmk_core/protocol/usb_descriptor.c ****                     .PollingIntervalMS   = 0x05
 705:tmk_core/protocol/usb_descriptor.c ****                 },
 706:tmk_core/protocol/usb_descriptor.c **** 
 707:tmk_core/protocol/usb_descriptor.c ****             .Refresh                  = 0,
 708:tmk_core/protocol/usb_descriptor.c ****             .SyncEndpointNumber       = 0
 709:tmk_core/protocol/usb_descriptor.c ****         },
 710:tmk_core/protocol/usb_descriptor.c **** 
 711:tmk_core/protocol/usb_descriptor.c ****     .MIDI_In_Jack_Endpoint_SPC =
 712:tmk_core/protocol/usb_descriptor.c ****         {
 713:tmk_core/protocol/usb_descriptor.c ****             .Header                   = {.Size = sizeof(USB_MIDI_Descriptor_Jack_Endpoint_t), .Type
 714:tmk_core/protocol/usb_descriptor.c ****             .Subtype                  = AUDIO_DSUBTYPE_CSEndpoint_General,
 715:tmk_core/protocol/usb_descriptor.c **** 
 716:tmk_core/protocol/usb_descriptor.c ****             .TotalEmbeddedJacks       = 0x01,
 717:tmk_core/protocol/usb_descriptor.c ****             .AssociatedJackID         = {0x01}
 718:tmk_core/protocol/usb_descriptor.c ****         },
 719:tmk_core/protocol/usb_descriptor.c **** 
 720:tmk_core/protocol/usb_descriptor.c ****     .MIDI_Out_Jack_Endpoint =
 721:tmk_core/protocol/usb_descriptor.c ****         {
 722:tmk_core/protocol/usb_descriptor.c ****             .Endpoint =
 723:tmk_core/protocol/usb_descriptor.c ****                 {
 724:tmk_core/protocol/usb_descriptor.c ****                     .Header              = {.Size = sizeof(USB_Audio_Descriptor_StreamEndpoint_Std_
 725:tmk_core/protocol/usb_descriptor.c **** 
 726:tmk_core/protocol/usb_descriptor.c ****                     .EndpointAddress     = MIDI_STREAM_IN_EPADDR,
 727:tmk_core/protocol/usb_descriptor.c ****                     .Attributes          = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_D
 728:tmk_core/protocol/usb_descriptor.c ****                     .EndpointSize        = MIDI_STREAM_EPSIZE,
 729:tmk_core/protocol/usb_descriptor.c ****                     .PollingIntervalMS   = 0x05
 730:tmk_core/protocol/usb_descriptor.c ****                 },
 731:tmk_core/protocol/usb_descriptor.c **** 
 732:tmk_core/protocol/usb_descriptor.c ****             .Refresh                  = 0,
 733:tmk_core/protocol/usb_descriptor.c ****             .SyncEndpointNumber       = 0
 734:tmk_core/protocol/usb_descriptor.c ****         },
 735:tmk_core/protocol/usb_descriptor.c **** 
 736:tmk_core/protocol/usb_descriptor.c ****     .MIDI_Out_Jack_Endpoint_SPC =
 737:tmk_core/protocol/usb_descriptor.c ****         {
 738:tmk_core/protocol/usb_descriptor.c ****             .Header                   = {.Size = sizeof(USB_MIDI_Descriptor_Jack_Endpoint_t), .Type
 739:tmk_core/protocol/usb_descriptor.c ****             .Subtype                  = AUDIO_DSUBTYPE_CSEndpoint_General,
 740:tmk_core/protocol/usb_descriptor.c **** 
 741:tmk_core/protocol/usb_descriptor.c ****             .TotalEmbeddedJacks       = 0x01,
 742:tmk_core/protocol/usb_descriptor.c ****             .AssociatedJackID         = {0x03}
 743:tmk_core/protocol/usb_descriptor.c ****         },
 744:tmk_core/protocol/usb_descriptor.c **** #endif
 745:tmk_core/protocol/usb_descriptor.c **** 
 746:tmk_core/protocol/usb_descriptor.c **** #ifdef VIRTSER_ENABLE
 747:tmk_core/protocol/usb_descriptor.c ****     .CDC_Interface_Association =
 748:tmk_core/protocol/usb_descriptor.c ****             {
 749:tmk_core/protocol/usb_descriptor.c ****                     .Header                 = {.Size = sizeof(USB_Descriptor_Interface_Association_
 750:tmk_core/protocol/usb_descriptor.c **** 
 751:tmk_core/protocol/usb_descriptor.c ****                     .FirstInterfaceIndex    = CCI_INTERFACE,
 752:tmk_core/protocol/usb_descriptor.c ****                     .TotalInterfaces        = 2,
 753:tmk_core/protocol/usb_descriptor.c **** 
 754:tmk_core/protocol/usb_descriptor.c ****                     .Class                  = CDC_CSCP_CDCClass,
 755:tmk_core/protocol/usb_descriptor.c ****                     .SubClass               = CDC_CSCP_ACMSubclass,
 756:tmk_core/protocol/usb_descriptor.c ****                     .Protocol               = CDC_CSCP_ATCommandProtocol,
 757:tmk_core/protocol/usb_descriptor.c **** 
 758:tmk_core/protocol/usb_descriptor.c ****                     .IADStrIndex            = NO_DESCRIPTOR,
 759:tmk_core/protocol/usb_descriptor.c ****             },
 760:tmk_core/protocol/usb_descriptor.c **** 
 761:tmk_core/protocol/usb_descriptor.c ****     .CDC_CCI_Interface =
 762:tmk_core/protocol/usb_descriptor.c ****             {
 763:tmk_core/protocol/usb_descriptor.c ****                     .Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = 
 764:tmk_core/protocol/usb_descriptor.c **** 
 765:tmk_core/protocol/usb_descriptor.c ****                     .InterfaceNumber        = CCI_INTERFACE,
 766:tmk_core/protocol/usb_descriptor.c ****                     .AlternateSetting       = 0,
 767:tmk_core/protocol/usb_descriptor.c **** 
 768:tmk_core/protocol/usb_descriptor.c ****                     .TotalEndpoints         = 1,
 769:tmk_core/protocol/usb_descriptor.c **** 
 770:tmk_core/protocol/usb_descriptor.c ****                     .Class                  = CDC_CSCP_CDCClass,
 771:tmk_core/protocol/usb_descriptor.c ****                     .SubClass               = CDC_CSCP_ACMSubclass,
 772:tmk_core/protocol/usb_descriptor.c ****                     .Protocol               = CDC_CSCP_ATCommandProtocol,
 773:tmk_core/protocol/usb_descriptor.c **** 
 774:tmk_core/protocol/usb_descriptor.c ****                     .InterfaceStrIndex      = NO_DESCRIPTOR
 775:tmk_core/protocol/usb_descriptor.c ****             },
 776:tmk_core/protocol/usb_descriptor.c **** 
 777:tmk_core/protocol/usb_descriptor.c ****     .CDC_Functional_Header =
 778:tmk_core/protocol/usb_descriptor.c ****             {
 779:tmk_core/protocol/usb_descriptor.c ****                     .Header                 = {.Size = sizeof(USB_CDC_Descriptor_FunctionalHeader_t
 780:tmk_core/protocol/usb_descriptor.c ****                     .Subtype                = 0x00,
 781:tmk_core/protocol/usb_descriptor.c **** 
 782:tmk_core/protocol/usb_descriptor.c ****                     .CDCSpecification       = VERSION_BCD(1,1,0),
 783:tmk_core/protocol/usb_descriptor.c ****             },
 784:tmk_core/protocol/usb_descriptor.c **** 
 785:tmk_core/protocol/usb_descriptor.c ****     .CDC_Functional_ACM =
 786:tmk_core/protocol/usb_descriptor.c ****             {
 787:tmk_core/protocol/usb_descriptor.c ****                     .Header                 = {.Size = sizeof(USB_CDC_Descriptor_FunctionalACM_t), 
 788:tmk_core/protocol/usb_descriptor.c ****                     .Subtype                = 0x02,
 789:tmk_core/protocol/usb_descriptor.c **** 
 790:tmk_core/protocol/usb_descriptor.c ****                     .Capabilities           = 0x02,
 791:tmk_core/protocol/usb_descriptor.c ****             },
 792:tmk_core/protocol/usb_descriptor.c **** 
 793:tmk_core/protocol/usb_descriptor.c ****     .CDC_Functional_Union =
 794:tmk_core/protocol/usb_descriptor.c ****             {
 795:tmk_core/protocol/usb_descriptor.c ****                     .Header                 = {.Size = sizeof(USB_CDC_Descriptor_FunctionalUnion_t)
 796:tmk_core/protocol/usb_descriptor.c ****                     .Subtype                = 0x06,
 797:tmk_core/protocol/usb_descriptor.c **** 
 798:tmk_core/protocol/usb_descriptor.c ****                     .MasterInterfaceNumber  = CCI_INTERFACE,
 799:tmk_core/protocol/usb_descriptor.c ****                     .SlaveInterfaceNumber   = CDI_INTERFACE,
 800:tmk_core/protocol/usb_descriptor.c ****             },
 801:tmk_core/protocol/usb_descriptor.c **** 
 802:tmk_core/protocol/usb_descriptor.c ****     .CDC_NotificationEndpoint =
 803:tmk_core/protocol/usb_descriptor.c ****             {
 804:tmk_core/protocol/usb_descriptor.c ****                     .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = D
 805:tmk_core/protocol/usb_descriptor.c **** 
 806:tmk_core/protocol/usb_descriptor.c ****                     .EndpointAddress        = CDC_NOTIFICATION_EPADDR,
 807:tmk_core/protocol/usb_descriptor.c ****                     .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT
 808:tmk_core/protocol/usb_descriptor.c ****                     .EndpointSize           = CDC_NOTIFICATION_EPSIZE,
 809:tmk_core/protocol/usb_descriptor.c ****                     .PollingIntervalMS      = 0xFF
 810:tmk_core/protocol/usb_descriptor.c ****             },
 811:tmk_core/protocol/usb_descriptor.c **** 
 812:tmk_core/protocol/usb_descriptor.c ****     .CDC_DCI_Interface =
 813:tmk_core/protocol/usb_descriptor.c ****             {
 814:tmk_core/protocol/usb_descriptor.c ****                     .Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = 
 815:tmk_core/protocol/usb_descriptor.c **** 
 816:tmk_core/protocol/usb_descriptor.c ****                     .InterfaceNumber        = CDI_INTERFACE,
 817:tmk_core/protocol/usb_descriptor.c ****                     .AlternateSetting       = 0,
 818:tmk_core/protocol/usb_descriptor.c **** 
 819:tmk_core/protocol/usb_descriptor.c ****                     .TotalEndpoints         = 2,
 820:tmk_core/protocol/usb_descriptor.c **** 
 821:tmk_core/protocol/usb_descriptor.c ****                     .Class                  = CDC_CSCP_CDCDataClass,
 822:tmk_core/protocol/usb_descriptor.c ****                     .SubClass               = CDC_CSCP_NoDataSubclass,
 823:tmk_core/protocol/usb_descriptor.c ****                     .Protocol               = CDC_CSCP_NoDataProtocol,
 824:tmk_core/protocol/usb_descriptor.c **** 
 825:tmk_core/protocol/usb_descriptor.c ****                     .InterfaceStrIndex      = NO_DESCRIPTOR
 826:tmk_core/protocol/usb_descriptor.c ****             },
 827:tmk_core/protocol/usb_descriptor.c **** 
 828:tmk_core/protocol/usb_descriptor.c ****     .CDC_DataOutEndpoint =
 829:tmk_core/protocol/usb_descriptor.c ****             {
 830:tmk_core/protocol/usb_descriptor.c ****                     .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = D
 831:tmk_core/protocol/usb_descriptor.c **** 
 832:tmk_core/protocol/usb_descriptor.c ****                     .EndpointAddress        = CDC_OUT_EPADDR,
 833:tmk_core/protocol/usb_descriptor.c ****                     .Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAG
 834:tmk_core/protocol/usb_descriptor.c ****                     .EndpointSize           = CDC_EPSIZE,
 835:tmk_core/protocol/usb_descriptor.c ****                     .PollingIntervalMS      = 0x05
 836:tmk_core/protocol/usb_descriptor.c ****             },
 837:tmk_core/protocol/usb_descriptor.c **** 
 838:tmk_core/protocol/usb_descriptor.c ****     .CDC_DataInEndpoint =
 839:tmk_core/protocol/usb_descriptor.c ****             {
 840:tmk_core/protocol/usb_descriptor.c ****                     .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = D
 841:tmk_core/protocol/usb_descriptor.c **** 
 842:tmk_core/protocol/usb_descriptor.c ****                     .EndpointAddress        = CDC_IN_EPADDR,
 843:tmk_core/protocol/usb_descriptor.c ****                     .Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAG
 844:tmk_core/protocol/usb_descriptor.c ****                     .EndpointSize           = CDC_EPSIZE,
 845:tmk_core/protocol/usb_descriptor.c ****                     .PollingIntervalMS      = 0x05
 846:tmk_core/protocol/usb_descriptor.c ****             },
 847:tmk_core/protocol/usb_descriptor.c **** #endif
 848:tmk_core/protocol/usb_descriptor.c **** };
 849:tmk_core/protocol/usb_descriptor.c **** 
 850:tmk_core/protocol/usb_descriptor.c **** 
 851:tmk_core/protocol/usb_descriptor.c **** /*******************************************************************************
 852:tmk_core/protocol/usb_descriptor.c ****  * String Descriptors
 853:tmk_core/protocol/usb_descriptor.c ****  ******************************************************************************/
 854:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM LanguageString =
 855:tmk_core/protocol/usb_descriptor.c **** {
 856:tmk_core/protocol/usb_descriptor.c ****     .Header                 = {.Size = USB_STRING_LEN(1), .Type = DTYPE_String},
 857:tmk_core/protocol/usb_descriptor.c **** 
 858:tmk_core/protocol/usb_descriptor.c ****     .UnicodeString          = {LANGUAGE_ID_ENG}
 859:tmk_core/protocol/usb_descriptor.c **** };
 860:tmk_core/protocol/usb_descriptor.c **** 
 861:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM ManufacturerString =
 862:tmk_core/protocol/usb_descriptor.c **** {
 863:tmk_core/protocol/usb_descriptor.c ****     /* subtract 1 for null terminator */
 864:tmk_core/protocol/usb_descriptor.c ****     .Header                 = {.Size = USB_STRING_LEN(sizeof(STR(MANUFACTURER))-1), .Type = DTYPE_S
 865:tmk_core/protocol/usb_descriptor.c **** 
 866:tmk_core/protocol/usb_descriptor.c ****     .UnicodeString          = LSTR(MANUFACTURER)
 867:tmk_core/protocol/usb_descriptor.c **** };
 868:tmk_core/protocol/usb_descriptor.c **** 
 869:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM ProductString =
 870:tmk_core/protocol/usb_descriptor.c **** {
 871:tmk_core/protocol/usb_descriptor.c ****     /* subtract 1 for null terminator */
 872:tmk_core/protocol/usb_descriptor.c ****     .Header                 = {.Size = USB_STRING_LEN(sizeof(STR(PRODUCT))-1), .Type = DTYPE_String
 873:tmk_core/protocol/usb_descriptor.c **** 
 874:tmk_core/protocol/usb_descriptor.c ****     .UnicodeString          = LSTR(PRODUCT)
 875:tmk_core/protocol/usb_descriptor.c **** };
 876:tmk_core/protocol/usb_descriptor.c **** 
 877:tmk_core/protocol/usb_descriptor.c **** #ifndef SERIAL_NUMBER
 878:tmk_core/protocol/usb_descriptor.c ****     #define SERIAL_NUMBER 0
 879:tmk_core/protocol/usb_descriptor.c **** #endif
 880:tmk_core/protocol/usb_descriptor.c **** 
 881:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM SerialNumberString =
 882:tmk_core/protocol/usb_descriptor.c **** {
 883:tmk_core/protocol/usb_descriptor.c ****     /* subtract 1 for null terminator */
 884:tmk_core/protocol/usb_descriptor.c ****     .Header                 = {.Size = USB_STRING_LEN(sizeof(STR(SERIAL_NUMBER))-1), .Type = DTYPE_
 885:tmk_core/protocol/usb_descriptor.c **** 
 886:tmk_core/protocol/usb_descriptor.c ****     .UnicodeString          = LSTR(SERIAL_NUMBER)
 887:tmk_core/protocol/usb_descriptor.c **** };
 888:tmk_core/protocol/usb_descriptor.c **** 
 889:tmk_core/protocol/usb_descriptor.c **** 
 890:tmk_core/protocol/usb_descriptor.c **** /** This function is called by the library when in device mode, and must be overridden (see library
 891:tmk_core/protocol/usb_descriptor.c ****  *  documentation) by the application code so that the address and size of a requested descriptor c
 892:tmk_core/protocol/usb_descriptor.c ****  *  to the USB library. When the device receives a Get Descriptor request on the control endpoint, 
 893:tmk_core/protocol/usb_descriptor.c ****  *  is called so that the descriptor details can be passed back and the appropriate descriptor sent
 894:tmk_core/protocol/usb_descriptor.c ****  *  USB host.
 895:tmk_core/protocol/usb_descriptor.c ****  */
 896:tmk_core/protocol/usb_descriptor.c **** uint16_t get_usb_descriptor(const uint16_t wValue,
 897:tmk_core/protocol/usb_descriptor.c ****                             const uint16_t wIndex,
 898:tmk_core/protocol/usb_descriptor.c ****                             const void** const DescriptorAddress)
 899:tmk_core/protocol/usb_descriptor.c **** {
  16               		.loc 1 899 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 900:tmk_core/protocol/usb_descriptor.c ****     const uint8_t  DescriptorType   = (wValue >> 8);
 901:tmk_core/protocol/usb_descriptor.c ****     const uint8_t  DescriptorIndex  = (wValue & 0xFF);
 902:tmk_core/protocol/usb_descriptor.c **** 
 903:tmk_core/protocol/usb_descriptor.c ****     const void* Address = NULL;
 904:tmk_core/protocol/usb_descriptor.c ****     uint16_t    Size    = NO_DESCRIPTOR;
 905:tmk_core/protocol/usb_descriptor.c **** 
 906:tmk_core/protocol/usb_descriptor.c ****     switch (DescriptorType)
  23               		.loc 1 906 0
  24 0000 292F      		mov r18,r25
  25 0002 3327      		clr r19
  26 0004 2330      		cpi r18,3
  27 0006 3105      		cpc r19,__zero_reg__
  28 0008 01F0      		breq .L3
  29 000a 00F4      		brsh .L4
  30 000c 2130      		cpi r18,1
  31 000e 3105      		cpc r19,__zero_reg__
  32 0010 01F0      		breq .L5
  33 0012 2230      		cpi r18,2
  34 0014 3105      		cpc r19,__zero_reg__
  35 0016 01F0      		breq .+2
  36 0018 00C0      		rjmp .L16
  37               	.LVL1:
 907:tmk_core/protocol/usb_descriptor.c ****     {
 908:tmk_core/protocol/usb_descriptor.c ****         case DTYPE_Device:
 909:tmk_core/protocol/usb_descriptor.c ****             Address = &DeviceDescriptor;
 910:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Device_t);
 911:tmk_core/protocol/usb_descriptor.c ****             break;
 912:tmk_core/protocol/usb_descriptor.c ****         case DTYPE_Configuration:
 913:tmk_core/protocol/usb_descriptor.c ****             Address = &ConfigurationDescriptor;
 914:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Configuration_t);
  38               		.loc 1 914 0
  39 001a 84E5      		ldi r24,lo8(84)
  40 001c 90E0      		ldi r25,0
  41               	.LVL2:
 913:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Configuration_t);
  42               		.loc 1 913 0
  43 001e 20E0      		ldi r18,lo8(ConfigurationDescriptor)
  44 0020 30E0      		ldi r19,hi8(ConfigurationDescriptor)
 915:tmk_core/protocol/usb_descriptor.c ****             break;
  45               		.loc 1 915 0
  46 0022 00C0      		rjmp .L2
  47               	.LVL3:
  48               	.L4:
 906:tmk_core/protocol/usb_descriptor.c ****     {
  49               		.loc 1 906 0
  50 0024 2132      		cpi r18,33
  51 0026 3105      		cpc r19,__zero_reg__
  52 0028 01F0      		breq .L7
  53 002a 2232      		cpi r18,34
  54 002c 3105      		cpc r19,__zero_reg__
  55 002e 01F0      		breq .L8
  56 0030 00C0      		rjmp .L16
  57               	.L5:
 910:tmk_core/protocol/usb_descriptor.c ****             break;
  58               		.loc 1 910 0
  59 0032 82E1      		ldi r24,lo8(18)
  60 0034 90E0      		ldi r25,0
  61               	.LVL4:
 909:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Device_t);
  62               		.loc 1 909 0
  63 0036 20E0      		ldi r18,lo8(DeviceDescriptor)
  64 0038 30E0      		ldi r19,hi8(DeviceDescriptor)
  65 003a 00C0      		rjmp .L2
  66               	.LVL5:
  67               	.L3:
 916:tmk_core/protocol/usb_descriptor.c ****         case DTYPE_String:
 917:tmk_core/protocol/usb_descriptor.c ****             switch (DescriptorIndex )
  68               		.loc 1 917 0
  69 003c 9927      		clr r25
  70               	.LVL6:
  71 003e 8130      		cpi r24,1
  72 0040 9105      		cpc r25,__zero_reg__
  73 0042 01F0      		breq .L9
  74 0044 00F0      		brlo .L10
  75 0046 8230      		cpi r24,2
  76 0048 9105      		cpc r25,__zero_reg__
  77 004a 01F0      		breq .L11
  78 004c 0397      		sbiw r24,3
  79 004e 01F4      		brne .L16
  80               	.LVL7:
  81               	.LBB2:
 918:tmk_core/protocol/usb_descriptor.c ****             {
 919:tmk_core/protocol/usb_descriptor.c ****                 case 0x00:
 920:tmk_core/protocol/usb_descriptor.c ****                     Address = &LanguageString;
 921:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&LanguageString.Header.Size);
 922:tmk_core/protocol/usb_descriptor.c ****                     break;
 923:tmk_core/protocol/usb_descriptor.c ****                 case 0x01:
 924:tmk_core/protocol/usb_descriptor.c ****                     Address = &ManufacturerString;
 925:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 926:tmk_core/protocol/usb_descriptor.c ****                     break;
 927:tmk_core/protocol/usb_descriptor.c ****                 case 0x02:
 928:tmk_core/protocol/usb_descriptor.c ****                     Address = &ProductString;
 929:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&ProductString.Header.Size);
 930:tmk_core/protocol/usb_descriptor.c ****                     break;
 931:tmk_core/protocol/usb_descriptor.c ****                 case 0x03:
 932:tmk_core/protocol/usb_descriptor.c ****                     Address = &SerialNumberString;
 933:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&SerialNumberString.Header.Size);
  82               		.loc 1 933 0
  83 0050 E0E0      		ldi r30,lo8(SerialNumberString)
  84 0052 F0E0      		ldi r31,hi8(SerialNumberString)
  85 0054 00C0      		rjmp .L18
  86               	.LVL8:
  87               	.L10:
  88               	.LBE2:
  89               	.LBB3:
 921:tmk_core/protocol/usb_descriptor.c ****                     break;
  90               		.loc 1 921 0
  91 0056 E0E0      		ldi r30,lo8(LanguageString)
  92 0058 F0E0      		ldi r31,hi8(LanguageString)
  93 005a 00C0      		rjmp .L18
  94               	.LVL9:
  95               	.L9:
  96               	.LBE3:
  97               	.LBB4:
 925:tmk_core/protocol/usb_descriptor.c ****                     break;
  98               		.loc 1 925 0
  99 005c E0E0      		ldi r30,lo8(ManufacturerString)
 100 005e F0E0      		ldi r31,hi8(ManufacturerString)
 101 0060 00C0      		rjmp .L18
 102               	.LVL10:
 103               	.L11:
 104               	.LBE4:
 105               	.LBB5:
 929:tmk_core/protocol/usb_descriptor.c ****                     break;
 106               		.loc 1 929 0
 107 0062 E0E0      		ldi r30,lo8(ProductString)
 108 0064 F0E0      		ldi r31,hi8(ProductString)
 109               	.LVL11:
 110               	.L18:
 111               	.LBE5:
 112               	.LBB6:
 113               		.loc 1 933 0
 114               	/* #APP */
 115               	 ;  933 "tmk_core/protocol/usb_descriptor.c" 1
 116 0066 8491      		lpm r24, Z
 117               		
 118               	 ;  0 "" 2
 119               	.LVL12:
 120               	/* #NOAPP */
 121               	.LBE6:
 122 0068 90E0      		ldi r25,0
 123               	.LVL13:
 932:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&SerialNumberString.Header.Size);
 124               		.loc 1 932 0
 125 006a 9F01      		movw r18,r30
 934:tmk_core/protocol/usb_descriptor.c ****                     break;
 126               		.loc 1 934 0
 127 006c 00C0      		rjmp .L2
 128               	.LVL14:
 129               	.L7:
 130 006e 6330      		cpi r22,3
 131 0070 7105      		cpc r23,__zero_reg__
 132 0072 00F4      		brsh .L16
 133 0074 660F      		lsl r22
 134 0076 771F      		rol r23
 135               	.LVL15:
 136 0078 FB01      		movw r30,r22
 137 007a E050      		subi r30,lo8(-(CSWTCH.1))
 138 007c F040      		sbci r31,hi8(-(CSWTCH.1))
 139 007e 2081      		ld r18,Z
 140 0080 3181      		ldd r19,Z+1
 141 0082 89E0      		ldi r24,lo8(9)
 142 0084 90E0      		ldi r25,0
 143               	.LVL16:
 144 0086 00C0      		rjmp .L2
 145               	.LVL17:
 146               	.L8:
 147 0088 6330      		cpi r22,3
 148 008a 7105      		cpc r23,__zero_reg__
 149 008c 00F4      		brsh .L16
 150 008e FB01      		movw r30,r22
 151 0090 EE0F      		lsl r30
 152 0092 FF1F      		rol r31
 153               	.LVL18:
 154 0094 E050      		subi r30,lo8(-(CSWTCH.2))
 155 0096 F040      		sbci r31,hi8(-(CSWTCH.2))
 156 0098 2081      		ld r18,Z
 157 009a 3181      		ldd r19,Z+1
 158 009c FB01      		movw r30,r22
 159 009e E050      		subi r30,lo8(-(CSWTCH.3))
 160 00a0 F040      		sbci r31,hi8(-(CSWTCH.3))
 161 00a2 8081      		ld r24,Z
 162 00a4 90E0      		ldi r25,0
 163 00a6 00C0      		rjmp .L2
 164               	.L16:
 165 00a8 80E0      		ldi r24,0
 166 00aa 90E0      		ldi r25,0
 167 00ac 20E0      		ldi r18,0
 168 00ae 30E0      		ldi r19,0
 169               	.LVL19:
 170               	.L2:
 935:tmk_core/protocol/usb_descriptor.c ****             }
 936:tmk_core/protocol/usb_descriptor.c ****             break;
 937:tmk_core/protocol/usb_descriptor.c ****         case HID_DTYPE_HID:
 938:tmk_core/protocol/usb_descriptor.c ****             switch (wIndex) {
 939:tmk_core/protocol/usb_descriptor.c ****             case KEYBOARD_INTERFACE:
 940:tmk_core/protocol/usb_descriptor.c ****                 Address = &ConfigurationDescriptor.Keyboard_HID;
 941:tmk_core/protocol/usb_descriptor.c ****                 Size    = sizeof(USB_HID_Descriptor_HID_t);
 942:tmk_core/protocol/usb_descriptor.c ****                 break;
 943:tmk_core/protocol/usb_descriptor.c **** #ifdef MOUSE_ENABLE
 944:tmk_core/protocol/usb_descriptor.c ****             case MOUSE_INTERFACE:
 945:tmk_core/protocol/usb_descriptor.c ****                 Address = &ConfigurationDescriptor.Mouse_HID;
 946:tmk_core/protocol/usb_descriptor.c ****                 Size    = sizeof(USB_HID_Descriptor_HID_t);
 947:tmk_core/protocol/usb_descriptor.c ****                 break;
 948:tmk_core/protocol/usb_descriptor.c **** #endif
 949:tmk_core/protocol/usb_descriptor.c **** #ifdef EXTRAKEY_ENABLE
 950:tmk_core/protocol/usb_descriptor.c ****             case EXTRAKEY_INTERFACE:
 951:tmk_core/protocol/usb_descriptor.c ****                 Address = &ConfigurationDescriptor.Extrakey_HID;
 952:tmk_core/protocol/usb_descriptor.c ****                 Size    = sizeof(USB_HID_Descriptor_HID_t);
 953:tmk_core/protocol/usb_descriptor.c ****                 break;
 954:tmk_core/protocol/usb_descriptor.c **** #endif
 955:tmk_core/protocol/usb_descriptor.c **** #ifdef RAW_ENABLE
 956:tmk_core/protocol/usb_descriptor.c ****             case RAW_INTERFACE:
 957:tmk_core/protocol/usb_descriptor.c ****                 Address = &ConfigurationDescriptor.Raw_HID;
 958:tmk_core/protocol/usb_descriptor.c ****                 Size    = sizeof(USB_HID_Descriptor_HID_t);
 959:tmk_core/protocol/usb_descriptor.c ****                 break;
 960:tmk_core/protocol/usb_descriptor.c **** #endif
 961:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
 962:tmk_core/protocol/usb_descriptor.c ****             case CONSOLE_INTERFACE:
 963:tmk_core/protocol/usb_descriptor.c ****                 Address = &ConfigurationDescriptor.Console_HID;
 964:tmk_core/protocol/usb_descriptor.c ****                 Size    = sizeof(USB_HID_Descriptor_HID_t);
 965:tmk_core/protocol/usb_descriptor.c ****                 break;
 966:tmk_core/protocol/usb_descriptor.c **** #endif
 967:tmk_core/protocol/usb_descriptor.c **** #ifdef NKRO_ENABLE
 968:tmk_core/protocol/usb_descriptor.c ****             case NKRO_INTERFACE:
 969:tmk_core/protocol/usb_descriptor.c ****                 Address = &ConfigurationDescriptor.NKRO_HID;
 970:tmk_core/protocol/usb_descriptor.c ****                 Size    = sizeof(USB_HID_Descriptor_HID_t);
 971:tmk_core/protocol/usb_descriptor.c ****                 break;
 972:tmk_core/protocol/usb_descriptor.c **** #endif
 973:tmk_core/protocol/usb_descriptor.c ****             }
 974:tmk_core/protocol/usb_descriptor.c ****             break;
 975:tmk_core/protocol/usb_descriptor.c ****         case HID_DTYPE_Report:
 976:tmk_core/protocol/usb_descriptor.c ****             switch (wIndex) {
 977:tmk_core/protocol/usb_descriptor.c ****             case KEYBOARD_INTERFACE:
 978:tmk_core/protocol/usb_descriptor.c ****                 Address = &KeyboardReport;
 979:tmk_core/protocol/usb_descriptor.c ****                 Size    = sizeof(KeyboardReport);
 980:tmk_core/protocol/usb_descriptor.c ****                 break;
 981:tmk_core/protocol/usb_descriptor.c **** #ifdef MOUSE_ENABLE
 982:tmk_core/protocol/usb_descriptor.c ****             case MOUSE_INTERFACE:
 983:tmk_core/protocol/usb_descriptor.c ****                 Address = &MouseReport;
 984:tmk_core/protocol/usb_descriptor.c ****                 Size    = sizeof(MouseReport);
 985:tmk_core/protocol/usb_descriptor.c ****                 break;
 986:tmk_core/protocol/usb_descriptor.c **** #endif
 987:tmk_core/protocol/usb_descriptor.c **** #ifdef EXTRAKEY_ENABLE
 988:tmk_core/protocol/usb_descriptor.c ****             case EXTRAKEY_INTERFACE:
 989:tmk_core/protocol/usb_descriptor.c ****                 Address = &ExtrakeyReport;
 990:tmk_core/protocol/usb_descriptor.c ****                 Size    = sizeof(ExtrakeyReport);
 991:tmk_core/protocol/usb_descriptor.c ****                 break;
 992:tmk_core/protocol/usb_descriptor.c **** #endif
 993:tmk_core/protocol/usb_descriptor.c **** #ifdef RAW_ENABLE
 994:tmk_core/protocol/usb_descriptor.c ****             case RAW_INTERFACE:
 995:tmk_core/protocol/usb_descriptor.c ****                 Address = &RawReport;
 996:tmk_core/protocol/usb_descriptor.c ****                 Size    = sizeof(RawReport);
 997:tmk_core/protocol/usb_descriptor.c ****                 break;
 998:tmk_core/protocol/usb_descriptor.c **** #endif
 999:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
1000:tmk_core/protocol/usb_descriptor.c ****             case CONSOLE_INTERFACE:
1001:tmk_core/protocol/usb_descriptor.c ****                 Address = &ConsoleReport;
1002:tmk_core/protocol/usb_descriptor.c ****                 Size    = sizeof(ConsoleReport);
1003:tmk_core/protocol/usb_descriptor.c ****                 break;
1004:tmk_core/protocol/usb_descriptor.c **** #endif
1005:tmk_core/protocol/usb_descriptor.c **** #ifdef NKRO_ENABLE
1006:tmk_core/protocol/usb_descriptor.c ****             case NKRO_INTERFACE:
1007:tmk_core/protocol/usb_descriptor.c ****                 Address = &NKROReport;
1008:tmk_core/protocol/usb_descriptor.c ****                 Size    = sizeof(NKROReport);
1009:tmk_core/protocol/usb_descriptor.c ****                 break;
1010:tmk_core/protocol/usb_descriptor.c **** #endif
1011:tmk_core/protocol/usb_descriptor.c ****             }
1012:tmk_core/protocol/usb_descriptor.c ****             break;
1013:tmk_core/protocol/usb_descriptor.c ****     }
1014:tmk_core/protocol/usb_descriptor.c **** 
1015:tmk_core/protocol/usb_descriptor.c ****     *DescriptorAddress = Address;
 171               		.loc 1 1015 0
 172 00b0 FA01      		movw r30,r20
 173 00b2 3183      		std Z+1,r19
 174 00b4 2083      		st Z,r18
1016:tmk_core/protocol/usb_descriptor.c ****     return Size;
1017:tmk_core/protocol/usb_descriptor.c **** }
 175               		.loc 1 1017 0
 176 00b6 0895      		ret
 177               		.cfi_endproc
 178               	.LFE100:
 180               		.section	.rodata.CSWTCH.3,"a",@progbits
 183               	CSWTCH.3:
 184 0000 40        		.byte	64
 185 0001 4D        		.byte	77
 186 0002 36        		.byte	54
 187               		.section	.rodata.CSWTCH.2,"a",@progbits
 190               	CSWTCH.2:
 191 0000 0000      		.word	KeyboardReport
 192 0002 0000      		.word	MouseReport
 193 0004 0000      		.word	ExtrakeyReport
 194               		.section	.rodata.CSWTCH.1,"a",@progbits
 197               	CSWTCH.1:
 198 0000 0000      		.word	ConfigurationDescriptor+18
 199 0002 0000      		.word	ConfigurationDescriptor+43
 200 0004 0000      		.word	ConfigurationDescriptor+68
 201               	.global	SerialNumberString
 202               		.section	.progmem.data.SerialNumberString,"a",@progbits
 205               	SerialNumberString:
 206 0000 04        		.byte	4
 207 0001 03        		.byte	3
 208 0002 3000      		.string	"0"
 209 0004 00        		.string	""
 210 0005 00        		.string	""
 211               	.global	ProductString
 212               		.section	.progmem.data.ProductString,"a",@progbits
 215               	ProductString:
 216 0000 0E        		.byte	14
 217 0001 03        		.byte	3
 218 0002 4400      		.string	"D"
 219 0004 6100      		.string	"a"
 220 0006 6300      		.string	"c"
 221 0008 7400      		.string	"t"
 222 000a 7900      		.string	"y"
 223 000c 6C00      		.string	"l"
 224 000e 00        		.string	""
 225 000f 00        		.string	""
 226               	.global	ManufacturerString
 227               		.section	.progmem.data.ManufacturerString,"a",@progbits
 230               	ManufacturerString:
 231 0000 16        		.byte	22
 232 0001 03        		.byte	3
 233 0002 4300      		.string	"C"
 234 0004 4800      		.string	"H"
 235 0006 2000      		.string	" "
 236 0008 6200      		.string	"b"
 237 000a 6F00      		.string	"o"
 238 000c 7800      		.string	"x"
 239 000e 4D00      		.string	"M"
 240 0010 6F00      		.string	"o"
 241 0012 6400      		.string	"d"
 242 0014 7300      		.string	"s"
 243 0016 00        		.string	""
 244 0017 00        		.string	""
 245               	.global	LanguageString
 246               		.section	.progmem.data.LanguageString,"a",@progbits
 249               	LanguageString:
 250 0000 04        		.byte	4
 251 0001 03        		.byte	3
 252 0002 0904      		.word	1033
 253               	.global	ConfigurationDescriptor
 254               		.section	.progmem.data.ConfigurationDescriptor,"a",@progbits
 257               	ConfigurationDescriptor:
 258 0000 09        		.byte	9
 259 0001 02        		.byte	2
 260 0002 5400      		.word	84
 261 0004 03        		.byte	3
 262 0005 01        		.byte	1
 263 0006 00        		.byte	0
 264 0007 A0        		.byte	-96
 265 0008 FA        		.byte	-6
 266 0009 09        		.byte	9
 267 000a 04        		.byte	4
 268 000b 00        		.byte	0
 269 000c 00        		.byte	0
 270 000d 01        		.byte	1
 271 000e 03        		.byte	3
 272 000f 01        		.byte	1
 273 0010 01        		.byte	1
 274 0011 00        		.byte	0
 275 0012 09        		.byte	9
 276 0013 21        		.byte	33
 277 0014 1101      		.word	273
 278 0016 00        		.byte	0
 279 0017 01        		.byte	1
 280 0018 22        		.byte	34
 281 0019 4000      		.word	64
 282 001b 07        		.byte	7
 283 001c 05        		.byte	5
 284 001d 81        		.byte	-127
 285 001e 03        		.byte	3
 286 001f 0800      		.word	8
 287 0021 0A        		.byte	10
 288 0022 09        		.byte	9
 289 0023 04        		.byte	4
 290 0024 01        		.byte	1
 291 0025 00        		.byte	0
 292 0026 01        		.byte	1
 293 0027 03        		.byte	3
 294 0028 01        		.byte	1
 295 0029 02        		.byte	2
 296 002a 00        		.byte	0
 297 002b 09        		.byte	9
 298 002c 21        		.byte	33
 299 002d 1101      		.word	273
 300 002f 00        		.byte	0
 301 0030 01        		.byte	1
 302 0031 22        		.byte	34
 303 0032 4D00      		.word	77
 304 0034 07        		.byte	7
 305 0035 05        		.byte	5
 306 0036 82        		.byte	-126
 307 0037 03        		.byte	3
 308 0038 0800      		.word	8
 309 003a 0A        		.byte	10
 310 003b 09        		.byte	9
 311 003c 04        		.byte	4
 312 003d 02        		.byte	2
 313 003e 00        		.byte	0
 314 003f 01        		.byte	1
 315 0040 03        		.byte	3
 316 0041 00        		.byte	0
 317 0042 00        		.byte	0
 318 0043 00        		.byte	0
 319 0044 09        		.byte	9
 320 0045 21        		.byte	33
 321 0046 1101      		.word	273
 322 0048 00        		.byte	0
 323 0049 01        		.byte	1
 324 004a 22        		.byte	34
 325 004b 3600      		.word	54
 326 004d 07        		.byte	7
 327 004e 05        		.byte	5
 328 004f 83        		.byte	-125
 329 0050 03        		.byte	3
 330 0051 0800      		.word	8
 331 0053 0A        		.byte	10
 332               	.global	DeviceDescriptor
 333               		.section	.progmem.data.DeviceDescriptor,"a",@progbits
 336               	DeviceDescriptor:
 337 0000 12        		.byte	18
 338 0001 01        		.byte	1
 339 0002 1001      		.word	272
 340 0004 00        		.byte	0
 341 0005 00        		.byte	0
 342 0006 00        		.byte	0
 343 0007 08        		.byte	8
 344 0008 EDFE      		.word	-275
 345 000a 6030      		.word	12384
 346 000c 0100      		.word	1
 347 000e 01        		.byte	1
 348 000f 02        		.byte	2
 349 0010 03        		.byte	3
 350 0011 01        		.byte	1
 351               	.global	ExtrakeyReport
 352               		.section	.progmem.data.ExtrakeyReport,"a",@progbits
 355               	ExtrakeyReport:
 356 0000 05        		.byte	5
 357 0001 01        		.byte	1
 358 0002 09        		.byte	9
 359 0003 80        		.byte	-128
 360 0004 A1        		.byte	-95
 361 0005 01        		.byte	1
 362 0006 85        		.byte	-123
 363 0007 02        		.byte	2
 364 0008 16        		.byte	22
 365 0009 01        		.byte	1
 366 000a 00        		.byte	0
 367 000b 26        		.byte	38
 368 000c 03        		.byte	3
 369 000d 00        		.byte	0
 370 000e 1A        		.byte	26
 371 000f 81        		.byte	-127
 372 0010 00        		.byte	0
 373 0011 2A        		.byte	42
 374 0012 83        		.byte	-125
 375 0013 00        		.byte	0
 376 0014 75        		.byte	117
 377 0015 10        		.byte	16
 378 0016 95        		.byte	-107
 379 0017 01        		.byte	1
 380 0018 81        		.byte	-127
 381 0019 00        		.byte	0
 382 001a C0        		.byte	-64
 383 001b 05        		.byte	5
 384 001c 0C        		.byte	12
 385 001d 09        		.byte	9
 386 001e 01        		.byte	1
 387 001f A1        		.byte	-95
 388 0020 01        		.byte	1
 389 0021 85        		.byte	-123
 390 0022 03        		.byte	3
 391 0023 16        		.byte	22
 392 0024 01        		.byte	1
 393 0025 00        		.byte	0
 394 0026 26        		.byte	38
 395 0027 9C        		.byte	-100
 396 0028 02        		.byte	2
 397 0029 1A        		.byte	26
 398 002a 01        		.byte	1
 399 002b 00        		.byte	0
 400 002c 2A        		.byte	42
 401 002d 9C        		.byte	-100
 402 002e 02        		.byte	2
 403 002f 75        		.byte	117
 404 0030 10        		.byte	16
 405 0031 95        		.byte	-107
 406 0032 01        		.byte	1
 407 0033 81        		.byte	-127
 408 0034 00        		.byte	0
 409 0035 C0        		.byte	-64
 410               	.global	MouseReport
 411               		.section	.progmem.data.MouseReport,"a",@progbits
 414               	MouseReport:
 415 0000 05        		.byte	5
 416 0001 01        		.byte	1
 417 0002 09        		.byte	9
 418 0003 02        		.byte	2
 419 0004 A1        		.byte	-95
 420 0005 01        		.byte	1
 421 0006 09        		.byte	9
 422 0007 01        		.byte	1
 423 0008 A1        		.byte	-95
 424 0009 00        		.byte	0
 425 000a 05        		.byte	5
 426 000b 09        		.byte	9
 427 000c 19        		.byte	25
 428 000d 01        		.byte	1
 429 000e 29        		.byte	41
 430 000f 05        		.byte	5
 431 0010 15        		.byte	21
 432 0011 00        		.byte	0
 433 0012 25        		.byte	37
 434 0013 01        		.byte	1
 435 0014 95        		.byte	-107
 436 0015 05        		.byte	5
 437 0016 75        		.byte	117
 438 0017 01        		.byte	1
 439 0018 81        		.byte	-127
 440 0019 02        		.byte	2
 441 001a 95        		.byte	-107
 442 001b 01        		.byte	1
 443 001c 75        		.byte	117
 444 001d 03        		.byte	3
 445 001e 81        		.byte	-127
 446 001f 01        		.byte	1
 447 0020 05        		.byte	5
 448 0021 01        		.byte	1
 449 0022 09        		.byte	9
 450 0023 30        		.byte	48
 451 0024 09        		.byte	9
 452 0025 31        		.byte	49
 453 0026 15        		.byte	21
 454 0027 81        		.byte	-127
 455 0028 25        		.byte	37
 456 0029 7F        		.byte	127
 457 002a 95        		.byte	-107
 458 002b 02        		.byte	2
 459 002c 75        		.byte	117
 460 002d 08        		.byte	8
 461 002e 81        		.byte	-127
 462 002f 06        		.byte	6
 463 0030 09        		.byte	9
 464 0031 38        		.byte	56
 465 0032 15        		.byte	21
 466 0033 81        		.byte	-127
 467 0034 25        		.byte	37
 468 0035 7F        		.byte	127
 469 0036 95        		.byte	-107
 470 0037 01        		.byte	1
 471 0038 75        		.byte	117
 472 0039 08        		.byte	8
 473 003a 81        		.byte	-127
 474 003b 06        		.byte	6
 475 003c 05        		.byte	5
 476 003d 0C        		.byte	12
 477 003e 0A        		.byte	10
 478 003f 38        		.byte	56
 479 0040 02        		.byte	2
 480 0041 15        		.byte	21
 481 0042 81        		.byte	-127
 482 0043 25        		.byte	37
 483 0044 7F        		.byte	127
 484 0045 95        		.byte	-107
 485 0046 01        		.byte	1
 486 0047 75        		.byte	117
 487 0048 08        		.byte	8
 488 0049 81        		.byte	-127
 489 004a 06        		.byte	6
 490 004b C0        		.byte	-64
 491 004c C0        		.byte	-64
 492               	.global	KeyboardReport
 493               		.section	.progmem.data.KeyboardReport,"a",@progbits
 496               	KeyboardReport:
 497 0000 05        		.byte	5
 498 0001 01        		.byte	1
 499 0002 09        		.byte	9
 500 0003 06        		.byte	6
 501 0004 A1        		.byte	-95
 502 0005 01        		.byte	1
 503 0006 05        		.byte	5
 504 0007 07        		.byte	7
 505 0008 19        		.byte	25
 506 0009 E0        		.byte	-32
 507 000a 29        		.byte	41
 508 000b E7        		.byte	-25
 509 000c 15        		.byte	21
 510 000d 00        		.byte	0
 511 000e 25        		.byte	37
 512 000f 01        		.byte	1
 513 0010 95        		.byte	-107
 514 0011 08        		.byte	8
 515 0012 75        		.byte	117
 516 0013 01        		.byte	1
 517 0014 81        		.byte	-127
 518 0015 02        		.byte	2
 519 0016 95        		.byte	-107
 520 0017 01        		.byte	1
 521 0018 75        		.byte	117
 522 0019 08        		.byte	8
 523 001a 81        		.byte	-127
 524 001b 01        		.byte	1
 525 001c 05        		.byte	5
 526 001d 08        		.byte	8
 527 001e 19        		.byte	25
 528 001f 01        		.byte	1
 529 0020 29        		.byte	41
 530 0021 05        		.byte	5
 531 0022 95        		.byte	-107
 532 0023 05        		.byte	5
 533 0024 75        		.byte	117
 534 0025 01        		.byte	1
 535 0026 91        		.byte	-111
 536 0027 02        		.byte	2
 537 0028 95        		.byte	-107
 538 0029 01        		.byte	1
 539 002a 75        		.byte	117
 540 002b 03        		.byte	3
 541 002c 91        		.byte	-111
 542 002d 01        		.byte	1
 543 002e 05        		.byte	5
 544 002f 07        		.byte	7
 545 0030 19        		.byte	25
 546 0031 00        		.byte	0
 547 0032 29        		.byte	41
 548 0033 FF        		.byte	-1
 549 0034 15        		.byte	21
 550 0035 00        		.byte	0
 551 0036 26        		.byte	38
 552 0037 FF        		.byte	-1
 553 0038 00        		.byte	0
 554 0039 95        		.byte	-107
 555 003a 06        		.byte	6
 556 003b 75        		.byte	117
 557 003c 08        		.byte	8
 558 003d 81        		.byte	-127
 559 003e 00        		.byte	0
 560 003f C0        		.byte	-64
 561               		.text
 562               	.Letext0:
 563               		.file 2 "/usr/lib/avr/include/stdint.h"
 564               		.file 3 "/usr/lib/gcc/avr/5.4.0/include/stddef.h"
 565               		.file 4 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdDescriptors.h"
 566               		.file 5 "./lib/lufa/LUFA/Drivers/USB/Class/Device/../Common/HIDClassCommon.h"
 567               		.file 6 "tmk_core/protocol/usb_descriptor.h"
 568               		.file 7 "./lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 usb_descriptor.c
     /tmp/ccQiU7Or.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccQiU7Or.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccQiU7Or.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccQiU7Or.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccQiU7Or.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccQiU7Or.s:13     .text.get_usb_descriptor:0000000000000000 get_usb_descriptor
     /tmp/ccQiU7Or.s:257    .progmem.data.ConfigurationDescriptor:0000000000000000 ConfigurationDescriptor
     /tmp/ccQiU7Or.s:336    .progmem.data.DeviceDescriptor:0000000000000000 DeviceDescriptor
     /tmp/ccQiU7Or.s:205    .progmem.data.SerialNumberString:0000000000000000 SerialNumberString
     /tmp/ccQiU7Or.s:249    .progmem.data.LanguageString:0000000000000000 LanguageString
     /tmp/ccQiU7Or.s:230    .progmem.data.ManufacturerString:0000000000000000 ManufacturerString
     /tmp/ccQiU7Or.s:215    .progmem.data.ProductString:0000000000000000 ProductString
     /tmp/ccQiU7Or.s:197    .rodata.CSWTCH.1:0000000000000000 CSWTCH.1
     /tmp/ccQiU7Or.s:190    .rodata.CSWTCH.2:0000000000000000 CSWTCH.2
     /tmp/ccQiU7Or.s:183    .rodata.CSWTCH.3:0000000000000000 CSWTCH.3
     /tmp/ccQiU7Or.s:496    .progmem.data.KeyboardReport:0000000000000000 KeyboardReport
     /tmp/ccQiU7Or.s:414    .progmem.data.MouseReport:0000000000000000 MouseReport
     /tmp/ccQiU7Or.s:355    .progmem.data.ExtrakeyReport:0000000000000000 ExtrakeyReport

UNDEFINED SYMBOLS
__do_copy_data
