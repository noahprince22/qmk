   1               		.file	"keyboard.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.matrix_setup,"ax",@progbits
  11               		.weak	matrix_setup
  13               	matrix_setup:
  14               	.LFB4:
  15               		.file 1 "./tmk_core/common/keyboard.c"
   1:./tmk_core/common/keyboard.c **** /*
   2:./tmk_core/common/keyboard.c **** Copyright 2011, 2012, 2013 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/keyboard.c **** 
   4:./tmk_core/common/keyboard.c **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/keyboard.c **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/keyboard.c **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/keyboard.c **** (at your option) any later version.
   8:./tmk_core/common/keyboard.c **** 
   9:./tmk_core/common/keyboard.c **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/keyboard.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/keyboard.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/keyboard.c **** GNU General Public License for more details.
  13:./tmk_core/common/keyboard.c **** 
  14:./tmk_core/common/keyboard.c **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/keyboard.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/keyboard.c **** */
  17:./tmk_core/common/keyboard.c **** 
  18:./tmk_core/common/keyboard.c **** #include <stdint.h>
  19:./tmk_core/common/keyboard.c **** #include "keyboard.h"
  20:./tmk_core/common/keyboard.c **** #include "matrix.h"
  21:./tmk_core/common/keyboard.c **** #include "keymap.h"
  22:./tmk_core/common/keyboard.c **** #include "host.h"
  23:./tmk_core/common/keyboard.c **** #include "led.h"
  24:./tmk_core/common/keyboard.c **** #include "keycode.h"
  25:./tmk_core/common/keyboard.c **** #include "timer.h"
  26:./tmk_core/common/keyboard.c **** #include "print.h"
  27:./tmk_core/common/keyboard.c **** #include "debug.h"
  28:./tmk_core/common/keyboard.c **** #include "command.h"
  29:./tmk_core/common/keyboard.c **** #include "util.h"
  30:./tmk_core/common/keyboard.c **** #include "sendchar.h"
  31:./tmk_core/common/keyboard.c **** #include "eeconfig.h"
  32:./tmk_core/common/keyboard.c **** #include "backlight.h"
  33:./tmk_core/common/keyboard.c **** #include "action_layer.h"
  34:./tmk_core/common/keyboard.c **** #ifdef BOOTMAGIC_ENABLE
  35:./tmk_core/common/keyboard.c **** #   include "bootmagic.h"
  36:./tmk_core/common/keyboard.c **** #else
  37:./tmk_core/common/keyboard.c **** #   include "magic.h"
  38:./tmk_core/common/keyboard.c **** #endif
  39:./tmk_core/common/keyboard.c **** #ifdef MOUSEKEY_ENABLE
  40:./tmk_core/common/keyboard.c **** #   include "mousekey.h"
  41:./tmk_core/common/keyboard.c **** #endif
  42:./tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
  43:./tmk_core/common/keyboard.c **** #   include "ps2_mouse.h"
  44:./tmk_core/common/keyboard.c **** #endif
  45:./tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
  46:./tmk_core/common/keyboard.c **** #   include "serial_mouse.h"
  47:./tmk_core/common/keyboard.c **** #endif
  48:./tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
  49:./tmk_core/common/keyboard.c **** #   include "adb.h"
  50:./tmk_core/common/keyboard.c **** #endif
  51:./tmk_core/common/keyboard.c **** #ifdef RGBLIGHT_ENABLE
  52:./tmk_core/common/keyboard.c **** #   include "rgblight.h"
  53:./tmk_core/common/keyboard.c **** #endif
  54:./tmk_core/common/keyboard.c **** #ifdef STENO_ENABLE
  55:./tmk_core/common/keyboard.c **** #   include "process_steno.h"
  56:./tmk_core/common/keyboard.c **** #endif
  57:./tmk_core/common/keyboard.c **** #ifdef FAUXCLICKY_ENABLE
  58:./tmk_core/common/keyboard.c **** #   include "fauxclicky.h"
  59:./tmk_core/common/keyboard.c **** #endif
  60:./tmk_core/common/keyboard.c **** #ifdef SERIAL_LINK_ENABLE
  61:./tmk_core/common/keyboard.c **** #   include "serial_link/system/serial_link.h"
  62:./tmk_core/common/keyboard.c **** #endif
  63:./tmk_core/common/keyboard.c **** #ifdef VISUALIZER_ENABLE
  64:./tmk_core/common/keyboard.c **** #   include "visualizer/visualizer.h"
  65:./tmk_core/common/keyboard.c **** #endif
  66:./tmk_core/common/keyboard.c **** #ifdef POINTING_DEVICE_ENABLE
  67:./tmk_core/common/keyboard.c **** #   include "pointing_device.h"
  68:./tmk_core/common/keyboard.c **** #endif
  69:./tmk_core/common/keyboard.c **** #ifdef MIDI_ENABLE
  70:./tmk_core/common/keyboard.c **** #   include "process_midi.h"
  71:./tmk_core/common/keyboard.c **** #endif
  72:./tmk_core/common/keyboard.c **** 
  73:./tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
  74:./tmk_core/common/keyboard.c **** extern const uint16_t keymaps[][MATRIX_ROWS][MATRIX_COLS];
  75:./tmk_core/common/keyboard.c **** static matrix_row_t get_real_keys(uint8_t row, matrix_row_t rowdata){
  76:./tmk_core/common/keyboard.c ****     matrix_row_t out = 0;
  77:./tmk_core/common/keyboard.c ****     for (uint8_t col = 0; col < MATRIX_COLS; col++) {
  78:./tmk_core/common/keyboard.c ****         //read each key in the row data and check if the keymap defines it as a real key
  79:./tmk_core/common/keyboard.c ****         if (pgm_read_byte(&keymaps[0][row][col]) && (rowdata & (1<<col))){
  80:./tmk_core/common/keyboard.c ****             //this creates new row data, if a key is defined in the keymap, it will be set here
  81:./tmk_core/common/keyboard.c ****             out |= 1<<col;
  82:./tmk_core/common/keyboard.c ****         }
  83:./tmk_core/common/keyboard.c ****     }
  84:./tmk_core/common/keyboard.c ****     return out;
  85:./tmk_core/common/keyboard.c **** }
  86:./tmk_core/common/keyboard.c **** 
  87:./tmk_core/common/keyboard.c **** static inline bool popcount_more_than_one(matrix_row_t rowdata)
  88:./tmk_core/common/keyboard.c **** {
  89:./tmk_core/common/keyboard.c ****     rowdata &= rowdata-1; //if there are less than two bits (keys) set, rowdata will become zero
  90:./tmk_core/common/keyboard.c ****     return rowdata;
  91:./tmk_core/common/keyboard.c **** }
  92:./tmk_core/common/keyboard.c **** 
  93:./tmk_core/common/keyboard.c **** static inline bool has_ghost_in_row(uint8_t row, matrix_row_t rowdata)
  94:./tmk_core/common/keyboard.c **** {
  95:./tmk_core/common/keyboard.c ****     /* No ghost exists when less than 2 keys are down on the row.
  96:./tmk_core/common/keyboard.c ****     If there are "active" blanks in the matrix, the key can't be pressed by the user,
  97:./tmk_core/common/keyboard.c ****     there is no doubt as to which keys are really being pressed.
  98:./tmk_core/common/keyboard.c ****     The ghosts will be ignored, they are KC_NO.   */
  99:./tmk_core/common/keyboard.c ****     rowdata = get_real_keys(row, rowdata);
 100:./tmk_core/common/keyboard.c ****     if ((popcount_more_than_one(rowdata)) == 0){
 101:./tmk_core/common/keyboard.c ****         return false;
 102:./tmk_core/common/keyboard.c ****     }
 103:./tmk_core/common/keyboard.c ****     /* Ghost occurs when the row shares a column line with other row,
 104:./tmk_core/common/keyboard.c ****     and two columns are read on each row. Blanks in the matrix don't matter,
 105:./tmk_core/common/keyboard.c ****     so they are filtered out.
 106:./tmk_core/common/keyboard.c ****     If there are two or more real keys pressed and they match columns with
 107:./tmk_core/common/keyboard.c ****     at least two of another row's real keys, the row will be ignored. Keep in mind,
 108:./tmk_core/common/keyboard.c ****     we are checking one row at a time, not all of them at once.
 109:./tmk_core/common/keyboard.c ****     */
 110:./tmk_core/common/keyboard.c ****     for (uint8_t i=0; i < MATRIX_ROWS; i++) {
 111:./tmk_core/common/keyboard.c ****         if (i != row && popcount_more_than_one(get_real_keys(i, matrix_get_row(i)) & rowdata)){
 112:./tmk_core/common/keyboard.c ****             return true;
 113:./tmk_core/common/keyboard.c ****         }
 114:./tmk_core/common/keyboard.c ****     }
 115:./tmk_core/common/keyboard.c ****     return false;
 116:./tmk_core/common/keyboard.c **** }
 117:./tmk_core/common/keyboard.c **** 
 118:./tmk_core/common/keyboard.c **** #endif
 119:./tmk_core/common/keyboard.c **** 
 120:./tmk_core/common/keyboard.c **** /** \brief matrix_setup
 121:./tmk_core/common/keyboard.c ****  *
 122:./tmk_core/common/keyboard.c ****  * FIXME: needs doc
 123:./tmk_core/common/keyboard.c ****  */
 124:./tmk_core/common/keyboard.c **** __attribute__ ((weak))
 125:./tmk_core/common/keyboard.c **** void matrix_setup(void) {
  16               		.loc 1 125 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22 0000 0895      		ret
  23               		.cfi_endproc
  24               	.LFE4:
  26               		.section	.text.keyboard_setup,"ax",@progbits
  27               	.global	keyboard_setup
  29               	keyboard_setup:
  30               	.LFB5:
 126:./tmk_core/common/keyboard.c **** }
 127:./tmk_core/common/keyboard.c **** 
 128:./tmk_core/common/keyboard.c **** /** \brief keyboard_setup
 129:./tmk_core/common/keyboard.c ****  *
 130:./tmk_core/common/keyboard.c ****  * FIXME: needs doc
 131:./tmk_core/common/keyboard.c ****  */
 132:./tmk_core/common/keyboard.c **** void keyboard_setup(void) {
  31               		.loc 1 132 0
  32               		.cfi_startproc
  33               	/* prologue: function */
  34               	/* frame size = 0 */
  35               	/* stack size = 0 */
  36               	.L__stack_usage = 0
 133:./tmk_core/common/keyboard.c ****     matrix_setup();
  37               		.loc 1 133 0
  38 0000 0C94 0000 		jmp matrix_setup
  39               	.LVL0:
  40               		.cfi_endproc
  41               	.LFE5:
  43               		.section	.text.is_keyboard_master,"ax",@progbits
  44               		.weak	is_keyboard_master
  46               	is_keyboard_master:
  47               	.LFB6:
 134:./tmk_core/common/keyboard.c **** }
 135:./tmk_core/common/keyboard.c **** 
 136:./tmk_core/common/keyboard.c **** /** \brief is_keyboard_master
 137:./tmk_core/common/keyboard.c ****  *
 138:./tmk_core/common/keyboard.c ****  * FIXME: needs doc
 139:./tmk_core/common/keyboard.c ****  */
 140:./tmk_core/common/keyboard.c **** __attribute__((weak))
 141:./tmk_core/common/keyboard.c **** bool is_keyboard_master(void) {
  48               		.loc 1 141 0
  49               		.cfi_startproc
  50               	/* prologue: function */
  51               	/* frame size = 0 */
  52               	/* stack size = 0 */
  53               	.L__stack_usage = 0
 142:./tmk_core/common/keyboard.c ****     return true;
 143:./tmk_core/common/keyboard.c **** }
  54               		.loc 1 143 0
  55 0000 81E0      		ldi r24,lo8(1)
  56 0002 0895      		ret
  57               		.cfi_endproc
  58               	.LFE6:
  60               		.section	.text.keyboard_init,"ax",@progbits
  61               	.global	keyboard_init
  63               	keyboard_init:
  64               	.LFB7:
 144:./tmk_core/common/keyboard.c **** 
 145:./tmk_core/common/keyboard.c **** /** \brief keyboard_init
 146:./tmk_core/common/keyboard.c ****  *
 147:./tmk_core/common/keyboard.c ****  * FIXME: needs doc
 148:./tmk_core/common/keyboard.c ****  */
 149:./tmk_core/common/keyboard.c **** void keyboard_init(void) {
  65               		.loc 1 149 0
  66               		.cfi_startproc
  67               	/* prologue: function */
  68               	/* frame size = 0 */
  69               	/* stack size = 0 */
  70               	.L__stack_usage = 0
 150:./tmk_core/common/keyboard.c ****     timer_init();
  71               		.loc 1 150 0
  72 0000 0E94 0000 		call timer_init
  73               	.LVL1:
 151:./tmk_core/common/keyboard.c ****     matrix_init();
  74               		.loc 1 151 0
  75 0004 0E94 0000 		call matrix_init
  76               	.LVL2:
 152:./tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
 153:./tmk_core/common/keyboard.c ****     ps2_mouse_init();
 154:./tmk_core/common/keyboard.c **** #endif
 155:./tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
 156:./tmk_core/common/keyboard.c ****     serial_mouse_init();
 157:./tmk_core/common/keyboard.c **** #endif
 158:./tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
 159:./tmk_core/common/keyboard.c ****     adb_mouse_init();
 160:./tmk_core/common/keyboard.c **** #endif
 161:./tmk_core/common/keyboard.c **** #ifdef BOOTMAGIC_ENABLE
 162:./tmk_core/common/keyboard.c ****     bootmagic();
 163:./tmk_core/common/keyboard.c **** #else
 164:./tmk_core/common/keyboard.c ****     magic();
  77               		.loc 1 164 0
  78 0008 0E94 0000 		call magic
  79               	.LVL3:
 165:./tmk_core/common/keyboard.c **** #endif
 166:./tmk_core/common/keyboard.c **** #ifdef BACKLIGHT_ENABLE
 167:./tmk_core/common/keyboard.c ****     backlight_init();
  80               		.loc 1 167 0
  81 000c 0E94 0000 		call backlight_init
  82               	.LVL4:
 168:./tmk_core/common/keyboard.c **** #endif
 169:./tmk_core/common/keyboard.c **** #ifdef RGBLIGHT_ENABLE
 170:./tmk_core/common/keyboard.c ****     rgblight_init();
  83               		.loc 1 170 0
  84 0010 0C94 0000 		jmp rgblight_init
  85               	.LVL5:
  86               		.cfi_endproc
  87               	.LFE7:
  89               		.section	.text.keyboard_task,"ax",@progbits
  90               	.global	keyboard_task
  92               	keyboard_task:
  93               	.LFB8:
 171:./tmk_core/common/keyboard.c **** #endif
 172:./tmk_core/common/keyboard.c **** #ifdef STENO_ENABLE
 173:./tmk_core/common/keyboard.c ****     steno_init();
 174:./tmk_core/common/keyboard.c **** #endif
 175:./tmk_core/common/keyboard.c **** #ifdef FAUXCLICKY_ENABLE
 176:./tmk_core/common/keyboard.c ****     fauxclicky_init();
 177:./tmk_core/common/keyboard.c **** #endif
 178:./tmk_core/common/keyboard.c **** #ifdef POINTING_DEVICE_ENABLE
 179:./tmk_core/common/keyboard.c ****     pointing_device_init();
 180:./tmk_core/common/keyboard.c **** #endif
 181:./tmk_core/common/keyboard.c **** #if defined(NKRO_ENABLE) && defined(FORCE_NKRO)
 182:./tmk_core/common/keyboard.c ****     keymap_config.nkro = 1;
 183:./tmk_core/common/keyboard.c **** #endif
 184:./tmk_core/common/keyboard.c **** }
 185:./tmk_core/common/keyboard.c **** 
 186:./tmk_core/common/keyboard.c **** /** \brief Keyboard task: Do keyboard routine jobs
 187:./tmk_core/common/keyboard.c ****  *
 188:./tmk_core/common/keyboard.c ****  * Do routine keyboard jobs: 
 189:./tmk_core/common/keyboard.c ****  *
 190:./tmk_core/common/keyboard.c ****  * * scan matrix
 191:./tmk_core/common/keyboard.c ****  * * handle mouse movements
 192:./tmk_core/common/keyboard.c ****  * * run visualizer code
 193:./tmk_core/common/keyboard.c ****  * * handle midi commands
 194:./tmk_core/common/keyboard.c ****  * * light LEDs
 195:./tmk_core/common/keyboard.c ****  *
 196:./tmk_core/common/keyboard.c ****  * This is repeatedly called as fast as possible.
 197:./tmk_core/common/keyboard.c ****  */
 198:./tmk_core/common/keyboard.c **** void keyboard_task(void)
 199:./tmk_core/common/keyboard.c **** {
  94               		.loc 1 199 0
  95               		.cfi_startproc
  96 0000 CF92      		push r12
  97               	.LCFI0:
  98               		.cfi_def_cfa_offset 3
  99               		.cfi_offset 12, -2
 100 0002 DF92      		push r13
 101               	.LCFI1:
 102               		.cfi_def_cfa_offset 4
 103               		.cfi_offset 13, -3
 104 0004 EF92      		push r14
 105               	.LCFI2:
 106               		.cfi_def_cfa_offset 5
 107               		.cfi_offset 14, -4
 108 0006 FF92      		push r15
 109               	.LCFI3:
 110               		.cfi_def_cfa_offset 6
 111               		.cfi_offset 15, -5
 112 0008 0F93      		push r16
 113               	.LCFI4:
 114               		.cfi_def_cfa_offset 7
 115               		.cfi_offset 16, -6
 116 000a 1F93      		push r17
 117               	.LCFI5:
 118               		.cfi_def_cfa_offset 8
 119               		.cfi_offset 17, -7
 120 000c CF93      		push r28
 121               	.LCFI6:
 122               		.cfi_def_cfa_offset 9
 123               		.cfi_offset 28, -8
 124 000e DF93      		push r29
 125               	.LCFI7:
 126               		.cfi_def_cfa_offset 10
 127               		.cfi_offset 29, -9
 128 0010 CDB7      		in r28,__SP_L__
 129 0012 DEB7      		in r29,__SP_H__
 130               	.LCFI8:
 131               		.cfi_def_cfa_register 28
 132 0014 2B97      		sbiw r28,11
 133               	.LCFI9:
 134               		.cfi_def_cfa_offset 21
 135 0016 0FB6      		in __tmp_reg__,__SREG__
 136 0018 F894      		cli
 137 001a DEBF      		out __SP_H__,r29
 138 001c 0FBE      		out __SREG__,__tmp_reg__
 139 001e CDBF      		out __SP_L__,r28
 140               	/* prologue: function */
 141               	/* frame size = 11 */
 142               	/* stack size = 19 */
 143               	.L__stack_usage = 19
 144               	.LVL6:
 200:./tmk_core/common/keyboard.c ****     static matrix_row_t matrix_prev[MATRIX_ROWS];
 201:./tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 202:./tmk_core/common/keyboard.c ****   //  static matrix_row_t matrix_ghost[MATRIX_ROWS];
 203:./tmk_core/common/keyboard.c **** #endif
 204:./tmk_core/common/keyboard.c ****     static uint8_t led_status = 0;
 205:./tmk_core/common/keyboard.c ****     matrix_row_t matrix_row = 0;
 206:./tmk_core/common/keyboard.c ****     matrix_row_t matrix_change = 0;
 207:./tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 208:./tmk_core/common/keyboard.c ****     uint8_t keys_processed = 0;
 209:./tmk_core/common/keyboard.c **** #endif
 210:./tmk_core/common/keyboard.c **** 
 211:./tmk_core/common/keyboard.c ****     matrix_scan();
 145               		.loc 1 211 0
 146 0020 0E94 0000 		call matrix_scan
 147               	.LVL7:
 212:./tmk_core/common/keyboard.c ****     if (is_keyboard_master()) {
 148               		.loc 1 212 0
 149 0024 0E94 0000 		call is_keyboard_master
 150               	.LVL8:
 151 0028 8111      		cpse r24,__zero_reg__
 152 002a 00C0      		rjmp .L6
 153               	.LVL9:
 154               	.L10:
 213:./tmk_core/common/keyboard.c ****         for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 214:./tmk_core/common/keyboard.c ****             matrix_row = matrix_get_row(r);
 215:./tmk_core/common/keyboard.c ****             matrix_change = matrix_row ^ matrix_prev[r];
 216:./tmk_core/common/keyboard.c ****             if (matrix_change) {
 217:./tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 218:./tmk_core/common/keyboard.c ****                 if (has_ghost_in_row(r, matrix_row)) {
 219:./tmk_core/common/keyboard.c ****                     /* Keep track of whether ghosted status has changed for
 220:./tmk_core/common/keyboard.c ****                     * debugging. But don't update matrix_prev until un-ghosted, or
 221:./tmk_core/common/keyboard.c ****                     * the last key would be lost.
 222:./tmk_core/common/keyboard.c ****                     */
 223:./tmk_core/common/keyboard.c ****                     //if (debug_matrix && matrix_ghost[r] != matrix_row) {
 224:./tmk_core/common/keyboard.c ****                     //    matrix_print();
 225:./tmk_core/common/keyboard.c ****                     //}
 226:./tmk_core/common/keyboard.c ****                     //matrix_ghost[r] = matrix_row;
 227:./tmk_core/common/keyboard.c ****                     continue;
 228:./tmk_core/common/keyboard.c ****                 }
 229:./tmk_core/common/keyboard.c ****                 //matrix_ghost[r] = matrix_row;
 230:./tmk_core/common/keyboard.c **** #endif
 231:./tmk_core/common/keyboard.c ****                 if (debug_matrix) matrix_print();
 232:./tmk_core/common/keyboard.c ****                 for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 233:./tmk_core/common/keyboard.c ****                     if (matrix_change & ((matrix_row_t)1<<c)) {
 234:./tmk_core/common/keyboard.c ****                         action_exec((keyevent_t){
 235:./tmk_core/common/keyboard.c ****                             .key = (keypos_t){ .row = r, .col = c },
 236:./tmk_core/common/keyboard.c ****                             .pressed = (matrix_row & ((matrix_row_t)1<<c)),
 237:./tmk_core/common/keyboard.c ****                             .time = (timer_read() | 1) /* time should not be 0 */
 238:./tmk_core/common/keyboard.c ****                         });
 239:./tmk_core/common/keyboard.c ****                         // record a processed key
 240:./tmk_core/common/keyboard.c ****                         matrix_prev[r] ^= ((matrix_row_t)1<<c);
 241:./tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 242:./tmk_core/common/keyboard.c ****                         // only jump out if we have processed "enough" keys.
 243:./tmk_core/common/keyboard.c ****                         if (++keys_processed >= QMK_KEYS_PER_SCAN)
 244:./tmk_core/common/keyboard.c **** #endif
 245:./tmk_core/common/keyboard.c ****                         // process a key per task call
 246:./tmk_core/common/keyboard.c ****                         goto MATRIX_LOOP_END;
 247:./tmk_core/common/keyboard.c ****                     }
 248:./tmk_core/common/keyboard.c ****                 }
 249:./tmk_core/common/keyboard.c ****             }
 250:./tmk_core/common/keyboard.c ****         }
 251:./tmk_core/common/keyboard.c ****     }
 252:./tmk_core/common/keyboard.c ****     // call with pseudo tick event when no real key event.
 253:./tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 254:./tmk_core/common/keyboard.c ****     // we can get here with some keys processed now.
 255:./tmk_core/common/keyboard.c ****     if (!keys_processed)
 256:./tmk_core/common/keyboard.c **** #endif
 257:./tmk_core/common/keyboard.c ****     action_exec(TICK);
 155               		.loc 1 257 0
 156 002c 8FEF      		ldi r24,lo8(-1)
 157 002e 8983      		std Y+1,r24
 158 0030 8A83      		std Y+2,r24
 159 0032 1B82      		std Y+3,__zero_reg__
 160 0034 0E94 0000 		call timer_read
 161               	.LVL10:
 162 0038 8160      		ori r24,1
 163 003a 782F      		mov r23,r24
 164 003c 9D83      		std Y+5,r25
 165 003e 8C83      		std Y+4,r24
 166 0040 4981      		ldd r20,Y+1
 167 0042 5A81      		ldd r21,Y+2
 168 0044 6B81      		ldd r22,Y+3
 169 0046 8D81      		ldd r24,Y+5
 170 0048 0E94 0000 		call action_exec
 171               	.LVL11:
 172 004c 00C0      		rjmp .L7
 173               	.LVL12:
 174               	.L6:
 175 004e 30E0      		ldi r19,lo8(matrix_prev.2894)
 176 0050 E32E      		mov r14,r19
 177 0052 30E0      		ldi r19,hi8(matrix_prev.2894)
 178 0054 F32E      		mov r15,r19
 212:./tmk_core/common/keyboard.c ****     if (is_keyboard_master()) {
 179               		.loc 1 212 0
 180 0056 00E0      		ldi r16,0
 181 0058 10E0      		ldi r17,0
 182               	.LVL13:
 183               	.L16:
 184 005a C02E      		mov r12,r16
 185               	.LVL14:
 186               	.LBB6:
 214:./tmk_core/common/keyboard.c ****             matrix_row = matrix_get_row(r);
 187               		.loc 1 214 0
 188 005c 802F      		mov r24,r16
 189 005e 0E94 0000 		call matrix_get_row
 190               	.LVL15:
 215:./tmk_core/common/keyboard.c ****             matrix_change = matrix_row ^ matrix_prev[r];
 191               		.loc 1 215 0
 192 0062 F701      		movw r30,r14
 193 0064 D190      		ld r13,Z+
 194 0066 7F01      		movw r14,r30
 195 0068 D826      		eor r13,r24
 196               	.LVL16:
 216:./tmk_core/common/keyboard.c ****             if (matrix_change) {
 197               		.loc 1 216 0
 198 006a 01F4      		brne .L8
 199               	.LVL17:
 200               	.L14:
 201 006c 0F5F      		subi r16,-1
 202 006e 1F4F      		sbci r17,-1
 203               	.LVL18:
 213:./tmk_core/common/keyboard.c ****         for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 204               		.loc 1 213 0
 205 0070 0A30      		cpi r16,10
 206 0072 1105      		cpc r17,__zero_reg__
 207 0074 01F4      		brne .L16
 208 0076 00C0      		rjmp .L10
 209               	.LVL19:
 210               	.L8:
 231:./tmk_core/common/keyboard.c ****                 if (debug_matrix) matrix_print();
 211               		.loc 1 231 0
 212 0078 9091 0000 		lds r25,debug_config
 213 007c 91FF      		sbrs r25,1
 214 007e 00C0      		rjmp .L11
 231:./tmk_core/common/keyboard.c ****                 if (debug_matrix) matrix_print();
 215               		.loc 1 231 0 is_stmt 0 discriminator 1
 216 0080 8B87      		std Y+11,r24
 217 0082 0E94 0000 		call matrix_print
 218               	.LVL20:
 219 0086 8B85      		ldd r24,Y+11
 220               	.L11:
 221               	.LVL21:
 222               	.LBE6:
 212:./tmk_core/common/keyboard.c ****     if (is_keyboard_master()) {
 223               		.loc 1 212 0 is_stmt 1
 224 0088 20E0      		ldi r18,0
 225 008a 30E0      		ldi r19,0
 226               	.LBB8:
 227               	.LBB7:
 233:./tmk_core/common/keyboard.c ****                     if (matrix_change & ((matrix_row_t)1<<c)) {
 228               		.loc 1 233 0
 229 008c 4D2D      		mov r20,r13
 230 008e 50E0      		ldi r21,0
 231               	.LVL22:
 232               	.L15:
 233 0090 922F      		mov r25,r18
 234               	.LVL23:
 235 0092 BA01      		movw r22,r20
 236 0094 022E      		mov r0,r18
 237 0096 00C0      		rjmp 2f
 238               		1:
 239 0098 7595      		asr r23
 240 009a 6795      		ror r22
 241               		2:
 242 009c 0A94      		dec r0
 243 009e 02F4      		brpl 1b
 244 00a0 60FF      		sbrs r22,0
 245 00a2 00C0      		rjmp .L12
 234:./tmk_core/common/keyboard.c ****                         action_exec((keyevent_t){
 246               		.loc 1 234 0
 247 00a4 2E83      		std Y+6,r18
 248 00a6 CF82      		std Y+7,r12
 236:./tmk_core/common/keyboard.c ****                             .pressed = (matrix_row & ((matrix_row_t)1<<c)),
 249               		.loc 1 236 0
 250 00a8 EE24      		clr r14
 251 00aa E394      		inc r14
 252 00ac F12C      		mov r15,__zero_reg__
 253               	.LVL24:
 254 00ae 00C0      		rjmp 2f
 255               		1:
 256 00b0 EE0C      		lsl r14
 257 00b2 FF1C      		rol r15
 258               		2:
 259 00b4 9A95      		dec r25
 260 00b6 02F4      		brpl 1b
 261 00b8 90E0      		ldi r25,0
 262 00ba 8E21      		and r24,r14
 263 00bc 9F21      		and r25,r15
 264 00be 21E0      		ldi r18,lo8(1)
 265 00c0 892B      		or r24,r25
 266 00c2 01F4      		brne .L13
 267 00c4 20E0      		ldi r18,0
 268               	.L13:
 234:./tmk_core/common/keyboard.c ****                         action_exec((keyevent_t){
 269               		.loc 1 234 0
 270 00c6 2887      		std Y+8,r18
 237:./tmk_core/common/keyboard.c ****                             .time = (timer_read() | 1) /* time should not be 0 */
 271               		.loc 1 237 0
 272 00c8 0E94 0000 		call timer_read
 273               	.LVL25:
 274 00cc 8160      		ori r24,1
 234:./tmk_core/common/keyboard.c ****                         action_exec((keyevent_t){
 275               		.loc 1 234 0
 276 00ce 782F      		mov r23,r24
 277 00d0 9A87      		std Y+10,r25
 278 00d2 8987      		std Y+9,r24
 279 00d4 4E81      		ldd r20,Y+6
 280 00d6 5F81      		ldd r21,Y+7
 281 00d8 6885      		ldd r22,Y+8
 282 00da 8A85      		ldd r24,Y+10
 283 00dc 0E94 0000 		call action_exec
 284               	.LVL26:
 240:./tmk_core/common/keyboard.c ****                         matrix_prev[r] ^= ((matrix_row_t)1<<c);
 285               		.loc 1 240 0
 286 00e0 F801      		movw r30,r16
 287 00e2 E050      		subi r30,lo8(-(matrix_prev.2894))
 288 00e4 F040      		sbci r31,hi8(-(matrix_prev.2894))
 289 00e6 8081      		ld r24,Z
 290 00e8 8E25      		eor r24,r14
 291 00ea 8083      		st Z,r24
 246:./tmk_core/common/keyboard.c ****                         goto MATRIX_LOOP_END;
 292               		.loc 1 246 0
 293 00ec 00C0      		rjmp .L7
 294               	.LVL27:
 295               	.L12:
 296 00ee 2F5F      		subi r18,-1
 297 00f0 3F4F      		sbci r19,-1
 298               	.LVL28:
 232:./tmk_core/common/keyboard.c ****                 for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 299               		.loc 1 232 0
 300 00f2 2630      		cpi r18,6
 301 00f4 3105      		cpc r19,__zero_reg__
 302 00f6 01F4      		brne .L15
 303 00f8 00C0      		rjmp .L14
 304               	.LVL29:
 305               	.L7:
 306               	.LBE7:
 307               	.LBE8:
 258:./tmk_core/common/keyboard.c **** 
 259:./tmk_core/common/keyboard.c **** MATRIX_LOOP_END:
 260:./tmk_core/common/keyboard.c **** 
 261:./tmk_core/common/keyboard.c **** #ifdef MOUSEKEY_ENABLE
 262:./tmk_core/common/keyboard.c ****     // mousekey repeat & acceleration
 263:./tmk_core/common/keyboard.c ****     mousekey_task();
 308               		.loc 1 263 0
 309 00fa 0E94 0000 		call mousekey_task
 310               	.LVL30:
 264:./tmk_core/common/keyboard.c **** #endif
 265:./tmk_core/common/keyboard.c **** 
 266:./tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
 267:./tmk_core/common/keyboard.c ****     ps2_mouse_task();
 268:./tmk_core/common/keyboard.c **** #endif
 269:./tmk_core/common/keyboard.c **** 
 270:./tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
 271:./tmk_core/common/keyboard.c ****     serial_mouse_task();
 272:./tmk_core/common/keyboard.c **** #endif
 273:./tmk_core/common/keyboard.c **** 
 274:./tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
 275:./tmk_core/common/keyboard.c ****     adb_mouse_task();
 276:./tmk_core/common/keyboard.c **** #endif
 277:./tmk_core/common/keyboard.c **** 
 278:./tmk_core/common/keyboard.c **** #ifdef SERIAL_LINK_ENABLE
 279:./tmk_core/common/keyboard.c **** 	serial_link_update();
 280:./tmk_core/common/keyboard.c **** #endif
 281:./tmk_core/common/keyboard.c **** 
 282:./tmk_core/common/keyboard.c **** #ifdef VISUALIZER_ENABLE
 283:./tmk_core/common/keyboard.c ****     visualizer_update(default_layer_state, layer_state, visualizer_get_mods(), host_keyboard_leds()
 284:./tmk_core/common/keyboard.c **** #endif
 285:./tmk_core/common/keyboard.c **** 
 286:./tmk_core/common/keyboard.c **** #ifdef POINTING_DEVICE_ENABLE
 287:./tmk_core/common/keyboard.c ****     pointing_device_task();
 288:./tmk_core/common/keyboard.c **** #endif
 289:./tmk_core/common/keyboard.c **** 
 290:./tmk_core/common/keyboard.c **** #ifdef MIDI_ENABLE
 291:./tmk_core/common/keyboard.c ****     midi_task();
 292:./tmk_core/common/keyboard.c **** #endif
 293:./tmk_core/common/keyboard.c **** 
 294:./tmk_core/common/keyboard.c ****     // update LED
 295:./tmk_core/common/keyboard.c ****     if (led_status != host_keyboard_leds()) {
 311               		.loc 1 295 0
 312 00fe 1091 0000 		lds r17,led_status.2895
 313 0102 0E94 0000 		call host_keyboard_leds
 314               	.LVL31:
 315 0106 1817      		cp r17,r24
 316 0108 01F0      		breq .L5
 296:./tmk_core/common/keyboard.c ****         led_status = host_keyboard_leds();
 317               		.loc 1 296 0
 318 010a 0E94 0000 		call host_keyboard_leds
 319               	.LVL32:
 320 010e 8093 0000 		sts led_status.2895,r24
 321               	.LVL33:
 322               	/* epilogue start */
 297:./tmk_core/common/keyboard.c ****         keyboard_set_leds(led_status);
 298:./tmk_core/common/keyboard.c ****     }
 299:./tmk_core/common/keyboard.c **** }
 323               		.loc 1 299 0
 324 0112 2B96      		adiw r28,11
 325 0114 0FB6      		in __tmp_reg__,__SREG__
 326 0116 F894      		cli
 327 0118 DEBF      		out __SP_H__,r29
 328 011a 0FBE      		out __SREG__,__tmp_reg__
 329 011c CDBF      		out __SP_L__,r28
 330 011e DF91      		pop r29
 331 0120 CF91      		pop r28
 332 0122 1F91      		pop r17
 333 0124 0F91      		pop r16
 334 0126 FF90      		pop r15
 335 0128 EF90      		pop r14
 336 012a DF90      		pop r13
 337 012c CF90      		pop r12
 338               	.LBB9:
 339               	.LBB10:
 300:./tmk_core/common/keyboard.c **** 
 301:./tmk_core/common/keyboard.c **** /** \brief keyboard set leds
 302:./tmk_core/common/keyboard.c ****  *
 303:./tmk_core/common/keyboard.c ****  * FIXME: needs doc
 304:./tmk_core/common/keyboard.c ****  */
 305:./tmk_core/common/keyboard.c **** void keyboard_set_leds(uint8_t leds)
 306:./tmk_core/common/keyboard.c **** {
 307:./tmk_core/common/keyboard.c ****     if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
 308:./tmk_core/common/keyboard.c ****     led_set(leds);
 340               		.loc 1 308 0
 341 012e 0C94 0000 		jmp led_set
 342               	.LVL34:
 343               	.L5:
 344               	/* epilogue start */
 345               	.LBE10:
 346               	.LBE9:
 299:./tmk_core/common/keyboard.c **** }
 347               		.loc 1 299 0
 348 0132 2B96      		adiw r28,11
 349 0134 0FB6      		in __tmp_reg__,__SREG__
 350 0136 F894      		cli
 351 0138 DEBF      		out __SP_H__,r29
 352 013a 0FBE      		out __SREG__,__tmp_reg__
 353 013c CDBF      		out __SP_L__,r28
 354 013e DF91      		pop r29
 355 0140 CF91      		pop r28
 356 0142 1F91      		pop r17
 357 0144 0F91      		pop r16
 358 0146 FF90      		pop r15
 359 0148 EF90      		pop r14
 360 014a DF90      		pop r13
 361 014c CF90      		pop r12
 362 014e 0895      		ret
 363               		.cfi_endproc
 364               	.LFE8:
 366               		.section	.text.keyboard_set_leds,"ax",@progbits
 367               	.global	keyboard_set_leds
 369               	keyboard_set_leds:
 370               	.LFB9:
 306:./tmk_core/common/keyboard.c **** {
 371               		.loc 1 306 0
 372               		.cfi_startproc
 373               	.LVL35:
 374               	/* prologue: function */
 375               	/* frame size = 0 */
 376               	/* stack size = 0 */
 377               	.L__stack_usage = 0
 378               		.loc 1 308 0
 379 0000 0C94 0000 		jmp led_set
 380               	.LVL36:
 381               		.cfi_endproc
 382               	.LFE9:
 384               		.section	.bss.led_status.2895,"aw",@nobits
 387               	led_status.2895:
 388 0000 00        		.zero	1
 389               		.section	.bss.matrix_prev.2894,"aw",@nobits
 392               	matrix_prev.2894:
 393 0000 0000 0000 		.zero	10
 393      0000 0000 
 393      0000 
 394               		.text
 395               	.Letext0:
 396               		.file 2 "/usr/lib/avr/include/stdint.h"
 397               		.file 3 "./tmk_core/common/keyboard.h"
 398               		.file 4 "./tmk_core/common/matrix.h"
 399               		.file 5 "./tmk_core/common/debug.h"
 400               		.file 6 "./tmk_core/common/timer.h"
 401               		.file 7 "./tmk_core/common/magic.h"
 402               		.file 8 "./tmk_core/common/backlight.h"
 403               		.file 9 "./quantum/rgblight.h"
 404               		.file 10 "./tmk_core/common/action.h"
 405               		.file 11 "./tmk_core/common/led.h"
 406               		.file 12 "./tmk_core/common/mousekey.h"
 407               		.file 13 "./tmk_core/common/host.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 keyboard.c
     /tmp/ccOk2k43.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccOk2k43.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccOk2k43.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccOk2k43.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccOk2k43.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccOk2k43.s:13     .text.matrix_setup:0000000000000000 matrix_setup
     /tmp/ccOk2k43.s:29     .text.keyboard_setup:0000000000000000 keyboard_setup
     /tmp/ccOk2k43.s:46     .text.is_keyboard_master:0000000000000000 is_keyboard_master
     /tmp/ccOk2k43.s:63     .text.keyboard_init:0000000000000000 keyboard_init
     /tmp/ccOk2k43.s:92     .text.keyboard_task:0000000000000000 keyboard_task
     /tmp/ccOk2k43.s:392    .bss.matrix_prev.2894:0000000000000000 matrix_prev.2894
     /tmp/ccOk2k43.s:387    .bss.led_status.2895:0000000000000000 led_status.2895
     /tmp/ccOk2k43.s:369    .text.keyboard_set_leds:0000000000000000 keyboard_set_leds

UNDEFINED SYMBOLS
timer_init
matrix_init
magic
backlight_init
rgblight_init
matrix_scan
timer_read
action_exec
matrix_get_row
debug_config
matrix_print
mousekey_task
host_keyboard_leds
led_set
__do_clear_bss
