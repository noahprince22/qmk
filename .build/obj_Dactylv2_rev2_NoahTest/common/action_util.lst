   1               		.file	"action_util.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.add_key,"ax",@progbits
  11               	.global	add_key
  13               	add_key:
  14               	.LFB0:
  15               		.file 1 "./tmk_core/common/action_util.h"
   1:./tmk_core/common/action_util.h **** /*
   2:./tmk_core/common/action_util.h **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/action_util.h **** 
   4:./tmk_core/common/action_util.h **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/action_util.h **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/action_util.h **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/action_util.h **** (at your option) any later version.
   8:./tmk_core/common/action_util.h **** 
   9:./tmk_core/common/action_util.h **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/action_util.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/action_util.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/action_util.h **** GNU General Public License for more details.
  13:./tmk_core/common/action_util.h **** 
  14:./tmk_core/common/action_util.h **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/action_util.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/action_util.h **** */
  17:./tmk_core/common/action_util.h **** #ifndef ACTION_UTIL_H
  18:./tmk_core/common/action_util.h **** #define ACTION_UTIL_H
  19:./tmk_core/common/action_util.h **** 
  20:./tmk_core/common/action_util.h **** #include <stdint.h>
  21:./tmk_core/common/action_util.h **** #include "report.h"
  22:./tmk_core/common/action_util.h **** 
  23:./tmk_core/common/action_util.h **** #ifdef __cplusplus
  24:./tmk_core/common/action_util.h **** extern "C" {
  25:./tmk_core/common/action_util.h **** #endif
  26:./tmk_core/common/action_util.h **** 
  27:./tmk_core/common/action_util.h **** extern report_keyboard_t *keyboard_report;
  28:./tmk_core/common/action_util.h **** 
  29:./tmk_core/common/action_util.h **** void send_keyboard_report(void);
  30:./tmk_core/common/action_util.h **** 
  31:./tmk_core/common/action_util.h **** /* key */
  32:./tmk_core/common/action_util.h **** inline void add_key(uint8_t key) {
  16               		.loc 1 32 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  33:./tmk_core/common/action_util.h ****   add_key_to_report(keyboard_report, key);
  23               		.loc 1 33 0
  24 0000 682F      		mov r22,r24
  25 0002 8091 0000 		lds r24,keyboard_report
  26 0006 9091 0000 		lds r25,keyboard_report+1
  27               	.LVL1:
  28 000a 0C94 0000 		jmp add_key_to_report
  29               	.LVL2:
  30               		.cfi_endproc
  31               	.LFE0:
  33               		.section	.text.del_key,"ax",@progbits
  34               	.global	del_key
  36               	del_key:
  37               	.LFB1:
  34:./tmk_core/common/action_util.h **** }
  35:./tmk_core/common/action_util.h **** 
  36:./tmk_core/common/action_util.h **** inline void del_key(uint8_t key) {
  38               		.loc 1 36 0
  39               		.cfi_startproc
  40               	.LVL3:
  41               	/* prologue: function */
  42               	/* frame size = 0 */
  43               	/* stack size = 0 */
  44               	.L__stack_usage = 0
  37:./tmk_core/common/action_util.h ****   del_key_from_report(keyboard_report, key);
  45               		.loc 1 37 0
  46 0000 682F      		mov r22,r24
  47 0002 8091 0000 		lds r24,keyboard_report
  48 0006 9091 0000 		lds r25,keyboard_report+1
  49               	.LVL4:
  50 000a 0C94 0000 		jmp del_key_from_report
  51               	.LVL5:
  52               		.cfi_endproc
  53               	.LFE1:
  55               		.section	.text.clear_keys,"ax",@progbits
  56               	.global	clear_keys
  58               	clear_keys:
  59               	.LFB2:
  38:./tmk_core/common/action_util.h **** }
  39:./tmk_core/common/action_util.h **** 
  40:./tmk_core/common/action_util.h **** inline void clear_keys(void) {
  60               		.loc 1 40 0
  61               		.cfi_startproc
  62               	/* prologue: function */
  63               	/* frame size = 0 */
  64               	/* stack size = 0 */
  65               	.L__stack_usage = 0
  41:./tmk_core/common/action_util.h ****   clear_keys_from_report(keyboard_report);
  66               		.loc 1 41 0
  67 0000 8091 0000 		lds r24,keyboard_report
  68 0004 9091 0000 		lds r25,keyboard_report+1
  69 0008 0C94 0000 		jmp clear_keys_from_report
  70               	.LVL6:
  71               		.cfi_endproc
  72               	.LFE2:
  74               		.section	.text.get_oneshot_locked_mods,"ax",@progbits
  75               	.global	get_oneshot_locked_mods
  77               	get_oneshot_locked_mods:
  78               	.LFB7:
  79               		.file 2 "./tmk_core/common/action_util.c"
   1:./tmk_core/common/action_util.c **** /*
   2:./tmk_core/common/action_util.c **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/action_util.c **** 
   4:./tmk_core/common/action_util.c **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/action_util.c **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/action_util.c **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/action_util.c **** (at your option) any later version.
   8:./tmk_core/common/action_util.c **** 
   9:./tmk_core/common/action_util.c **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/action_util.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/action_util.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/action_util.c **** GNU General Public License for more details.
  13:./tmk_core/common/action_util.c **** 
  14:./tmk_core/common/action_util.c **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/action_util.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/action_util.c **** */
  17:./tmk_core/common/action_util.c **** #include "host.h"
  18:./tmk_core/common/action_util.c **** #include "report.h"
  19:./tmk_core/common/action_util.c **** #include "debug.h"
  20:./tmk_core/common/action_util.c **** #include "action_util.h"
  21:./tmk_core/common/action_util.c **** #include "action_layer.h"
  22:./tmk_core/common/action_util.c **** #include "timer.h"
  23:./tmk_core/common/action_util.c **** #include "keycode_config.h"
  24:./tmk_core/common/action_util.c **** 
  25:./tmk_core/common/action_util.c **** extern keymap_config_t keymap_config;
  26:./tmk_core/common/action_util.c **** 
  27:./tmk_core/common/action_util.c **** 
  28:./tmk_core/common/action_util.c **** static uint8_t real_mods = 0;
  29:./tmk_core/common/action_util.c **** static uint8_t weak_mods = 0;
  30:./tmk_core/common/action_util.c **** static uint8_t macro_mods = 0;
  31:./tmk_core/common/action_util.c **** 
  32:./tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
  33:./tmk_core/common/action_util.c **** #define RO_ADD(a, b) ((a + b) % KEYBOARD_REPORT_KEYS)
  34:./tmk_core/common/action_util.c **** #define RO_SUB(a, b) ((a - b + KEYBOARD_REPORT_KEYS) % KEYBOARD_REPORT_KEYS)
  35:./tmk_core/common/action_util.c **** #define RO_INC(a) RO_ADD(a, 1)
  36:./tmk_core/common/action_util.c **** #define RO_DEC(a) RO_SUB(a, 1)
  37:./tmk_core/common/action_util.c **** static int8_t cb_head = 0;
  38:./tmk_core/common/action_util.c **** static int8_t cb_tail = 0;
  39:./tmk_core/common/action_util.c **** static int8_t cb_count = 0;
  40:./tmk_core/common/action_util.c **** #endif
  41:./tmk_core/common/action_util.c **** 
  42:./tmk_core/common/action_util.c **** // TODO: pointer variable is not needed
  43:./tmk_core/common/action_util.c **** //report_keyboard_t keyboard_report = {};
  44:./tmk_core/common/action_util.c **** report_keyboard_t *keyboard_report = &(report_keyboard_t){};
  45:./tmk_core/common/action_util.c **** 
  46:./tmk_core/common/action_util.c **** extern inline void add_key(uint8_t key);
  47:./tmk_core/common/action_util.c **** extern inline void del_key(uint8_t key);
  48:./tmk_core/common/action_util.c **** extern inline void clear_keys(void);
  49:./tmk_core/common/action_util.c **** 
  50:./tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  51:./tmk_core/common/action_util.c **** static int8_t oneshot_mods = 0;
  52:./tmk_core/common/action_util.c **** static int8_t oneshot_locked_mods = 0;
  53:./tmk_core/common/action_util.c **** int8_t get_oneshot_locked_mods(void) { return oneshot_locked_mods; }
  80               		.loc 2 53 0
  81               		.cfi_startproc
  82               	/* prologue: function */
  83               	/* frame size = 0 */
  84               	/* stack size = 0 */
  85               	.L__stack_usage = 0
  86               		.loc 2 53 0
  87 0000 8091 0000 		lds r24,oneshot_locked_mods
  88               	/* epilogue start */
  89 0004 0895      		ret
  90               		.cfi_endproc
  91               	.LFE7:
  93               		.section	.text.set_oneshot_locked_mods,"ax",@progbits
  94               	.global	set_oneshot_locked_mods
  96               	set_oneshot_locked_mods:
  97               	.LFB8:
  54:./tmk_core/common/action_util.c **** void set_oneshot_locked_mods(int8_t mods) { oneshot_locked_mods = mods; }
  98               		.loc 2 54 0
  99               		.cfi_startproc
 100               	.LVL7:
 101               	/* prologue: function */
 102               	/* frame size = 0 */
 103               	/* stack size = 0 */
 104               	.L__stack_usage = 0
 105               		.loc 2 54 0
 106 0000 8093 0000 		sts oneshot_locked_mods,r24
 107               	/* epilogue start */
 108 0004 0895      		ret
 109               		.cfi_endproc
 110               	.LFE8:
 112               		.section	.text.clear_oneshot_locked_mods,"ax",@progbits
 113               	.global	clear_oneshot_locked_mods
 115               	clear_oneshot_locked_mods:
 116               	.LFB9:
  55:./tmk_core/common/action_util.c **** void clear_oneshot_locked_mods(void) { oneshot_locked_mods = 0; }
 117               		.loc 2 55 0
 118               		.cfi_startproc
 119               	/* prologue: function */
 120               	/* frame size = 0 */
 121               	/* stack size = 0 */
 122               	.L__stack_usage = 0
 123               		.loc 2 55 0
 124 0000 1092 0000 		sts oneshot_locked_mods,__zero_reg__
 125               	/* epilogue start */
 126 0004 0895      		ret
 127               		.cfi_endproc
 128               	.LFE9:
 130               		.section	.text.has_oneshot_mods_timed_out,"ax",@progbits
 131               	.global	has_oneshot_mods_timed_out
 133               	has_oneshot_mods_timed_out:
 134               	.LFB10:
  56:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  57:./tmk_core/common/action_util.c **** static int16_t oneshot_time = 0;
  58:./tmk_core/common/action_util.c **** bool has_oneshot_mods_timed_out(void) {
  59:./tmk_core/common/action_util.c ****   return TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT;
  60:./tmk_core/common/action_util.c **** }
  61:./tmk_core/common/action_util.c **** #else
  62:./tmk_core/common/action_util.c **** bool has_oneshot_mods_timed_out(void) {
 135               		.loc 2 62 0
 136               		.cfi_startproc
 137               	/* prologue: function */
 138               	/* frame size = 0 */
 139               	/* stack size = 0 */
 140               	.L__stack_usage = 0
  63:./tmk_core/common/action_util.c ****     return false;
  64:./tmk_core/common/action_util.c **** }
 141               		.loc 2 64 0
 142 0000 80E0      		ldi r24,0
 143               	/* epilogue start */
 144 0002 0895      		ret
 145               		.cfi_endproc
 146               	.LFE10:
 148               		.section	.text.get_oneshot_layer,"ax",@progbits
 149               	.global	get_oneshot_layer
 151               	get_oneshot_layer:
 152               	.LFB11:
  65:./tmk_core/common/action_util.c **** #endif
  66:./tmk_core/common/action_util.c **** #endif
  67:./tmk_core/common/action_util.c **** 
  68:./tmk_core/common/action_util.c **** /* oneshot layer */
  69:./tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  70:./tmk_core/common/action_util.c **** /** \brief oneshot_layer_data bits
  71:./tmk_core/common/action_util.c ****  * LLLL LSSS
  72:./tmk_core/common/action_util.c ****  * where:
  73:./tmk_core/common/action_util.c ****  *   L => are layer bits
  74:./tmk_core/common/action_util.c ****  *   S => oneshot state bits
  75:./tmk_core/common/action_util.c ****  */
  76:./tmk_core/common/action_util.c **** static int8_t oneshot_layer_data = 0;
  77:./tmk_core/common/action_util.c **** 
  78:./tmk_core/common/action_util.c **** inline uint8_t get_oneshot_layer(void) { return oneshot_layer_data >> 3; }
 153               		.loc 2 78 0
 154               		.cfi_startproc
 155               	/* prologue: function */
 156               	/* frame size = 0 */
 157               	/* stack size = 0 */
 158               	.L__stack_usage = 0
 159               		.loc 2 78 0
 160 0000 8091 0000 		lds r24,oneshot_layer_data
 161 0004 8595      		asr r24
 162 0006 8595      		asr r24
 163 0008 8595      		asr r24
 164               	/* epilogue start */
 165 000a 0895      		ret
 166               		.cfi_endproc
 167               	.LFE11:
 169               		.section	.text.get_oneshot_layer_state,"ax",@progbits
 170               	.global	get_oneshot_layer_state
 172               	get_oneshot_layer_state:
 173               	.LFB12:
  79:./tmk_core/common/action_util.c **** inline uint8_t get_oneshot_layer_state(void) { return oneshot_layer_data & 0b111; }
 174               		.loc 2 79 0
 175               		.cfi_startproc
 176               	/* prologue: function */
 177               	/* frame size = 0 */
 178               	/* stack size = 0 */
 179               	.L__stack_usage = 0
 180               		.loc 2 79 0
 181 0000 8091 0000 		lds r24,oneshot_layer_data
 182 0004 8770      		andi r24,lo8(7)
 183               	/* epilogue start */
 184 0006 0895      		ret
 185               		.cfi_endproc
 186               	.LFE12:
 188               		.section	.text.set_oneshot_layer,"ax",@progbits
 189               	.global	set_oneshot_layer
 191               	set_oneshot_layer:
 192               	.LFB13:
  80:./tmk_core/common/action_util.c **** 
  81:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  82:./tmk_core/common/action_util.c **** static int16_t oneshot_layer_time = 0;
  83:./tmk_core/common/action_util.c **** inline bool has_oneshot_layer_timed_out() {
  84:./tmk_core/common/action_util.c ****     return TIMER_DIFF_16(timer_read(), oneshot_layer_time) >= ONESHOT_TIMEOUT &&
  85:./tmk_core/common/action_util.c ****         !(get_oneshot_layer_state() & ONESHOT_TOGGLED);
  86:./tmk_core/common/action_util.c **** }
  87:./tmk_core/common/action_util.c **** #endif
  88:./tmk_core/common/action_util.c **** 
  89:./tmk_core/common/action_util.c **** /** \brief Set oneshot layer 
  90:./tmk_core/common/action_util.c ****  *
  91:./tmk_core/common/action_util.c ****  * FIXME: needs doc
  92:./tmk_core/common/action_util.c ****  */
  93:./tmk_core/common/action_util.c **** void set_oneshot_layer(uint8_t layer, uint8_t state)
  94:./tmk_core/common/action_util.c **** {
 193               		.loc 2 94 0
 194               		.cfi_startproc
 195               	.LVL8:
 196               	/* prologue: function */
 197               	/* frame size = 0 */
 198               	/* stack size = 0 */
 199               	.L__stack_usage = 0
  95:./tmk_core/common/action_util.c ****     oneshot_layer_data = layer << 3 | state;
 200               		.loc 2 95 0
 201 0000 98E0      		ldi r25,lo8(8)
 202 0002 899F      		mul r24,r25
 203 0004 9001      		movw r18,r0
 204 0006 1124      		clr __zero_reg__
 205 0008 622B      		or r22,r18
 206               	.LVL9:
 207 000a 6093 0000 		sts oneshot_layer_data,r22
  96:./tmk_core/common/action_util.c ****     layer_on(layer);
 208               		.loc 2 96 0
 209 000e 0C94 0000 		jmp layer_on
 210               	.LVL10:
 211               		.cfi_endproc
 212               	.LFE13:
 214               		.section	.text.reset_oneshot_layer,"ax",@progbits
 215               	.global	reset_oneshot_layer
 217               	reset_oneshot_layer:
 218               	.LFB14:
  97:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  98:./tmk_core/common/action_util.c ****     oneshot_layer_time = timer_read();
  99:./tmk_core/common/action_util.c **** #endif
 100:./tmk_core/common/action_util.c **** }
 101:./tmk_core/common/action_util.c **** /** \brief Reset oneshot layer 
 102:./tmk_core/common/action_util.c ****  *
 103:./tmk_core/common/action_util.c ****  * FIXME: needs doc
 104:./tmk_core/common/action_util.c ****  */
 105:./tmk_core/common/action_util.c **** void reset_oneshot_layer(void) {
 219               		.loc 2 105 0
 220               		.cfi_startproc
 221               	/* prologue: function */
 222               	/* frame size = 0 */
 223               	/* stack size = 0 */
 224               	.L__stack_usage = 0
 106:./tmk_core/common/action_util.c ****     oneshot_layer_data = 0;
 225               		.loc 2 106 0
 226 0000 1092 0000 		sts oneshot_layer_data,__zero_reg__
 227               	/* epilogue start */
 107:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 108:./tmk_core/common/action_util.c ****     oneshot_layer_time = 0;
 109:./tmk_core/common/action_util.c **** #endif
 110:./tmk_core/common/action_util.c **** }
 228               		.loc 2 110 0
 229 0004 0895      		ret
 230               		.cfi_endproc
 231               	.LFE14:
 233               		.section	.text.clear_oneshot_layer_state,"ax",@progbits
 234               	.global	clear_oneshot_layer_state
 236               	clear_oneshot_layer_state:
 237               	.LFB15:
 111:./tmk_core/common/action_util.c **** /** \brief Clear oneshot layer 
 112:./tmk_core/common/action_util.c ****  *
 113:./tmk_core/common/action_util.c ****  * FIXME: needs doc
 114:./tmk_core/common/action_util.c ****  */
 115:./tmk_core/common/action_util.c **** void clear_oneshot_layer_state(oneshot_fullfillment_t state)
 116:./tmk_core/common/action_util.c **** {
 238               		.loc 2 116 0
 239               		.cfi_startproc
 240               	.LVL11:
 241               	/* prologue: function */
 242               	/* frame size = 0 */
 243               	/* stack size = 0 */
 244               	.L__stack_usage = 0
 117:./tmk_core/common/action_util.c ****     uint8_t start_state = oneshot_layer_data;
 245               		.loc 2 117 0
 246 0000 9091 0000 		lds r25,oneshot_layer_data
 247               	.LVL12:
 118:./tmk_core/common/action_util.c ****     oneshot_layer_data &= ~state;
 248               		.loc 2 118 0
 249 0004 8095      		com r24
 250               	.LVL13:
 251 0006 8923      		and r24,r25
 252               	.LVL14:
 253 0008 8093 0000 		sts oneshot_layer_data,r24
 254               	.LBB8:
 255               	.LBB9:
  79:./tmk_core/common/action_util.c **** 
 256               		.loc 2 79 0
 257 000c 282F      		mov r18,r24
 258 000e 2770      		andi r18,lo8(7)
 259               	.LBE9:
 260               	.LBE8:
 119:./tmk_core/common/action_util.c ****     if (!get_oneshot_layer_state() && start_state != oneshot_layer_data) {
 261               		.loc 2 119 0
 262 0010 01F4      		brne .L12
 263               		.loc 2 119 0 is_stmt 0 discriminator 1
 264 0012 282F      		mov r18,r24
 265 0014 082E      		mov __tmp_reg__,r24
 266 0016 000C      		lsl r0
 267 0018 330B      		sbc r19,r19
 268 001a 9217      		cp r25,r18
 269 001c 1306      		cpc __zero_reg__,r19
 270 001e 01F0      		breq .L12
 120:./tmk_core/common/action_util.c ****         layer_off(get_oneshot_layer());
 271               		.loc 2 120 0 is_stmt 1
 272 0020 8595      		asr r24
 273 0022 8595      		asr r24
 274 0024 8595      		asr r24
 275 0026 0C94 0000 		jmp layer_off
 276               	.LVL15:
 277               	.L12:
 278               	/* epilogue start */
 121:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 122:./tmk_core/common/action_util.c ****     oneshot_layer_time = 0;
 123:./tmk_core/common/action_util.c **** #endif
 124:./tmk_core/common/action_util.c ****     }
 125:./tmk_core/common/action_util.c **** }
 279               		.loc 2 125 0
 280 002a 0895      		ret
 281               		.cfi_endproc
 282               	.LFE15:
 284               		.section	.text.is_oneshot_layer_active,"ax",@progbits
 285               	.global	is_oneshot_layer_active
 287               	is_oneshot_layer_active:
 288               	.LFB16:
 126:./tmk_core/common/action_util.c **** /** \brief Is oneshot layer active
 127:./tmk_core/common/action_util.c ****  *
 128:./tmk_core/common/action_util.c ****  * FIXME: needs doc
 129:./tmk_core/common/action_util.c ****  */
 130:./tmk_core/common/action_util.c **** bool is_oneshot_layer_active(void)
 131:./tmk_core/common/action_util.c **** {
 289               		.loc 2 131 0
 290               		.cfi_startproc
 291               	/* prologue: function */
 292               	/* frame size = 0 */
 293               	/* stack size = 0 */
 294               	.L__stack_usage = 0
 295               	.LBB10:
 296               	.LBB11:
  79:./tmk_core/common/action_util.c **** 
 297               		.loc 2 79 0
 298 0000 9091 0000 		lds r25,oneshot_layer_data
 299 0004 9770      		andi r25,lo8(7)
 300               	.LBE11:
 301               	.LBE10:
 132:./tmk_core/common/action_util.c ****     return get_oneshot_layer_state();
 302               		.loc 2 132 0
 303 0006 81E0      		ldi r24,lo8(1)
 304 0008 01F4      		brne .L15
 305 000a 80E0      		ldi r24,0
 306               	.L15:
 307               	/* epilogue start */
 133:./tmk_core/common/action_util.c **** }
 308               		.loc 2 133 0
 309 000c 0895      		ret
 310               		.cfi_endproc
 311               	.LFE16:
 313               		.section	.text.send_keyboard_report,"ax",@progbits
 314               	.global	send_keyboard_report
 316               	send_keyboard_report:
 317               	.LFB17:
 134:./tmk_core/common/action_util.c **** #endif
 135:./tmk_core/common/action_util.c **** 
 136:./tmk_core/common/action_util.c **** /** \brief Send keyboard report
 137:./tmk_core/common/action_util.c ****  *
 138:./tmk_core/common/action_util.c ****  * FIXME: needs doc
 139:./tmk_core/common/action_util.c ****  */
 140:./tmk_core/common/action_util.c **** void send_keyboard_report(void) {
 318               		.loc 2 140 0
 319               		.cfi_startproc
 320               	/* prologue: function */
 321               	/* frame size = 0 */
 322               	/* stack size = 0 */
 323               	.L__stack_usage = 0
 141:./tmk_core/common/action_util.c ****     keyboard_report->mods  = real_mods;
 324               		.loc 2 141 0
 325 0000 E091 0000 		lds r30,keyboard_report
 326 0004 F091 0000 		lds r31,keyboard_report+1
 327 0008 8091 0000 		lds r24,real_mods
 328 000c 8083      		st Z,r24
 142:./tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
 329               		.loc 2 142 0
 330 000e E091 0000 		lds r30,keyboard_report
 331 0012 F091 0000 		lds r31,keyboard_report+1
 332 0016 8081      		ld r24,Z
 333 0018 9091 0000 		lds r25,weak_mods
 334 001c 892B      		or r24,r25
 335 001e 8083      		st Z,r24
 143:./tmk_core/common/action_util.c ****     keyboard_report->mods |= macro_mods;
 336               		.loc 2 143 0
 337 0020 E091 0000 		lds r30,keyboard_report
 338 0024 F091 0000 		lds r31,keyboard_report+1
 339 0028 8081      		ld r24,Z
 340 002a 9091 0000 		lds r25,macro_mods
 341 002e 892B      		or r24,r25
 342 0030 8083      		st Z,r24
 144:./tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 145:./tmk_core/common/action_util.c ****     if (oneshot_mods) {
 343               		.loc 2 145 0
 344 0032 9091 0000 		lds r25,oneshot_mods
 345 0036 9923      		tst r25
 346 0038 01F0      		breq .L18
 146:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 147:./tmk_core/common/action_util.c ****         if (has_oneshot_mods_timed_out()) {
 148:./tmk_core/common/action_util.c ****             dprintf("Oneshot: timeout\n");
 149:./tmk_core/common/action_util.c ****             clear_oneshot_mods();
 150:./tmk_core/common/action_util.c ****         }
 151:./tmk_core/common/action_util.c **** #endif
 152:./tmk_core/common/action_util.c ****         keyboard_report->mods |= oneshot_mods;
 347               		.loc 2 152 0
 348 003a E091 0000 		lds r30,keyboard_report
 349 003e F091 0000 		lds r31,keyboard_report+1
 350 0042 8081      		ld r24,Z
 351 0044 892B      		or r24,r25
 352 0046 8083      		st Z,r24
 153:./tmk_core/common/action_util.c ****         if (has_anykey(keyboard_report)) {
 353               		.loc 2 153 0
 354 0048 8091 0000 		lds r24,keyboard_report
 355 004c 9091 0000 		lds r25,keyboard_report+1
 356 0050 0E94 0000 		call has_anykey
 357               	.LVL16:
 358 0054 8111      		cpse r24,__zero_reg__
 359               	.LBB14:
 360               	.LBB15:
 154:./tmk_core/common/action_util.c ****             clear_oneshot_mods();
 155:./tmk_core/common/action_util.c ****         }
 156:./tmk_core/common/action_util.c ****     }
 157:./tmk_core/common/action_util.c **** 
 158:./tmk_core/common/action_util.c **** #endif
 159:./tmk_core/common/action_util.c ****     host_keyboard_send(keyboard_report);
 160:./tmk_core/common/action_util.c **** }
 161:./tmk_core/common/action_util.c **** 
 162:./tmk_core/common/action_util.c **** /** \brief Get mods
 163:./tmk_core/common/action_util.c ****  *
 164:./tmk_core/common/action_util.c ****  * FIXME: needs doc
 165:./tmk_core/common/action_util.c ****  */
 166:./tmk_core/common/action_util.c **** uint8_t get_mods(void) { return real_mods; }
 167:./tmk_core/common/action_util.c **** /** \brief add mods
 168:./tmk_core/common/action_util.c ****  *
 169:./tmk_core/common/action_util.c ****  * FIXME: needs doc
 170:./tmk_core/common/action_util.c ****  */
 171:./tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 172:./tmk_core/common/action_util.c **** /** \brief del mods
 173:./tmk_core/common/action_util.c ****  *
 174:./tmk_core/common/action_util.c ****  * FIXME: needs doc
 175:./tmk_core/common/action_util.c ****  */
 176:./tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 177:./tmk_core/common/action_util.c **** /** \brief set mods
 178:./tmk_core/common/action_util.c ****  *
 179:./tmk_core/common/action_util.c ****  * FIXME: needs doc
 180:./tmk_core/common/action_util.c ****  */
 181:./tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 182:./tmk_core/common/action_util.c **** /** \brief clear mods
 183:./tmk_core/common/action_util.c ****  *
 184:./tmk_core/common/action_util.c ****  * FIXME: needs doc
 185:./tmk_core/common/action_util.c ****  */
 186:./tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 187:./tmk_core/common/action_util.c **** 
 188:./tmk_core/common/action_util.c **** /** \brief get weak mods
 189:./tmk_core/common/action_util.c ****  *
 190:./tmk_core/common/action_util.c ****  * FIXME: needs doc
 191:./tmk_core/common/action_util.c ****  */
 192:./tmk_core/common/action_util.c **** uint8_t get_weak_mods(void) { return weak_mods; }
 193:./tmk_core/common/action_util.c **** /** \brief add weak mods
 194:./tmk_core/common/action_util.c ****  *
 195:./tmk_core/common/action_util.c ****  * FIXME: needs doc
 196:./tmk_core/common/action_util.c ****  */
 197:./tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 198:./tmk_core/common/action_util.c **** /** \brief del weak mods
 199:./tmk_core/common/action_util.c ****  *
 200:./tmk_core/common/action_util.c ****  * FIXME: needs doc
 201:./tmk_core/common/action_util.c ****  */
 202:./tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 203:./tmk_core/common/action_util.c **** /** \brief set weak mods
 204:./tmk_core/common/action_util.c ****  *
 205:./tmk_core/common/action_util.c ****  * FIXME: needs doc
 206:./tmk_core/common/action_util.c ****  */
 207:./tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 208:./tmk_core/common/action_util.c **** /** \brief clear weak mods
 209:./tmk_core/common/action_util.c ****  *
 210:./tmk_core/common/action_util.c ****  * FIXME: needs doc
 211:./tmk_core/common/action_util.c ****  */
 212:./tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 213:./tmk_core/common/action_util.c **** 
 214:./tmk_core/common/action_util.c **** /* macro modifier */
 215:./tmk_core/common/action_util.c **** /** \brief get macro mods
 216:./tmk_core/common/action_util.c ****  *
 217:./tmk_core/common/action_util.c ****  * FIXME: needs doc
 218:./tmk_core/common/action_util.c ****  */
 219:./tmk_core/common/action_util.c **** uint8_t get_macro_mods(void) { return macro_mods; }
 220:./tmk_core/common/action_util.c **** /** \brief add macro mods
 221:./tmk_core/common/action_util.c ****  *
 222:./tmk_core/common/action_util.c ****  * FIXME: needs doc
 223:./tmk_core/common/action_util.c ****  */
 224:./tmk_core/common/action_util.c **** void add_macro_mods(uint8_t mods) { macro_mods |= mods; }
 225:./tmk_core/common/action_util.c **** /** \brief del macro mods
 226:./tmk_core/common/action_util.c ****  *
 227:./tmk_core/common/action_util.c ****  * FIXME: needs doc
 228:./tmk_core/common/action_util.c ****  */
 229:./tmk_core/common/action_util.c **** void del_macro_mods(uint8_t mods) { macro_mods &= ~mods; }
 230:./tmk_core/common/action_util.c **** /** \brief set macro mods
 231:./tmk_core/common/action_util.c ****  *
 232:./tmk_core/common/action_util.c ****  * FIXME: needs doc
 233:./tmk_core/common/action_util.c ****  */
 234:./tmk_core/common/action_util.c **** void set_macro_mods(uint8_t mods) { macro_mods = mods; }
 235:./tmk_core/common/action_util.c **** /** \brief clear macro mods
 236:./tmk_core/common/action_util.c ****  *
 237:./tmk_core/common/action_util.c ****  * FIXME: needs doc
 238:./tmk_core/common/action_util.c ****  */
 239:./tmk_core/common/action_util.c **** void clear_macro_mods(void) { macro_mods = 0; }
 240:./tmk_core/common/action_util.c **** 
 241:./tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 242:./tmk_core/common/action_util.c **** /** \brief set oneshot mods
 243:./tmk_core/common/action_util.c ****  *
 244:./tmk_core/common/action_util.c ****  * FIXME: needs doc
 245:./tmk_core/common/action_util.c ****  */
 246:./tmk_core/common/action_util.c **** void set_oneshot_mods(uint8_t mods)
 247:./tmk_core/common/action_util.c **** {
 248:./tmk_core/common/action_util.c ****     oneshot_mods = mods;
 249:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 250:./tmk_core/common/action_util.c ****     oneshot_time = timer_read();
 251:./tmk_core/common/action_util.c **** #endif
 252:./tmk_core/common/action_util.c **** }
 253:./tmk_core/common/action_util.c **** /** \brief clear oneshot mods
 254:./tmk_core/common/action_util.c ****  *
 255:./tmk_core/common/action_util.c ****  * FIXME: needs doc
 256:./tmk_core/common/action_util.c ****  */
 257:./tmk_core/common/action_util.c **** void clear_oneshot_mods(void)
 258:./tmk_core/common/action_util.c **** {
 259:./tmk_core/common/action_util.c ****     oneshot_mods = 0;
 361               		.loc 2 259 0
 362 0056 1092 0000 		sts oneshot_mods,__zero_reg__
 363               	.L18:
 364               	.LBE15:
 365               	.LBE14:
 159:./tmk_core/common/action_util.c **** }
 366               		.loc 2 159 0
 367 005a 8091 0000 		lds r24,keyboard_report
 368 005e 9091 0000 		lds r25,keyboard_report+1
 369 0062 0C94 0000 		jmp host_keyboard_send
 370               	.LVL17:
 371               		.cfi_endproc
 372               	.LFE17:
 374               		.section	.text.get_mods,"ax",@progbits
 375               	.global	get_mods
 377               	get_mods:
 378               	.LFB18:
 166:./tmk_core/common/action_util.c **** /** \brief add mods
 379               		.loc 2 166 0
 380               		.cfi_startproc
 381               	/* prologue: function */
 382               	/* frame size = 0 */
 383               	/* stack size = 0 */
 384               	.L__stack_usage = 0
 166:./tmk_core/common/action_util.c **** /** \brief add mods
 385               		.loc 2 166 0
 386 0000 8091 0000 		lds r24,real_mods
 387               	/* epilogue start */
 388 0004 0895      		ret
 389               		.cfi_endproc
 390               	.LFE18:
 392               		.section	.text.add_mods,"ax",@progbits
 393               	.global	add_mods
 395               	add_mods:
 396               	.LFB19:
 171:./tmk_core/common/action_util.c **** /** \brief del mods
 397               		.loc 2 171 0
 398               		.cfi_startproc
 399               	.LVL18:
 400               	/* prologue: function */
 401               	/* frame size = 0 */
 402               	/* stack size = 0 */
 403               	.L__stack_usage = 0
 171:./tmk_core/common/action_util.c **** /** \brief del mods
 404               		.loc 2 171 0
 405 0000 9091 0000 		lds r25,real_mods
 406 0004 892B      		or r24,r25
 407               	.LVL19:
 408 0006 8093 0000 		sts real_mods,r24
 409               	/* epilogue start */
 410 000a 0895      		ret
 411               		.cfi_endproc
 412               	.LFE19:
 414               		.section	.text.del_mods,"ax",@progbits
 415               	.global	del_mods
 417               	del_mods:
 418               	.LFB20:
 176:./tmk_core/common/action_util.c **** /** \brief set mods
 419               		.loc 2 176 0
 420               		.cfi_startproc
 421               	.LVL20:
 422               	/* prologue: function */
 423               	/* frame size = 0 */
 424               	/* stack size = 0 */
 425               	.L__stack_usage = 0
 176:./tmk_core/common/action_util.c **** /** \brief set mods
 426               		.loc 2 176 0
 427 0000 982F      		mov r25,r24
 428 0002 9095      		com r25
 429 0004 8091 0000 		lds r24,real_mods
 430               	.LVL21:
 431 0008 8923      		and r24,r25
 432 000a 8093 0000 		sts real_mods,r24
 433               	/* epilogue start */
 434 000e 0895      		ret
 435               		.cfi_endproc
 436               	.LFE20:
 438               		.section	.text.set_mods,"ax",@progbits
 439               	.global	set_mods
 441               	set_mods:
 442               	.LFB21:
 181:./tmk_core/common/action_util.c **** /** \brief clear mods
 443               		.loc 2 181 0
 444               		.cfi_startproc
 445               	.LVL22:
 446               	/* prologue: function */
 447               	/* frame size = 0 */
 448               	/* stack size = 0 */
 449               	.L__stack_usage = 0
 181:./tmk_core/common/action_util.c **** /** \brief clear mods
 450               		.loc 2 181 0
 451 0000 8093 0000 		sts real_mods,r24
 452               	/* epilogue start */
 453 0004 0895      		ret
 454               		.cfi_endproc
 455               	.LFE21:
 457               		.section	.text.clear_mods,"ax",@progbits
 458               	.global	clear_mods
 460               	clear_mods:
 461               	.LFB22:
 186:./tmk_core/common/action_util.c **** 
 462               		.loc 2 186 0
 463               		.cfi_startproc
 464               	/* prologue: function */
 465               	/* frame size = 0 */
 466               	/* stack size = 0 */
 467               	.L__stack_usage = 0
 186:./tmk_core/common/action_util.c **** 
 468               		.loc 2 186 0
 469 0000 1092 0000 		sts real_mods,__zero_reg__
 470               	/* epilogue start */
 471 0004 0895      		ret
 472               		.cfi_endproc
 473               	.LFE22:
 475               		.section	.text.get_weak_mods,"ax",@progbits
 476               	.global	get_weak_mods
 478               	get_weak_mods:
 479               	.LFB23:
 192:./tmk_core/common/action_util.c **** /** \brief add weak mods
 480               		.loc 2 192 0
 481               		.cfi_startproc
 482               	/* prologue: function */
 483               	/* frame size = 0 */
 484               	/* stack size = 0 */
 485               	.L__stack_usage = 0
 192:./tmk_core/common/action_util.c **** /** \brief add weak mods
 486               		.loc 2 192 0
 487 0000 8091 0000 		lds r24,weak_mods
 488               	/* epilogue start */
 489 0004 0895      		ret
 490               		.cfi_endproc
 491               	.LFE23:
 493               		.section	.text.add_weak_mods,"ax",@progbits
 494               	.global	add_weak_mods
 496               	add_weak_mods:
 497               	.LFB24:
 197:./tmk_core/common/action_util.c **** /** \brief del weak mods
 498               		.loc 2 197 0
 499               		.cfi_startproc
 500               	.LVL23:
 501               	/* prologue: function */
 502               	/* frame size = 0 */
 503               	/* stack size = 0 */
 504               	.L__stack_usage = 0
 197:./tmk_core/common/action_util.c **** /** \brief del weak mods
 505               		.loc 2 197 0
 506 0000 9091 0000 		lds r25,weak_mods
 507 0004 892B      		or r24,r25
 508               	.LVL24:
 509 0006 8093 0000 		sts weak_mods,r24
 510               	/* epilogue start */
 511 000a 0895      		ret
 512               		.cfi_endproc
 513               	.LFE24:
 515               		.section	.text.del_weak_mods,"ax",@progbits
 516               	.global	del_weak_mods
 518               	del_weak_mods:
 519               	.LFB25:
 202:./tmk_core/common/action_util.c **** /** \brief set weak mods
 520               		.loc 2 202 0
 521               		.cfi_startproc
 522               	.LVL25:
 523               	/* prologue: function */
 524               	/* frame size = 0 */
 525               	/* stack size = 0 */
 526               	.L__stack_usage = 0
 202:./tmk_core/common/action_util.c **** /** \brief set weak mods
 527               		.loc 2 202 0
 528 0000 982F      		mov r25,r24
 529 0002 9095      		com r25
 530 0004 8091 0000 		lds r24,weak_mods
 531               	.LVL26:
 532 0008 8923      		and r24,r25
 533 000a 8093 0000 		sts weak_mods,r24
 534               	/* epilogue start */
 535 000e 0895      		ret
 536               		.cfi_endproc
 537               	.LFE25:
 539               		.section	.text.set_weak_mods,"ax",@progbits
 540               	.global	set_weak_mods
 542               	set_weak_mods:
 543               	.LFB26:
 207:./tmk_core/common/action_util.c **** /** \brief clear weak mods
 544               		.loc 2 207 0
 545               		.cfi_startproc
 546               	.LVL27:
 547               	/* prologue: function */
 548               	/* frame size = 0 */
 549               	/* stack size = 0 */
 550               	.L__stack_usage = 0
 207:./tmk_core/common/action_util.c **** /** \brief clear weak mods
 551               		.loc 2 207 0
 552 0000 8093 0000 		sts weak_mods,r24
 553               	/* epilogue start */
 554 0004 0895      		ret
 555               		.cfi_endproc
 556               	.LFE26:
 558               		.section	.text.clear_weak_mods,"ax",@progbits
 559               	.global	clear_weak_mods
 561               	clear_weak_mods:
 562               	.LFB27:
 212:./tmk_core/common/action_util.c **** 
 563               		.loc 2 212 0
 564               		.cfi_startproc
 565               	/* prologue: function */
 566               	/* frame size = 0 */
 567               	/* stack size = 0 */
 568               	.L__stack_usage = 0
 212:./tmk_core/common/action_util.c **** 
 569               		.loc 2 212 0
 570 0000 1092 0000 		sts weak_mods,__zero_reg__
 571               	/* epilogue start */
 572 0004 0895      		ret
 573               		.cfi_endproc
 574               	.LFE27:
 576               		.section	.text.get_macro_mods,"ax",@progbits
 577               	.global	get_macro_mods
 579               	get_macro_mods:
 580               	.LFB28:
 219:./tmk_core/common/action_util.c **** /** \brief add macro mods
 581               		.loc 2 219 0
 582               		.cfi_startproc
 583               	/* prologue: function */
 584               	/* frame size = 0 */
 585               	/* stack size = 0 */
 586               	.L__stack_usage = 0
 219:./tmk_core/common/action_util.c **** /** \brief add macro mods
 587               		.loc 2 219 0
 588 0000 8091 0000 		lds r24,macro_mods
 589               	/* epilogue start */
 590 0004 0895      		ret
 591               		.cfi_endproc
 592               	.LFE28:
 594               		.section	.text.add_macro_mods,"ax",@progbits
 595               	.global	add_macro_mods
 597               	add_macro_mods:
 598               	.LFB29:
 224:./tmk_core/common/action_util.c **** /** \brief del macro mods
 599               		.loc 2 224 0
 600               		.cfi_startproc
 601               	.LVL28:
 602               	/* prologue: function */
 603               	/* frame size = 0 */
 604               	/* stack size = 0 */
 605               	.L__stack_usage = 0
 224:./tmk_core/common/action_util.c **** /** \brief del macro mods
 606               		.loc 2 224 0
 607 0000 9091 0000 		lds r25,macro_mods
 608 0004 892B      		or r24,r25
 609               	.LVL29:
 610 0006 8093 0000 		sts macro_mods,r24
 611               	/* epilogue start */
 612 000a 0895      		ret
 613               		.cfi_endproc
 614               	.LFE29:
 616               		.section	.text.del_macro_mods,"ax",@progbits
 617               	.global	del_macro_mods
 619               	del_macro_mods:
 620               	.LFB30:
 229:./tmk_core/common/action_util.c **** /** \brief set macro mods
 621               		.loc 2 229 0
 622               		.cfi_startproc
 623               	.LVL30:
 624               	/* prologue: function */
 625               	/* frame size = 0 */
 626               	/* stack size = 0 */
 627               	.L__stack_usage = 0
 229:./tmk_core/common/action_util.c **** /** \brief set macro mods
 628               		.loc 2 229 0
 629 0000 982F      		mov r25,r24
 630 0002 9095      		com r25
 631 0004 8091 0000 		lds r24,macro_mods
 632               	.LVL31:
 633 0008 8923      		and r24,r25
 634 000a 8093 0000 		sts macro_mods,r24
 635               	/* epilogue start */
 636 000e 0895      		ret
 637               		.cfi_endproc
 638               	.LFE30:
 640               		.section	.text.set_macro_mods,"ax",@progbits
 641               	.global	set_macro_mods
 643               	set_macro_mods:
 644               	.LFB31:
 234:./tmk_core/common/action_util.c **** /** \brief clear macro mods
 645               		.loc 2 234 0
 646               		.cfi_startproc
 647               	.LVL32:
 648               	/* prologue: function */
 649               	/* frame size = 0 */
 650               	/* stack size = 0 */
 651               	.L__stack_usage = 0
 234:./tmk_core/common/action_util.c **** /** \brief clear macro mods
 652               		.loc 2 234 0
 653 0000 8093 0000 		sts macro_mods,r24
 654               	/* epilogue start */
 655 0004 0895      		ret
 656               		.cfi_endproc
 657               	.LFE31:
 659               		.section	.text.clear_macro_mods,"ax",@progbits
 660               	.global	clear_macro_mods
 662               	clear_macro_mods:
 663               	.LFB32:
 239:./tmk_core/common/action_util.c **** 
 664               		.loc 2 239 0
 665               		.cfi_startproc
 666               	/* prologue: function */
 667               	/* frame size = 0 */
 668               	/* stack size = 0 */
 669               	.L__stack_usage = 0
 239:./tmk_core/common/action_util.c **** 
 670               		.loc 2 239 0
 671 0000 1092 0000 		sts macro_mods,__zero_reg__
 672               	/* epilogue start */
 673 0004 0895      		ret
 674               		.cfi_endproc
 675               	.LFE32:
 677               		.section	.text.set_oneshot_mods,"ax",@progbits
 678               	.global	set_oneshot_mods
 680               	set_oneshot_mods:
 681               	.LFB33:
 247:./tmk_core/common/action_util.c ****     oneshot_mods = mods;
 682               		.loc 2 247 0
 683               		.cfi_startproc
 684               	.LVL33:
 685               	/* prologue: function */
 686               	/* frame size = 0 */
 687               	/* stack size = 0 */
 688               	.L__stack_usage = 0
 248:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 689               		.loc 2 248 0
 690 0000 8093 0000 		sts oneshot_mods,r24
 691               	/* epilogue start */
 252:./tmk_core/common/action_util.c **** /** \brief clear oneshot mods
 692               		.loc 2 252 0
 693 0004 0895      		ret
 694               		.cfi_endproc
 695               	.LFE33:
 697               		.section	.text.clear_oneshot_mods,"ax",@progbits
 698               	.global	clear_oneshot_mods
 700               	clear_oneshot_mods:
 701               	.LFB34:
 258:./tmk_core/common/action_util.c ****     oneshot_mods = 0;
 702               		.loc 2 258 0
 703               		.cfi_startproc
 704               	/* prologue: function */
 705               	/* frame size = 0 */
 706               	/* stack size = 0 */
 707               	.L__stack_usage = 0
 708               		.loc 2 259 0
 709 0000 1092 0000 		sts oneshot_mods,__zero_reg__
 710               	/* epilogue start */
 260:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 261:./tmk_core/common/action_util.c ****     oneshot_time = 0;
 262:./tmk_core/common/action_util.c **** #endif
 263:./tmk_core/common/action_util.c **** }
 711               		.loc 2 263 0
 712 0004 0895      		ret
 713               		.cfi_endproc
 714               	.LFE34:
 716               		.section	.text.get_oneshot_mods,"ax",@progbits
 717               	.global	get_oneshot_mods
 719               	get_oneshot_mods:
 720               	.LFB35:
 264:./tmk_core/common/action_util.c **** /** \brief get oneshot mods
 265:./tmk_core/common/action_util.c ****  *
 266:./tmk_core/common/action_util.c ****  * FIXME: needs doc
 267:./tmk_core/common/action_util.c ****  */
 268:./tmk_core/common/action_util.c **** uint8_t get_oneshot_mods(void)
 269:./tmk_core/common/action_util.c **** {
 721               		.loc 2 269 0
 722               		.cfi_startproc
 723               	/* prologue: function */
 724               	/* frame size = 0 */
 725               	/* stack size = 0 */
 726               	.L__stack_usage = 0
 270:./tmk_core/common/action_util.c ****     return oneshot_mods;
 271:./tmk_core/common/action_util.c **** }
 727               		.loc 2 271 0
 728 0000 8091 0000 		lds r24,oneshot_mods
 729               	/* epilogue start */
 730 0004 0895      		ret
 731               		.cfi_endproc
 732               	.LFE35:
 734               		.section	.text.has_anymod,"ax",@progbits
 735               	.global	has_anymod
 737               	has_anymod:
 738               	.LFB36:
 272:./tmk_core/common/action_util.c **** #endif
 273:./tmk_core/common/action_util.c **** 
 274:./tmk_core/common/action_util.c **** /** \brief inspect keyboard state
 275:./tmk_core/common/action_util.c ****  *
 276:./tmk_core/common/action_util.c ****  * FIXME: needs doc
 277:./tmk_core/common/action_util.c ****  */
 278:./tmk_core/common/action_util.c **** uint8_t has_anymod(void)
 279:./tmk_core/common/action_util.c **** {
 739               		.loc 2 279 0
 740               		.cfi_startproc
 741               	/* prologue: function */
 742               	/* frame size = 0 */
 743               	/* stack size = 0 */
 744               	.L__stack_usage = 0
 280:./tmk_core/common/action_util.c ****     return bitpop(real_mods);
 745               		.loc 2 280 0
 746 0000 8091 0000 		lds r24,real_mods
 747 0004 0C94 0000 		jmp bitpop
 748               	.LVL34:
 749               		.cfi_endproc
 750               	.LFE36:
 752               		.section	.bss.oneshot_layer_data,"aw",@nobits
 755               	oneshot_layer_data:
 756 0000 00        		.zero	1
 757               		.section	.bss.oneshot_locked_mods,"aw",@nobits
 760               	oneshot_locked_mods:
 761 0000 00        		.zero	1
 762               		.section	.bss.oneshot_mods,"aw",@nobits
 765               	oneshot_mods:
 766 0000 00        		.zero	1
 767               	.global	keyboard_report
 768               		.section	.data.keyboard_report,"aw",@progbits
 771               	keyboard_report:
 772 0000 0000      		.word	__compound_literal.0
 773               		.section	.bss.__compound_literal.0,"aw",@nobits
 776               	__compound_literal.0:
 777 0000 0000 0000 		.zero	8
 777      0000 0000 
 778               		.section	.bss.macro_mods,"aw",@nobits
 781               	macro_mods:
 782 0000 00        		.zero	1
 783               		.section	.bss.weak_mods,"aw",@nobits
 786               	weak_mods:
 787 0000 00        		.zero	1
 788               		.section	.bss.real_mods,"aw",@nobits
 791               	real_mods:
 792 0000 00        		.zero	1
 793               		.text
 794               	.Letext0:
 795               		.file 3 "/usr/local/Cellar/avr-gcc@7/7.3.0/avr/include/stdint.h"
 796               		.file 4 "./tmk_core/common/report.h"
 797               		.file 5 "./tmk_core/common/host.h"
 798               		.file 6 "./tmk_core/common/debug.h"
 799               		.file 7 "./tmk_core/common/action_layer.h"
 800               		.file 8 "./tmk_core/common/timer.h"
 801               		.file 9 "./quantum/keycode_config.h"
 802               		.file 10 "./tmk_core/common/util.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action_util.c
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//cceDxGEF.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//cceDxGEF.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//cceDxGEF.s:4      *ABS*:000000000000003f __SREG__
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//cceDxGEF.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//cceDxGEF.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//cceDxGEF.s:13     .text.add_key:0000000000000000 add_key
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//cceDxGEF.s:771    .data.keyboard_report:0000000000000000 keyboard_report
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//cceDxGEF.s:36     .text.del_key:0000000000000000 del_key
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//cceDxGEF.s:58     .text.clear_keys:0000000000000000 clear_keys
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//cceDxGEF.s:77     .text.get_oneshot_locked_mods:0000000000000000 get_oneshot_locked_mods
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//cceDxGEF.s:760    .bss.oneshot_locked_mods:0000000000000000 oneshot_locked_mods
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//cceDxGEF.s:96     .text.set_oneshot_locked_mods:0000000000000000 set_oneshot_locked_mods
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//cceDxGEF.s:115    .text.clear_oneshot_locked_mods:0000000000000000 clear_oneshot_locked_mods
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//cceDxGEF.s:133    .text.has_oneshot_mods_timed_out:0000000000000000 has_oneshot_mods_timed_out
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//cceDxGEF.s:151    .text.get_oneshot_layer:0000000000000000 get_oneshot_layer
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//cceDxGEF.s:755    .bss.oneshot_layer_data:0000000000000000 oneshot_layer_data
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//cceDxGEF.s:172    .text.get_oneshot_layer_state:0000000000000000 get_oneshot_layer_state
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//cceDxGEF.s:191    .text.set_oneshot_layer:0000000000000000 set_oneshot_layer
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//cceDxGEF.s:217    .text.reset_oneshot_layer:0000000000000000 reset_oneshot_layer
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//cceDxGEF.s:236    .text.clear_oneshot_layer_state:0000000000000000 clear_oneshot_layer_state
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//cceDxGEF.s:287    .text.is_oneshot_layer_active:0000000000000000 is_oneshot_layer_active
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//cceDxGEF.s:316    .text.send_keyboard_report:0000000000000000 send_keyboard_report
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//cceDxGEF.s:791    .bss.real_mods:0000000000000000 real_mods
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//cceDxGEF.s:786    .bss.weak_mods:0000000000000000 weak_mods
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//cceDxGEF.s:781    .bss.macro_mods:0000000000000000 macro_mods
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//cceDxGEF.s:765    .bss.oneshot_mods:0000000000000000 oneshot_mods
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//cceDxGEF.s:377    .text.get_mods:0000000000000000 get_mods
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//cceDxGEF.s:395    .text.add_mods:0000000000000000 add_mods
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//cceDxGEF.s:417    .text.del_mods:0000000000000000 del_mods
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//cceDxGEF.s:441    .text.set_mods:0000000000000000 set_mods
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//cceDxGEF.s:460    .text.clear_mods:0000000000000000 clear_mods
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//cceDxGEF.s:478    .text.get_weak_mods:0000000000000000 get_weak_mods
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//cceDxGEF.s:496    .text.add_weak_mods:0000000000000000 add_weak_mods
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//cceDxGEF.s:518    .text.del_weak_mods:0000000000000000 del_weak_mods
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//cceDxGEF.s:542    .text.set_weak_mods:0000000000000000 set_weak_mods
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//cceDxGEF.s:561    .text.clear_weak_mods:0000000000000000 clear_weak_mods
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//cceDxGEF.s:579    .text.get_macro_mods:0000000000000000 get_macro_mods
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//cceDxGEF.s:597    .text.add_macro_mods:0000000000000000 add_macro_mods
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//cceDxGEF.s:619    .text.del_macro_mods:0000000000000000 del_macro_mods
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//cceDxGEF.s:643    .text.set_macro_mods:0000000000000000 set_macro_mods
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//cceDxGEF.s:662    .text.clear_macro_mods:0000000000000000 clear_macro_mods
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//cceDxGEF.s:680    .text.set_oneshot_mods:0000000000000000 set_oneshot_mods
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//cceDxGEF.s:700    .text.clear_oneshot_mods:0000000000000000 clear_oneshot_mods
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//cceDxGEF.s:719    .text.get_oneshot_mods:0000000000000000 get_oneshot_mods
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//cceDxGEF.s:737    .text.has_anymod:0000000000000000 has_anymod
/var/folders/x3/bbndryhj5bd9s7h49yn0kv480000gn/T//cceDxGEF.s:776    .bss.__compound_literal.0:0000000000000000 __compound_literal.0

UNDEFINED SYMBOLS
add_key_to_report
del_key_from_report
clear_keys_from_report
layer_on
layer_off
has_anykey
host_keyboard_send
bitpop
__do_copy_data
__do_clear_bss
